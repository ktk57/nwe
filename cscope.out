cscope 15 /home/kartik/nwe               0001264731
	@/home/kartik/nwe/Config.c

1 
	~"C⁄fig.h
"

2 
	gg_num_w‹kî_thªads
 = 11;

3 
	gg_p‹t_num
 = 8484;

4 
	gg_li°í_backlog
 = 20000;

5 
	gg_höt_num_of_timeouts
 = 10;

8 c⁄° * 
	gg_li°íög_ù
;

9 
	gg_t˝_c⁄n_r_buf
 = 10240;

17 
	gg_t˝_c⁄n_r_timeout
 = 5000;

18 
	gg_t˝_c⁄n_w_timeout
 = 100;

19 
	gg_höt_uæ_size
 = 1;

20 
	gg_höt_n_q∑øms
 = 1;

21 
	gg_höt_n_hódîs
 = 1;

22 
	gg_höt_n_cookõs
 = 1;

23 
	gg_höt_ªq_body_size
 = 1;

24 
	gg_höt_ªs_body_size
 = 1;

25 
	gg_höt_ªs_hódî_size
 = 1;

	@/home/kartik/nwe/CoroCtxPool.c

1 
	~<°dio.h
>

2 
	~<sys/mm™.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~"C‹oCtxPoﬁ.h
"

6 
	~"Eº.h
"

8 
	$¸óãC‹oCtxSècks
(

9 
C‹oCtxPoﬁ
* 
˝
,

10 
size_t
 
num_°acks
,

11 
size_t
 
°ack_size
,

12 
∑ge_size


15 
C‹oCtx
* 
li°
 = (C‹oCtx*Ë
	`mÆloc
(
num_°acks
 * (CoroCtx));

17 i‡(
li°
 =
NULL
) {

18 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

19  
ERR_HEAP_ALLOC_FAILURE
;

25 
°ack_size
 +
∑ge_size
;

28 * 
ba£
 = 
	`mm≠
 (0, 
num_°acks
 * 
°ack_size
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

30 i‡(
ba£
 =
MAP_FAILED
) {

33 
ba£
 = 
	`mm≠
 (0, 
num_°acks
 * 
°ack_size
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

35 i‡(
ba£
 =
MAP_FAILED
) {

36 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

37 
	`Ârötf
(
°dîr
, "\nERROR mm≠(ËÁûed wôhÉºnÿ%d %s:%d\n", 
î∫o
, 
__FILE__
, 
__LINE__
);

39  
ERR_SYSCALL_FAILED
;

44 
ªt
 = 
	`m¥Ÿe˘
 (
ba£
, 
CORO_GUARDPAGES
 * 
PAGESIZE
, 
PROT_NONE
);

46 
ba£
 = (*)((*)ba£ + 
CORO_GUARDPAGES
 * 
PAGESIZE
);

48 
size_t
 
˘x_off£t
 = 
°ack_size
 - (
ribs_c⁄ãxt
Ë- 
ª£rved_size
;

49 
size_t
 
i
;

50 
ªt
 = 0;

51 
i
 = 0; i < 
num_°acks
; ++i, 
mem
 +
°ack_size
) {

52 
ªt
 = 
	`m¥Ÿe˘
 (
ba£
, 
∑ge_size
, 
PROT_NONE
);

53 i‡(
MAP_FAILED
 =
	`mm≠
(
mem
, 4096, 
PROT_NONE
, 
MAP_FIXED
 | 
MAP_ANONYMOUS
 | 
MAP_PRIVATE
, -1, 0))

54  
	`LOGGER_PERROR
("mmap, ctx_pool_init, PROT_NONE"), -1;

55 
ribs_c⁄ãxt
 *
rc
 = (ribs_c⁄ãxà*)(
mem
 + 
˘x_off£t
);

56 
rc
->
√xt_‰ì
 = 
˝
->
‰ìli°
;

57 
˝
->
‰ìli°
 = 
rc
;

60 
	}
}

62 
	$öôC‹oCtxPoﬁ
(

63 
C‹oCtxPoﬁ
* 
˝
,

64 
size_t
 
öô_size
,

65 
size_t
 
grow_by
,

66 
size_t
 
°ack_size


69 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

70 i‡(
∑ge_size
 < 0) {

71 
	`Ârötf
(
°dîr
, "\nERROR sysc⁄f(ËÁûed wôhÉºnÿ%d %s:%d\n", 
î∫o
, 
__FILE__
, 
__LINE__
);

72  
ERR_INTERNAL
;

77 
°ack_size
 +
∑ge_size
;

78 
°ack_size
 &~(Ë
∑ge_size
;

79 
˝
->
grow_by
 = grow_by;

80 
˝
->
°ack_size
 = stack_size;

81 
˝
->
‰ìli°
 = 
NULL
;

82 
	`Ârötf
(
°dîr
, "\nINFO:Öage_sizê%ld, cª©ög sèck†o‡sizê%d %s:%d\n", 
∑ge_size
, 
°ack_size
, 
__FILE__
, 
__LINE__
);

83  
	`¸óãC‹oCtxSècks
(
˝
, 
öô_size
, 
°ack_size
, 
∑ge_size
);

84 
	}
}

86 
ribs_c⁄ãxt
 *
	$˘x_poﬁ_gë
(
˘x_poﬁ
 *
˝
) {

87 i‡(
NULL
 =
˝
->
‰ìli°
 && 0 !
	`˘x_poﬁ_¸óã°acks
(˝, cp->
grow_by
, cp->
°ack_size
, cp->
ª£rved_size
))

88  
NULL
;

89 
ribs_c⁄ãxt
 *
˘x
 = 
˝
->
‰ìli°
;

90 
˝
->
‰ìli°
 = 
˘x
->
√xt_‰ì
;

91  
˘x
;

92 
	}
}

94 
	$˘x_poﬁ_put
(
˘x_poﬁ
 *
˝
, 
ribs_c⁄ãxt
 *
˘x
) {

95 
˘x
->
√xt_‰ì
 = 
˝
->
‰ìli°
;

96 
˝
->
‰ìli°
 = 
˘x
;

97 
	}
}

	@/home/kartik/nwe/Timer.c

1 
	~<°dio.h
>

2 
	~<°ddef.h
>

3 
	~<as£π.h
>

4 
	~<°dlib.h
>

5 
	~<î∫o.h
>

6 
	~<°dboﬁ.h
>

7 
	~<time.h
>

8 
	~"Timî.h
"

9 
	~"Eº.h
"

10 
	~"Utûs.h
"

11 
	~"hp.h
"

13 #ifde‡
DEBUG


14 
	$¥ötTimîTimeouts
(

15 
TimîLi°M≠
* 
m≠
,

16 
À·
,

17 
right


20 
TimîLi°
** 
timîs
 = 
m≠
->timers;

21 
	`Ârötf
(
°dîr
, "\nDEBUGÖrintingÅheÅimers:\n**************************\n");

22 
À·
 <
right
) {

23 
	`Ârötf
(
°dîr
, "%d:", (Ë
timîs
[
À·
]->
timeout
);

24 
À·
++;

26 
	`Ârötf
(
°dîr
, "Milliseconds\n**************************\n");

27 
	}
}

30 
	$ö£πAtTimîLi°Taû
(

31 
TimîLi°
* 
li°
,

32 
Timî
* 
timî


35 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

36 
	`as£π
(
li°
 !
NULL
 && 
timî
 != NULL);

39 
DLi°
* 
timî_li°
 = &(
li°
->timer_list);

41 
Timî
* 
èû
 = 
timî_li°
->tail;

43 
timî
->
√xt
 = 
NULL
;

44 i‡(
èû
 =
NULL
) {

48 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

49 
	`as£π
(
timî_li°
->
size
 == 0);

51 
timî_li°
->
hód
 = 
timî
;

52 
timî
->
¥ev
 = 
NULL
;

57 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

58 
	`as£π
(
timî_li°
->
size
 > 0 &&Åimî_li°->
hód
 !
NULL
 &&Åimî_li°->
èû
 != NULL);

60 
timî
->
¥ev
 = 
èû
;

61 
èû
->
√xt
 = 
timî
;

63 
timî_li°
->
èû
 = 
timî
;

64 
timî_li°
->
size
 += 1;

65 
	}
}

71 
	$ªmoveTimî
(

72 
DLi°
* 
li°
,

73 
Timî
* 
timî


76 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

77 
	`as£π
(
li°
 !
NULL
 && 
timî
 != NULL);

79 i‡(
li°
->
hód
 =
timî
) {

80 
li°
->
hód
 = 
timî
->
√xt
;

82 
timî
->
¥ev
->
√xt
 =Åimer->next;

84 i‡(
li°
->
èû
 =
timî
) {

85 
li°
->
èû
 = 
timî
->
¥ev
;

87 
timî
->
√xt
->
¥ev
 =Åimer->prev;

89 
li°
->
size
 -= 1;

93 
timî
->
°©e
 = 
TIMER_STATE_INIT
;

98 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

99 
timî
->
√xt
 = 
NULL
;

100 
timî
->
¥ev
 = 
NULL
;

102 
	}
}

104 
	$öôDLi°
(

105 
DLi°
* 
l


108 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

109 
	`as£π
(
l
 !
NULL
);

111 
l
->
hód
 = 
NULL
;

112 
l
->
èû
 = 
NULL
;

113 
l
->
size
 = 0;

114 
	}
}

116 
Timî
* 
	$gëDLi°Hód
(

117 
DLi°
* 
li°


120 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

121 
	`as£π
(
li°
 !
NULL
);

123  
li°
->
hód
;

124 
	}
}

154 
	$°¨tRólTimî
(

155 
ev_lo›
* 
lo›
,

156 
TimîLi°
* 
li°
,

157 
ev_t°amp
 
timeout


160 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

161 
	`as£π
(
lo›
 !
NULL
 && 
li°
 != NULL);

163 #ifde‡
DEBUG


164 
	`Ârötf
(
°dîr
, "\n°¨tRólTimî(Ëövoked wôhÅimeout:%l‡£c⁄ds\n", 
timeout
);

166 i‡(
timeout
 < 0.0) {

173 
li°
->
timî
.
ª≥©
 = 0.0001;

175 
li°
->
timî
.
ª≥©
 = 
timeout
;

177 
	`ev_timî_agaö
(
lo›
, &(
li°
->
timî
));

178 
	}
}

183 
	$°›RólTimî
(

184 
ev_lo›
* 
lo›
,

185 
TimîLi°
* 
li°


188 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

189 
	`as£π
(
lo›
 !
NULL
 && 
li°
 != NULL);

191 #ifde‡
DEBUG


192 
	`Ârötf
(
°dîr
, "\nstopRealTimer() invoked\n");

194 
	`ev_timî_°›
(
lo›
, &(
li°
->
timî
));

195 
	}
}

197 
	$gëTimîLi°Timeout
(

198 
TimîLi°
* 
l


201 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

202 
	`as£π
(
l
 !
NULL
);

204  
l
->
timeout
;

205 
	}
}

215 
	$ª¨mOrSt›Timî
(

216 
Ró˘‹
* 
ªa˘‹
,

217 
TimîLi°
* 
timî_li°
,

218 
DLi°
* 
li°


221 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

222 
	`as£π
(
ªa˘‹
 !
NULL
 &&Ñó˘‹->
lo›
 !NULL && 
li°
 !NULL && 
timî_li°
 != NULL && (&(timer_list->timer_list) ==Üist));

230 
Timî
* 
hód
 = 
	`gëDLi°Hód
(
li°
);

231 i‡(
hód
 =
NULL
) {

236 
	`°›RólTimî
(
ªa˘‹
->
lo›
, 
timî_li°
);

241 
ev_t°amp
 
timeout
 = 
hód
->
a˘uÆ_timeout
 - 
	`timeNowD
();

242 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

245 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

256 
	`°¨tRólTimî
(
ªa˘‹
->
lo›
, 
timî_li°
, 
timeout
);

259 
	}
}

265 
	$evTimîTimedOutCB
(

266 
ev_lo›
* 
lo›
,

267 
ev_timî
* 
w
,

268 
ªvíts


271 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

272 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

274 #ifde‡
DEBUG


275 
	`Ârötf
(
°dîr
, "\nevTimerTimedOutCB() invoked\n");

277 
TimîLi°
* 
li°
 = (TimîLi°*Ë(((*Ë
w
 - 
	`off£tof
(TimîLi°, 
timî
)));

278 
DLi°
* 
timî_li°
 = &(
li°
->timer_list);

279 
Timî
* 
tmr
 = 
	`gëDLi°Hód
(
timî_li°
);

280 
now
;

281 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

282 
	`as£π
(
tmr
 !
NULL
 && &—mr->
timî_li°
->
timî
Ë=
w
);

285 
ev_t°amp
 
a˘uÆ_timeout
;

286 i‡(
tmr
 !
NULL
) {

288 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

289 
	`as£π
(
tmr
->
°©e
 =
TIMER_STATE_STARTED
);

291 
	`ªmoveTimî
(
timî_li°
, 
tmr
);

292 #ifde‡
STRINGENT_ERROR_CHECKING


293 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, &(
tmr
->
expúe_time
));

294 
	`Ârötf
(
°dîr
, "\nDEBUGÉxpúe_timê- sèπ_timê%l‡ms\n", (
tmr
->
expúe_time
.
tv_£c
 * 1000.0 +Åmr->expúe_time.
tv_n£c
/1000000.0Ë- (tmr->
°¨t_time
.tv_sec * 1000.0 +Åmr->start_time.tv_nsec/1000000.0));

307 
tmr
->
	`cb
—mr->
ªa˘‹
,Åmr,Åmr->
˘xt
, 
ªvíts
);

308 
now
 = 
	`timeNowD
();

309 } (
tmr
 = 
	`gëDLi°Hód
(
timî_li°
)Ë!
NULL
 && (
a˘uÆ_timeout
 =Åmr->a˘uÆ_timeoutË<
now
);

310 i‡(
tmr
 =
NULL
) {

314 
	`°›RólTimî
(
lo›
, 
li°
);

319 
ev_t°amp
 
timeout
 = 
a˘uÆ_timeout
 - 
now
;

320 
	`°¨tRólTimî
(
lo›
, 
tmr
->
timî_li°
, 
timeout
);

326 
	`as£π
(0);

328 
	}
}

330 
	$öôTimîLi°
(

331 
TimîLi°
* 
l
,

332 
timeout


335 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

336 
	`as£π
(
l
 !
NULL
);

339 
l
->
timeout
 =Åimeout;

340 
	`öôDLi°
(&(
l
->
timî_li°
));

345 
	`ev_öô
(&(
l
->
timî
), 
evTimîTimedOutCB
);

346 
	}
}

352 
	$£¨chBö¨y
(

353 
TimîLi°
** 
timîs
,

354 
À·
,

355 
right
,

356 
key
,

357 * 
Êag


360 *
Êag
 = 0;

361 
ödex
 = -1;

362 
À·
 <
right
) {

363 
middÀ
 = (
À·
 + 
right
)/2;

364 i‡(
timîs
[
middÀ
]->
timeout
 < 
key
) {

365 
À·
 = 
middÀ
 + 1;

366 
ödex
 = 
middÀ
;

367 } i‡(
timîs
[
middÀ
]->
timeout
 > 
key
) {

368 
right
 = 
middÀ
 - 1;

370 *
Êag
 = 1;

371 
ödex
 = 
middÀ
;

375  
ödex
;

376 
	}
}

383 
TimîLi°
* 
	$gëTimîLi°
(

384 
TimîLi°M≠
* 
m≠
,

385 
timeout


388 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

389 
	`as£π
(
m≠
 !
NULL
 && m≠->
timîs
 !NULL && m≠->
max_size
 > 0 && 
timeout
 > 0);

392 
TimîLi°
** 
timîs
 = 
m≠
->timers;

393 
size
 = 
m≠
->size;

395 
TimîLi°
* 
ªsu…
 = 
NULL
;

401 
Êag
 = 0;

403 
ödex
 = -1;

405 
ödex
 = 
	`£¨chBö¨y
(
timîs
, 0, 
size
 - 1, 
timeout
, &
Êag
);

407 i‡(
Êag
 == 1) {

408 
ªsu…
 = 
timîs
[
ödex
];

410 
max_size
 = 
m≠
->max_size;

411 i‡(
size
 >
max_size
) {

412 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

413 
	`as£π
(
size
 =
max_size
);

415 
ªt
 = 
	`£tTimîLi°M≠
(
m≠
, 
max_size
 * 2);

416 i‡(
ªt
 != 0) {

417 
ªsu…
 = 
NULL
;

418 
END
;

422 
i
 = 
ödex
 + 1;

423 
j
 = 
size
 - 1;

424 
TimîLi°
* 
ãmp
 = 
timîs
[
size
];

425 
j
 >
i
) {

426 
timîs
[
j
+1] =Åimers[j];

427 
j
--;

429 
ªsu…
 = 
timîs
[
i
] = 
ãmp
;

430 
	`öôTimîLi°
(
ªsu…
, 
timeout
);

431 
m≠
->
size
 += 1;

433 #ifde‡
DEBUG


434 
	`¥ötTimîTimeouts
(
m≠
, 0, m≠->
size
 - 1);

436 
END
:

437  
ªsu…
;

438 
	}
}

440 
	$£tTimîTimeout
(

441 
Timî
* 
timî
,

442 
timeout


445 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

446 
	`as£π
(
timî
 !
NULL
 &&Åimî->
ªa˘‹
 !NULL &&Åimî->ªa˘‹->
lo›
 != NULL);

448 
timî
->
a˘uÆ_timeout
 = 
	`timeNowD
(Ë+ 
timeout
/1000.0;

449 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

452 
	}
}

457 
	$öôTimîLi°M≠
(

458 
TimîLi°M≠
* 
m≠


461 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

462 
	`as£π
(
m≠
 !
NULL
);

464 
m≠
->
timîs
 = 
NULL
;

465 
m≠
->
size
 = 0;

466 
m≠
->
max_size
 = 0;

467 
	}
}

478 
	$£tTimîLi°M≠
(

479 
TimîLi°M≠
* 
m≠
,

480 
max_size


483 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

484 
	`as£π
(
m≠
 !
NULL
 && 
max_size
 > 0);

486 
ªt
 = 0;

487 
TimîLi°
** 
timîs
 = (TimîLi°**Ë
	`ªÆloc
(
m≠
->timîs, (TimîLi°*Ë* 
max_size
);

488 i‡(
timîs
 =
NULL
) {

489 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

490 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

492 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

494 
m≠
->
timîs
 =Åimers;

495 
ﬁd_size
 = 
m≠
->
max_size
;

496 
i
 = 0;

498 
i
 = 
ﬁd_size
; i < 
max_size
; i++) {

499 
timîs
[
i
] = (
TimîLi°
*Ë
	`mÆloc
((TimerList));

500 i‡(
timîs
[
i
] =
NULL
) {

501 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

502 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

508 
m≠
->
max_size
 = 
i
;

509 i‡(
i
 =
ﬁd_size
) {

510 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

513  
ªt
;

514 
	}
}

524 
	$öôTimî
(

526 
Ró˘‹
* 
ªa˘‹
,

527 
Timî
* 
timî
,

528 
FPTRTimeoutCB
 
cb
,

529 * 
˘xt
,

530 
timeout


536 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

537 
	`as£π
(
ªa˘‹
 !
NULL
 &&Ñó˘‹->
lo›
 !NULL && 
timî
 !NULL && 
cb
 !NULL && 
timeout
 > 0);

539 #ifde‡
DEBUG


540 
	`Ârötf
(
°dîr
, "\nDEBUG inôTimî(Ëövoked wôhÅimeouà%d %s:%d\n", 
timeout
, 
__FILE__
, 
__LINE__
);

542 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

543 
î∫o
 = 0;

545 
ªt
 = 0;

549 
TimîLi°
* 
li°
 = 
	`gëTimîLi°
(&(
ªa˘‹
->
timîs
), 
timeout
);

550 i‡(
li°
 =
NULL
) {

551 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

552 
END
;

554 #ifde‡
DEBUG


555 
	`Ârötf
(
°dîr
, "\nDEBUGÅhêli°áŒŸed f‹Åhêtimî wôhÅimeouà%d i†%∞%s:%d\n", 
timeout
, (*Ë
li°
, 
__FILE__
, 
__LINE__
);

558 
timî
->
a˘uÆ_timeout
 = -1.0;

559 
timî
->
ªa˘‹
 =Ñeactor;

560 
timî
->
˘xt
 = ctxt;

561 
timî
->
cb
 = cb;

562 
timî
->
√xt
 = 
NULL
;

563 
timî
->
¥ev
 = 
NULL
;

564 
timî
->
timî_li°
 = 
li°
;

565 
timî
->
°©e
 = 
TIMER_STATE_INIT
;

567 
END
:

568  
ªt
;

569 
	}
}

575 
	$°¨tTimî
(

576 
Timî
* 
timî


579 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

580 
	`as£π
(
timî
 !
NULL
);

581 
	`as£π
(
timî
->
°©e
 =
TIMER_STATE_INIT
 ||Åimî->°©ê=
TIMER_STATE_STARTED
);

583 i‡(
timî
->
°©e
 !
TIMER_STATE_STARTED
) {

584 #ifde‡
STRINGENT_ERROR_CHECKING


585 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, &(
timî
->
°¨t_time
));

591 
TimîLi°
* 
li°
 = 
timî
->
timî_li°
;

596 
	`ö£πAtTimîLi°Taû
(
li°
, 
timî
);

601 
timeout
 = 
	`gëTimîLi°Timeout
(
li°
);

607 
	`£tTimîTimeout
(
timî
, 
timeout
);

609 
Timî
* 
hód
 = 
	`gëDLi°Hód
(&(
li°
->
timî_li°
));

610 i‡(
hód
 =
timî
) {

615 
	`°¨tRólTimî
(
timî
->
ªa˘‹
->
lo›
,Åimî->
timî_li°
, (
ev_t°amp
Ë
timeout
/1000.0);

620 
timî
->
°©e
 = 
TIMER_STATE_STARTED
;

624 
size
 = 
	`gëTimîLi°Size
(
li°
);

626 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

627 
	`as£π
(
size
 > 0);

630 
	}
}

635 
	$°›Timî
(

636 
Timî
* 
timî


639 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

640 
	`as£π
(
timî
 !
NULL
);

642 i‡(
timî
->
°©e
 =
TIMER_STATE_STARTED
) {

647 
boﬁ
 
Êag
 = 
Ál£
;

652 
TimîLi°
* 
timî_li°
 = 
timî
->timer_list;

653 
DLi°
* 
li°
 = &(
timî_li°
->timer_list);

658 
Timî
* 
hód
 = 
	`gëDLi°Hód
(
li°
);

659 i‡(
hód
 =
timî
) {

660 
Êag
 = 
åue
;

665 
	`ªmoveTimî
(
li°
, 
timî
);

666 i‡(
Êag
 =
åue
) {

667 
	`ª¨mOrSt›Timî
(
timî
->
ªa˘‹
, 
timî_li°
, 
li°
);

671 
	}
}

685 
	$ch™geNodeTime°amp
(

686 
node
* 
ñemít
,

687 
ev_t°amp
 
timeout


690 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

691 
	`as£π
(
ñemít
 !
NULL
 && 
timeout
 > 0.0);

693 
ñemít
->
timeout
 =Åimeout;

694 
	}
}

698 
	$moveToTaû
(

699 
DLi°
* 
li°
,

700 
node
* 
ñemít


703 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

704 
	`as£π
(
DLi°
 !
NULL
 && 
ñemít
 != NULL);

710 i‡(
ñemít
 =
li°
->
èû
) {

718 i‡(
li°
->
hód
 =
ñemít
) {

722 
li°
->
hód
 = 
ñemít
->
√xt
;

728 
ñemít
->
¥ev
->
√xt
 =Élement->next;

729 
ñemít
->
√xt
->
¥ev
 =Élement->prev;

733 
ñemít
->
¥ev
 = 
li°
->
èû
;

734 
li°
->
èû
->
√xt
 = 
ñemít
;

735 
ñemít
->
√xt
 = 
NULL
;

736 
li°
->
èû
 = 
ñemít
;

737 
	}
}

738 
	$ªmoveHódTimî
(

739 
DLi°
* 
l


742 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

743 
	`as£π
(
l
 !
NULL
 &&Ü->
size
 >= 1);

745 
l
->
hód
 =Ü->hód->
√xt
;

746 i‡(
l
->
size
 == 1) {

750 
l
->
èû
 =Ü->
hód
;

752 
l
->
hód
->
¥ev
 = 
NULL
;

753 
l
->
size
--;

754 
	}
}

756 
	$gëDLi°Size
 (

757 
DLi°
* 
l


760  
l
->
size
;

761 
	}
}

766 
	$gëTimîLi°Size
(

767 
TimîLi°
* 
l


770 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

771 
	`as£π
(
l
 !
NULL
 &&Ü->
timî_li°
 != NULL);

773  
	`gëDLi°Size
(&(
l
->
timî_li°
));

774 
	}
}

775 
	$ö¸emítTimîLi°Size
(

776 
TimîLi°
* 
l


779 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

780 
	`as£π
(
l
 !
NULL
);

782  
l
->
timî_li°
.
size
++;

783 
	}
}

	@/home/kartik/nwe/handlers/default_handler.c

1 
	~<°dio.h
>

2 
	~"hp.h
"

3 
	~"ev.h
"

4 
	~"H™dÀrs.h
"

5 c⁄° 
	gDEFAULT_RESPONSE_HEADER
[] =

12 
	gDEFAULT_RESP_HEADER_SIZE
 = (
DEFAULT_RESPONSE_HEADER
) - 1;

14 
	$deÁu…H™dÀr
(

15 
Ró˘‹
* 
ªa˘‹
,

16 
HTTPMsg
* 
msg
,

17 * 
≠p_d©a


21 (Ë
ªa˘‹
;

22 (Ë
≠p_d©a
;

23 
ªt
 = 0;

25 
ªt
 = 
	`wrôeHTTPSètus
(
msg
, 
HTTP_200_OK
);

26 i‡(
ªt
 != 0) {

27 
	`Ârötf
(
°dîr
, "\nERROR writeHTTPStatus() failed\n");

30 
ªt
 = 
	`wrôeHTTPHdr
(
msg
, 
DEFAULT_RESPONSE_HEADER
, 
DEFAULT_RESP_HEADER_SIZE
);

31 i‡(
ªt
 != 0) {

32 
	`Ârötf
(
°dîr
, "\nERROR writeHTTPHeader() failed\n");

33 
END
;

35 
END
:

36 
	`föishHTTPMsg
(
msg
);

37 
	}
}

	@/home/kartik/nwe/handlers/getSP.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

4 
	~<°döt.h
>

5 
	~"hp.h
"

6 
	~"ev.h
"

7 
	~"H™dÀrs.h
"

8 
	~"mtwi°.h
"

9 
	~"m©h.h
"

11 c⁄° 
	gSP_RESPONSE_BODY
[] =

15 c⁄° 
	gSP_RESPONSE_HDR
[] =

22 
	#RAND_RANGE
 1000000000

	)

24 
	#R_IDX
 (2)

	)

25 
	#S_IDX
 (1)

	)

26 
	#T_IDX
 (0)

	)

28 
	$GET_MAX
(

29 
a
,

30 
b


33  (
a
 > 
b
)?a:b;

34 
	}
}

36 
	$GET_MIN
(

37 
uöt32_t
 
a
,

38 
uöt32_t
 
b
,

39 
uöt32_t
 
c


42 i‡(
a
 < 
b
) {

43  (
a
 < 
c
)?a:c;

45  (
b
 < 
c
)?b:c;

47 
	}
}

49 
	$gë_idx
(

50 
uöt32_t
 
r
,

51 
uöt32_t
 
s
,

52 
uöt32_t
 
t
,

53 
öt64_t
 
n


56 
uöt32_t
 
mö
;

57 
mö
 = 
	`GET_MIN
(
r
, 
s
, 
t
);

58 i‡(
mö
 =
r
) {

59 
n
 -
r
;

60 i‡(
n
 <= 0) {

61  
R_IDX
;

63 i‡(
s
 < 
t
) {

67 
n
 -
s
;

68 i‡(
n
 <= 0) {

69  
S_IDX
;

71  
T_IDX
;

77 
n
 -
t
;

78 i‡(
n
 <= 0) {

79  
T_IDX
;

81  
S_IDX
;

83 } i‡(
mö
 =
s
) {

84 
n
 -
s
;

85 i‡(
n
 <= 0) {

86  
S_IDX
;

88 i‡(
r
 < 
t
) {

92 
n
 -
r
;

93 i‡(
n
 <= 0) {

94  
R_IDX
;

96  
T_IDX
;

102 
n
 -
t
;

103 i‡(
n
 <= 0) {

104  
T_IDX
;

106  
R_IDX
;

108 } i‡(
mö
 =
t
) {

109 
n
 -
t
;

110 i‡(
n
 <= 0) {

111  
T_IDX
;

113 i‡(
r
 < 
s
) {

117 
n
 -
r
;

118 i‡(
n
 <= 0) {

119  
R_IDX
;

121  
S_IDX
;

127 
n
 -
s
;

128 i‡(
n
 <= 0) {

129  
S_IDX
;

131  
R_IDX
;

134 
	`as£π
(0);

136 
	}
}

138 
	$ˇlcuœã_•_O_1
(

139 
Â
,

140 
shv
,

141 
v¨_A
,

142 
v¨_B
,

143 
v¨_D
,

144 
r
,

145 
s
,

146 
t
,

147 
mt_°©e
* 
°©e
,

148 * 
lcou¡î


155 
	`as£π
((
shv
 <
Â
Ë&& (
r
 <1.0 && 
s
 <1.0 && 
t
 <= 1.0) && (r + s +Å) <= 1.0);

161 i‡(
shv
 <0.0 || shv >
Â
) {

162  
Â
;

164 
max
;

165 
i
;

166 
uöt32_t
 
ønd_n
;

167 
idx
;

171 *
lcou¡î
 = 0;

172 
max
 = 
	`GET_MAX
(
shv
 + 
v¨_A
, shv * (1.0 + (
v¨_B
/100.0)));

173 i‡(
max
 < 
Â
) {

174  
max
;

181 
ªsu…_i
[3] = {
shv
, shv, shv};

182 
°ï
 = 1 + 
v¨_D
;

184 
öt32_t
 
exp⁄ít
 = (öt32_tË
	`˚û
(
	`log
(
Â
/
shv
)/log(
°ï
)) - 1;

185 
p_n
;

186 i‡(
exp⁄ít
 > 0) {

187 
	`Ârötf
(
°dîr
, "\√xp⁄íà%d, f‹muœ_ouçuà%lf\n", 
exp⁄ít
, 
	`log
(
Â
/
shv
)/log(
°ï
));

188 
p_n
 = 
shv
 * 
	`pow
(
°ï
, 
exp⁄ít
);

190  
shv
;

192 
	`Ârötf
(
°dîr
, "\≈_¿%lf\n", 
p_n
);

194 
p_n
 >
Â
) {

195 
	`Ârötf
(
°dîr
, "\nHi");

196 
p_n
 /
°ï
;

197 (*
lcou¡î
)++;

203 
i
 = 0;

205 
ªsu…_i
[
i
] = 
p_n
;

206 
p_n
 /
°ï
;

207 
i
++;

208 } 
p_n
 > 
ªsu…_i
[
i
] && i < 3);

209 
	`Ârötf
(
°dîr
, "\nfinal2\n");

210 
i
 = 0; i < 3; i ++) {

211 
	`Ârötf
(
°dîr
, "%lf:", 
ªsu…_i
[
i
]);

217 
ønd_n
 = 
	`mts_Ã™d
(
°©e
);

218 
ønd_n
 %
RAND_RANGE
;

224 
r
 *
RAND_RANGE
;

225 
s
 *
RAND_RANGE
;

226 
t
 *
RAND_RANGE
;

228 
	`Ârötf
(
°dîr
, "\nR™dÇ = %u\n", 
ønd_n
);

229 
idx
 = 
	`gë_idx
(
r
, 
s
, 
t
, 
ønd_n
);

231  
ªsu…_i
[
idx
];

232 
	}
}

234 
	$ˇlcuœã_•
(

235 
Â
,

236 
shv
,

237 
v¨_A
,

238 
v¨_B
,

239 
v¨_D
,

240 
r
,

241 
s
,

242 
t
,

243 
mt_°©e
* 
°©e
,

244 * 
lcou¡î


251 
	`as£π
((
shv
 <
Â
Ë&& (
r
 <1.0 && 
s
 <1.0 && 
t
 <= 1.0) && (r + s +Å) <= 1.0);

253 
p_i
[4] = {
shv
, shv, shv, shv};

254 
ªsu…_i
[3];

255 
max
;

256 
ödex
 = 0;

257 
ﬁd_ödex
 = 0;

258 
i
;

259 
uöt32_t
 
ønd_n
;

260 
idx
;

264 *
lcou¡î
 = 0;

265 
max
 = 
	`GET_MAX
(
shv
 + 
v¨_A
, shv * (1.0 + (
v¨_B
/100.0)));

266 i‡(
max
 < 
Â
) {

267  
max
;

272 
p_i
[
ödex
] < 
Â
) {

273 
ﬁd_ödex
 = 
ödex
;

274 
ödex
 = (index + 1) % 4;

275 
p_i
[
ödex
] =Ö_i[
ﬁd_ödex
] * (1.0 + 
v¨_D
);

276 (*
lcou¡î
)++;

279 
	`as£π
(
p_i
[
ödex
] >
Â
);

285 
	`Ârötf
(
°dîr
, "\nödex = %d\n", 
ödex
);

286 
i
 = 0; i < 4; i ++) {

287 
	`Ârötf
(
°dîr
, "%lf:", 
p_i
[
i
]);

289 
i
 = 0; i < 3; i++)

291 
ödex
 = (index - 1 + 4) % 4;

292 
ªsu…_i
[
i
] = 
p_i
[
ödex
];

294 
	`Ârötf
(
°dîr
, "\nfinal\n");

295 
i
 = 0; i < 3; i ++) {

296 
	`Ârötf
(
°dîr
, "%lf:", 
ªsu…_i
[
i
]);

302 
ønd_n
 = 
	`mts_Ã™d
(
°©e
);

303 
ønd_n
 %
RAND_RANGE
;

309 
r
 *
RAND_RANGE
;

310 
s
 *
RAND_RANGE
;

311 
t
 *
RAND_RANGE
;

313 
	`Ârötf
(
°dîr
, "\nR™dÇ = %u\n", 
ønd_n
);

314 
idx
 = 
	`gë_idx
(
r
, 
s
, 
t
, 
ønd_n
);

316  
ªsu…_i
[
idx
];

317 
	}
}

319 
	$gëSP
(

320 
Ró˘‹
* 
ªa˘‹
,

321 
HTTPMsg
* 
msg
,

322 * 
≠p_d©a


325 (Ë
ªa˘‹
;

326 
ªt
 = 0;

327 
mt_°©e
* 
ønd_°©e
 = (mt_°©e*Ë
≠p_d©a
;

328 c⁄° * 
FP
 = 
	`gëHTTPMsgQP¨am
(
msg
, "fp");

329 c⁄° * 
SHV
 = 
	`gëHTTPMsgQP¨am
(
msg
, "shv");

330 c⁄° * 
A
 = 
	`gëHTTPMsgQP¨am
(
msg
, "a");

331 c⁄° * 
B
 = 
	`gëHTTPMsgQP¨am
(
msg
, "b");

332 c⁄° * 
D
 = 
	`gëHTTPMsgQP¨am
(
msg
, "d");

333 c⁄° * 
R
 = 
	`gëHTTPMsgQP¨am
(
msg
, "r");

334 c⁄° * 
S
 = 
	`gëHTTPMsgQP¨am
(
msg
, "s");

335 c⁄° * 
T
 = 
	`gëHTTPMsgQP¨am
(
msg
, "t");

336 
Â
, 
shv
, 
v¨_A
, 
v¨_B
, 
v¨_D
, 
r
, 
s
, 
t
;

337 
ªt
 = 
	`•rötfHTTPHdr
(
msg
, "%s", 
SP_RESPONSE_HDR
);

338 i‡(
ªt
 != 0) {

339 
	`Ârötf
(
°dîr
, "\nERROR sprintfHTTPHdr() failed\n");

340 
END
;

342 i‡(
FP
 =
NULL
 || 
SHV
 =NULL || 
A
 =NULL || 
B
 =NULL || 
D
 =NULL || 
R
 =NULL || 
S
 =NULL || 
T
 == NULL) {

343 
ªt
 = 
	`•rötfHTTPBody
(
msg
, "%s%†%†%†%†%†%†%†%†%†%s", 
SP_RESPONSE_BODY
, "<˚¡î><h1> Inc‹ª˘/ösufficõ¡ quîyÖ¨am†: Quîy P¨am†", 
FP
, 
SHV
, 
A
, 
B
, 
D
, 
R
, 
S
, 
T
, "</h1></center>\n</body>\n</html>\n");

344 
END
;

346 
	`ssˇnf
(
FP
, "%lf", &
Â
);

347 
	`ssˇnf
(
SHV
, "%lf", &
shv
);

348 
	`ssˇnf
(
A
, "%lf", &
v¨_A
);

349 
	`ssˇnf
(
B
, "%lf", &
v¨_B
);

350 
	`ssˇnf
(
D
, "%lf", &
v¨_D
);

351 
	`ssˇnf
(
R
, "%lf", &
r
);

352 
	`ssˇnf
(
S
, "%lf", &
s
);

353 
	`ssˇnf
(
T
, "%lf", &
t
);

354 
lcou¡î
 = 0;

355 
ªsu…
 = 
	`ˇlcuœã_•
(
Â
, 
shv
, 
v¨_A
, 
v¨_B
, 
v¨_D
, 
r
, 
s
, 
t
, 
ønd_°©e
, &
lcou¡î
);

356 
ecou¡î
 = 0;

357 
ªsu…2
 = 
	`ˇlcuœã_•_O_1
(
Â
, 
shv
, 
v¨_A
, 
v¨_B
, 
v¨_D
, 
r
, 
s
, 
t
, 
ønd_°©e
, &
ecou¡î
);

358 
	`Ârötf
(
°dîr
, "\¿ªsu… = %lf\n", 
ªsu…
);

359 
	`Ârötf
(
°dîr
, "\¿ªsu…2 = %lf\n", 
ªsu…2
);

360 
	`•rötfHTTPBody
(
msg
, "%s%†Â = %l‡shv = %l‡A = %l‡B = %l‡D = %l‡∏%l‡†%l‡à%l‡lo›cou¡î = %d sec⁄d_¥i˚ = %lf, sec⁄d_¥i˚2 = %lf,Écou¡î = %d%s", 
SP_RESPONSE_BODY
, "<˚¡î><h1> QuîyÖ¨am†: ", 
Â
, 
shv
, 
v¨_A
, 
v¨_B
, 
v¨_D
, 
r
, 
s
, 
t
, 
lcou¡î
, 
ªsu…
, 
ªsu…2
, 
ecou¡î
, "</h1></center>\n</body>\n</html>\n");

361 
END
:

362 
	`föishHTTPMsg
(
msg
);

363 
	}
}

	@/home/kartik/nwe/handlers/hello_world.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"hp.h
"

4 
	~"ev.h
"

5 
	~"H™dÀrs.h
"

6 
	~"Timî.h
"

8 c⁄° 
	gRESPONSE_HEADER
[] =

13 
	gRESP_HEADER_SIZE
 = (
RESPONSE_HEADER
) - 1;

22 c⁄° 
	gRESPONSE_BODY
[] = "{\"PubMatic_Bid\":{\"ecpm\":373.000000,\"creative_tag\":\"<span class=\\\"PubAPIAd\\\"><scriptÅype=\\\"text/javascript\\\"> document.writeln('<iframe width=\\\"728\\\" scrolling=\\\"no\\\" height=\\\"90\\\" frameborder=\\\"0\\\"Çame=\\\"iframe0\\\"állowtransparency=\\\"true\\\" marginheight=\\\"0\\\" marginwidth=\\\"0\\\" vspace=\\\"0\\\" hspace=\\\"0\\\" src=\\\"http://172.16.4.74/a/1xx.html\\\"></iframe>');</script></span> <!-- PubMatic Ad Ends -->\",\"tracking_url\":\"http://172.16.4.74/AdServer/AdDisplayTrackerServlet?operId=1&pubId=36476&siteId=44046&adId=72299&adServerId=243&kefact=373.000000&kaxefact=373.000000&kadNetFrequecy=0&kadwidth=728&kadheight=90&kadsizeid=7&kltstamp=1402987798&indirectAdId=0&adServerOptimizerId=2&ranreq=0.9347751946852118&kpbmtpfact=373.000000&dcId=1&tldId=0&passback=0&imprId=40BB9EEA-352B-44DC-A63D-5AA85AC47D28&campaignId=10694&creativeId=0&pctr=0.000000&wDSPByrId=1498&pageURL=http%3A%2F%2F172.16.4.79%2FAggregator%2Fcurse.html\",\"landing_page\":\"abc.com\",\"autorefresh_time\":0,\"prefetch_data\":0}}";

24 
	gRESP_BODY_SIZE
 = (
RESPONSE_BODY
) - 1;

26 c⁄° 
	gSMALL_RESPONSE_HEADER
[] =

31 
	gSMALL_RESP_HEADER_SIZE
 = (
SMALL_RESPONSE_HEADER
) - 1;

33 c⁄° 
	gSMALL_RESPONSE_BODY
[] =

36 
	gSMALL_RESP_BODY_SIZE
 = (
SMALL_RESPONSE_BODY
) - 1;

58 
	$wrôeRe•⁄£
(

59 
HTTPMsg
* 
msg


62 
ªt
 = 0;

63 
ªt
 = 
	`wrôeHTTPHdr
(
msg
, 
RESPONSE_HEADER
, 
RESP_HEADER_SIZE
);

64 i‡(
ªt
 != 0) {

65 
	`Ârötf
(
°dîr
, "\nERROR writeHTTPHeader() failed\n");

66 
END
;

68 
ªt
 = 
	`wrôeHTTPBody
(
msg
, 
RESPONSE_BODY
, 
RESP_BODY_SIZE
);

69 i‡(
ªt
 != 0) {

70 
	`Ârötf
(
°dîr
, "\nERROR writeHTTPBody() failed\n");

71 
END
;

73 
END
:

74 
	`föishHTTPMsg
(
msg
);

75 
	}
}

97 
	$•rötfSmÆlRe•⁄£
(

98 
HTTPMsg
* 
msg


101 
ªt
 = 0;

102 
ªt
 = 
	`•rötfHTTPHdr
(
msg
, "%s", 
SMALL_RESPONSE_HEADER
);

103 i‡(
ªt
 != 0) {

104 
	`Ârötf
(
°dîr
, "\nERROR sprintfHTTPHdr() failed\n");

105 
END
;

107 
ªt
 = 
	`•rötfHTTPBody
(
msg
, "%s", 
SMALL_RESPONSE_BODY
);

108 i‡(
ªt
 != 0) {

109 
	`Ârötf
(
°dîr
, "\nERROR sprintfHTTPBody() failed\n");

110 
END
;

112 
END
:

113 
	`föishHTTPMsg
(
msg
);

114 
	}
}

116 
	$hñloW‹ld
(

118 
Ró˘‹
* 
ªa˘‹
,

119 
HTTPMsg
* 
msg
,

120 * 
≠p_d©a


123 (Ë
ªa˘‹
;

124 (Ë
≠p_d©a
;

127 
	`•rötfSmÆlRe•⁄£
(
msg
);

128 
	}
}

130 
	$cb
(

131 
Ró˘‹
* 
ªa˘‹
,

132 
Timî
* 
tmr
,

133 * 
˘xt
,

134 
ªvíts


137 (Ë
ªa˘‹
;

138 (Ë
ªvíts
;

139 
	`‰ì
(
tmr
);

140 
	`wrôeRe•⁄£
((
HTTPMsg
*Ë
˘xt
);

141 
	}
}

142 
	$d•Sim
(

143 
Ró˘‹
* 
ªa˘‹
,

144 
HTTPMsg
* 
msg
,

145 * 
≠p_d©a


148 (Ë
≠p_d©a
;

149 
ªt
 = 0;

150 c⁄° * 
tmout
 = 
	`gëHTTPMsgQP¨am
(
msg
, "tMt");

151 i‡(
tmout
 !
NULL
) {

152 
vÆue
 = 
	`©oi
(
tmout
);

153 
Timî
* 
tmr
 = (Timî*Ë
	`mÆloc
((Timer));

154 i‡(
tmr
 !
NULL
) {

155 
ªt
 = 
	`öôTimî
(
ªa˘‹
, 
tmr
, 
cb
, (*Ë
msg
, 
vÆue
);

156 i‡(
ªt
 == 0) {

157 
	`°¨tTimî
(
tmr
);

158 
END
;

160 
	`Ârötf
(
°dîr
, "\nERRORÅimî couldn'àbêöô()'ed %s:%d\n", 
__FILE__
, 
__LINE__
);

166 
	`•rötfSmÆlRe•⁄£
(
msg
);

167 
END
:

169 
	}
}

	@/home/kartik/nwe/hp.c

1 
	~"hp.h
"

2 
	~"Utûs.h
"

3 
	~<°dboﬁ.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<î∫o.h
>

8 
	~<as£π.h
>

10 
	~<sys/sockë.h
>

11 
	~<√töë/ö.h
>

12 
	~<¨∑/öë.h
>

13 
	~<°rög.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<time.h
>

16 
	~<°ddef.h
>

17 
	~<°d¨g.h
>

21 
	~<°döt.h
>

27 
	~"ev.h
"

28 
	~"hp.h
"

29 
	~"Timî.h
"

30 
	~"Eº.h
"

31 
	~"C⁄°™ts.h
"

32 
	~"H™dÀrs.h
"

33 
	~"hâp_∑r£r.h
"

62 
g_höt_uæ_size
;

63 
g_höt_n_q∑øms
;

64 
g_höt_n_hódîs
;

65 
g_höt_n_cookõs
;

66 
g_höt_ªq_body_size
;

67 
g_höt_ªs_hódî_size
;

68 
g_höt_ªs_body_size
;

69 
hâp_∑r£r_£âögs
 
g_hâp_ªq_£âögs
;

71 
	$böSórch
(

72 c⁄° 
URLA˘i⁄sAndH™dÀr
* 
hay°ack
,

73 
À·
,

74 
right
,

75 c⁄° * 
uæ
,

76 
Àn


79 
ödex
 = -1;

80 
À·
 <
right
) {

81 
middÀ
 = (
À·
 + 
right
)/2;

82 i‡(
	`°∫cmp
(
hay°ack
[
middÀ
].
uæ
, uæ, 
Àn
) < 0) {

83 
À·
 = 
middÀ
 + 1;

84 } i‡(
	`°∫cmp
(
hay°ack
[
middÀ
].
uæ
, uæ, 
Àn
) > 0) {

85 
right
 = 
middÀ
 - 1;

87 
ödex
 = 
middÀ
;

91  
ödex
;

92 
	}
}

94 
uöt8_t
 
	$gëA˘i⁄sAndURLH™dÀr
(

95 
URLA˘i⁄sAndH™dÀr
* 
¨r
,

96 
size
,

97 c⁄° * 
uæ
,

98 
uöt16_t
 
Àn
,

99 
FPTRURLH™dÀr
* 
h™dÀr
,

100 ** 
≠p_d©a


103 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

104 
	`as£π
(
uæ
 !
NULL
);

106 
uöt8_t
 
a˘i⁄s
 = 0;

107 
ödex
 = 
	`böSórch
(
¨r
, 0, 
size
 - 1, 
uæ
, 
Àn
);

108 i‡(
ödex
 == -1) {

109 
a˘i⁄s
 = 0;

110 *
h™dÀr
 = 
deÁu…H™dÀr
;

112 
a˘i⁄s
 = 
¨r
[
ödex
].actions;

113 *
h™dÀr
 = 
¨r
[
ödex
].handler;

114 *
≠p_d©a
 = 
¨r
[
ödex
].app_data;

116  
a˘i⁄s
;

117 
	}
}

119 #ifde‡
DEBUG


120 
	$¥ötS‹ãdQuîyP¨ms
(

121 c⁄° * 
buf
,

122 c⁄° 
Off£tPaú
* 
kv∑ºay
,

123 
À·
,

124 
right


127 
	`Ârötf
(
°dîr
, "\nDEBUGÖrintingÅhe query_params:\n");

128 
	`Ârötf
(
°dîr
, "**********************************\n");

129 
À·
 <
right
) {

130 
	`Ârötf
(
°dîr
, "\n%s:%s", 
buf
 + 
kv∑ºay
[
À·
].
key
, bu‡+ kv∑ºay[À·].
vÆue
);

131 
À·
++;

133 
	`Ârötf
(
°dîr
, "**********************************\n");

134 
	}
}

135 
	$¥ötS‹ãdHTTPHódîs
(

136 c⁄° 
KeyVÆuePaú
* 
kv∑ºay
,

137 
À·
,

138 
right


141 
	`Ârötf
(
°dîr
, "\nDEBUGÖrintingÅhe headers:\n");

142 
	`Ârötf
(
°dîr
, "**********************************\n");

143 
À·
 <
right
) {

144 
	`Ârötf
(
°dîr
, "\n%s:%s", 
kv∑ºay
[
À·
].
key
, kv∑ºay[À·].
vÆue
);

145 
À·
++;

147 
	`Ârötf
(
°dîr
, "**********************************\n");

148 
	}
}

150 
	$¥ötCookõs
(

151 c⁄° * 
buf
,

152 
Off£tPaú
* 
kv∑ºay
,

153 
À·
,

154 
right


157 
	`Ârötf
(
°dîr
, "\nDEBUGÖrintingÅhe cookies:\n");

158 
	`Ârötf
(
°dîr
, "**********************************\n");

159 
À·
 <
right
) {

160 
	`Ârötf
(
°dîr
, "\n%s:%s", 
buf
 + 
kv∑ºay
[
À·
].
key
, bu‡+ kv∑ºay[À·].
vÆue
);

161 
À·
++;

163 
	`Ârötf
(
°dîr
, "**********************************\n");

164 
	}
}

167 
	$s‹tHTTPHódîs
(

168 c⁄° * 
l
,

169 c⁄° * 
r


172 c⁄° 
KeyVÆuePaú
* 
À·
 = (c⁄° KeyVÆuePaú*Ë
l
;

173 c⁄° 
KeyVÆuePaú
* 
right
 = (c⁄° KeyVÆuePaú*Ë
r
;

174  
	`°rcmp
(
À·
->
key
, 
right
->key);

175 
	}
}

177 * 
	$£¨chCookõ
(

178 * 
buf
,

179 
Off£tPaú
* 
kv∑ºay
,

180 
À·
,

181 
right
,

182 c⁄° * 
key


185 
ödex
 = -1;

186 
À·
 <
right
) {

187 
middÀ
 = (
À·
 + 
right
)/2;

188 i‡(
	`°rcmp
(
key
, 
buf
 + 
kv∑ºay
[
middÀ
].key) < 0) {

189 
right
 = 
middÀ
 - 1;

190 } i‡(
	`°rcmp
(
key
, 
buf
 + 
kv∑ºay
[
middÀ
].key) > 0) {

191 
À·
 = 
middÀ
 + 1;

193 
ödex
 = 
middÀ
;

197  (
ödex
 =-1)?
NULL
:((
buf
 + 
kv∑ºay
[ödex].
vÆue
)[0] == '\0'?NULL:buf + kvparray[index].value);

198 
	}
}

200 c⁄° * 
	$£¨chQP¨am
(

201 c⁄° * 
uæ
,

202 
Off£tPaú
* 
kv∑ºay
,

203 
À·
,

204 
right
,

205 c⁄° * 
key


208 
ödex
 = -1;

209 
À·
 <
right
) {

210 
middÀ
 = (
À·
 + 
right
)/2;

211 i‡(
	`°rcmp
(
key
, 
uæ
 + 
kv∑ºay
[
middÀ
].key) < 0) {

212 
right
 = 
middÀ
 - 1;

213 } i‡(
	`°rcmp
(
key
, 
uæ
 + 
kv∑ºay
[
middÀ
].key) > 0) {

214 
À·
 = 
middÀ
 + 1;

216 
ödex
 = 
middÀ
;

220  (
ödex
 =-1)?
NULL
:(((
uæ
 + 
kv∑ºay
[ödex].
vÆue
)[0] == '\0')?NULL:url + kvparray[index].value);

221 
	}
}

222 * 
	$£¨chHódî
(

223 
KeyVÆuePaú
* 
kv∑ºay
,

224 
À·
,

225 
right
,

226 c⁄° * 
key


229 
ödex
 = -1;

230 
À·
 <
right
) {

231 
middÀ
 = (
À·
 + 
right
)/2;

232 i‡(
	`°rcmp
(
key
, 
kv∑ºay
[
middÀ
].key) < 0) {

233 
right
 = 
middÀ
 - 1;

234 } i‡(
	`°rcmp
(
key
, 
kv∑ºay
[
middÀ
].key) > 0) {

235 
À·
 = 
middÀ
 + 1;

237 
ödex
 = 
middÀ
;

241  (
ödex
 =-1)?
NULL
:(
kv∑ºay
[ödex].
vÆue
[0] == '\0'?NULL:kvparray[index].value);

242 
	}
}

244 
HTTPP¨£r
* 
	$¸óãHTTPP¨£r
(

245 
hâp_∑r£r_ty≥
 
ty≥


248 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

249 
	`as£π
(
ty≥
 =
HTTP_REQUEST
 ||Åy≥ =
HTTP_RESPONSE
);

254 
HTTPP¨£r
* 
p
 = (HTTPP¨£r*Ë
	`mÆloc
((HTTPParser));

255 i‡(
p
 !
NULL
) {

256 
	`hâp_∑r£r_öô
(&(
p
->
∑r£r
), 
ty≥
);

257 
p
->
˘xt_œ°_hódî_c›õd
 = 0;

258 
p
->
˘xt_œ°_hódî_max_size
 = 0;

260 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

262  
p
;

263 
	}
}

268 
	$de°royHTTPP¨£r
(

269 
HTTPP¨£r
* 
∑r£r


272 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

273 
	`as£π
(
∑r£r
 !
NULL
);

278 
	`‰ì
(
∑r£r
);

279 
	}
}

284 
	$£tHTTPP¨£rC⁄ãxt
(

285 
HTTPP¨£r
* 
∑r£r
,

286 * 
˘xt


289 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

290 
	`as£π
(
∑r£r
 !
NULL
 && 
˘xt
 != NULL);

292 
∑r£r
->∑r£r.
d©a
 = 
˘xt
;

293 
	}
}

295 
	$execuãHTTPP¨£r
(

296 
HTTPP¨£r
* 
∑r£r
,

297 c⁄° * 
±r
,

298 
byãs
,

299 
TCPC⁄nInfo
* 
c⁄n


302 (Ë
c⁄n
;

303 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

304 
	`as£π
(
∑r£r
 !
NULL
 && 
±r
 !NULL && 
byãs
 > 0);

306 
hâp_∑r£r
* 
p
 = &(
∑r£r
->parser);

307 
ªt
 = 0;

310 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
p
, &
g_hâp_ªq_£âögs
, 
±r
, 
byãs
);

311 i‡(
p
->
upgøde
) {

316 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

317 
	`Ârötf
(
°dîr
, "\nERROR:Ö->upgødêi†£à™dÇ∑r£d = %lu %s:%d\n", 
≈¨£d
, 
__FILE__
, 
__LINE__
);

319 
	`as£π
(0);

320 } i‡(
≈¨£d
 !(
size_t
Ë
byãs
) {

321 i‡(
	`HTTP_PARSER_ERRNO
(
p
Ë!
HPE_PAUSED
) {

322 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

323 
	`Ârötf
(
°dîr
, "\nERROR:Ç∑r£d = %lu, %†(%sË%s:%d\n", 
≈¨£d
, 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(
p
)), 
	`hâp_î∫o_«me
(HTTP_PARSER_ERRNO’)), 
__FILE__
, 
__LINE__
);

325 
ªt
 = 
ERR_HTTP_PARSER
;

328  
ªt
;

329 
	}
}

331 
	$öôHTTPMsgDLi°
(

332 
HTTPMsgDLi°
* 
li°


335 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

336 
	`as£π
(
li°
 !
NULL
);

338 
li°
->
hód
 = 
NULL
;

339 
li°
->
èû
 = 
NULL
;

340 
li°
->
√xt_msg
 = 
NULL
;

341 
li°
->
size
 = 0;

342 
	}
}

347 
	$ö£πHTTPMsgAtTaû
(

348 
HTTPMsgDLi°
* 
li°
,

349 
HTTPMsg
* 
msg


352 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

353 
	`as£π
(
li°
 !
NULL
 && 
msg
 != NULL);

356 
HTTPMsg
* 
èû
 = 
li°
->tail;

358 
msg
->
√xt
 = 
NULL
;

360 i‡(
èû
 =
NULL
) {

364 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

365 
	`as£π
(
li°
->
size
 == 0);

368 
li°
->
hód
 = 
msg
;

369 
msg
->
¥ev
 = 
NULL
;

374 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

375 
	`as£π
(
li°
->
size
 > 0 &&Üi°->
hód
 !
NULL
 &&Üi°->
èû
 != NULL);

377 
msg
->
¥ev
 = 
èû
;

378 
èû
->
√xt
 = 
msg
;

381 
li°
->
èû
 = 
msg
;

383 i‡(
li°
->
√xt_msg
 =
NULL
) {

384 
li°
->
√xt_msg
 = 
msg
;

387 
li°
->
size
 += 1;

388 
	}
}

393 
	$de°royHTTPMsg
(

394 
HTTPMsg
* 
msg


397 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

398 
	`as£π
(
msg
 !
NULL
);

401 
	`de°royDTextBuff
(&(
msg
->
∑r£d_uæ
.
ruæ
));

403 
	`de°royKVPBuf„r
(&(
msg
->
∑r£d_uæ
.
q∑øms
));

405 
	`de°royKVPAºay
(&(
msg
->
hódîs
));

407 
	`de°royKVPBuf„r
(&(
msg
->
cookõs
));

409 
	`de°royDBö¨yBuff
(&(
msg
->
body
));

411 
	`de°royDTextBuff
(&(
msg
->
ª•⁄£
.
hódî
));

413 
	`de°royDBö¨yBuff
(&(
msg
->
ª•⁄£
.
body
));

415 
	`‰ì
(
msg
);

416 
	}
}

418 
	$de°royHTTPMsgDLi°
(

419 
HTTPMsgDLi°
* 
li°


422 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

423 
	`as£π
(
li°
 !
NULL
);

425 
HTTPMsg
* 
msg
 = 
li°
->
hód
;

426 
HTTPMsg
* 
tmp
 = 
msg
;

427 
msg
 !
NULL
) {

428 
tmp
 = 
msg
->
√xt
;

429 i‡(
msg
->
°©e
 >
HTTP_MSG_STATE_HANDLER_INVOKED
) {

435 
msg
->
°©e
 = 
HTTP_MSG_STATE_TCP_CONN_CLOSED
;

437 
	`de°royHTTPMsg
(
msg
);

439 
msg
 = 
tmp
;

441 
	`‰ì
(
li°
);

442 
	}
}

452 
	$ªcvNëwD©a
(

453 
fd
,

454 
DBö¨yBuff
* 
rbuf


458 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

459 
	`as£π
(
rbuf
 !
NULL
 &&Ñbuf->
size
 == 0);

462 
max_size
 = 
rbuf
->max_size;

463 * 
d©a
 = (*Ë
rbuf
->
buf
;

470 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

471 
î∫o
 = 0;

477 
nbyãs
 = 0;

481 
nbyãs
 = 
	`ªcv
(
fd
, 
d©a
, 
max_size
, 0);

484 i‡(
nbyãs
 < 0) {

486 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

490 
	`Ârötf
(
°dîr
, "\nERRORÑecv(ËÁûed wôhÉºnÿ%d %s:%d\n", 
î∫o
, 
__FILE__
, 
__LINE__
);

491 
nbyãs
 = -2;

498 
nbyãs
 = -1;

500 } i‡(
nbyãs
 > 0) {

505 
rbuf
->
size
 = 
nbyãs
;

507  
nbyãs
;

508 
	}
}

518 
	$£ndNëwD©a
(

519 
fd
,

520 
iovec
* 
vio
,

521 
size


525 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

526 
	`as£π
(
fd
 >0 && 
vio
 !
NULL
 && 
size
 > 0);

532 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

533 
î∫o
 = 0;

539 
nbyãs
 = 0;

543 
nbyãs
 = 
	`wrôev
(
fd
, 
vio
, 
size
);

548 i‡(
nbyãs
 < 0) {

550 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

552 
	`Ârötf
(
°dîr
, "\nERROR wrôev(ËÁûed f‹ fd = %d wôhÉºnÿ%d %s:%d\n", 
fd
, 
î∫o
, 
__FILE__
, 
__LINE__
);

556 
nbyãs
 = -2;

563 
	`Ârötf
(
°dîr
, "\nERROR FWR %s:%d\n", 
__FILE__
, 
__LINE__
);

564 
nbyãs
 = -1;

566 } i‡(
nbyãs
 == 0) {

567 
	`Ârötf
(
°dîr
, "\nERROR wrôev(Ëªtu∫ed 0 %s:%d\n", 
__FILE__
, 
__LINE__
);

568 
	`as£π
(0);

574  
nbyãs
;

575 
	}
}

577 
	$£ndHTTPMsgs
(

578 
TCPC⁄nInfo
* 
c⁄n
,

579 
HTTPMsgDLi°
* 
msg_li°


582 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

583 
	`as£π
(
c⁄n
 !
NULL
 && 
msg_li°
 != NULL);

585 
WrôeCtxt
* 
˘xt
 = &(
c⁄n
->
w_˘xt
);

586 
HTTPMsg
* 
msg
 = 
NULL
;

588 !(
˘xt
->
is_wrôe_blocked
Ë&& (
msg
 = 
	`gëHTTPMsgDLi°Hód
(
msg_li°
))) {

589 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_RESP_COMPLETE
) {

590 
h_size
 = 
msg
->
ª•⁄£
.
hódî
.
size
;

591 
b_size
 = 
msg
->
ª•⁄£
.
body
.
size
;

592 
byãs_to_£nd
 = 
h_size
 + 
b_size
;

593 
boﬁ
 
ªgi°î_wrôe_w©chî
 = 
Ál£
;

595 
˘xt
->
ödex
 = 0;

596 
iovec
* 
vio
 = 
˘xt
->vio;

597 
vio
[0].
iov_ba£
 = 
msg
->
ª•⁄£
.
hódî
.
buf
;

598 
vio
[0].
iov_Àn
 = 
h_size
;

599 i‡(
b_size
 > 0) {

600 
vio
[1].
iov_ba£
 = 
msg
->
ª•⁄£
.
body
.
buf
;

601 
vio
[1].
iov_Àn
 = 
b_size
;

603 #ifde‡
DEBUG


604 
	`Ârötf
(
°dîr
, "\nWrôögÅhêRe•⁄£ :\n%.*s%.*s\n", (Ë
vio
[0].
iov_Àn
, (*Ëvio[0].
iov_ba£
, () vio[1].iov_len, (*) vio[1].iov_base);

606 
nbyãs
 = (
b_size
 > 0)?
	`£ndNëwD©a
(
c⁄n
->
fd
, 
vio
, 2):sendNetwData(conn->fd, vio, 1);

607 
nbyãs
) {

614 
should_∑r£
 = 1;

646 
ªgi°î_wrôe_w©chî
 = 
åue
;

651 i‡(
nbyãs
 =
byãs_to_£nd
) {

652 
	`ªmoveHTTPMsg
(
msg_li°
, 
msg
);

653 
	`de°royHTTPMsg
(
msg
);

654 #ifde‡
DEBUG


655 
	`Ârötf
(
°dîr
, "\nDEBUGÑe•⁄£ hâ∞msg wrôã¿⁄ fd = %d %s:%d\n", 
c⁄n
->
fd
, 
__FILE__
, 
__LINE__
);

657 i‡(
c⁄n
->
r_tmr
.
°©e
 =
TIMER_STATE_INIT
) {

658 
	`°¨tTimî
(&(
c⁄n
->
r_tmr
));

661 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

662 
	`as£π
(
nbyãs
 < 
byãs_to_£nd
);

664 i‡(
nbyãs
 >
h_size
) {

665 
˘xt
->
ödex
 = 1;

666 
vio
[1].
iov_ba£
 = 
msg
->
ª•⁄£
.
body
.
buf
 + 
nbyãs
;

667 
vio
[1].
iov_Àn
 -(
nbyãs
 - 
h_size
);

669 
˘xt
->
ödex
 = 0;

670 
vio
[0].
iov_ba£
 = 
msg
->
ª•⁄£
.
hódî
.
buf
 + 
nbyãs
;

671 
vio
[0].
iov_Àn
 -
nbyãs
;

673 
ªgi°î_wrôe_w©chî
 = 
åue
;

677 i‡(
ªgi°î_wrôe_w©chî
) {

681 
	`ev_io_°¨t
(
c⁄n
->
ªa˘‹
->
lo›
, &(c⁄n->
io_ww©chî
));

682 
	`°¨tTimî
(&(
c⁄n
->
w_tmr
));

683 
˘xt
->
is_wrôe_blocked
 = 
åue
;

684 
˘xt
->˘xà(*Ë
msg
;

687 
	`Ârötf
(
°dîr
, "\nERRORÅhêmsg sèã i†nŸ HTTP_MSG_STATE_RESP_COMPLETE %s:%d\n", 
__FILE__
, 
__LINE__
);

691 
	`as£π
(0);

695 
	}
}

698 
HTTPMsg
* 
	$gëHTTPMsg
(

699 
hâp_∑r£r_ty≥
 
ty≥
,

700 
TCPC⁄nInfo
* 
c⁄n


706 
HTTPMsg
* 
msg
 = (HTTPMsg*Ë
	`mÆloc
((HTTPMsg));

707 i‡(
msg
 !
NULL
) {

709 
msg
->
ty≥
 =Åype;

710 
msg
->
c⁄n
 = conn;

714 
msg
->
mëhod
 = 
HTTP_NONE
;

715 
msg
->
°©us_code
 = 0;

716 
msg
->
a˘i⁄s
 = 0;

717 
msg
->
uæ_h™dÀr
 = 
NULL
;

718 
msg
->
°©e
 = 
HTTP_MSG_STATE_INIT
;

727 
	`mem£t
(&(
msg
->
∑r£d_uæ
.
ruæ
), 0, (
DTextBuff
));

728 
	`mem£t
(&(
msg
->
∑r£d_uæ
.
q∑øms
), 0, (
KVPP¨£r
));

729 
	`mem£t
(&(
msg
->
hódîs
), 0, (
KVPAºay
));

730 
	`mem£t
(&(
msg
->
body
), 0, (
DBö¨yBuff
));

731 
	`mem£t
(&(
msg
->
cookõs
), 0, (
KVPP¨£r
));

732 
	`mem£t
(&(
msg
->
ª•⁄£
), 0, (
HTTPRe•⁄£
));

734 
msg
->
√xt
 = 
NULL
;

735 
msg
->
¥ev
 = 
NULL
;

737  
msg
;

738 
	}
}

743 
	$ªmoveHTTPMsg
(

744 
HTTPMsgDLi°
* 
li°
,

745 
HTTPMsg
* 
msg


748 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

749 
	`as£π
(
li°
 !
NULL
 && 
msg
 != NULL);

751 i‡(
li°
->
hód
 =
msg
) {

752 
li°
->
hód
 = 
msg
->
√xt
;

754 
msg
->
¥ev
->
√xt
 = msg->next;

756 i‡(
li°
->
èû
 =
msg
) {

757 
li°
->
èû
 = 
msg
->
¥ev
;

759 
msg
->
√xt
->
¥ev
 = msg->prev;

761 
li°
->
size
 -= 1;

768 
	}
}

770 
HTTPMsg
* 
	$gëHTTPMsgDLi°Hód
(

771 
HTTPMsgDLi°
* 
li°


774 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

775 
	`as£π
(
li°
 !
NULL
);

777  
li°
->
hód
;

778 
	}
}

780 
HTTPMsg
* 
	$ªmoveHTTPMsgDLi°Hód
(

781 
HTTPMsgDLi°
* 
li°


784 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Hód
(
li°
);

785 i‡(
msg
 !
NULL
) {

786 
	`ªmoveHTTPMsg
(
li°
, 
msg
);

788  
msg
;

789 
	}
}

791 
HTTPMsg
* 
	$gëHTTPMsgDLi°Taû
(

792 
HTTPMsgDLi°
* 
li°


795 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

796 
	`as£π
(
li°
 !
NULL
 &&Üi°->
èû
 != NULL);

798  
li°
->
èû
;

799 
	}
}

805 
HTTPMsg
* 
	$gëNextHTTPMsg
(

806 
HTTPMsgDLi°
* 
li°


809 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

810 
	`as£π
(
li°
 !
NULL
);

812 
HTTPMsg
* 
msg
 = 
li°
->
√xt_msg
;

816 i‡(
msg
 !
NULL
 && msg->
°©e
 =
HTTP_MSG_STATE_REQ_COMPLETE
) {

817  
msg
;

819  
NULL
;

820 
	}
}

825 
	$⁄HTTPReqMsgBegö
(

826 
hâp_∑r£r
* 
p


829 #ifde‡
DEBUG


830 
	`Ârötf
(
°dîr
, "\n***MESSAGE BEGIN*** %s:%d\n", 
__FILE__
, 
__LINE__
);

832 
ªt
 = 0;

839 
p
->
mëhod
) {

840 
HTTP_HEAD
:

841 
HTTP_POST
:

842 
HTTP_GET
:

845 
ªt
 = 
ERR_HTTP_METHOD_NOT_IMPLEMENTED
;

846 
END
;

850 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

851 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

853 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

854 
	`as£π
(
°©e
 =
HTTP_MSG_STATE_NONE
 || sèã =
HTTP_MSG_STATE_REQ_COMPLETE
);

860 i‡(
°©e
 !
HTTP_MSG_STATE_NONE
 && sèã !
HTTP_MSG_STATE_REQ_COMPLETE
) {

864 
	`as£π
(0);

865 
END
;

871 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsg
(
HTTP_REQUEST
, 
c⁄n
);

872 i‡(
msg
 =
NULL
) {

873 #ifde‡
DEBUG


874 
	`Ârötf
(
°dîr
, "\nERROR gëHTTPMsg(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

876 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

881 
	`ö£πHTTPMsgAtTaû
(
li°
, 
msg
);

882 
msg
->
°©e
 = 
HTTP_MSG_STATE_PARSING_METHOD
;

884  
ªt
;

885 
	}
}

890 
	$⁄HTTPResSètus
(

891 
hâp_∑r£r
* 
p
,

892 c⁄° * 
©
,

893 
size_t
 
Àngth


896 (Ë
p
;

897 (Ë
©
;

898 (Ë
Àngth
;

899 
	`Ârötf
(
°dîr
, "\n***MESSAGE Status***\n\n");

901 
	}
}

911 
	$⁄HTTPReqURL
(

912 
hâp_∑r£r
* 
p
,

913 c⁄° * 
©
,

914 
size_t
 
Àn


918 #ifde‡
DEBUG


919 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqURL(Ëövoked wôh %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

922 
ªt
 = 0;

924 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

925 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

926 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

927 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

928 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

929 
	`as£π
(
msg
 !
NULL
);

930 
	`as£π
(
°©e
 =
HTTP_MSG_STATE_PARSING_METHOD
 || sèã =
HTTP_MSG_STATE_PARSING_URL
);

933 
°©e
) {

934 
HTTP_MSG_STATE_PARSING_METHOD
:

942 
hâp_mëhod
 
m
 = (hâp_mëhodË
p
->
mëhod
;

943 
m
) {

944 
HTTP_HEAD
:

945 
HTTP_POST
:

946 
HTTP_GET
:

948 
msg
->
mëhod
 = 
m
;

952 
ªt
 = 
ERR_HTTP_METHOD_NOT_IMPLEMENTED
;

953 
END
;

955 
°©e
 = 
HTTP_MSG_STATE_PARSED_METHOD
;

960 
HTTP_MSG_STATE_PARSED_METHOD
:

965 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

966 
	`as£π
(
msg
->
∑r£d_uæ
.
ruæ
.
buf
 =
NULL
);

967 
	`as£π
(
g_höt_uæ_size
 > 0);

969 * 
uæ
 = 
NULL
;

970 
max_size
 = 0;

971 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
uæ
, 0, &
max_size
, (Ë
Àn
, 
g_höt_uæ_size
, 
åue
);

972 i‡(
ªt
 != 0) {

973 
END
;

976 
max_size
 = (Ë((Ë
Àn
 + 1 < 
g_höt_uæ_size
)? 
	`√xtPowîOf2
(g_hint_url_size):nextPowerOf2(len + 1);

977 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

978 
	`as£π
(
max_size
 >(Ë
Àn
 + 1 && max_sizê>
g_höt_uæ_size
);

980 * 
uæ
 = 
	`mÆloc
(
max_size
 * ());

981 i‡(
uæ
 =
NULL
) {

982 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

983 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

985 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

986 
END
;

992 
	`mem˝y
(
uæ
, 
©
, 
Àn
);

998 
uæ
[
Àn
] = '\0';

1000 
msg
->
∑r£d_uæ
.
ruæ
.
buf
 = 
uæ
;

1001 
msg
->
∑r£d_uæ
.
ruæ
.
max_size
 = max_size;

1002 
msg
->
∑r£d_uæ
.
ruæ
.
size
 = 
Àn
;

1004 
°©e
 = 
HTTP_MSG_STATE_PARSING_URL
;

1009 
HTTP_MSG_STATE_PARSING_URL
:

1014 
max_size
 = 
msg
->
∑r£d_uæ
.
ruæ
.max_size;

1015 
size
 = 
msg
->
∑r£d_uæ
.
ruæ
.size;

1016 * 
uæ
 = 
msg
->
∑r£d_uæ
.
ruæ
.
buf
;

1017 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
uæ
, 
size
, &
max_size
, (Ë
Àn
, 0, 
åue
);

1018 i‡(
ªt
 != 0) {

1019 
END
;

1022 
avaûabÀ_•a˚
 = 
max_size
 - 
size
;

1023 i‡((Ë
Àn
 >
avaûabÀ_•a˚
) {

1028 
•a˚_ªquúed
 = 
Àn
 - 
avaûabÀ_•a˚
 + 1;

1029 
tmp_max_size
 = 
max_size
 * 2;

1030 
tmp_√w_size
 = 
max_size
 + 
•a˚_ªquúed
;

1034 
max_size
 = (
tmp_max_size
 >
tmp_√w_size
)?tmp_max_size:(Ë
	`√xtPowîOf2
(tmp_new_size);

1035 * 
ãmp
 = 
	`ªÆloc
(
uæ
, 
max_size
 * ());

1036 i‡(
ãmp
 =
NULL
) {

1042 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1043 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1045 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1046 
END
;

1048 
uæ
 = 
ãmp
;

1056 
	`mem˝y
(
uæ
 + 
size
, 
©
, 
Àn
);

1057 
size
 +
Àn
;

1058 
uæ
[
size
] = '\0';

1064 
msg
->
∑r£d_uæ
.
ruæ
.
buf
 = 
uæ
;

1065 
msg
->
∑r£d_uæ
.
ruæ
.
max_size
 = max_size;

1066 
msg
->
∑r£d_uæ
.
ruæ
.
size
 = size;

1074 
	`as£π
(0);

1077 
END
:

1078 
msg
->
°©e
 = state;

1079  
ªt
;

1080 
	}
}

1090 
	$⁄HTTPReqHódîFõld
(

1091 
hâp_∑r£r
* 
p
,

1092 c⁄° * 
©
,

1093 
size_t
 
Àn


1096 #ifde‡
DEBUG


1097 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîFõld(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1099 
ªt
 = 0;

1100 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1101 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1102 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

1103 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1104 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1106 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1110 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_PARSED_URL
 || sèã =
HTTP_MSG_STATE_PARSING_URL
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 || sèã =
HTTP_MSG_STATE_PARSING_BODY
 || sèã =
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
));

1114 
REEXECUTE
:

1115 
°©e
) {

1116 
HTTP_MSG_STATE_PARSING_URL
:

1122 
size
 = 
msg
->
∑r£d_uæ
.
ruæ
.size;

1123 * 
uæ
 = 
msg
->
∑r£d_uæ
.
ruæ
.
buf
;

1125 
hâp_∑r£r_uæ
* 
puæ
 = &(
msg
->
∑r£d_uæ
.purl);

1127 
ªt
 = 
	`hâp_∑r£r_∑r£_uæ
(
uæ
, 
size
, 0, 
puæ
);

1128 i‡(
ªt
 != 0) {

1129 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1130 
	`Ârötf
(
°dîr
, "\nERROR Uæ: %†couldÇŸ bê∑r£d %s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

1132 
ªt
 = 
ERR_HTTP_PARSER
;

1133 
END
;

1136 
uöt16_t
 
fõld_£t
 = 
puæ
->field_set;

1137 i‡(
fõld_£t
 & (1<<
UF_PATH
)) {

1143 
uöt16_t
 
off
 = 
puæ
->
fõld_d©a
[
UF_PATH
].off;

1144 
uöt16_t
 
Àngth
 = 
puæ
->
fõld_d©a
[
UF_PATH
].
Àn
;

1151 
Ró˘‹
* 
πr
 = 
c⁄n
->
ªa˘‹
;

1152 
uöt8_t
 
a˘i⁄s
 = 
	`gëA˘i⁄sAndURLH™dÀr
(
πr
->
uæ_h™dÀr_öfo
,Ñå->
n_uæ_h™dÀrs
, 
uæ
 + 
off
, 
Àngth
, &(
msg
->
uæ_h™dÀr
), &(msg->
≠p_d©a
));

1153 
msg
->
a˘i⁄s
 =áctions;

1154 i‡((
a˘i⁄s
 & 
HTTP_PARSE_QUERY_PARAMS
Ë&& (
fõld_£t
 & (1<<
UF_QUERY
))) {

1159 
off
 = 
puæ
->
fõld_d©a
[
UF_QUERY
].off;

1160 
Àngth
 = 
puæ
->
fõld_d©a
[
UF_QUERY
].
Àn
;

1162 
KVPP¨£r
* 
q∑øms
 = &(
msg
->
∑r£d_uæ
.qparams);

1163 
q∑øms
->
buf
 = 
uæ
 + 
off
;

1164 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1165 
	`as£π
(
g_höt_n_q∑øms
 > 0);

1167 
ªt
 = 
	`∑r£KVPBuf„r
(
q∑øms
, '&', '=', 
Ál£
, 
g_höt_n_q∑øms
);

1168 i‡(
ªt
 != 0) {

1169 
	`Ârötf
(
°dîr
, "\nERRORÖ¨sögÅhêquîy såög f‹ Uæ: %†%s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

1170 
END
;

1172 #ifde‡
DEBUG


1173 
	`¥ötS‹ãdQuîyP¨ms
(
q∑øms
->
buf
, q∑øms->
kv∑ºay
, 0, q∑øms->
size
 - 1);

1177 
ªt
 = 
ERR_HTTP_PARSER
;

1178 
	`Ârötf
(
°dîr
, "\nERROR Uæ: %†d€¢'àhavêUF_PATH së %s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

1179 
END
;

1181 
°©e
 = 
HTTP_MSG_STATE_PARSED_URL
;

1182 
REEXECUTE
;

1185 
HTTP_MSG_STATE_PARSING_BODY
:

1190 
°©e
 = 
HTTP_MSG_STATE_PARSED_BODY
;

1191 
REEXECUTE
;

1194 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1195 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1204 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0;

1205 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0;

1209 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1210 
hódîs
->
size
 += 1;

1212 
°©e
) {

1213 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1215 
°©e
 = 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
;

1218 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1220 
°©e
 = 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
;

1225 
	`as£π
(0);

1228 
REEXECUTE
;

1231 
HTTP_MSG_STATE_PARSED_URL
:

1232 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
:

1233 
HTTP_MSG_STATE_PARSED_BODY
:

1234 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
:

1240 i‡(
msg
->
a˘i⁄s
 & 
HTTP_PARSE_HEADERS
) {

1241 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1242 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1243 
max_size
 = 
hódîs
->max_size;

1244 
size
 = 
hódîs
->size;

1246 i‡(
size
 >
max_size
) {

1247 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1248 
	`as£π
(
g_höt_n_hódîs
 > 0);

1250 
max_size
 = (max_sizê=0)? (Ë
	`√xtPowîOf2
(
g_höt_n_hódîs
):(max_size * 2);

1251 
KeyVÆuePaú
* 
ãmp
 = 
NULL
;

1252 
ãmp
 = (
KeyVÆuePaú
*Ë
	`ªÆloc
(
kv∑ºay
, 
max_size
 * (KeyValuePair));

1253 i‡(
ãmp
 =
NULL
) {

1259 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1260 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1261 
END
;

1263 
kv∑ºay
 = 
ãmp
;

1265 
hódîs
->
kv∑ºay
 = kvparray;

1266 
hódîs
->
max_size
 = max_size;

1269 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1274 
kvp
->
key
 = 
NULL
;

1275 
kvp
->
vÆue
 = 
NULL
;

1281 
key_size
 = 0;

1282 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&(
kvp
->
key
), 0, &
key_size
, (Ë
Àn
, 0, 
åue
);

1283 i‡(
ªt
 != 0) {

1284 
END
;

1288 
key_size
 = (Ë
	`√xtPowîOf2
(
Àn
 + 1);

1289 
kvp
->
key
 = (*Ë
	`mÆloc
((Ë* 
key_size
);

1290 i‡(
kvp
->
key
 =
NULL
) {

1291 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1292 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1293 
END
;

1299 
	`mem˝y
(
kvp
->
key
, 
©
, 
Àn
);

1300 
kvp
->
key
[
Àn
] = '\0';

1301 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
Àn
;

1302 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
key_size
;

1307 #ifde‡
DEBUG


1308 
	`Ârötf
(
°dîr
, "\nDEBUG Hódî P¨sög f‹ %.*†i†nŸ së %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1310 
END
;

1312 
°©e
)

1314 
HTTP_MSG_STATE_PARSED_URL
:

1315 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
:

1317 
°©e
 = 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
;

1320 
HTTP_MSG_STATE_PARSED_BODY
:

1321 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
:

1323 
°©e
 = 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
;

1328 
	`as£π
(0);

1333 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1334 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1341 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1342 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1343 
size
 = 
hódîs
->size;

1345 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1347 
key_max_size
 = 
∑r£r
->
˘xt_œ°_hódî_max_size
;

1348 
key_size_c›õd
 = 
∑r£r
->
˘xt_œ°_hódî_c›õd
;

1350 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&(
kvp
->
key
), 
key_size_c›õd
, &
key_max_size
, (Ë
Àn
, 0, 
åue
);

1351 i‡(
ªt
 != 0) {

1352 
END
;

1355 
avaûabÀ_•a˚
 = 
key_max_size
 - 
key_size_c›õd
;

1357 i‡((Ë
Àn
 >
avaûabÀ_•a˚
) {

1361 
•a˚_ªquúed
 = 
Àn
 - 
avaûabÀ_•a˚
 + 1;

1362 
tmp_max_size
 = 
key_max_size
 * 2;

1363 
tmp_√w_size
 = 
key_max_size
 + 
•a˚_ªquúed
;

1367 
key_max_size
 = (
tmp_max_size
 >
tmp_√w_size
)?tmp_max_size:(Ë
	`√xtPowîOf2
(tmp_new_size);

1369 * 
ãmp
 = 
NULL
;

1370 
ãmp
 = (*Ë
	`ªÆloc
(
kvp
->
key
, (Ë* 
key_max_size
);

1371 i‡(
ãmp
 =
NULL
) {

1376 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1377 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1378 
END
;

1380 
kvp
->
key
 = 
ãmp
;

1388 
	`mem˝y
(
kvp
->
key
 + 
key_size_c›õd
, 
©
, 
Àn
);

1390 
key_size_c›õd
 +
Àn
;

1392 
kvp
->
key
[
key_size_c›õd
] = '\0';

1397 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
key_size_c›õd
;

1398 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
key_max_size
;

1405 
	`as£π
(0);

1408 
END
:

1409 
msg
->
°©e
 = state;

1410  
ªt
;

1411 
	}
}

1421 
	$⁄HTTPReqHódîVÆue
(

1422 
hâp_∑r£r
* 
p
,

1423 c⁄° * 
©
,

1424 
size_t
 
Àn


1427 #ifde‡
DEBUG


1428 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîVÆue(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1430 
ªt
 = 0;

1431 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1432 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1433 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

1434 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1435 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1437 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1441 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_PARSED_URL
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 || sèã =
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
));

1445 
°©e
) {

1447 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1448 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1457 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0;

1458 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0;

1460 
°©e
) {

1461 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1463 
°©e
 = 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
;

1466 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1468 
°©e
 = 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
;

1473 
	`as£π
(0);

1481 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
:

1482 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
:

1488 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1489 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1490 
size
 = 
hódîs
->size;

1492 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1499 
vÆue_size
 = 0;

1500 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&(
kvp
->
vÆue
), 0, &
vÆue_size
, (Ë
Àn
, 0, 
åue
);

1501 i‡(
ªt
 != 0) {

1502 
END
;

1505 
vÆue_size
 = (Ë
	`√xtPowîOf2
(
Àn
 + 1);

1506 
kvp
->
vÆue
 = (*Ë
	`mÆloc
((Ë* 
vÆue_size
);

1507 i‡(
kvp
->
vÆue
 =
NULL
) {

1508 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1509 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1510 
END
;

1516 
	`mem˝y
(
kvp
->
vÆue
, 
©
, 
Àn
);

1517 
kvp
->
vÆue
[
Àn
] = '\0';

1518 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
Àn
;

1519 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
vÆue_size
;

1521 
°©e
)

1523 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
:

1525 
°©e
 = 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
;

1528 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
:

1530 
°©e
 = 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
;

1535 
	`as£π
(0);

1541 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1542 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1549 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1550 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1551 
size
 = 
hódîs
->size;

1553 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1555 
vÆue_max_size
 = 
∑r£r
->
˘xt_œ°_hódî_max_size
;

1556 
vÆue_size_c›õd
 = 
∑r£r
->
˘xt_œ°_hódî_c›õd
;

1558 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&(
kvp
->
vÆue
), 
vÆue_size_c›õd
, &
vÆue_max_size
, (Ë
Àn
, 0, 
åue
);

1559 i‡(
ªt
 != 0) {

1560 
END
;

1563 
avaûabÀ_•a˚
 = 
vÆue_max_size
 - 
vÆue_size_c›õd
;

1565 i‡((Ë
Àn
 >
avaûabÀ_•a˚
) {

1573 
•a˚_ªquúed
 = 
Àn
 - 
avaûabÀ_•a˚
 + 1;

1574 
tmp_max_size
 = 
vÆue_max_size
 * 2;

1575 
tmp_√w_size
 = 
vÆue_max_size
 + 
•a˚_ªquúed
;

1579 
vÆue_max_size
 = (
tmp_max_size
 >
tmp_√w_size
)?tmp_max_size:(Ë
	`√xtPowîOf2
(tmp_new_size);

1581 * 
ãmp
 = 
NULL
;

1582 
ãmp
 = (*Ë
	`ªÆloc
(
kvp
->
vÆue
, (Ë* 
vÆue_max_size
);

1583 i‡(
ãmp
 =
NULL
) {

1588 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1589 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1590 
END
;

1592 
kvp
->
vÆue
 = 
ãmp
;

1600 
	`mem˝y
(
kvp
->
vÆue
 + 
vÆue_size_c›õd
, 
©
, 
Àn
);

1602 
vÆue_size_c›õd
 +
Àn
;

1604 
kvp
->
vÆue
[
vÆue_size_c›õd
] = '\0';

1609 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
vÆue_size_c›õd
;

1610 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
vÆue_max_size
;

1616 
HTTP_MSG_STATE_PARSED_URL
:

1618 
END
;

1626 
	`as£π
(0);

1630 
END
:

1631 
msg
->
°©e
 = state;

1632  
ªt
;

1633 
	}
}

1642 
	$⁄HTTPReqHódîsCom∂ëe
(

1643 
hâp_∑r£r
* 
p


1646 #ifde‡
DEBUG


1647 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîsCom∂ëe(Ëövoked *** %s:%d\n", 
__FILE__
, 
__LINE__
);

1649 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1650 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1652 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

1653 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1654 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1658 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_PARSED_URL
 || msg->°©ê=
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 || msg->°©ê=
HTTP_MSG_STATE_PARSING_URL
));

1660 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
) {

1664 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1665 
hódîs
->
size
 += 1;

1668 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0;

1669 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0;

1670 
msg
->
°©e
 = 
HTTP_MSG_STATE_HEADERS_COMPLETE
;

1672 
	}
}

1681 
	$⁄HTTPReqBody
(

1682 
hâp_∑r£r
* 
p
,

1683 c⁄° * 
©
,

1684 
size_t
 
Àn


1687 #ifde‡
DEBUG


1688 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqBody(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1690 
ªt
 = 0;

1691 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1692 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

1693 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1694 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1696 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1701 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_HEADERS_COMPLETE
 || sèã =
HTTP_MSG_STATE_PARSING_BODY
 || sèã =
HTTP_MSG_STATE_PARSING_URL
));

1704 
°©e
) {

1705 
HTTP_MSG_STATE_PARSING_URL
:

1706 
HTTP_MSG_STATE_HEADERS_COMPLETE
:

1708 
°©e
 = 
HTTP_MSG_STATE_PARSING_BODY
;

1713 
HTTP_MSG_STATE_PARSING_BODY
:

1715 
DBö¨yBuff
* 
body
 = &(
msg
->body);

1716 * 
buf
 = 
body
->buf;

1717 
size
 = 
body
->size;

1718 
max_size
 = 
body
->max_size;

1720 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
buf
, 
size
, &
max_size
, (Ë
Àn
, 
g_höt_ªq_body_size
, 
åue
);

1721 i‡(
ªt
 != 0) {

1722 
END
;

1725 
avaûabÀ_•a˚
 = 
max_size
 - 
size
;

1727 i‡((Ë
Àn
 >
avaûabÀ_•a˚
) {

1732 
•a˚_ªquúed
 = 
Àn
 - 
avaûabÀ_•a˚
 + 1;

1733 
tmp_max_size
 = 
max_size
 * 2;

1734 
tmp_√w_size
 = 
max_size
 + 
•a˚_ªquúed
;

1739 
max_size
 = (max_sizê=0)? (Ë
	`√xtPowîOf2
((Ë
Àn
 + 1 > 
g_höt_ªq_body_size
?(ËÀ¿+ 1:g_höt_ªq_body_size): (
tmp_max_size
 >
tmp_√w_size
)?tmp_max_size:()ÇextPowerOf2(tmp_new_size);

1741 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1746 
	`as£π
(
max_size
 >(Ë
Àn
 + 1 && max_sizê>
g_höt_ªq_body_size
);

1748 * 
ãmp
 = 
NULL
;

1749 
ãmp
 = (*Ë
	`ªÆloc
(
buf
, 
max_size
 * ());

1750 i‡(
ãmp
 =
NULL
) {

1756 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1757 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1758 
END
;

1760 
buf
 = 
ãmp
;

1761 
body
->
buf
 = buf;

1762 
body
->
max_size
 = max_size;

1765 
	`mem˝y
(
buf
 + 
size
, 
©
, 
Àn
);

1766 
size
 +
Àn
;

1767 
buf
[
size
] = '\0';

1772 
body
->
buf
 = buf;

1773 
body
->
max_size
 = max_size;

1774 
body
->
size
 = size;

1782 
	`as£π
(0);

1785 
END
:

1786  
ªt
;

1787 
	}
}

1793 
	$⁄HTTPReqMsgCom∂ëe
(

1794 
hâp_∑r£r
* 
p


1797 #ifde‡
DEBUG


1798 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqMsgCom∂ëe(Ëövoked *** %s:%d\n", 
__FILE__
, 
__LINE__
);

1800 
ªt
 = 0;

1801 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1802 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

1803 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1805 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1806 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1811 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_HEADERS_COMPLETE
 || sèã =
HTTP_MSG_STATE_PARSING_BODY
 || sèã =
HTTP_MSG_STATE_PARSING_URL
));

1814 
msg
->
°©e
 = 
HTTP_MSG_STATE_REQ_COMPLETE
;

1816 
uöt8_t
 
a˘i⁄s
 = 
msg
->actions;

1817 i‡(
a˘i⁄s
 & 
HTTP_PARSE_HEADERS
) {

1818 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1819 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1820 
size
 = 
hódîs
->size;

1821 i‡(
size
 > 1) {

1822 
	`qs‹t
(
kv∑ºay
, 
size
, (
KeyVÆuePaú
), 
s‹tHTTPHódîs
);

1823 #ifde‡
DEBUG


1824 
	`¥ötS‹ãdHTTPHódîs
(
kv∑ºay
, 0, 
size
 - 1);

1827 i‡(
a˘i⁄s
 & 
HTTP_PARSE_COOKIES
) {

1828 * 
cookõ_hódî_vÆue
 = 
	`£¨chHódî
(
kv∑ºay
, 0, 
size
 - 1, "Cookie");

1829 i‡(
cookõ_hódî_vÆue
 !
NULL
) {

1830 
KVPP¨£r
* 
cookõs
 = &(
msg
->cookies);

1831 
cookõs
->
buf
 = 
cookõ_hódî_vÆue
;

1832 
ªt
 = 
	`∑r£KVPBuf„r
(
cookõs
, ';', '=', 
åue
, 
g_höt_n_cookõs
);

1833 i‡(
ªt
 != 0) {

1834 
	`Ârötf
(
°dîr
, "\nERRORÖ¨sögÅhêcookõ_hódî_vÆuêf‹ cookõ†: %†%s:%d\n", 
cookõs
->
buf
, 
__FILE__
, 
__LINE__
);

1835 
END
;

1837 #ifde‡
DEBUG


1838 
	`¥ötCookõs
(
cookõs
->
buf
, cookõs->
kv∑ºay
, 0, cookõs->
size
 -1);

1844 
ªt
 = 
	`hâp_should_kìp_Æive
(
p
);

1845 i‡(
ªt
 == 0) {

1855 
	`hâp_∑r£r_∑u£
(
p
, 1);

1856 
msg
->
a˘i⁄s
 |
SEND_CONNECTION_CLOSE_HEADER
;

1858 
ªt
 = 0;

1860 
END
:

1861  
ªt
;

1862 
	}
}

1864 
	$öôTCPC⁄nBuff
(

1865 
DBö¨yBuff
* 
d©a
,

1866 
max_size


1869 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1870 
	`as£π
(
d©a
 !
NULL
 && 
max_size
 > 0);

1873 
ªt
 = 0;

1875 
d©a
->
buf
 = (*Ë
	`mÆloc
((Ë* 
max_size
);

1876 i‡(
d©a
->
buf
 =
NULL
) {

1877 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1879 
d©a
->
max_size
 = max_size;

1880 
d©a
->
size
 = 0;

1882  
ªt
;

1883 
	}
}

1891 
TCPC⁄nInfo
* 
	$TCPC⁄nInô
(

1892 
fd
,

1893 
r_buf_size
,

1895 
r_timeout
,

1896 
w_timeout
,

1899 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
,

1900 * 
∑r£r
,

1901 
Ró˘‹
* 
ªa˘‹
,

1902 
FPTRIOCB
 
io_rcb
,

1903 
FPTRIOCB
 
io_wcb
,

1904 
FPTRTimeoutCB
 
r_timeout_cb
,

1905 
FPTRTimeoutCB
 
w_timeout_cb


1909 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1910 
	`as£π
(
fd
 >0 && 
r_buf_size
 > 0 && 
r_timeout
 > 0 && 
w_timeout
 > 0 && 
ªa˘‹
 !
NULL
 &&Ñó˘‹->
lo›
 !NULL && 
io_rcb
 !NULL && 
io_wcb
 !NULL && 
r_timeout_cb
 !NULL && 
w_timeout_cb
 !NULL && 
∑r£r
 != NULL);

1916 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
	`mÆloc
((TCPConnInfo));

1917 i‡(
c⁄n
 =
NULL
) {

1918 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1919 
END
;

1921 #ifde‡
__˝lu•lus


1924 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1925 
î∫o
 = 0;

1927 
c⁄n
->
fd
 = fd;

1928 
c⁄n
->
ªa˘‹
 =Ñeactor;

1935 
sockaddr_°‹age
 
addr
;

1936 
sockÀn_t
 
Àn
 = (
addr
);

1938 #ifde‡
DEBUG


1939 
ù°r
[
INET6_ADDRSTRLEN
];

1942 i‡(
	`gë≥î«me
(
fd
, (
sockaddr
*Ë&
addr
, &
Àn
) != 0) {

1943 
	`‰ì
(
c⁄n
);

1944 
c⁄n
 = 
NULL
;

1948 
	`Ârötf
(
°dîr
, "\nERROR gë≥î«me(ËÁûed wôhÉºnÿ%d %s:%d", 
î∫o
, 
__FILE__
, 
__LINE__
);

1949 
END
;

1955 i‡(
addr
.
ss_Ámûy
 =
AF_INET
) {

1956 
sockaddr_ö
* 
s
 = (sockaddr_ö*Ë&
addr
;

1957 
c⁄n
->
≥î_addr
.
p‹t
 = 
	`¡ohs
(
s
->
sö_p‹t
);

1958 
c⁄n
->
≥î_addr
.
ù
.
ùv4_addr
 = 
s
->
sö_addr
;

1959 #ifde‡
DEBUG


1960 
	`öë_¡›
(
AF_INET
, &(
c⁄n
->
≥î_addr
.
ù
.
ùv4_addr
), 
ù°r
, (ipstr));

1961 
	`Ârötf
(
°dîr
, "\nDEBUG Pì∏IPáddªss: %†™dÖ‹à%d, %s:%d\n", 
ù°r
, 
c⁄n
->
≥î_addr
.
p‹t
, 
__FILE__
, 
__LINE__
);

1967 
sockaddr_ö6
* 
s
 = (sockaddr_ö6 *Ë&
addr
;

1968 
c⁄n
->
≥î_addr
.
p‹t
 = 
	`¡ohs
(
s
->
sö6_p‹t
);

1969 
c⁄n
->
≥î_addr
.
ù
.
ùv6_addr
 = 
s
->
sö6_addr
;

1970 #ifde‡
DEBUG


1971 
	`öë_¡›
(
AF_INET6
, &(
c⁄n
->
≥î_addr
.
ù
.
ùv6_addr
), 
ù°r
, (ipstr));

1972 
	`Ârötf
(
°dîr
, "\nDEBUG Pì∏IPáddªss: %†™dÖ‹à%d, %s:%d\n", 
ù°r
, 
c⁄n
->
≥î_addr
.
p‹t
, 
__FILE__
, 
__LINE__
);

1981 
c⁄n
->
w_˘xt
.
is_wrôe_blocked
 = 
Ál£
;

1982 
c⁄n
->
w_˘xt
.
˘xt
 = 
NULL
;

1993 
ªt
 = 0;

1995 i‡((
ªt
 = 
	`öôTCPC⁄nBuff
(&(
c⁄n
->
rbuf
), 
r_buf_size
)) != 0) {

2001 
	`Ârötf
(
°dîr
, "\nöôTCPC⁄nBuff(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

2002 
	`‰ì
(
c⁄n
);

2003 
c⁄n
 = 
NULL
;

2004 
END
;

2010 
c⁄n
->
∑r£r
 =Öarser;

2016 
c⁄n
->
∑r£r_ty≥
 =Öarser_type;

2023 
∑r£r_ty≥
) {

2025 
APP_HTTP_PARSER
:

2030 
	`£tHTTPP¨£rC⁄ãxt
((
HTTPP¨£r
*Ë
∑r£r
, (*Ë
c⁄n
);

2036 
c⁄n
->
ö_d©a
 = (*Ë
	`mÆloc
((
HTTPMsgDLi°
));

2037 i‡(
c⁄n
->
ö_d©a
 =
NULL
) {

2038 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

2039 
	`de°royDBö¨yBuff
(&(
c⁄n
->
rbuf
));

2040 
	`‰ì
(
c⁄n
);

2041 
c⁄n
 = 
NULL
;

2042 
END
;

2044 
	`öôHTTPMsgDLi°
((
HTTPMsgDLi°
*Ë
c⁄n
->
ö_d©a
);

2053 
	`as£π
(0);

2060 
	`ev_io_öô
(&(
c⁄n
->
io_rw©chî
), 
io_rcb
, 
fd
, 
EV_READ
);

2065 
	`ev_£t_¥i‹ôy
(&(
c⁄n
->
io_rw©chî
), 1);

2070 
	`ev_io_öô
(&(
c⁄n
->
io_ww©chî
), 
io_wcb
, 
fd
, 
EV_WRITE
);

2076 
	`ev_£t_¥i‹ôy
(&(
c⁄n
->
io_ww©chî
), 1);

2083 i‡((
ªt
 = 
	`öôTimî
(
ªa˘‹
, &(
c⁄n
->
r_tmr
), 
r_timeout_cb
, (*Ëc⁄n, 
r_timeout
)) != 0) {

2084 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2085 
	`Ârötf
(
°dîr
, "\nöôTimî(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

2086 
	`as£π
(0);

2088 
	`de°royHTTPMsgDLi°
((
HTTPMsgDLi°
*Ë
c⁄n
->
ö_d©a
);

2089 
	`de°royDBö¨yBuff
(&(
c⁄n
->
rbuf
));

2090 
	`‰ì
(
c⁄n
);

2091 
c⁄n
 = 
NULL
;

2092 
END
;

2099 i‡((
ªt
 = 
	`öôTimî
(
ªa˘‹
, &(
c⁄n
->
w_tmr
), 
w_timeout_cb
, (*Ëc⁄n, 
w_timeout
)) != 0) {

2100 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2101 
	`Ârötf
(
°dîr
, "\nöôTimî(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

2102 
	`as£π
(0);

2104 
	`de°royHTTPMsgDLi°
((
HTTPMsgDLi°
*Ë
c⁄n
->
ö_d©a
);

2105 
	`de°royDBö¨yBuff
(&(
c⁄n
->
rbuf
));

2106 
	`‰ì
(
c⁄n
);

2107 
c⁄n
 = 
NULL
;

2108 
END
;

2116 
	`ev_io_°¨t
(
ªa˘‹
->
lo›
, &(
c⁄n
->
io_rw©chî
));

2123 
	`°¨tTimî
(&(
c⁄n
->
r_tmr
));

2131 
c⁄n
->
w_tmr
 = 
NULL
;

2133 
c⁄n
->
r_tmr
 = 
NULL
;

2153 #ifde‡
__˝lu•lus


2156 
END
:

2157  
c⁄n
;

2160 
	`de°royTCPC⁄n
(

2161 
TCPC⁄nInfo
* 
c⁄n


2164 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2165 
	`Ârötf
(
°dîr
, "\nDEBUG de°royTCPC⁄n(ËˇŒed f‹ c⁄¿%p, fd %d %s:%d\n", 
c⁄n
, c⁄n->
fd
, 
__FILE__
, 
__LINE__
);

2168 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2169 
î∫o
 = 0;

2174 
c⁄n
->
∑r£r_ty≥
) {

2175 
APP_HTTP_PARSER
:

2177 
	`de°royHTTPP¨£r
((
HTTPP¨£r
*Ë
c⁄n
->
∑r£r
);

2178 
	`de°royHTTPMsgDLi°
((
HTTPMsgDLi°
*Ë
c⁄n
->
ö_d©a
);

2182 
	`as£π
(0);

2187 
	`de°royDBö¨yBuff
(&(
c⁄n
->
rbuf
));

2192 
ev_lo›
* 
lo›
 = 
c⁄n
->
ªa˘‹
->loop;

2196 
	`ev_io_°›
(
lo›
, &(
c⁄n
->
io_rw©chî
));

2202 
	`ev_io_°›
(
lo›
, &(
c⁄n
->
io_ww©chî
));

2206 
	`°›Timî
(&(
c⁄n
->
r_tmr
));

2210 
	`°›Timî
(&(
c⁄n
->
w_tmr
));

2212 i‡(
	`˛o£
(
c⁄n
->
fd
) != 0) {

2213 
	`≥º‹
("\nERROR close() failed");

2214 
	`as£π
(0);

2219 
	`‰ì
(
c⁄n
);

2231 
	`ªadTimeoutCB
(

2232 
Ró˘‹
* 
ªa˘‹
,

2233 
Timî
* 
timî
,

2234 * 
˘xt
,

2235 
ªvíts


2238 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2239 
	`Ârötf
(
°dîr
, "\nDEBUGÑódTimeoutCB(ËˇŒed %s:%d\n", 
__FILE__
, 
__LINE__
);

2240 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

2242 (Ë
ªvíts
;

2245 (Ë
ªa˘‹
;

2246 (Ë
timî
;

2247 
	`de°royTCPC⁄n
((
TCPC⁄nInfo
*Ë
˘xt
);

2261 
	`wrôeTimeoutCB
(

2262 
Ró˘‹
* 
ªa˘‹
,

2263 
Timî
* 
timî
,

2264 * 
˘xt
,

2265 
ªvíts


2268 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2269 
	`Ârötf
(
°dîr
, "\nDEBUG wrôeTimeoutCB(ËˇŒed %s:%d\n", 
__FILE__
, 
__LINE__
);

2270 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

2272 (Ë
ªvíts
;

2275 (Ë
ªa˘‹
;

2276 (Ë
timî
;

2277 
	`de°royTCPC⁄n
((
TCPC⁄nInfo
*Ë
˘xt
);

2281 
	`¥o˚ssHTTPMsgDLi°
(

2282 
HTTPMsgDLi°
* 
li°


2285 
HTTPMsg
* 
msg
 = 
	`gëNextHTTPMsg
(
li°
);

2286 
msg
 !
NULL
) {

2290 
msg
->
°©e
 = 
HTTP_MSG_STATE_HANDLER_INVOKED
;

2291 
li°
->
√xt_msg
 = 
msg
->
√xt
;

2301 
msg
->
	`uæ_h™dÀr
(msg->
c⁄n
->
ªa˘‹
, msg, msg->
≠p_d©a
);

2302 
msg
 = 
	`gëNextHTTPMsg
(
li°
);

2306 
	`¥o˚ssHTTPReqCB
(

2307 
ev_lo›
* 
lo›
,

2308 
ev_io
* 
w
,

2309 
ªvíts


2312 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2313 
	`as£π
(
ªvíts
 & 
EV_READ
);

2314 
	`as£π
(
lo›
 !
NULL
 && 
w
 != NULL);

2316 (Ë
lo›
;

2317 (Ë
ªvíts
;

2322 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë(((*Ë
w
 - 
	`off£tof
(TCPC⁄nInfo, 
io_rw©chî
)));

2323 #ifde‡
DEBUG


2324 
	`Ârötf
(
°dîr
, "\nDEBUG, somêd©®avaûaibÀ o¿fd = %d %s:%d\n", 
c⁄n
->
fd
, 
__FILE__
, 
__LINE__
);

2326 
ªt
 = 0;

2332 
	`°›Timî
(&(
c⁄n
->
r_tmr
));

2338 
nbyãs
 = 
	`ªcvNëwD©a
(
c⁄n
->
fd
, &(c⁄n->
rbuf
));

2340 
should_∑r£
 = 0;

2344 
nbyãs
) {

2351 
should_∑r£
 = 1;

2367 
	`Ârötf
(
°dîr
, "\nERROR FRR %s:%d\n", 
__FILE__
, 
__LINE__
);

2383 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2384 
	`Ârötf
(
°dîr
, "\nDEBUG Clõ¡ clo£d c⁄√˘i⁄, de°royögÅhêc⁄√˘i⁄ c⁄¿%p, fd = %d %s:%d\n", 
c⁄n
, c⁄n->
fd
, 
__FILE__
, 
__LINE__
);

2396 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2397 
	`Ârötf
(
°dîr
, "\nERROR de°royögÅhêTCP c⁄√˘i⁄ sö˚Ñecv(ËÁûed f‹ c⁄√˘i⁄ %p, fd = %d %s:%d\n", 
c⁄n
, c⁄n->
fd
, 
__FILE__
, 
__LINE__
);

2399 
	`de°royTCPC⁄n
(
c⁄n
);

2400 
END
;

2404 
should_∑r£
 = 1;

2408 i‡(
should_∑r£
 == 1) {

2410 c⁄° * 
±r
 = (c⁄° *Ë
c⁄n
->
rbuf
.
buf
;

2412 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2413 
	`as£π
(
nbyãs
 > 0);

2415 #ifde‡
DEBUG


2416 
	`Ârötf
(
°dîr
, "\nDEBUG d©®ªad bef‹êˇŒögÉxecuãHTTPP¨£r(Ë%.*†%s:%d\n", (Ë
nbyãs
, 
±r
, 
__FILE__
, 
__LINE__
);

2419 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

2420 
ªt
 = 
	`execuãHTTPP¨£r
(
∑r£r
, 
±r
, 
nbyãs
, 
c⁄n
);

2421 i‡(
ªt
 != 0) {

2425 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2426 
	`Ârötf
(
°dîr
, "\nERRORÉxecuãHTTPP¨£r(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

2428 
	`de°royTCPC⁄n
(
c⁄n
);

2429 
END
;

2435 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2436 
	`ª£tDBö¨yBuff
(&(
c⁄n
->
rbuf
));

2441 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

2442 
	`¥o˚ssHTTPMsgDLi°
(
li°
);

2451 i‡(
°¨t_ªad_timeout_w©chî
) {

2455 
	`°¨tTimî
(&(
c⁄n
->
r_tmr
));

2458 
END
:

2462 
	`¥o˚ssWrôeRódyCB
(

2463 
ev_lo›
* 
lo›
,

2464 
ev_io
* 
w
,

2465 
ªvíts


2468 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2469 
	`as£π
(
ªvíts
 & 
EV_WRITE
);

2470 
	`as£π
(
lo›
 !
NULL
 && 
w
 != NULL);

2472 (Ë
ªvíts
;

2477 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë(((*Ë
w
 - 
	`off£tof
(TCPC⁄nInfo, 
io_rw©chî
)));

2483 
	`°›Timî
(&(
c⁄n
->
w_tmr
));

2488 
WrôeCtxt
* 
w_˘xt
 = &(
c⁄n
->w_ctxt);

2490 
ödex
 = 
w_˘xt
->index;

2494 
iovec
* 
vio
 = 
w_˘xt
->viÿ+ 
ödex
;

2496 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2497 
	`as£π
(
w_˘xt
->
is_wrôe_blocked
 =
åue
 && (
ödex
 == 0 || index == 1));

2500 
vcou¡
 = 2 - 
ödex
;

2501 * 
l_ba£
 = 
NULL
;

2502 
l_Àn
 = 0;

2503 * 
r_ba£
 = 
NULL
;

2504 
r_Àn
 = 0;

2505 i‡(
vcou¡
 == 2) {

2506 
l_ba£
 = (*Ë
vio
[0].
iov_ba£
;

2507 
l_Àn
 = ()
vio
[0].
iov_Àn
;

2508 
r_ba£
 = (*Ë
vio
[1].
iov_ba£
;

2509 
r_Àn
 = ()
vio
[1].
iov_Àn
;

2511 
r_ba£
 = (*Ë
vio
[1].
iov_ba£
;

2512 
r_Àn
 = ()
vio
[1].
iov_Àn
;

2514 
byãs_to_£nd
 = 
l_Àn
 + 
r_Àn
;

2515 
nbyãs
 = 
	`£ndNëwD©a
(
c⁄n
->
fd
, 
vio
, 
vcou¡
);

2516 
boﬁ
 
°›_wrôe_io_w©chî
 = 
åue
;

2517 
nbyãs
) {

2524 
should_∑r£
 = 1;

2534 
	`≥º‹
("\nERROR writev() failed");

2538 
	`as£π
(0);

2553 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2554 
	`Ârötf
(
°dîr
, "\nERROR FWR %s:%d\n", 
__FILE__
, 
__LINE__
);

2569 
°›_wrôe_io_w©chî
 = 
Ál£
;

2574 i‡(
nbyãs
 =
byãs_to_£nd
) {

2578 
HTTPMsgDLi°
* 
msg_li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
ö_d©a
;

2579 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2580 
	`as£π
(
msg_li°
 !
NULL
);

2582 
HTTPMsg
* 
msg
 = (HTTPMsg*Ë
w_˘xt
->
˘xt
;

2583 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2584 
	`as£π
(
msg
 !
NULL
);

2586 
	`ªmoveHTTPMsg
(
msg_li°
, 
msg
);

2587 
	`de°royHTTPMsg
(
msg
);

2589 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2590 
	`as£π
(
nbyãs
 < 
byãs_to_£nd
);

2592 i‡(
vcou¡
 == 2) {

2593 i‡(
nbyãs
 >
l_Àn
) {

2594 
w_˘xt
->
ödex
 = 1;

2595 
vio
[1].
iov_ba£
 = 
l_ba£
 + 
nbyãs
 - 
l_Àn
;

2596 
vio
[1].
iov_Àn
 -(
nbyãs
 - 
l_Àn
);

2598 
w_˘xt
->
ödex
 = 0;

2599 
vio
[0].
iov_ba£
 = 
l_ba£
 + 
nbyãs
;

2600 
vio
[0].
iov_Àn
 -
nbyãs
;

2602 } i‡(
vcou¡
 == 1) {

2603 
w_˘xt
->
ödex
 = 1;

2604 
vio
[1].
iov_ba£
 = 
r_ba£
 + 
nbyãs
;

2605 
vio
[1].
iov_Àn
 -
nbyãs
;

2607 
	`as£π
(0);

2609 
°›_wrôe_io_w©chî
 = 
Ál£
;

2614 i‡(
°›_wrôe_io_w©chî
) {

2618 
	`ev_io_°›
(
lo›
, &(
c⁄n
->
io_ww©chî
));

2619 
w_˘xt
->
is_wrôe_blocked
 = 
Ál£
;

2624 
	`°¨tTimî
(&(
c⁄n
->
w_tmr
));

2625 
w_˘xt
->
is_wrôe_blocked
 = 
åue
;

2635 c⁄° * 
	`gëHTTPMsgQP¨am
(

2636 
HTTPMsg
* 
msg
,

2637 c⁄° * 
∑øm


2640 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2641 
	`as£π
(
msg
 !
NULL
 && 
∑øm
 != NULL &&Öaram[0] != '\0');

2643 
KVPP¨£r
* 
q∑øms
 = &(
msg
->
∑r£d_uæ
.qparams);

2644 
Off£tPaú
* 
kv∑ºay
 = 
q∑øms
->kvparray;

2645 c⁄° * 
ªsu…
 = 
	`£¨chQP¨am
(
q∑øms
->
buf
, 
kv∑ºay
, 0, q∑øms->
size
 - 1, 
∑øm
);

2646  
ªsu…
;

2649 c⁄° * 
	`gëHTTPMsgHódî
(

2650 
HTTPMsg
* 
msg
,

2651 c⁄° * 
hódî_«me


2654 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2655 
	`as£π
(
msg
 !
NULL
 && 
hódî_«me
 != NULL && header_name[0] != '\0');

2657 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

2658 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

2659 
size
 = 
hódîs
->size;

2660 * 
ªsu…
 = 
	`£¨chHódî
(
kv∑ºay
, 0, 
size
 - 1, 
hódî_«me
);

2661  
ªsu…
;

2664 c⁄° * 
	`gëHTTPMsgCookõ
(

2665 
HTTPMsg
* 
msg
,

2666 c⁄° * 
cookõ_«me


2669 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2670 
	`as£π
(
msg
 !
NULL
 && 
cookõ_«me
 != NULL && cookie_name[0] != '\0');

2672 
KVPP¨£r
* 
cookõs
 = &(
msg
->cookies);

2673 
Off£tPaú
* 
kv∑ºay
 = 
cookõs
->kvparray;

2674 * 
buf
 = 
cookõs
->buf;

2675 
size
 = 
cookõs
->size;

2676 * 
ªsu…
 = 
	`£¨chCookõ
(
buf
, 
kv∑ºay
, 0, 
size
 - 1, 
cookõ_«me
);

2677  
ªsu…
;

2682 * 
	`gëHTTPMsgBody
(

2683 
HTTPMsg
* 
msg
,

2684 * 
Àn


2687 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2688 
	`as£π
(
msg
 !
NULL
);

2690 
DBö¨yBuff
* 
body
 = &(
msg
->body);

2691 *
Àn
 = 
body
->
size
;

2692  
body
->
buf
;

2699 
	`wrôeHTTPHdrI¡î«l
(

2700 
HTTPMsg
* 
msg
,

2701 c⁄° * 
§c
,

2702 
Àn


2705 
ªt
 = 0;

2706 
HTTPRe•⁄£
* 
ª•⁄£
 = &(
msg
->response);

2707 
DTextBuff
* 
hódî
 = &(
ª•⁄£
->header);

2708 * 
buf
 = 
hódî
->buf;

2709 
size
 = 
hódî
->size;

2710 
max_size
 = 
hódî
->max_size;

2712 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
buf
, 
size
, &
max_size
, (Ë
Àn
, 
g_höt_ªs_hódî_size
, 
åue
);

2713 i‡(
ªt
 != 0) {

2714 
END
;

2717 
	`mem˝y
(
buf
 + 
size
, 
§c
, 
Àn
);

2718 
size
 +
Àn
;

2722 
hódî
->
buf
 = buf;

2723 
hódî
->
max_size
 = max_size;

2724 
hódî
->
size
 = size;

2725 
END
:

2726  
ªt
;

2730 
	`wrôeHTTPSètus
(

2731 
HTTPMsg
* 
msg
,

2732 
uöt16_t
 
°©us


2735 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2736 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
 || msg->°©ê=
HTTP_MSG_STATE_ERR
));

2738 
ªt
 = 0;

2739 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_TCP_CONN_CLOSED
) {

2740 
ªt
 = 
ERR_HTTP_MSG_WRITE_REDUNDANT
;

2742 
msg
->
ª•⁄£
.
°©us
 = status;

2743 
°©us
) {

2746 
ªt
 = 
	`wrôeHTTPHdrI¡î«l
(
msg
, 
HTTP_200_OK
, (HTTP_200_OK) - 1);

2747 i‡(
ªt
 != 0) {

2748 
msg
->
°©e
 = 
HTTP_MSG_STATE_ERR_NON_RECOVERABLE
;

2754 
ªt
 = 
	`wrôeHTTPHdrI¡î«l
(
msg
, 
HTTP_500_INTERNAL_ERROR
, (HTTP_500_INTERNAL_ERROR) - 1);

2755 i‡(
ªt
 != 0) {

2756 
msg
->
°©e
 = 
HTTP_MSG_STATE_ERR_NON_RECOVERABLE
;

2762 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2763 
	`Ârötf
(
°dîr
, "\nERROR Unknow¿HTTP Re•⁄£ Codê%d %s:%d\n", 
°©us
, 
__FILE__
, 
__LINE__
);

2765 
	`as£π
(0);

2769  
ªt
;

2774 
	`•rötfHTTPHdr
(

2775 
HTTPMsg
* 
msg
,

2776 c⁄° * 
fmt
,

2780 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2781 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
 || msg->°©ê=
HTTP_MSG_STATE_ERR
Ë&& 
fmt
 != NULL);

2783 
ªt
 = 0;

2785 
va_li°
 
≠
;

2787 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_ERR
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
) {

2788 
ªt
 = 
ERR_HTTP_MSG_WRITE_REDUNDANT
;

2790 
HTTPRe•⁄£
* 
ª•⁄£
 = &(
msg
->response);

2791 
DTextBuff
* 
hódî
 = &(
ª•⁄£
->header);

2792 * 
buf
 = 
hódî
->buf;

2793 
size
 = 
hódî
->size;

2794 
max_size
 = 
hódî
->max_size;

2796 
•a˚_À·
 = 
max_size
 - 
size
;

2801 
Àn
 = (
•a˚_À·
 =0)? 
g_höt_ªs_hódî_size
 - 1 : space_left - 1;

2804 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
buf
, 
size
, &
max_size
, 
Àn
, 
g_höt_ªs_hódî_size
, 
åue
);

2805 i‡(
ªt
 != 0) {

2821 
•a˚_À·
 = 
max_size
 - 
size
;

2822 
	`va_°¨t
(
≠
, 
fmt
);

2823 
Àn
 = 
	`v¢¥ötf
(
buf
 + 
size
, 
•a˚_À·
, 
fmt
, 
≠
);

2824 
	`va_íd
(
≠
);

2825 i‡(
Àn
 < 
•a˚_À·
) {

2829 
size
 +
Àn
;

2836 
hódî
->
buf
 = buf;

2837 
hódî
->
max_size
 = max_size;

2838 
hódî
->
size
 = size;

2840  
ªt
;

2845 
	`•rötfHTTPBody
(

2846 
HTTPMsg
* 
msg
,

2847 c⁄° * 
fmt
,

2851 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2852 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
 || msg->°©ê=
HTTP_MSG_STATE_ERR
Ë&& 
fmt
 != NULL);

2854 
ªt
 = 0;

2855 
va_li°
 
≠
;

2857 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_ERR
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
) {

2858 
ªt
 = 
ERR_HTTP_MSG_WRITE_REDUNDANT
;

2860 
HTTPRe•⁄£
* 
ª•⁄£
 = &(
msg
->response);

2861 
DBö¨yBuff
* 
body
 = &(
ª•⁄£
->body);

2862 * 
buf
 = (*Ë
body
->buf;

2863 
size
 = 
body
->size;

2864 
max_size
 = 
body
->max_size;

2865 
•a˚_À·
 = 
max_size
 - 
size
;

2871 
Àn
 = (
•a˚_À·
 =0)? 
g_höt_ªs_body_size
 - 1 : space_left - 1;

2874 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
buf
, 
size
, &
max_size
, 
Àn
, 
g_höt_ªs_body_size
, 
åue
);

2875 i‡(
ªt
 != 0) {

2892 
•a˚_À·
 = 
max_size
 - 
size
;

2893 
	`va_°¨t
(
≠
, 
fmt
);

2894 
Àn
 = 
	`v¢¥ötf
(
buf
 + 
size
, 
•a˚_À·
, 
fmt
, 
≠
);

2895 
	`va_íd
(
≠
);

2896 i‡(
Àn
 < 
•a˚_À·
) {

2900 
size
 +
Àn
;

2907 
body
->
buf
 = (*) buf;

2908 
body
->
max_size
 = max_size;

2909 
body
->
size
 = size;

2911  
ªt
;

2915 
	`wrôeHTTPHdr
(

2916 
HTTPMsg
* 
msg
,

2917 c⁄° * 
§c
,

2918 
Àn


2921 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2922 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
 || msg->°©ê=
HTTP_MSG_STATE_ERR
Ë&& 
§c
 !NULL && 
Àn
 > 0);

2924 
ªt
 = 0;

2925 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_ERR
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
) {

2926 
ªt
 = 
ERR_HTTP_MSG_WRITE_REDUNDANT
;

2928 
ªt
 = 
	`wrôeHTTPHdrI¡î«l
(
msg
, 
§c
, 
Àn
);

2930  
ªt
;

2933 
	`wrôeHTTPBody
(

2934 
HTTPMsg
* 
msg
,

2935 c⁄° * 
§c
,

2936 
Àn


2939 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2940 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
 || msg->°©ê=
HTTP_MSG_STATE_ERR
Ë&& 
§c
 !NULL && 
Àn
 > 0);

2942 
ªt
 = 0;

2943 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_ERR
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
) {

2944 
ªt
 = 
ERR_HTTP_MSG_WRITE_REDUNDANT
;

2945 
END
;

2947 #ifde‡
__˝lu•lus


2950 
HTTPRe•⁄£
* 
ª•⁄£
 = &(
msg
->response);

2951 
DBö¨yBuff
* 
body
 = &(
ª•⁄£
->body);

2952 * 
buf
 = 
body
->buf;

2953 
size
 = 
body
->size;

2954 
max_size
 = 
body
->max_size;

2955 
ªt
 = 
	`ªÆloˇã_mem
((**Ë&
buf
, 
size
, &
max_size
, (Ë
Àn
, 
g_höt_ªs_body_size
, 
Ál£
);

2956 i‡(
ªt
 != 0) {

2957 
END
;

2959 
	`mem˝y
(
buf
 + 
size
, 
§c
, 
Àn
);

2960 
size
 +
Àn
;

2964 
body
->
buf
 = buf;

2965 
body
->
max_size
 = max_size;

2966 
body
->
size
 = size;

2967 #ifde‡
__˝lu•lus


2970 
END
:

2971  
ªt
;

2974 
	`ídHTTPHódî
(

2975 
HTTPMsg
* 
msg


2978 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

2979 
	`as£π
(
msg
 !
NULL
);

2981 
	#TEMP_BUF_SIZE
 512

	)

2982 
ªt
 = 0;

2983 
b_size
 = 
msg
->
ª•⁄£
.
body
.
size
;

2984 i‡(
b_size
 > 0) {

2985 
buf
[
TEMP_BUF_SIZE
 + 1];

2986 
byãs
 = 0;

2987 i‡(
msg
->
a˘i⁄s
 & 
SEND_CONNECTION_CLOSE_HEADER
) {

2988 
byãs
 = 
	`¢¥ötf
(
buf
, 
TEMP_BUF_SIZE
 + 1, "%s: %d\r\nC⁄√˘i⁄: clo£\r\n\r\n", 
CONTENT_LENGTH
, 
b_size
);

2990 
byãs
 = 
	`¢¥ötf
(
buf
, 
TEMP_BUF_SIZE
 + 1, "%s: %d\r\nC⁄√˘i⁄: kìp-Æive\r\n\r\n", 
CONTENT_LENGTH
, 
b_size
);

2995 
ªt
 = 
	`wrôeHTTPHdrI¡î«l
(
msg
, 
buf
, 
byãs
);

2996 i‡(
ªt
 != 0) {

2997 
msg
->
°©e
 = 
HTTP_MSG_STATE_ERR
;

3000 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3001 
	`as£π
(
b_size
 == 0);

3003 
ªt
 = 
	`wrôeHTTPHdrI¡î«l
(
msg
, 
CRLF
, (CRLF));

3004 i‡(
ªt
 != 0) {

3005 
msg
->
°©e
 = 
HTTP_MSG_STATE_ERR
;

3008  
ªt
;

3011 
	`föishHTTPMsg
(

3012 
HTTPMsg
* 
msg


3015 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3016 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
));

3018 
ªt
 = 0;

3019 
REEXECUTE
:

3020 
msg
->
°©e
) {

3021 
HTTP_MSG_STATE_ERR
:

3023 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3024 
	`Ârötf
(
°dîr
, "\nERRORÅhêmsg i¿föishHTTPMsg(Ëi†ö HTTP_MSG_STATE_ERR sèã %s:%d\n", 
__FILE__
, 
__LINE__
);

3026 
	`ªmoveHTTPMsg
((
HTTPMsgDLi°
*)
msg
->
c⁄n
->
ö_d©a
, msg);

3027 
	`de°royHTTPMsg
(
msg
);

3028 
	`de°royTCPC⁄n
(
msg
->
c⁄n
);

3029 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3030 
	`as£π
(0);

3034 
HTTP_MSG_STATE_HANDLER_INVOKED
:

3036 
ªt
 = 
	`ídHTTPHódî
(
msg
);

3037 i‡(
ªt
 != 0) {

3038 
REEXECUTE
;

3039 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3040 
	`as£π
(0);

3043 
msg
->
°©e
 = 
HTTP_MSG_STATE_RESP_COMPLETE
;

3044 
	`£ndHTTPMsgs
(
msg
->
c⁄n
, (
HTTPMsgDLi°
*Ëmsg->c⁄n->
ö_d©a
);

3048 
HTTP_MSG_STATE_TCP_CONN_CLOSED
:

3050 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

3051 
	`Ârötf
(
°dîr
, "\nERRORÅhêmsg i¿föishHTTPMsg(Ëi†ö HTTP_MSG_STATE_TCP_CONN_CLOSED sèã %s:%d\n", 
__FILE__
, 
__LINE__
);

3053 
	`de°royHTTPMsg
(
msg
);

3058 
	`Ârötf
(
°dîr
, "\nERROR InvÆid sèã o‡HTTPMsg %s:%d\n", 
__FILE__
, 
__LINE__
);

3059 
	`as£π
(0);

	@/home/kartik/nwe/http_parser.c

24 
	~"hâp_∑r£r.h
"

25 
	~<as£π.h
>

26 
	~<°ddef.h
>

27 
	~<˘y≥.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<limôs.h
>

32 #i‚de‡
ULLONG_MAX


33 
	#ULLONG_MAX
 ((
uöt64_t
Ë-1Ë

	)

36 #i‚de‡
MIN


37 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

40 #i‚de‡
ARRAY_SIZE


41 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 #i‚de‡
BIT_AT


45 
	#BIT_AT
(
a
, 
i
) \

46 (!!((Ë(
a
)[(Ë(
i
) >> 3] & \

47 (1 << ((Ë(
i
Ë& 7))))

	)

50 #i‚de‡
ELEM_AT


51 
	#ELEM_AT
(
a
, 
i
, 
v
Ë((Ë(iË< 
	`ARRAY_SIZE
◊Ë? (a)[(i)] : (v))

	)

54 
	#SET_ERRNO
(
e
) \

56 
∑r£r
->
hâp_î∫o
 = (
e
); \

57 } 0)

	)

61 
	#CALLBACK_NOTIFY_
(
FOR
, 
ER
) \

63 
	`as£π
(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
); \

65 i‡(
£âögs
->
⁄_
##
FOR
) { \

66 i‡(0 !
£âögs
->
⁄_
##
	`FOR
(
∑r£r
)) { \

67 
	`SET_ERRNO
(
HPE_CB_
##
FOR
); \

71 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) { \

72  (
ER
); \

75 } 0)

	)

78 
	#CALLBACK_NOTIFY
(
FOR
Ë
	`CALLBACK_NOTIFY_
(FOR, 
p
 - 
d©a
 + 1)

	)

81 
	#CALLBACK_NOTIFY_NOADVANCE
(
FOR
Ë
	`CALLBACK_NOTIFY_
(FOR, 
p
 - 
d©a
)

	)

84 
	#CALLBACK_DATA_
(
FOR
, 
LEN
, 
ER
) \

86 
	`as£π
(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
); \

88 i‡(
FOR
##
_m¨k
) { \

89 i‡(
£âögs
->
⁄_
##
FOR
) { \

90 i‡(0 !
£âögs
->
⁄_
##
	`FOR
(
∑r£r
, 
FOR
##
_m¨k
, (
LEN
))) { \

91 
	`SET_ERRNO
(
HPE_CB_
##
FOR
); \

95 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) { \

96  (
ER
); \

99 
FOR
##
_m¨k
 = 
NULL
; \

101 } 0)

	)

104 
	#CALLBACK_DATA
(
FOR
) \

105 
	`CALLBACK_DATA_
(
FOR
, 
p
 - FOR##
_m¨k
,Ö - 
d©a
 + 1)

	)

108 
	#CALLBACK_DATA_NOADVANCE
(
FOR
) \

109 
	`CALLBACK_DATA_
(
FOR
, 
p
 - FOR##
_m¨k
,Ö - 
d©a
)

	)

112 
	#MARK
(
FOR
) \

114 i‡(!
FOR
##
_m¨k
) { \

115 
FOR
##
_m¨k
 = 
p
; \

117 } 0)

	)

120 
	#PROXY_CONNECTION
 "¥oxy-c⁄√˘i⁄"

	)

121 
	#CONNECTION
 "c⁄√˘i⁄"

	)

122 
	#CONTENT_LENGTH
 "c⁄ã¡-Àngth"

	)

123 
	#TRANSFER_ENCODING
 "å™s„r-ícodög"

	)

124 
	#UPGRADE
 "upgøde"

	)

125 
	#CHUNKED
 "chunked"

	)

126 
	#KEEP_ALIVE
 "kìp-Æive"

	)

127 
	#CLOSE
 "˛o£"

	)

130 c⁄° *
	gmëhod_°rögs
[] =

132 
	#XX
(
num
, 
«me
, 
°rög
Ë#°rög,

	)

133 
HTTP_METHOD_MAP
(
XX
)

134 #unde‡
XX


145 c⁄° 
	gtokís
[256] = {

180 c⁄° 
öt8_t
 
	gunhex
[256] =

192 #i‡
HTTP_PARSER_STRICT


193 
	#T
(
v
Ë0

	)

195 
	#T
(
v
Ë
	)
v

199 c⁄° 
uöt8_t
 
	gn‹mÆ_uæ_ch¨
[32] = {

203 0 | 
T
(2) | 0 | 0 | T(16) | 0 | 0 | 0,

233 #unde‡
T


235 
	e°©e


236 { 
	ms_dód
 = 1

238 , 
	ms_°¨t_ªq_‹_ªs


239 , 
	ms_ªs_‹_ª•_H


240 , 
	ms_°¨t_ªs


241 , 
	ms_ªs_H


242 , 
	ms_ªs_HT


243 , 
	ms_ªs_HTT


244 , 
	ms_ªs_HTTP


245 , 
	ms_ªs_fú°_hâp_maj‹


246 , 
	ms_ªs_hâp_maj‹


247 , 
	ms_ªs_fú°_hâp_mö‹


248 , 
	ms_ªs_hâp_mö‹


249 , 
	ms_ªs_fú°_°©us_code


250 , 
	ms_ªs_°©us_code


251 , 
	ms_ªs_°©us_°¨t


252 , 
	ms_ªs_°©us


253 , 
	ms_ªs_löe_Æmo°_d⁄e


255 , 
	ms_°¨t_ªq


257 , 
	ms_ªq_mëhod


258 , 
	ms_ªq_•a˚s_bef‹e_uæ


259 , 
	ms_ªq_schema


260 , 
	ms_ªq_schema_¶ash


261 , 
	ms_ªq_schema_¶ash_¶ash


262 , 
	ms_ªq_£rvî_°¨t


263 , 
	ms_ªq_£rvî


264 , 
	ms_ªq_£rvî_wôh_©


265 , 
	ms_ªq_∑th


266 , 
	ms_ªq_quîy_°rög_°¨t


267 , 
	ms_ªq_quîy_°rög


268 , 
	ms_ªq_‰agmít_°¨t


269 , 
	ms_ªq_‰agmít


270 , 
	ms_ªq_hâp_°¨t


271 , 
	ms_ªq_hâp_H


272 , 
	ms_ªq_hâp_HT


273 , 
	ms_ªq_hâp_HTT


274 , 
	ms_ªq_hâp_HTTP


275 , 
	ms_ªq_fú°_hâp_maj‹


276 , 
	ms_ªq_hâp_maj‹


277 , 
	ms_ªq_fú°_hâp_mö‹


278 , 
	ms_ªq_hâp_mö‹


279 , 
	ms_ªq_löe_Æmo°_d⁄e


281 , 
	ms_hódî_fõld_°¨t


282 , 
	ms_hódî_fõld


283 , 
	ms_hódî_vÆue_disˇrd_ws


284 , 
	ms_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e


285 , 
	ms_hódî_vÆue_disˇrd_lws


286 , 
	ms_hódî_vÆue_°¨t


287 , 
	ms_hódî_vÆue


288 , 
	ms_hódî_vÆue_lws


290 , 
	ms_hódî_Æmo°_d⁄e


292 , 
	ms_chunk_size_°¨t


293 , 
	ms_chunk_size


294 , 
	ms_chunk_∑ømëîs


295 , 
	ms_chunk_size_Æmo°_d⁄e


297 , 
	ms_hódîs_Æmo°_d⁄e


298 , 
	ms_hódîs_d⁄e


305 , 
	ms_chunk_d©a


306 , 
	ms_chunk_d©a_Æmo°_d⁄e


307 , 
	ms_chunk_d©a_d⁄e


309 , 
	ms_body_idítôy


310 , 
	ms_body_idítôy_eof


312 , 
	ms_mesßge_d⁄e


316 
	#PARSING_HEADER
(
°©e
Ë(°©ê<
s_hódîs_d⁄e
)

	)

319 
	ehódî_°©es


320 { 
	mh_gíîÆ
 = 0

321 , 
	mh_C


322 , 
	mh_CO


323 , 
	mh_CON


325 , 
	mh_m©chög_c⁄√˘i⁄


326 , 
	mh_m©chög_¥oxy_c⁄√˘i⁄


327 , 
	mh_m©chög_c⁄ã¡_Àngth


328 , 
	mh_m©chög_å™s„r_ícodög


329 , 
	mh_m©chög_upgøde


331 , 
	mh_c⁄√˘i⁄


332 , 
	mh_c⁄ã¡_Àngth


333 , 
	mh_å™s„r_ícodög


334 , 
	mh_upgøde


336 , 
	mh_m©chög_å™s„r_ícodög_chunked


337 , 
	mh_m©chög_c⁄√˘i⁄_kìp_Æive


338 , 
	mh_m©chög_c⁄√˘i⁄_˛o£


340 , 
	mh_å™s„r_ícodög_chunked


341 , 
	mh_c⁄√˘i⁄_kìp_Æive


342 , 
	mh_c⁄√˘i⁄_˛o£


345 
	ehâp_ho°_°©e


347 
	ms_hâp_ho°_dód
 = 1

348 , 
	ms_hâp_u£röfo_°¨t


349 , 
	ms_hâp_u£röfo


350 , 
	ms_hâp_ho°_°¨t


351 , 
	ms_hâp_ho°_v6_°¨t


352 , 
	ms_hâp_ho°


353 , 
	ms_hâp_ho°_v6


354 , 
	ms_hâp_ho°_v6_íd


355 , 
	ms_hâp_ho°_p‹t_°¨t


356 , 
	ms_hâp_ho°_p‹t


360 
	#CR
 '\r'

	)

361 
	#LF
 '\n'

	)

362 
	#LOWER
(
c
Ë()(¯| 0x20)

	)

363 
	#IS_ALPHA
(
c
Ë(
	`LOWER
(cË>'a' && LOWER(cË<'z')

	)

364 
	#IS_NUM
(
c
Ë((cË>'0' && (cË<'9')

	)

365 
	#IS_ALPHANUM
(
c
Ë(
	`IS_ALPHA
(cË|| 
	`IS_NUM
(c))

	)

366 
	#IS_HEX
(
c
Ë(
	`IS_NUM
(cË|| (
	`LOWER
(cË>'a' && LOWER(cË<'f'))

	)

367 
	#IS_MARK
(
c
) ((c) == '-' || (c) == '_' || (c) == '.' || \

368 (
c
) == '!' || (c) == '~' || (c) == '*' || (c) == '\'' || (c) == '(' || \

369 (
c
Ë=')')

	)

370 
	#IS_USERINFO_CHAR
(
c
Ë(
	`IS_ALPHANUM
(cË|| 
	`IS_MARK
(c) || (c) == '%' || \

371 (
c
) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \

372 (
c
Ë='$' || (cË=',')

	)

374 #i‡
HTTP_PARSER_STRICT


375 
	#TOKEN
(
c
Ë(
tokís
[()c])

	)

376 
	#IS_URL_CHAR
(
c
Ë(
	`BIT_AT
(
n‹mÆ_uæ_ch¨
, ()c))

	)

377 
	#IS_HOST_CHAR
(
c
Ë(
	`IS_ALPHANUM
(cË|| (cË='.' || (cË='-')

	)

379 
	#TOKEN
(
c
Ë((¯=' 'Ë? ' ' : 
tokís
[()c])

	)

380 
	#IS_URL_CHAR
(
c
) \

381 (
	`BIT_AT
(
n‹mÆ_uæ_ch¨
, ()
c
Ë|| ((cË& 0x80))

	)

382 
	#IS_HOST_CHAR
(
c
) \

383 (
	`IS_ALPHANUM
(
c
Ë|| (cË='.' || (cË='-' || (cË='_')

	)

387 
	#°¨t_°©e
 (
∑r£r
->
ty≥
 =
HTTP_REQUEST
 ? 
s_°¨t_ªq
 : 
s_°¨t_ªs
)

	)

390 #i‡
HTTP_PARSER_STRICT


391 
	#STRICT_CHECK
(
c⁄d
) \

393 i‡(
c⁄d
) { \

394 
	`SET_ERRNO
(
HPE_STRICT
); \

395 
îr‹
; \

397 } 0)

	)

398 
	#NEW_MESSAGE
(Ë(
	`hâp_should_kìp_Æive
(
∑r£r
Ë? 
°¨t_°©e
 : 
s_dód
)

	)

400 
	#STRICT_CHECK
(
c⁄d
)

	)

401 
	#NEW_MESSAGE
(Ë
°¨t_°©e


	)

406 
	#HTTP_STRERROR_GEN
(
n
, 
s
Ë{ "HPE_" #n, s },

	)

408 c⁄° *
	m«me
;

409 c⁄° *
	mdes¸ùti⁄
;

410 } 
	ghâp_°ªº‹_èb
[] = {

411 
HTTP_ERRNO_MAP
(
HTTP_STRERROR_GEN
)

413 #unde‡
HTTP_STRERROR_GEN


415 
hâp_mesßge_√eds_eof
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

428 
°©e


429 
	$∑r£_uæ_ch¨
(
°©e
 
s
, c⁄° 
ch
)

431 i‡(
ch
 == ' ' || ch == '\r' || ch == '\n') {

432  
s_dód
;

435 #i‡
HTTP_PARSER_STRICT


436 i‡(
ch
 == '\t' || ch == '\f') {

437  
s_dód
;

441 
s
) {

442 
s_ªq_•a˚s_bef‹e_uæ
:

447 i‡(
ch
 == '/' || ch == '*') {

448  
s_ªq_∑th
;

451 i‡(
	`IS_ALPHA
(
ch
)) {

452  
s_ªq_schema
;

457 
s_ªq_schema
:

458 i‡(
	`IS_ALPHA
(
ch
)) {

459  
s
;

462 i‡(
ch
 == ':') {

463  
s_ªq_schema_¶ash
;

468 
s_ªq_schema_¶ash
:

469 i‡(
ch
 == '/') {

470  
s_ªq_schema_¶ash_¶ash
;

475 
s_ªq_schema_¶ash_¶ash
:

476 i‡(
ch
 == '/') {

477  
s_ªq_£rvî_°¨t
;

482 
s_ªq_£rvî_wôh_©
:

483 i‡(
ch
 == '@') {

484  
s_dód
;

488 
s_ªq_£rvî_°¨t
:

489 
s_ªq_£rvî
:

490 i‡(
ch
 == '/') {

491  
s_ªq_∑th
;

494 i‡(
ch
 == '?') {

495  
s_ªq_quîy_°rög_°¨t
;

498 i‡(
ch
 == '@') {

499  
s_ªq_£rvî_wôh_©
;

502 i‡(
	`IS_USERINFO_CHAR
(
ch
) || ch == '[' || ch == ']') {

503  
s_ªq_£rvî
;

508 
s_ªq_∑th
:

509 i‡(
	`IS_URL_CHAR
(
ch
)) {

510  
s
;

513 
ch
) {

515  
s_ªq_quîy_°rög_°¨t
;

518  
s_ªq_‰agmít_°¨t
;

523 
s_ªq_quîy_°rög_°¨t
:

524 
s_ªq_quîy_°rög
:

525 i‡(
	`IS_URL_CHAR
(
ch
)) {

526  
s_ªq_quîy_°rög
;

529 
ch
) {

532  
s_ªq_quîy_°rög
;

535  
s_ªq_‰agmít_°¨t
;

540 
s_ªq_‰agmít_°¨t
:

541 i‡(
	`IS_URL_CHAR
(
ch
)) {

542  
s_ªq_‰agmít
;

545 
ch
) {

547  
s_ªq_‰agmít
;

550  
s
;

555 
s_ªq_‰agmít
:

556 i‡(
	`IS_URL_CHAR
(
ch
)) {

557  
s
;

560 
ch
) {

563  
s
;

573  
s_dód
;

574 
	}
}

576 
size_t
 
	$hâp_∑r£r_execuã
 (
hâp_∑r£r
 *
∑r£r
,

577 c⁄° 
hâp_∑r£r_£âögs
 *
£âögs
,

578 c⁄° *
d©a
,

579 
size_t
 
Àn
)

581 
c
, 
ch
;

582 
öt8_t
 
unhex_vÆ
;

583 c⁄° *
p
 = 
d©a
;

584 c⁄° *
hódî_fõld_m¨k
 = 0;

585 c⁄° *
hódî_vÆue_m¨k
 = 0;

586 c⁄° *
uæ_m¨k
 = 0;

587 c⁄° *
body_m¨k
 = 0;

588 c⁄° *
°©us_m¨k
 = 0;

591 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) {

595 i‡(
Àn
 == 0) {

596 
∑r£r
->
°©e
) {

597 
s_body_idítôy_eof
:

601 
	`CALLBACK_NOTIFY_NOADVANCE
(
mesßge_com∂ëe
);

604 
s_dód
:

605 
s_°¨t_ªq_‹_ªs
:

606 
s_°¨t_ªs
:

607 
s_°¨t_ªq
:

611 
	`SET_ERRNO
(
HPE_INVALID_EOF_STATE
);

617 i‡(
∑r£r
->
°©e
 =
s_hódî_fõld
)

618 
hódî_fõld_m¨k
 = 
d©a
;

619 i‡(
∑r£r
->
°©e
 =
s_hódî_vÆue
)

620 
hódî_vÆue_m¨k
 = 
d©a
;

621 
∑r£r
->
°©e
) {

622 
s_ªq_∑th
:

623 
s_ªq_schema
:

624 
s_ªq_schema_¶ash
:

625 
s_ªq_schema_¶ash_¶ash
:

626 
s_ªq_£rvî_°¨t
:

627 
s_ªq_£rvî
:

628 
s_ªq_£rvî_wôh_©
:

629 
s_ªq_quîy_°rög_°¨t
:

630 
s_ªq_quîy_°rög
:

631 
s_ªq_‰agmít_°¨t
:

632 
s_ªq_‰agmít
:

633 
uæ_m¨k
 = 
d©a
;

635 
s_ªs_°©us
:

636 
°©us_m¨k
 = 
d©a
;

640 
p
=
d©a
;Ö !d©®+ 
Àn
;Ö++) {

641 
ch
 = *
p
;

643 i‡(
	`PARSING_HEADER
(
∑r£r
->
°©e
)) {

644 ++
∑r£r
->
ƒód
;

656 i‡(
∑r£r
->
ƒód
 > (
HTTP_MAX_HEADER_SIZE
)) {

657 
	`SET_ERRNO
(
HPE_HEADER_OVERFLOW
);

658 
îr‹
;

662 
ªexecuã_byã
:

663 
∑r£r
->
°©e
) {

665 
s_dód
:

669 i‡(
ch
 =
CR
 || ch =
LF
)

672 
	`SET_ERRNO
(
HPE_CLOSED_CONNECTION
);

673 
îr‹
;

675 
s_°¨t_ªq_‹_ªs
:

677 i‡(
ch
 =
CR
 || ch =
LF
)

679 
∑r£r
->
Êags
 = 0;

680 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

682 i‡(
ch
 == 'H') {

683 
∑r£r
->
°©e
 = 
s_ªs_‹_ª•_H
;

685 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

687 
∑r£r
->
ty≥
 = 
HTTP_REQUEST
;

688 
∑r£r
->
°©e
 = 
s_°¨t_ªq
;

689 
ªexecuã_byã
;

695 
s_ªs_‹_ª•_H
:

696 i‡(
ch
 == 'T') {

697 
∑r£r
->
ty≥
 = 
HTTP_RESPONSE
;

698 
∑r£r
->
°©e
 = 
s_ªs_HT
;

700 i‡(
ch
 != 'E') {

701 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

702 
îr‹
;

705 
∑r£r
->
ty≥
 = 
HTTP_REQUEST
;

706 
∑r£r
->
mëhod
 = 
HTTP_HEAD
;

707 
∑r£r
->
ödex
 = 2;

708 
∑r£r
->
°©e
 = 
s_ªq_mëhod
;

712 
s_°¨t_ªs
:

714 
∑r£r
->
Êags
 = 0;

715 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

717 
ch
) {

719 
∑r£r
->
°©e
 = 
s_ªs_H
;

722 
CR
:

723 
LF
:

727 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

728 
îr‹
;

731 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

735 
s_ªs_H
:

736 
	`STRICT_CHECK
(
ch
 != 'T');

737 
∑r£r
->
°©e
 = 
s_ªs_HT
;

740 
s_ªs_HT
:

741 
	`STRICT_CHECK
(
ch
 != 'T');

742 
∑r£r
->
°©e
 = 
s_ªs_HTT
;

745 
s_ªs_HTT
:

746 
	`STRICT_CHECK
(
ch
 != 'P');

747 
∑r£r
->
°©e
 = 
s_ªs_HTTP
;

750 
s_ªs_HTTP
:

751 
	`STRICT_CHECK
(
ch
 != '/');

752 
∑r£r
->
°©e
 = 
s_ªs_fú°_hâp_maj‹
;

755 
s_ªs_fú°_hâp_maj‹
:

756 i‡(
ch
 < '0' || ch > '9') {

757 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

758 
îr‹
;

761 
∑r£r
->
hâp_maj‹
 = 
ch
 - '0';

762 
∑r£r
->
°©e
 = 
s_ªs_hâp_maj‹
;

766 
s_ªs_hâp_maj‹
:

768 i‡(
ch
 == '.') {

769 
∑r£r
->
°©e
 = 
s_ªs_fú°_hâp_mö‹
;

773 i‡(!
	`IS_NUM
(
ch
)) {

774 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

775 
îr‹
;

778 
∑r£r
->
hâp_maj‹
 *= 10;

779 
∑r£r
->
hâp_maj‹
 +
ch
 - '0';

781 i‡(
∑r£r
->
hâp_maj‹
 > 999) {

782 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

783 
îr‹
;

790 
s_ªs_fú°_hâp_mö‹
:

791 i‡(!
	`IS_NUM
(
ch
)) {

792 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

793 
îr‹
;

796 
∑r£r
->
hâp_mö‹
 = 
ch
 - '0';

797 
∑r£r
->
°©e
 = 
s_ªs_hâp_mö‹
;

801 
s_ªs_hâp_mö‹
:

803 i‡(
ch
 == ' ') {

804 
∑r£r
->
°©e
 = 
s_ªs_fú°_°©us_code
;

808 i‡(!
	`IS_NUM
(
ch
)) {

809 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

810 
îr‹
;

813 
∑r£r
->
hâp_mö‹
 *= 10;

814 
∑r£r
->
hâp_mö‹
 +
ch
 - '0';

816 i‡(
∑r£r
->
hâp_mö‹
 > 999) {

817 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

818 
îr‹
;

824 
s_ªs_fú°_°©us_code
:

826 i‡(!
	`IS_NUM
(
ch
)) {

827 i‡(
ch
 == ' ') {

831 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

832 
îr‹
;

834 
∑r£r
->
°©us_code
 = 
ch
 - '0';

835 
∑r£r
->
°©e
 = 
s_ªs_°©us_code
;

839 
s_ªs_°©us_code
:

841 i‡(!
	`IS_NUM
(
ch
)) {

842 
ch
) {

844 
∑r£r
->
°©e
 = 
s_ªs_°©us_°¨t
;

846 
CR
:

847 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

849 
LF
:

850 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

853 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

854 
îr‹
;

859 
∑r£r
->
°©us_code
 *= 10;

860 
∑r£r
->
°©us_code
 +
ch
 - '0';

862 i‡(
∑r£r
->
°©us_code
 > 999) {

863 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

864 
îr‹
;

870 
s_ªs_°©us_°¨t
:

872 i‡(
ch
 =
CR
) {

873 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

877 i‡(
ch
 =
LF
) {

878 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

882 
	`MARK
(
°©us
);

883 
∑r£r
->
°©e
 = 
s_ªs_°©us
;

884 
∑r£r
->
ödex
 = 0;

888 
s_ªs_°©us
:

889 i‡(
ch
 =
CR
) {

890 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

891 
	`CALLBACK_DATA
(
°©us
);

895 i‡(
ch
 =
LF
) {

896 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

897 
	`CALLBACK_DATA
(
°©us
);

903 
s_ªs_löe_Æmo°_d⁄e
:

904 
	`STRICT_CHECK
(
ch
 !
LF
);

905 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

908 
s_°¨t_ªq
:

910 i‡(
ch
 =
CR
 || ch =
LF
)

912 
∑r£r
->
Êags
 = 0;

913 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

915 i‡(!
	`IS_ALPHA
(
ch
)) {

916 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

917 
îr‹
;

920 
∑r£r
->
mëhod
 = (
hâp_mëhod
) 0;

921 
∑r£r
->
ödex
 = 1;

922 
ch
) {

923 'C': 
∑r£r
->
mëhod
 = 
HTTP_CONNECT
; ;

924 'D': 
∑r£r
->
mëhod
 = 
HTTP_DELETE
; ;

925 'G': 
∑r£r
->
mëhod
 = 
HTTP_GET
; ;

926 'H': 
∑r£r
->
mëhod
 = 
HTTP_HEAD
; ;

927 'L': 
∑r£r
->
mëhod
 = 
HTTP_LOCK
; ;

928 'M': 
∑r£r
->
mëhod
 = 
HTTP_MKCOL
; ;

929 'N': 
∑r£r
->
mëhod
 = 
HTTP_NOTIFY
; ;

930 'O': 
∑r£r
->
mëhod
 = 
HTTP_OPTIONS
; ;

931 'P': 
∑r£r
->
mëhod
 = 
HTTP_POST
;

934 'R': 
∑r£r
->
mëhod
 = 
HTTP_REPORT
; ;

935 'S': 
∑r£r
->
mëhod
 = 
HTTP_SUBSCRIBE
; ;

936 'T': 
∑r£r
->
mëhod
 = 
HTTP_TRACE
; ;

937 'U': 
∑r£r
->
mëhod
 = 
HTTP_UNLOCK
; ;

939 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

940 
îr‹
;

942 
∑r£r
->
°©e
 = 
s_ªq_mëhod
;

944 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

949 
s_ªq_mëhod
:

951 c⁄° *
m©chî
;

952 i‡(
ch
 == '\0') {

953 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

954 
îr‹
;

957 
m©chî
 = 
mëhod_°rögs
[
∑r£r
->
mëhod
];

958 i‡(
ch
 =' ' && 
m©chî
[
∑r£r
->
ödex
] == '\0') {

959 
∑r£r
->
°©e
 = 
s_ªq_•a˚s_bef‹e_uæ
;

960 } i‡(
ch
 =
m©chî
[
∑r£r
->
ödex
]) {

962 } i‡(
∑r£r
->
mëhod
 =
HTTP_CONNECT
) {

963 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'H') {

964 
∑r£r
->
mëhod
 = 
HTTP_CHECKOUT
;

965 } i‡(
∑r£r
->
ödex
 =2 && 
ch
 == 'P') {

966 
∑r£r
->
mëhod
 = 
HTTP_COPY
;

968 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

969 
îr‹
;

971 } i‡(
∑r£r
->
mëhod
 =
HTTP_MKCOL
) {

972 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'O') {

973 
∑r£r
->
mëhod
 = 
HTTP_MOVE
;

974 } i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'E') {

975 
∑r£r
->
mëhod
 = 
HTTP_MERGE
;

976 } i‡(
∑r£r
->
ödex
 =1 && 
ch
 == '-') {

977 
∑r£r
->
mëhod
 = 
HTTP_MSEARCH
;

978 } i‡(
∑r£r
->
ödex
 =2 && 
ch
 == 'A') {

979 
∑r£r
->
mëhod
 = 
HTTP_MKACTIVITY
;

981 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

982 
îr‹
;

984 } i‡(
∑r£r
->
mëhod
 =
HTTP_SUBSCRIBE
) {

985 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'E') {

986 
∑r£r
->
mëhod
 = 
HTTP_SEARCH
;

988 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

989 
îr‹
;

991 } i‡(
∑r£r
->
ödex
 =1 &&Ö¨£r->
mëhod
 =
HTTP_POST
) {

992 i‡(
ch
 == 'R') {

993 
∑r£r
->
mëhod
 = 
HTTP_PROPFIND
;

994 } i‡(
ch
 == 'U') {

995 
∑r£r
->
mëhod
 = 
HTTP_PUT
;

996 } i‡(
ch
 == 'A') {

997 
∑r£r
->
mëhod
 = 
HTTP_PATCH
;

999 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1000 
îr‹
;

1002 } i‡(
∑r£r
->
ödex
 == 2) {

1003 i‡(
∑r£r
->
mëhod
 =
HTTP_PUT
) {

1004 i‡(
ch
 == 'R') {

1005 
∑r£r
->
mëhod
 = 
HTTP_PURGE
;

1007 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1008 
îr‹
;

1010 } i‡(
∑r£r
->
mëhod
 =
HTTP_UNLOCK
) {

1011 i‡(
ch
 == 'S') {

1012 
∑r£r
->
mëhod
 = 
HTTP_UNSUBSCRIBE
;

1014 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1015 
îr‹
;

1018 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1019 
îr‹
;

1021 } i‡(
∑r£r
->
ödex
 =4 &&Ö¨£r->
mëhod
 =
HTTP_PROPFIND
 && 
ch
 == 'P') {

1022 
∑r£r
->
mëhod
 = 
HTTP_PROPPATCH
;

1024 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1025 
îr‹
;

1028 ++
∑r£r
->
ödex
;

1032 
s_ªq_•a˚s_bef‹e_uæ
:

1034 i‡(
ch
 == ' ') ;

1036 
	`MARK
(
uæ
);

1037 i‡(
∑r£r
->
mëhod
 =
HTTP_CONNECT
) {

1038 
∑r£r
->
°©e
 = 
s_ªq_£rvî_°¨t
;

1041 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1042 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1043 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1044 
îr‹
;

1050 
s_ªq_schema
:

1051 
s_ªq_schema_¶ash
:

1052 
s_ªq_schema_¶ash_¶ash
:

1053 
s_ªq_£rvî_°¨t
:

1055 
ch
) {

1058 
CR
:

1059 
LF
:

1060 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1061 
îr‹
;

1063 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1064 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1065 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1066 
îr‹
;

1073 
s_ªq_£rvî
:

1074 
s_ªq_£rvî_wôh_©
:

1075 
s_ªq_∑th
:

1076 
s_ªq_quîy_°rög_°¨t
:

1077 
s_ªq_quîy_°rög
:

1078 
s_ªq_‰agmít_°¨t
:

1079 
s_ªq_‰agmít
:

1081 
ch
) {

1083 
∑r£r
->
°©e
 = 
s_ªq_hâp_°¨t
;

1084 
	`CALLBACK_DATA
(
uæ
);

1086 
CR
:

1087 
LF
:

1088 
∑r£r
->
hâp_maj‹
 = 0;

1089 
∑r£r
->
hâp_mö‹
 = 9;

1090 
∑r£r
->
°©e
 = (
ch
 =
CR
) ?

1091 
s_ªq_löe_Æmo°_d⁄e
 :

1092 
s_hódî_fõld_°¨t
;

1093 
	`CALLBACK_DATA
(
uæ
);

1096 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1097 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1098 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1099 
îr‹
;

1105 
s_ªq_hâp_°¨t
:

1106 
ch
) {

1108 
∑r£r
->
°©e
 = 
s_ªq_hâp_H
;

1113 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

1114 
îr‹
;

1118 
s_ªq_hâp_H
:

1119 
	`STRICT_CHECK
(
ch
 != 'T');

1120 
∑r£r
->
°©e
 = 
s_ªq_hâp_HT
;

1123 
s_ªq_hâp_HT
:

1124 
	`STRICT_CHECK
(
ch
 != 'T');

1125 
∑r£r
->
°©e
 = 
s_ªq_hâp_HTT
;

1128 
s_ªq_hâp_HTT
:

1129 
	`STRICT_CHECK
(
ch
 != 'P');

1130 
∑r£r
->
°©e
 = 
s_ªq_hâp_HTTP
;

1133 
s_ªq_hâp_HTTP
:

1134 
	`STRICT_CHECK
(
ch
 != '/');

1135 
∑r£r
->
°©e
 = 
s_ªq_fú°_hâp_maj‹
;

1139 
s_ªq_fú°_hâp_maj‹
:

1140 i‡(
ch
 < '1' || ch > '9') {

1141 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1142 
îr‹
;

1145 
∑r£r
->
hâp_maj‹
 = 
ch
 - '0';

1146 
∑r£r
->
°©e
 = 
s_ªq_hâp_maj‹
;

1150 
s_ªq_hâp_maj‹
:

1152 i‡(
ch
 == '.') {

1153 
∑r£r
->
°©e
 = 
s_ªq_fú°_hâp_mö‹
;

1157 i‡(!
	`IS_NUM
(
ch
)) {

1158 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1159 
îr‹
;

1162 
∑r£r
->
hâp_maj‹
 *= 10;

1163 
∑r£r
->
hâp_maj‹
 +
ch
 - '0';

1165 i‡(
∑r£r
->
hâp_maj‹
 > 999) {

1166 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1167 
îr‹
;

1174 
s_ªq_fú°_hâp_mö‹
:

1175 i‡(!
	`IS_NUM
(
ch
)) {

1176 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1177 
îr‹
;

1180 
∑r£r
->
hâp_mö‹
 = 
ch
 - '0';

1181 
∑r£r
->
°©e
 = 
s_ªq_hâp_mö‹
;

1185 
s_ªq_hâp_mö‹
:

1187 i‡(
ch
 =
CR
) {

1188 
∑r£r
->
°©e
 = 
s_ªq_löe_Æmo°_d⁄e
;

1192 i‡(
ch
 =
LF
) {

1193 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1199 i‡(!
	`IS_NUM
(
ch
)) {

1200 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1201 
îr‹
;

1204 
∑r£r
->
hâp_mö‹
 *= 10;

1205 
∑r£r
->
hâp_mö‹
 +
ch
 - '0';

1207 i‡(
∑r£r
->
hâp_mö‹
 > 999) {

1208 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1209 
îr‹
;

1216 
s_ªq_löe_Æmo°_d⁄e
:

1218 i‡(
ch
 !
LF
) {

1219 
	`SET_ERRNO
(
HPE_LF_EXPECTED
);

1220 
îr‹
;

1223 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1227 
s_hódî_fõld_°¨t
:

1229 i‡(
ch
 =
CR
) {

1230 
∑r£r
->
°©e
 = 
s_hódîs_Æmo°_d⁄e
;

1234 i‡(
ch
 =
LF
) {

1237 
∑r£r
->
°©e
 = 
s_hódîs_Æmo°_d⁄e
;

1238 
ªexecuã_byã
;

1241 
c
 = 
	`TOKEN
(
ch
);

1243 i‡(!
c
) {

1244 
	`SET_ERRNO
(
HPE_INVALID_HEADER_TOKEN
);

1245 
îr‹
;

1248 
	`MARK
(
hódî_fõld
);

1250 
∑r£r
->
ödex
 = 0;

1251 
∑r£r
->
°©e
 = 
s_hódî_fõld
;

1253 
c
) {

1255 
∑r£r
->
hódî_°©e
 = 
h_C
;

1259 
∑r£r
->
hódî_°©e
 = 
h_m©chög_¥oxy_c⁄√˘i⁄
;

1263 
∑r£r
->
hódî_°©e
 = 
h_m©chög_å™s„r_ícodög
;

1267 
∑r£r
->
hódî_°©e
 = 
h_m©chög_upgøde
;

1271 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1277 
s_hódî_fõld
:

1279 
c
 = 
	`TOKEN
(
ch
);

1281 i‡(
c
) {

1282 
∑r£r
->
hódî_°©e
) {

1283 
h_gíîÆ
:

1286 
h_C
:

1287 
∑r£r
->
ödex
++;

1288 
∑r£r
->
hódî_°©e
 = (
c
 ='o' ? 
h_CO
 : 
h_gíîÆ
);

1291 
h_CO
:

1292 
∑r£r
->
ödex
++;

1293 
∑r£r
->
hódî_°©e
 = (
c
 ='n' ? 
h_CON
 : 
h_gíîÆ
);

1296 
h_CON
:

1297 
∑r£r
->
ödex
++;

1298 
c
) {

1300 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄
;

1303 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄ã¡_Àngth
;

1306 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1313 
h_m©chög_c⁄√˘i⁄
:

1314 
∑r£r
->
ödex
++;

1315 i‡(
∑r£r
->
ödex
 > (
CONNECTION
)-1

1316 || 
c
 !
CONNECTION
[
∑r£r
->
ödex
]) {

1317 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1318 } i‡(
∑r£r
->
ödex
 =(
CONNECTION
)-2) {

1319 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄
;

1325 
h_m©chög_¥oxy_c⁄√˘i⁄
:

1326 
∑r£r
->
ödex
++;

1327 i‡(
∑r£r
->
ödex
 > (
PROXY_CONNECTION
)-1

1328 || 
c
 !
PROXY_CONNECTION
[
∑r£r
->
ödex
]) {

1329 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1330 } i‡(
∑r£r
->
ödex
 =(
PROXY_CONNECTION
)-2) {

1331 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄
;

1337 
h_m©chög_c⁄ã¡_Àngth
:

1338 
∑r£r
->
ödex
++;

1339 i‡(
∑r£r
->
ödex
 > (
CONTENT_LENGTH
)-1

1340 || 
c
 !
CONTENT_LENGTH
[
∑r£r
->
ödex
]) {

1341 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1342 } i‡(
∑r£r
->
ödex
 =(
CONTENT_LENGTH
)-2) {

1343 
∑r£r
->
hódî_°©e
 = 
h_c⁄ã¡_Àngth
;

1349 
h_m©chög_å™s„r_ícodög
:

1350 
∑r£r
->
ödex
++;

1351 i‡(
∑r£r
->
ödex
 > (
TRANSFER_ENCODING
)-1

1352 || 
c
 !
TRANSFER_ENCODING
[
∑r£r
->
ödex
]) {

1353 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1354 } i‡(
∑r£r
->
ödex
 =(
TRANSFER_ENCODING
)-2) {

1355 
∑r£r
->
hódî_°©e
 = 
h_å™s„r_ícodög
;

1361 
h_m©chög_upgøde
:

1362 
∑r£r
->
ödex
++;

1363 i‡(
∑r£r
->
ödex
 > (
UPGRADE
)-1

1364 || 
c
 !
UPGRADE
[
∑r£r
->
ödex
]) {

1365 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1366 } i‡(
∑r£r
->
ödex
 =(
UPGRADE
)-2) {

1367 
∑r£r
->
hódî_°©e
 = 
h_upgøde
;

1371 
h_c⁄√˘i⁄
:

1372 
h_c⁄ã¡_Àngth
:

1373 
h_å™s„r_ícodög
:

1374 
h_upgøde
:

1375 i‡(
ch
 !' 'Ë
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1379 
	`as£π
(0 && "Unknown header_state");

1385 i‡(
ch
 == ':') {

1386 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws
;

1387 
	`CALLBACK_DATA
(
hódî_fõld
);

1391 i‡(
ch
 =
CR
) {

1392 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1393 
	`CALLBACK_DATA
(
hódî_fõld
);

1397 i‡(
ch
 =
LF
) {

1398 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1399 
	`CALLBACK_DATA
(
hódî_fõld
);

1403 
	`SET_ERRNO
(
HPE_INVALID_HEADER_TOKEN
);

1404 
îr‹
;

1407 
s_hódî_vÆue_disˇrd_ws
:

1408 i‡(
ch
 == ' ' || ch == '\t') ;

1410 i‡(
ch
 =
CR
) {

1411 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e
;

1415 i‡(
ch
 =
LF
) {

1416 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_lws
;

1422 
s_hódî_vÆue_°¨t
:

1424 
	`MARK
(
hódî_vÆue
);

1426 
∑r£r
->
°©e
 = 
s_hódî_vÆue
;

1427 
∑r£r
->
ödex
 = 0;

1429 
c
 = 
	`LOWER
(
ch
);

1431 
∑r£r
->
hódî_°©e
) {

1432 
h_upgøde
:

1433 
∑r£r
->
Êags
 |
F_UPGRADE
;

1434 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1437 
h_å™s„r_ícodög
:

1439 i‡('c' =
c
) {

1440 
∑r£r
->
hódî_°©e
 = 
h_m©chög_å™s„r_ícodög_chunked
;

1442 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1446 
h_c⁄ã¡_Àngth
:

1447 i‡(!
	`IS_NUM
(
ch
)) {

1448 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1449 
îr‹
;

1452 
∑r£r
->
c⁄ã¡_Àngth
 = 
ch
 - '0';

1455 
h_c⁄√˘i⁄
:

1457 i‡(
c
 == 'k') {

1458 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄_kìp_Æive
;

1460 } i‡(
c
 == 'c') {

1461 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄_˛o£
;

1463 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1468 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1474 
s_hódî_vÆue
:

1477 i‡(
ch
 =
CR
) {

1478 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1479 
	`CALLBACK_DATA
(
hódî_vÆue
);

1483 i‡(
ch
 =
LF
) {

1484 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1485 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1486 
ªexecuã_byã
;

1489 
c
 = 
	`LOWER
(
ch
);

1491 
∑r£r
->
hódî_°©e
) {

1492 
h_gíîÆ
:

1495 
h_c⁄√˘i⁄
:

1496 
h_å™s„r_ícodög
:

1497 
	`as£π
(0 && "Shouldn't get here.");

1500 
h_c⁄ã¡_Àngth
:

1502 
uöt64_t
 
t
;

1504 i‡(
ch
 == ' ') ;

1506 i‡(!
	`IS_NUM
(
ch
)) {

1507 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1508 
îr‹
;

1511 
t
 = 
∑r£r
->
c⁄ã¡_Àngth
;

1512 
t
 *= 10;

1513 
t
 +
ch
 - '0';

1516 i‡((
ULLONG_MAX
 - 10Ë/ 10 < 
∑r£r
->
c⁄ã¡_Àngth
) {

1517 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1518 
îr‹
;

1521 
∑r£r
->
c⁄ã¡_Àngth
 = 
t
;

1526 
h_m©chög_å™s„r_ícodög_chunked
:

1527 
∑r£r
->
ödex
++;

1528 i‡(
∑r£r
->
ödex
 > (
CHUNKED
)-1

1529 || 
c
 !
CHUNKED
[
∑r£r
->
ödex
]) {

1530 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1531 } i‡(
∑r£r
->
ödex
 =(
CHUNKED
)-2) {

1532 
∑r£r
->
hódî_°©e
 = 
h_å™s„r_ícodög_chunked
;

1537 
h_m©chög_c⁄√˘i⁄_kìp_Æive
:

1538 
∑r£r
->
ödex
++;

1539 i‡(
∑r£r
->
ödex
 > (
KEEP_ALIVE
)-1

1540 || 
c
 !
KEEP_ALIVE
[
∑r£r
->
ödex
]) {

1541 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1542 } i‡(
∑r£r
->
ödex
 =(
KEEP_ALIVE
)-2) {

1543 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄_kìp_Æive
;

1548 
h_m©chög_c⁄√˘i⁄_˛o£
:

1549 
∑r£r
->
ödex
++;

1550 i‡(
∑r£r
->
ödex
 > (
CLOSE
)-1 || 
c
 != CLOSE[parser->index]) {

1551 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1552 } i‡(
∑r£r
->
ödex
 =(
CLOSE
)-2) {

1553 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄_˛o£
;

1557 
h_å™s„r_ícodög_chunked
:

1558 
h_c⁄√˘i⁄_kìp_Æive
:

1559 
h_c⁄√˘i⁄_˛o£
:

1560 i‡(
ch
 !' 'Ë
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1564 
∑r£r
->
°©e
 = 
s_hódî_vÆue
;

1565 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1571 
s_hódî_Æmo°_d⁄e
:

1573 
	`STRICT_CHECK
(
ch
 !
LF
);

1575 
∑r£r
->
°©e
 = 
s_hódî_vÆue_lws
;

1579 
s_hódî_vÆue_lws
:

1581 i‡(
ch
 == ' ' || ch == '\t') {

1582 
∑r£r
->
°©e
 = 
s_hódî_vÆue_°¨t
;

1583 
ªexecuã_byã
;

1587 
∑r£r
->
hódî_°©e
) {

1588 
h_c⁄√˘i⁄_kìp_Æive
:

1589 
∑r£r
->
Êags
 |
F_CONNECTION_KEEP_ALIVE
;

1591 
h_c⁄√˘i⁄_˛o£
:

1592 
∑r£r
->
Êags
 |
F_CONNECTION_CLOSE
;

1594 
h_å™s„r_ícodög_chunked
:

1595 
∑r£r
->
Êags
 |
F_CHUNKED
;

1601 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1602 
ªexecuã_byã
;

1605 
s_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e
:

1607 
	`STRICT_CHECK
(
ch
 !
LF
);

1608 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_lws
;

1612 
s_hódî_vÆue_disˇrd_lws
:

1614 i‡(
ch
 == ' ' || ch == '\t') {

1615 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws
;

1619 
	`MARK
(
hódî_vÆue
);

1620 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1621 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1622 
ªexecuã_byã
;

1626 
s_hódîs_Æmo°_d⁄e
:

1628 
	`STRICT_CHECK
(
ch
 !
LF
);

1630 i‡(
∑r£r
->
Êags
 & 
F_TRAILING
) {

1632 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1633 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1637 
∑r£r
->
°©e
 = 
s_hódîs_d⁄e
;

1640 
∑r£r
->
upgøde
 =

1641 (
∑r£r
->
Êags
 & 
F_UPGRADE
 ||Ö¨£r->
mëhod
 =
HTTP_CONNECT
);

1652 i‡(
£âögs
->
⁄_hódîs_com∂ëe
) {

1653 
£âögs
->
	`⁄_hódîs_com∂ëe
(
∑r£r
)) {

1658 
∑r£r
->
Êags
 |
F_SKIPBODY
;

1662 
	`SET_ERRNO
(
HPE_CB_hódîs_com∂ëe
);

1663  
p
 - 
d©a
;

1667 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) {

1668  
p
 - 
d©a
;

1671 
ªexecuã_byã
;

1674 
s_hódîs_d⁄e
:

1676 
	`STRICT_CHECK
(
ch
 !
LF
);

1678 
∑r£r
->
ƒód
 = 0;

1681 i‡(
∑r£r
->
upgøde
) {

1682 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1683 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1684  (
p
 - 
d©a
) + 1;

1687 i‡(
∑r£r
->
Êags
 & 
F_SKIPBODY
) {

1688 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1689 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1690 } i‡(
∑r£r
->
Êags
 & 
F_CHUNKED
) {

1692 
∑r£r
->
°©e
 = 
s_chunk_size_°¨t
;

1694 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1696 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1697 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1698 } i‡(
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
) {

1700 
∑r£r
->
°©e
 = 
s_body_idítôy
;

1702 i‡(
∑r£r
->
ty≥
 =
HTTP_REQUEST
 ||

1703 !
	`hâp_mesßge_√eds_eof
(
∑r£r
)) {

1705 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1706 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1709 
∑r£r
->
°©e
 = 
s_body_idítôy_eof
;

1717 
s_body_idítôy
:

1719 
uöt64_t
 
to_ªad
 = 
	`MIN
(
∑r£r
->
c⁄ã¡_Àngth
,

1720 (
uöt64_t
Ë((
d©a
 + 
Àn
Ë- 
p
));

1722 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 != 0

1723 && 
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
);

1730 
	`MARK
(
body
);

1731 
∑r£r
->
c⁄ã¡_Àngth
 -
to_ªad
;

1732 
p
 +
to_ªad
 - 1;

1734 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1735 
∑r£r
->
°©e
 = 
s_mesßge_d⁄e
;

1746 
	`CALLBACK_DATA_
(
body
, 
p
 - 
body_m¨k
 + 1,Ö - 
d©a
);

1747 
ªexecuã_byã
;

1754 
s_body_idítôy_eof
:

1755 
	`MARK
(
body
);

1756 
p
 = 
d©a
 + 
Àn
 - 1;

1760 
s_mesßge_d⁄e
:

1761 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1762 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1765 
s_chunk_size_°¨t
:

1767 
	`as£π
(
∑r£r
->
ƒód
 == 1);

1768 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1770 
unhex_vÆ
 = 
unhex
[()
ch
];

1771 i‡(
unhex_vÆ
 == -1) {

1772 
	`SET_ERRNO
(
HPE_INVALID_CHUNK_SIZE
);

1773 
îr‹
;

1776 
∑r£r
->
c⁄ã¡_Àngth
 = 
unhex_vÆ
;

1777 
∑r£r
->
°©e
 = 
s_chunk_size
;

1781 
s_chunk_size
:

1783 
uöt64_t
 
t
;

1785 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1787 i‡(
ch
 =
CR
) {

1788 
∑r£r
->
°©e
 = 
s_chunk_size_Æmo°_d⁄e
;

1792 
unhex_vÆ
 = 
unhex
[()
ch
];

1794 i‡(
unhex_vÆ
 == -1) {

1795 i‡(
ch
 == ';' || ch == ' ') {

1796 
∑r£r
->
°©e
 = 
s_chunk_∑ømëîs
;

1800 
	`SET_ERRNO
(
HPE_INVALID_CHUNK_SIZE
);

1801 
îr‹
;

1804 
t
 = 
∑r£r
->
c⁄ã¡_Àngth
;

1805 
t
 *= 16;

1806 
t
 +
unhex_vÆ
;

1809 i‡((
ULLONG_MAX
 - 16Ë/ 16 < 
∑r£r
->
c⁄ã¡_Àngth
) {

1810 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1811 
îr‹
;

1814 
∑r£r
->
c⁄ã¡_Àngth
 = 
t
;

1818 
s_chunk_∑ømëîs
:

1820 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1822 i‡(
ch
 =
CR
) {

1823 
∑r£r
->
°©e
 = 
s_chunk_size_Æmo°_d⁄e
;

1829 
s_chunk_size_Æmo°_d⁄e
:

1831 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1832 
	`STRICT_CHECK
(
ch
 !
LF
);

1834 
∑r£r
->
ƒód
 = 0;

1836 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1837 
∑r£r
->
Êags
 |
F_TRAILING
;

1838 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1840 
∑r£r
->
°©e
 = 
s_chunk_d©a
;

1845 
s_chunk_d©a
:

1847 
uöt64_t
 
to_ªad
 = 
	`MIN
(
∑r£r
->
c⁄ã¡_Àngth
,

1848 (
uöt64_t
Ë((
d©a
 + 
Àn
Ë- 
p
));

1850 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1851 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 != 0

1852 && 
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
);

1857 
	`MARK
(
body
);

1858 
∑r£r
->
c⁄ã¡_Àngth
 -
to_ªad
;

1859 
p
 +
to_ªad
 - 1;

1861 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1862 
∑r£r
->
°©e
 = 
s_chunk_d©a_Æmo°_d⁄e
;

1868 
s_chunk_d©a_Æmo°_d⁄e
:

1869 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1870 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 == 0);

1871 
	`STRICT_CHECK
(
ch
 !
CR
);

1872 
∑r£r
->
°©e
 = 
s_chunk_d©a_d⁄e
;

1873 
	`CALLBACK_DATA
(
body
);

1876 
s_chunk_d©a_d⁄e
:

1877 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1878 
	`STRICT_CHECK
(
ch
 !
LF
);

1879 
∑r£r
->
ƒód
 = 0;

1880 
∑r£r
->
°©e
 = 
s_chunk_size_°¨t
;

1884 
	`as£π
(0 && "unhandled state");

1885 
	`SET_ERRNO
(
HPE_INVALID_INTERNAL_STATE
);

1886 
îr‹
;

1900 
	`as£π
(((
hódî_fõld_m¨k
 ? 1 : 0) +

1901 (
hódî_vÆue_m¨k
 ? 1 : 0) +

1902 (
uæ_m¨k
 ? 1 : 0) +

1903 (
body_m¨k
 ? 1 : 0) +

1904 (
°©us_m¨k
 ? 1 : 0)) <= 1);

1906 
	`CALLBACK_DATA_NOADVANCE
(
hódî_fõld
);

1907 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1908 
	`CALLBACK_DATA_NOADVANCE
(
uæ
);

1909 
	`CALLBACK_DATA_NOADVANCE
(
body
);

1910 
	`CALLBACK_DATA_NOADVANCE
(
°©us
);

1912  
Àn
;

1914 
îr‹
:

1915 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
) {

1916 
	`SET_ERRNO
(
HPE_UNKNOWN
);

1919  (
p
 - 
d©a
);

1920 
	}
}

1925 
	$hâp_mesßge_√eds_eof
 (c⁄° 
hâp_∑r£r
 *
∑r£r
)

1927 i‡(
∑r£r
->
ty≥
 =
HTTP_REQUEST
) {

1932 i‡(
∑r£r
->
°©us_code
 / 100 == 1 ||

1933 
∑r£r
->
°©us_code
 == 204 ||

1934 
∑r£r
->
°©us_code
 == 304 ||

1935 
∑r£r
->
Êags
 & 
F_SKIPBODY
) {

1939 i‡((
∑r£r
->
Êags
 & 
F_CHUNKED
Ë||Ö¨£r->
c⁄ã¡_Àngth
 !
ULLONG_MAX
) {

1944 
	}
}

1948 
	$hâp_should_kìp_Æive
 (c⁄° 
hâp_∑r£r
 *
∑r£r
)

1950 i‡(
∑r£r
->
hâp_maj‹
 > 0 &&Ö¨£r->
hâp_mö‹
 > 0) {

1952 i‡(
∑r£r
->
Êags
 & 
F_CONNECTION_CLOSE
) {

1957 i‡(!(
∑r£r
->
Êags
 & 
F_CONNECTION_KEEP_ALIVE
)) {

1962  !
	`hâp_mesßge_√eds_eof
(
∑r£r
);

1963 
	}
}

1967 
	$hâp_mëhod_°r
 (
hâp_mëhod
 
m
)

1969  
	`ELEM_AT
(
mëhod_°rögs
, 
m
, "<unknown>");

1970 
	}
}

1974 
	$hâp_∑r£r_öô
 (
hâp_∑r£r
 *
∑r£r
, 
hâp_∑r£r_ty≥
 
t
)

1976 *
d©a
 = 
∑r£r
->data;

1977 
	`mem£t
(
∑r£r
, 0, (*parser));

1978 
∑r£r
->
d©a
 = data;

1979 
∑r£r
->
ty≥
 = 
t
;

1980 
∑r£r
->
°©e
 = (
t
 =
HTTP_REQUEST
 ? 
s_°¨t_ªq
 : (à=
HTTP_RESPONSE
 ? 
s_°¨t_ªs
 : 
s_°¨t_ªq_‹_ªs
));

1981 
∑r£r
->
hâp_î∫o
 = 
HPE_OK
;

1982 
	}
}

1985 
	$hâp_î∫o_«me
(
hâp_î∫o
 
îr
) {

1986 
	`as£π
(
îr
 < ((
hâp_°ªº‹_èb
)/(http_strerror_tab[0])));

1987  
hâp_°ªº‹_èb
[
îr
].
«me
;

1988 
	}
}

1991 
	$hâp_î∫o_des¸ùti⁄
(
hâp_î∫o
 
îr
) {

1992 
	`as£π
(
îr
 < ((
hâp_°ªº‹_èb
)/(http_strerror_tab[0])));

1993  
hâp_°ªº‹_èb
[
îr
].
des¸ùti⁄
;

1994 
	}
}

1996 
hâp_ho°_°©e


1997 
	$hâp_∑r£_ho°_ch¨
(
hâp_ho°_°©e
 
s
, c⁄° 
ch
) {

1998 
s
) {

1999 
s_hâp_u£röfo
:

2000 
s_hâp_u£röfo_°¨t
:

2001 i‡(
ch
 == '@') {

2002  
s_hâp_ho°_°¨t
;

2005 i‡(
	`IS_USERINFO_CHAR
(
ch
)) {

2006  
s_hâp_u£röfo
;

2010 
s_hâp_ho°_°¨t
:

2011 i‡(
ch
 == '[') {

2012  
s_hâp_ho°_v6_°¨t
;

2015 i‡(
	`IS_HOST_CHAR
(
ch
)) {

2016  
s_hâp_ho°
;

2021 
s_hâp_ho°
:

2022 i‡(
	`IS_HOST_CHAR
(
ch
)) {

2023  
s_hâp_ho°
;

2027 
s_hâp_ho°_v6_íd
:

2028 i‡(
ch
 == ':') {

2029  
s_hâp_ho°_p‹t_°¨t
;

2034 
s_hâp_ho°_v6
:

2035 i‡(
ch
 == ']') {

2036  
s_hâp_ho°_v6_íd
;

2040 
s_hâp_ho°_v6_°¨t
:

2041 i‡(
	`IS_HEX
(
ch
) || ch == ':' || ch == '.') {

2042  
s_hâp_ho°_v6
;

2047 
s_hâp_ho°_p‹t
:

2048 
s_hâp_ho°_p‹t_°¨t
:

2049 i‡(
	`IS_NUM
(
ch
)) {

2050  
s_hâp_ho°_p‹t
;

2058  
s_hâp_ho°_dód
;

2059 
	}
}

2062 
	$hâp_∑r£_ho°
(c⁄° * 
buf
, 
hâp_∑r£r_uæ
 *
u
, 
found_©
) {

2063 
hâp_ho°_°©e
 
s
;

2065 c⁄° *
p
;

2066 
size_t
 
buÊí
 = 
u
->
fõld_d©a
[
UF_HOST
].
off
 + u->fõld_d©a[UF_HOST].
Àn
;

2068 
u
->
fõld_d©a
[
UF_HOST
].
Àn
 = 0;

2070 
s
 = 
found_©
 ? 
s_hâp_u£röfo_°¨t
 : 
s_hâp_ho°_°¨t
;

2072 
p
 = 
buf
 + 
u
->
fõld_d©a
[
UF_HOST
].
off
;Ö < bu‡+ 
buÊí
;Ö++) {

2073 
hâp_ho°_°©e
 
√w_s
 = 
	`hâp_∑r£_ho°_ch¨
(
s
, *
p
);

2075 i‡(
√w_s
 =
s_hâp_ho°_dód
) {

2079 
√w_s
) {

2080 
s_hâp_ho°
:

2081 i‡(
s
 !
s_hâp_ho°
) {

2082 
u
->
fõld_d©a
[
UF_HOST
].
off
 = 
p
 - 
buf
;

2084 
u
->
fõld_d©a
[
UF_HOST
].
Àn
++;

2087 
s_hâp_ho°_v6
:

2088 i‡(
s
 !
s_hâp_ho°_v6
) {

2089 
u
->
fõld_d©a
[
UF_HOST
].
off
 = 
p
 - 
buf
;

2091 
u
->
fõld_d©a
[
UF_HOST
].
Àn
++;

2094 
s_hâp_ho°_p‹t
:

2095 i‡(
s
 !
s_hâp_ho°_p‹t
) {

2096 
u
->
fõld_d©a
[
UF_PORT
].
off
 = 
p
 - 
buf
;

2097 
u
->
fõld_d©a
[
UF_PORT
].
Àn
 = 0;

2098 
u
->
fõld_£t
 |(1 << 
UF_PORT
);

2100 
u
->
fõld_d©a
[
UF_PORT
].
Àn
++;

2103 
s_hâp_u£röfo
:

2104 i‡(
s
 !
s_hâp_u£röfo
) {

2105 
u
->
fõld_d©a
[
UF_USERINFO
].
off
 = 
p
 - 
buf
 ;

2106 
u
->
fõld_d©a
[
UF_USERINFO
].
Àn
 = 0;

2107 
u
->
fõld_£t
 |(1 << 
UF_USERINFO
);

2109 
u
->
fõld_d©a
[
UF_USERINFO
].
Àn
++;

2115 
s
 = 
√w_s
;

2119 
s
) {

2120 
s_hâp_ho°_°¨t
:

2121 
s_hâp_ho°_v6_°¨t
:

2122 
s_hâp_ho°_v6
:

2123 
s_hâp_ho°_p‹t_°¨t
:

2124 
s_hâp_u£röfo
:

2125 
s_hâp_u£röfo_°¨t
:

2132 
	}
}

2135 
	$hâp_∑r£r_∑r£_uæ
(c⁄° *
buf
, 
size_t
 
buÊí
, 
is_c⁄√˘
,

2136 
hâp_∑r£r_uæ
 *
u
)

2138 
°©e
 
s
;

2139 c⁄° *
p
;

2140 
hâp_∑r£r_uæ_fõlds
 
uf
, 
ﬁd_uf
;

2141 
found_©
 = 0;

2143 
u
->
p‹t
 = u->
fõld_£t
 = 0;

2144 
s
 = 
is_c⁄√˘
 ? 
s_ªq_£rvî_°¨t
 : 
s_ªq_•a˚s_bef‹e_uæ
;

2145 
uf
 = 
ﬁd_uf
 = 
UF_MAX
;

2147 
p
 = 
buf
;Ö < bu‡+ 
buÊí
;Ö++) {

2148 
s
 = 
	`∑r£_uæ_ch¨
(s, *
p
);

2151 
s
) {

2152 
s_dód
:

2156 
s_ªq_schema_¶ash
:

2157 
s_ªq_schema_¶ash_¶ash
:

2158 
s_ªq_£rvî_°¨t
:

2159 
s_ªq_quîy_°rög_°¨t
:

2160 
s_ªq_‰agmít_°¨t
:

2163 
s_ªq_schema
:

2164 
uf
 = 
UF_SCHEMA
;

2167 
s_ªq_£rvî_wôh_©
:

2168 
found_©
 = 1;

2171 
s_ªq_£rvî
:

2172 
uf
 = 
UF_HOST
;

2175 
s_ªq_∑th
:

2176 
uf
 = 
UF_PATH
;

2179 
s_ªq_quîy_°rög
:

2180 
uf
 = 
UF_QUERY
;

2183 
s_ªq_‰agmít
:

2184 
uf
 = 
UF_FRAGMENT
;

2188 
	`as£π
(!"Unexpected state");

2193 i‡(
uf
 =
ﬁd_uf
) {

2194 
u
->
fõld_d©a
[
uf
].
Àn
++;

2198 
u
->
fõld_d©a
[
uf
].
off
 = 
p
 - 
buf
;

2199 
u
->
fõld_d©a
[
uf
].
Àn
 = 1;

2201 
u
->
fõld_£t
 |(1 << 
uf
);

2202 
ﬁd_uf
 = 
uf
;

2207 i‡((
u
->
fõld_£t
 & ((1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
))) != 0) {

2208 i‡(
	`hâp_∑r£_ho°
(
buf
, 
u
, 
found_©
) != 0) {

2214 i‡(
is_c⁄√˘
 && 
u
->
fõld_£t
 !((1 << 
UF_HOST
)|(1 << 
UF_PORT
))) {

2218 i‡(
u
->
fõld_£t
 & (1 << 
UF_PORT
)) {

2220 
v
 = 
	`°πoul
(
buf
 + 
u
->
fõld_d©a
[
UF_PORT
].
off
, 
NULL
, 10);

2223 i‡(
v
 > 0xffff) {

2227 
u
->
p‹t
 = (
uöt16_t
Ë
v
;

2231 
	}
}

2234 
	$hâp_∑r£r_∑u£
(
hâp_∑r£r
 *
∑r£r
, 
∑u£d
) {

2239 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
 ||

2240 
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_PAUSED
) {

2241 
	`SET_ERRNO
((
∑u£d
Ë? 
HPE_PAUSED
 : 
HPE_OK
);

2243 
	`as£π
(0 && "AttemptingÅoÖauseÖarser inÉrror state");

2245 
	}
}

2248 
	$hâp_body_is_föÆ
(c⁄° 
hâp_∑r£r
 *
∑r£r
) {

2249  
∑r£r
->
°©e
 =
s_mesßge_d⁄e
;

2250 
	}
}

2253 
	$hâp_∑r£r_vîsi⁄
() {

2254  
HTTP_PARSER_VERSION_MAJOR
 * 0x10000 |

2255 
HTTP_PARSER_VERSION_MINOR
 * 0x00100 |

2256 
HTTP_PARSER_VERSION_PATCH
 * 0x00001;

2257 
	}
}

	@/home/kartik/nwe/include/Config.h

1 #i‚de‡
__CONFIG_H__


2 
	#__CONFIG_H__


	)

	@/home/kartik/nwe/include/Constants.h

1 #i‚de‡
__CONTSTANTS_H__


2 
	#__CONTSTANTS_H__


	)

4 
	#HTTP_500_INTERNAL_ERROR
 "500 I¡î«»Sîvî Eº‹\r\n"

	)

5 
	#HTTP_200_OK
 "200 OK\r\n"

	)

6 
	#CONTENT_LENGTH
 "C⁄ã¡-Lígth"

	)

7 
	#CRLF
 "\r\n"

	)

	@/home/kartik/nwe/include/CoroCtx.h

1 #i‚de‡
__CORO_CTX_H__


2 
	#__CORO_CTX_H__


	)

3 
	~"c‹o.h
"

5 
	sC‹oCtx
 {

6 
c‹o_c⁄ãxt
 
	m˘x
;

7 
C‹oCtx
* 
	m√xt
;

	@/home/kartik/nwe/include/CoroCtxPool.h

1 #i‚de‡
__CORO_CONTEXT_POOL_H__


2 
	#__CORO_CONTEXT_POOL_H__


	)

5 
	gC‹oCtx
;

6 
	sC‹oCtxPoﬁ
 {

7 
size_t
 
	mgrow_by
;

8 
size_t
 
	m°ack_size
;

13 
C‹oCtx
* 
	mÊi°
;

16 
öôC‹oCtxPoﬁ
(
C‹oCtxPoﬁ
*, 
size_t
, size_t, size_t);

17 
¸óãC‹oCtxSècks
(
C‹oCtxPoﬁ
*, 
size_t
, size_t);

18 
C‹oCtx
* 
˘x_poﬁ_gë
(
C‹oCtxPoﬁ
*);

19 
˘x_poﬁ_put
(
C‹oCtxPoﬁ
*, 
C‹oCtx
*);

	@/home/kartik/nwe/include/Err.h

1 #i‚de‡
__ERR_H__


2 
	#__ERR_H__


	)

11 
	#ERR_HEAP_ALLOC_FAILURE
 (-1)

	)

15 
	#ERR_BUFF_OVERFLOW
 (-2)

	)

19 
	#ERR_BUFF_UNDERFLOW
 (-3)

	)

23 
	#ERR_HTTP_PARSER
 (-4)

	)

25 
	#ERR_INTERNAL
 (-5)

	)

27 
	#ERR_HTTP_METHOD_NOT_IMPLEMENTED
 (-6)

	)

29 
	#ERR_HTTP_PARSER_PAUSED
 (-7)

	)

31 
	#ERR_HTTP_MSG_WRITE_REDUNDANT
 (-8)

	)

33 
	#ERR_SYSCALL_FAILED
 (-9)

	)

	@/home/kartik/nwe/include/Handlers.h

1 #i‚de‡
__HANDLERS_H__


2 
	#__HANDLERS_H__


	)

4 
	gRó˘‹
;

5 
	gHTTPMsg
;

7 
hñloW‹ld
(

8 
Ró˘‹
* 
ªa˘‹
,

9 
HTTPMsg
* 
msg
,

10 * 
≠p_d©a


12 
deÁu…H™dÀr
(

13 
Ró˘‹
* 
ªa˘‹
,

14 
HTTPMsg
* 
msg
,

15 * 
≠p_d©a


17 
d•Sim
(

18 
Ró˘‹
* 
ªa˘‹
,

19 
HTTPMsg
* 
msg
,

20 * 
≠p_d©a


22 
gëSP
(

23 
Ró˘‹
* 
ªa˘‹
,

24 
HTTPMsg
* 
msg
,

25 * 
≠p_d©a


	@/home/kartik/nwe/include/Timer.h

1 #i‚de‡
__TIMER_H__


2 
	#__TIMER_H__


	)

4 
	~"ev.h
"

6 
	gRó˘‹
;

7 
	gTimî
;

10 (*
	tFPTRTimeoutCB
Ë(
	tRó˘‹
* 
	tªa˘‹
, 
	tTimî
* 
	ttimî
, * 
	t˘xt
, 
	tªvíts
);

13 
	sDLi°
 {

14 
Timî
* 
hód
;

15 
Timî
* 
èû
;

16 
size
;

19 
	sTimîLi°
 {

23 
ev_t°amp
 
timeout
;

27 
ev_timî
 
timî
;

33 
DLi°
 
timî_li°
;

39 
	eTimîSèã
 {

40 
TIMER_STATE_UNKNOWN
,

41 
TIMER_STATE_INIT
,

42 
TIMER_STATE_STARTED


49 
	sTimî
 {

50 #ifde‡
STRINGENT_ERROR_CHECKING


54 
time•ec
 
°¨t_time
;

55 
time•ec
 
expúe_time
;

61 
ev_t°amp
 
a˘uÆ_timeout
;

67 
Ró˘‹
* 
ªa˘‹
;

71 * 
˘xt
;

75 
FPTRTimeoutCB
 
cb
;

77 
Timî
* 
√xt
;

78 
Timî
* 
¥ev
;

83 
TimîLi°
* 
timî_li°
;

87 
TimîSèã
 
°©e
;

94 
	sTimîLi°M≠
 {

100 
TimîLi°
** 
timîs
;

101 
size
;

102 
max_size
;

104 
	`öôTimîLi°M≠
(

105 
TimîLi°M≠
* 
m≠


117 
	`£tTimîLi°M≠
(

118 
TimîLi°M≠
* 
m≠
,

119 
max_size


130 
	`öôTimî
(

131 
Ró˘‹
* 
ªa˘‹
,

132 
Timî
* 
timî
,

133 
FPTRTimeoutCB
 
cb
,

134 * 
˘xt
,

135 
timeout


142 
	`°¨tTimî
(

143 
Timî
* 
timî


149 
	`°›Timî
(

150 
Timî
* 
timî


	@/home/kartik/nwe/include/Utils.h

1 #i‚de‡
__UTILS_H__


2 
	#__UTILS_H__


	)

3 
	~<°döt.h
>

4 
	~<°dboﬁ.h
>

10 
	sDTextBuff
 {

11 * 
	mbuf
;

12 
	msize
;

13 
	mmax_size
;

16 
	sDBö¨yBuff
 {

17 * 
	mbuf
;

18 
	msize
;

19 
	mmax_size
;

22 
	sOff£tPaú
 {

23 
uöt16_t
 
	mkey
;

24 
uöt16_t
 
	mvÆue
;

27 
	sKeyVÆuePaú
 {

28 * 
	mkey
;

29 * 
	mvÆue
;

32 
	sKVPAºay
 {

33 
KeyVÆuePaú
* 
	mkv∑ºay
;

34 
	msize
;

35 
	mmax_size
;

38 
	sKVPP¨£r
 {

39 
Off£tPaú
* 
	mkv∑ºay
;

40 * 
	mbuf
;

41 
	msize
;

44 
uöt32_t
 
√xtPowîOf2
(uint32_t);

46 
∑r£KVPBuf„r
(

47 
KVPP¨£r
* 
p
,

48 
dñimôî1
,

49 
dñimôî2
,

50 
boﬁ
 
ªmove_w•a˚
,

51 
n_höt


56 
timeNowD
();

58 
de°royDTextBuff
(

59 
DTextBuff
* 
p


62 
de°royDBö¨yBuff
(

63 
DBö¨yBuff
* 
p


66 
de°royKVPBuf„r
(

67 
KVPP¨£r
* 
p


70 
de°royKVPAºay
(

71 
KVPAºay
* 
p


73 
ª£tDTextBuff
(

74 
DTextBuff
* 
p


76 
ª£tDBö¨yBuff
(

77 
DBö¨yBuff
* 
p


79 
ªÆloˇã_mem
(

80 ** 
buf
,

81 
size
,

82 * 
max_size
,

83 
Àn
,

84 
höt_size
,

85 
boﬁ
 
nul_ch¨_ªquúed


	@/home/kartik/nwe/include/coro.h

84 #i‚de‡
CORO_H


85 
	#CORO_H


	)

89 #i‡
__˝lu•lus


169 
	#CORO_VERSION
 3

	)

171 
	~<°ddef.h
>

176 (*
c‹o_func
)(*);

183 
c‹o_c⁄ãxt
 
	tc‹o_c⁄ãxt
;

199 
c‹o_¸óã
 (
c‹o_c⁄ãxt
 *
˘x
,

200 
c‹o_func
 
c‹o
,

201 *
¨g
,

202 *
•å
,

203 
size_t
 
ssze
);

212 
c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
);

225 
c‹o_de°roy
 (
c‹o_c⁄ãxt
 *
˘x
);

250 #i‚de‡
CORO_STACKALLOC


251 
	#CORO_STACKALLOC
 1

	)

254 #i‡
CORO_STACKALLOC


264 
	sc‹o_°ack


266 *
•å
;

267 
size_t
 
ssze
;

268 #i‡
CORO_USE_VALGRIND


269 
vÆgröd_id
;

283 
c‹o_°ack_Æloc
 (
c‹o_°ack
 *
°ack
, 
size
);

290 
c‹o_°ack_‰ì
 (
c‹o_°ack
 *
°ack
);

300 #i‡!
deföed
 
CORO_LOSER
 && !deföed 
CORO_UCONTEXT
 \

301 && !
deföed
 
CORO_SJLJ
 && !deföed 
CORO_LINUX
 \

302 && !
deföed
 
CORO_IRIX
 && !deföed 
CORO_ASM
 \

303 && !
deföed
 
CORO_PTHREAD
 && !deföed 
CORO_FIBER


304 #i‡
deföed
 
WINDOWS
 && (deföed 
__i386
 || (deföed 
__x86_64
 || deföed 
_M_IX86
 || deföed 
_M_AMD64
))

305 
	#CORO_ASM
 1

	)

306 #ñi‡
deföed
 
WINDOWS
 || deföed 
_WIN32


307 
	#CORO_LOSER
 1

	)

308 #ñi‡
__löux
 && (
__i386
 || (
__x86_64
 && !
__ILP32
))

309 
	#CORO_ASM
 1

	)

310 #ñi‡
deföed
 
HAVE_UCONTEXT_H


311 
	#CORO_UCONTEXT
 1

	)

312 #ñi‡
deföed
 
HAVE_SETJMP_H
 && deföed 
HAVE_SIGALTSTACK


313 
	#CORO_SJLJ
 1

	)

315 #îr‹ 
unknown
 
‹
 
unsuµ‹ãd
 
¨chôe˘uª


321 #i‡
CORO_UCONTEXT


323 
	~<uc⁄ãxt.h
>

325 
	sc‹o_c⁄ãxt


327 
uc⁄ãxt_t
 
uc
;

330 
	#c‹o_å™s„r
(
p
,
n
Ë
	`sw≠c⁄ãxt
 (&(’)->
uc
), &(“)->uc))

	)

331 
	#c‹o_de°roy
(
˘x
Ë(*)(˘x)

	)

333 #ñi‡
CORO_SJLJ
 || 
CORO_LOSER
 || 
CORO_LINUX
 || 
CORO_IRIX


335 #i‡
deföed
(
CORO_LINUX
Ë&& !deföed(
_GNU_SOURCE
)

336 
	#_GNU_SOURCE


	)

339 #i‡!
CORO_LOSER


340 
	~<uni°d.h
>

344 #i‡
__sun


345 #unde‡
_XOPEN_UNIX


346 
	#_XOPEN_UNIX
 1

	)

349 
	~<£tjmp.h
>

351 #i‡
_XOPEN_UNIX
 > 0 || 
deföed
 (
_£tjmp
)

352 
	#c‹o_jmp_buf
 
jmp_buf


	)

353 
	#c‹o_£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

354 
	#c‹o_l⁄gjmp
(
ív
Ë
	`_l⁄gjmp
 (”nv), 1)

	)

355 #ñi‡
CORO_LOSER


356 
	#c‹o_jmp_buf
 
jmp_buf


	)

357 
	#c‹o_£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

358 
	#c‹o_l⁄gjmp
(
ív
Ë
	`l⁄gjmp
 (”nv), 1)

	)

360 
	#c‹o_jmp_buf
 
sigjmp_buf


	)

361 
	#c‹o_£tjmp
(
ív
Ë
	`sig£tjmp
 (ív, 0)

	)

362 
	#c‹o_l⁄gjmp
(
ív
Ë
	`sigl⁄gjmp
 (”nv), 1)

	)

365 
	sc‹o_c⁄ãxt


367 
c‹o_jmp_buf
 
ív
;

370 
	#c‹o_å™s„r
(
p
,
n
Ëdÿ{ i‡(!
	`c‹o_£tjmp
 (’)->
ív
)Ë
	`c‹o_l⁄gjmp
 (“)->ív); } 0)

	)

371 
	#c‹o_de°roy
(
˘x
Ë(*)(˘x)

	)

373 #ñi‡
CORO_ASM


375 
	sc‹o_c⁄ãxt


377 **
•
;

380 
__©åibuã__
 ((
__noölöe__
, 
__ªg∑rm__
(2)))

381 
c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
);

383 
	#c‹o_de°roy
(
˘x
Ë(*)(˘x)

	)

385 #ñi‡
CORO_PTHREAD


387 
	~<±hªad.h
>

389 
±hªad_muãx_t
 
c‹o_muãx
;

391 
	sc‹o_c⁄ãxt


393 
±hªad_c⁄d_t
 
	gcv
;

394 
±hªad_t
 
	gid
;

397 
c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
);

398 
c‹o_de°roy
 (
c‹o_c⁄ãxt
 *
˘x
);

400 #ñi‡
CORO_FIBER


402 
	sc‹o_c⁄ãxt


404 *
	gfibî
;

406 
c‹o_func
 
	gc‹o
;

407 *
	g¨g
;

410 
c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
);

411 
c‹o_de°roy
 (
c‹o_c⁄ãxt
 *
˘x
);

415 #i‡
__˝lu•lus


	@/home/kartik/nwe/include/hp.h

1 #i‚de‡
__HP_H__


2 
	#__HP_H__


	)

4 
	~<°döt.h
>

5 
	~<sys/uio.h
>

6 
	~"ev.h
"

7 
	~"hâp_∑r£r.h
"

8 
	~"Timî.h
"

9 
	~"Utûs.h
"

10 
	~<√töë/ö.h
>

12 
	#MAX_URL_HANDLERS
 3

	)

14 
	gRó˘‹
;

15 
	gHTTPMsg
;

17 (*
	tFPTRURLH™dÀr
Ë(
	tRó˘‹
*, 
	tHTTPMsg
*, *);

19 
	sURLA˘i⁄sAndH™dÀr
 {

20 c⁄° * 
uæ
;

21 
uöt8_t
 
a˘i⁄s
;

22 
FPTRURLH™dÀr
 
h™dÀr
;

27 * 
≠p_d©a
;

28 #ifde‡
DEBUG


29 c⁄° * 
Âå_«me
;

37 
	sRó˘‹
 {

39 
ev_lo›
* 
lo›
;

48 
r_w_pùe
[2];

52 
TimîLi°M≠
 
timîs
;

53 
URLA˘i⁄sAndH™dÀr
 
uæ_h™dÀr_öfo
[
MAX_URL_HANDLERS
];

57 
n_uæ_h™dÀrs
;

64 
TCPC⁄nInfo
;

66 
HTTPMsg
;

73 
	eHTTPMsgSèã
 {

74 
HTTP_MSG_STATE_INIT
 = 1,

75 
HTTP_MSG_STATE_PARSING_METHOD
 = 2,

76 
HTTP_MSG_STATE_PARSED_METHOD
 = 3,

77 
HTTP_MSG_STATE_PARSED_STATUS
 = 4,

78 
HTTP_MSG_STATE_PARSING_URL
 = 5,

79 
HTTP_MSG_STATE_PARSED_URL
 = 6,

80 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
 = 7,

81 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
 = 8,

82 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 = 9,

83 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
 = 10,

84 
HTTP_MSG_STATE_HEADERS_COMPLETE
 = 11,

85 
HTTP_MSG_STATE_PARSING_BODY
 = 12,

86 
HTTP_MSG_STATE_PARSED_BODY
 = 13,

87 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
 =14,

88 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
 = 15,

89 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
 = 16,

90 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
 = 17,

91 
HTTP_MSG_STATE_REQ_COMPLETE
 = 18,

92 
HTTP_MSG_STATE_HANDLER_INVOKED
 = 19,

93 
HTTP_MSG_STATE_RESP_COMPLETE
 = 20,

99 
HTTP_MSG_STATE_TCP_CONN_CLOSED
 = 21,

104 
HTTP_MSG_STATE_ERR
 = 22

107 
	eHTTPURLH™dÀrFœgs
 {

108 
HTTP_PARSE_QUERY_PARAMS
 = 1,

109 
HTTP_PARSE_HEADERS
 = 2,

110 
HTTP_PARSE_COOKIES
 = 4,

111 
SEND_CONNECTION_CLOSE_HEADER
 = 8

119 
uöt8_t
 
a˘i⁄s
;

122 
	sHTTPP¨£r
 {

124 
hâp_∑r£r
 
∑r£r
;

129 
uöt16_t
 
˘xt_œ°_hódî_c›õd
;

134 
uöt16_t
 
˘xt_œ°_hódî_max_size
;

162 
	sHTTPP¨£dURL
 {

163 
DTextBuff
 
ruæ
;

164 
KVPP¨£r
 
q∑øms
;

165 
hâp_∑r£r_uæ
 
puæ
;

168 
	sHTTPRe•⁄£
 {

169 
uöt16_t
 
°©us
;

170 
DTextBuff
 
hódî
;

171 
DBö¨yBuff
 
body
;

175 
	sHTTPMsg
 {

181 
hâp_∑r£r_ty≥
 
ty≥
;

183 
TCPC⁄nInfo
* 
c⁄n
;

187 
hâp_mëhod
 
mëhod
;

188 
uöt8_t
 
a˘i⁄s
;

189 
FPTRURLH™dÀr
 
uæ_h™dÀr
;

190 * 
≠p_d©a
;

194 
uöt8_t
 
°©us_code
;

195 
HTTPMsgSèã
 
°©e
;

200 
HTTPP¨£dURL
 
∑r£d_uæ
;

205 
KVPAºay
 
hódîs
;

209 
KVPP¨£r
 
cookõs
;

216 
DBö¨yBuff
 
body
;

221 
HTTPRe•⁄£
 
ª•⁄£
;

226 
HTTPMsg
* 
√xt
;

228 
HTTPMsg
* 
¥ev
;

232 
	sHTTPMsgDLi°
 {

233 
HTTPMsg
* 
hód
;

234 
HTTPMsg
* 
èû
;

241 
HTTPMsg
* 
√xt_msg
;

242 
size
;

244 
TCPC⁄nInfo
;

246 (*
	tFPTRIOCB
Ë(
	tev_lo›
*, 
	tev_io
*, );

254 
	eNëwBuffTy≥
 {

255 
NETW_BUFF_UNDEFINED
,

256 
NETW_BUFF_READ
,

257 
NETW_BUFF_WRITE


261 
	eC⁄nD©aP¨£rTy≥
 {

262 
APP_UNKNOWN
 = 0,

267 
APP_HTTP_PARSER
,

271 
APP_HTTP2_PARSER
,

276 
APP_MEMCACHED_PARSER


291 
	sNëwBuff
 {

292 * 
d©a
;

293 
°¨t_ödex
;

295 
íd_ödex
;

296 
max_Àn
;

300 
em±y_•a˚
;

301 
NëwBuffTy≥
 
ty≥
;

303 
TCPC⁄nInfo
* 
c⁄n
;

353 
	sWrôeCtxt
 {

354 
iovec
 
vio
[2];

355 
boﬁ
 
is_wrôe_blocked
;

356 
uöt8_t
 
ödex
;

357 * 
˘xt
;

360 
	sTCPC⁄nInfo
 {

362 
fd
;

369 
ö_addr
 
ùv4_addr
;

370 
ö6_addr
 
ùv6_addr
;

371 }
ù
;

372 
uöt16_t
 
p‹t
;

373 }
≥î_addr
;

378 
Ró˘‹
* 
ªa˘‹
;

388 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
;

393 * 
∑r£r
;

405 * 
ö_d©a
;

410 
ev_io
 
io_rw©chî
;

414 
ev_io
 
io_ww©chî
;

423 
Timî
 
r_tmr
;

428 
Timî
 
w_tmr
;

437 
DBö¨yBuff
 
rbuf
;

441 
WrôeCtxt
 
w_˘xt
;

452 
HTTPMsg
* 
	`gëHTTPMsgDLi°Hód
(

453 
HTTPMsgDLi°
* 
li°


471 
HTTPP¨£r
* 
	`¸óãHTTPP¨£r
(

472 
hâp_∑r£r_ty≥
 
ty≥


478 
	`de°royHTTPP¨£r
(

479 
HTTPP¨£r
* 
∑r£r


485 
	`£tHTTPP¨£rC⁄ãxt
(

486 
HTTPP¨£r
* 
∑r£r
,

487 * 
˘xt


490 
	`execuãHTTPP¨£r
(

491 
HTTPP¨£r
* 
∑r£r
,

492 c⁄° * 
±r
,

493 
byãs
,

494 
TCPC⁄nInfo
* 
c⁄n


497 
	`öôHTTPMsgDLi°
(

498 
HTTPMsgDLi°
* 
li°


504 
	`ö£πHTTPMsgAtTaû
(

505 
HTTPMsgDLi°
* 
li°
,

506 
HTTPMsg
* 
msg


512 
	`de°royHTTPMsg
(

513 
HTTPMsg
* 
msg


516 
	`de°royHTTPMsgDLi°
(

517 
HTTPMsgDLi°
* 
li°


528 
	`ªcvNëwD©a
(

529 
fd
,

530 
DBö¨yBuff
* 
rbuf


541 
	`£ndNëwD©a
(

542 
fd
,

543 
iovec
* 
vio
,

544 
size


547 
	`£ndHTTPMsgs
(

548 
TCPC⁄nInfo
* 
c⁄n
,

549 
HTTPMsgDLi°
* 
msg_li°


552 
	`föishHTTPMsg
(

553 
HTTPMsg
* 
msg


556 
HTTPMsg
* 
	`gëHTTPMsg
(

557 
hâp_∑r£r_ty≥
 
ty≥
,

558 
TCPC⁄nInfo
* 
c⁄n


564 
	`ªmoveHTTPMsg
(

565 
HTTPMsgDLi°
* 
li°
,

566 
HTTPMsg
* 
msg


570 
HTTPMsg
* 
	`ªmoveHTTPMsgDLi°Hód
(

571 
HTTPMsgDLi°
* 
li°


574 
HTTPMsg
* 
	`gëHTTPMsgDLi°Taû
(

575 
HTTPMsgDLi°
* 
li°


582 
HTTPMsg
* 
	`gëNextHTTPMsg
(

583 
HTTPMsgDLi°
* 
li°


589 
	`⁄HTTPReqMsgBegö
(

590 
hâp_∑r£r
* 
p


597 
	`⁄HTTPResSètus
(

598 
hâp_∑r£r
* 
p
,

599 c⁄° * 
©
,

600 
size_t
 
Àngth


611 
	`⁄HTTPReqURL
(

612 
hâp_∑r£r
* 
p
,

613 c⁄° * 
©
,

614 
size_t
 
Àn


625 
	`⁄HTTPReqHódîFõld
(

626 
hâp_∑r£r
* 
p
,

627 c⁄° * 
©
,

628 
size_t
 
Àn


639 
	`⁄HTTPReqHódîVÆue
(

640 
hâp_∑r£r
* 
p
,

641 c⁄° * 
©
,

642 
size_t
 
Àn


652 
	`⁄HTTPReqHódîsCom∂ëe
(

653 
hâp_∑r£r
* 
p


663 
	`⁄HTTPReqBody
(

664 
hâp_∑r£r
* 
p
,

665 c⁄° * 
©
,

666 
size_t
 
Àn


673 
	`⁄HTTPReqMsgCom∂ëe
(

674 
hâp_∑r£r
* 
p


677 
	`öôTCPC⁄nBuff
(

678 
DBö¨yBuff
* 
buf
,

679 
max_size


689 
TCPC⁄nInfo
* 
	`TCPC⁄nInô
(

690 
fd
,

691 
r_buf_size
,

693 
r_timeout
,

694 
w_timeout
,

697 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
,

698 * 
∑r£r
,

700 
Ró˘‹
* 
ªa˘‹
,

701 
FPTRIOCB
 
io_rcb
,

702 
FPTRIOCB
 
io_wcb
,

703 
FPTRTimeoutCB
 
r_timeout_cb
,

704 
FPTRTimeoutCB
 
w_timeout_cb


716 
	`ªadTimeoutCB
(

717 
Ró˘‹
* 
ªa˘‹
,

718 
Timî
* 
timî
,

719 * 
˘xt
,

720 
ªvíts


723 
	`de°royTCPC⁄n
(

724 
TCPC⁄nInfo
* 
c⁄n


737 
	`wrôeTimeoutCB
(

738 
Ró˘‹
* 
ªa˘‹
,

739 
Timî
* 
timî
,

740 * 
˘xt
,

741 
ªvíts


744 
	`¥o˚ssHTTPReqCB
(

745 
ev_lo›
* 
lo›
,

746 
ev_io
* 
w
,

747 
ªvíts


750 
	`¥o˚ssWrôeRódyCB
(

751 
ev_lo›
* 
lo›
,

752 
ev_io
* 
w
,

753 
ªvíts


759 c⁄° * 
	`gëHTTPMsgQP¨am
(

760 
HTTPMsg
* 
msg
,

761 c⁄° * 
∑øm


764 c⁄° * 
	`gëHTTPMsgHódî
(

765 
HTTPMsg
* 
msg
,

766 c⁄° * 
hódî_«me


769 c⁄° * 
	`gëHTTPMsgCookõ
(

770 
HTTPMsg
* 
msg
,

771 c⁄° * 
cookõ_«me


776 * 
	`gëHTTPMsgBody
(

777 
HTTPMsg
* 
msg
,

778 * 
Àn


788 
	`wrôeHTTPHdr
(

789 
HTTPMsg
* 
msg
,

790 c⁄° * 
§c
,

791 
Àn


794 
	`wrôeHTTPBody
(

795 
HTTPMsg
* 
msg
,

796 c⁄° * 
§c
,

797 
Àn


800 
	`föishHTTPMsg
(

801 
HTTPMsg
* 
msg


804 
	`•rötfHTTPBody
(

805 
HTTPMsg
* 
msg
,

806 c⁄° * 
fmt
,

809 
	`•rötfHTTPHdr
(

810 
HTTPMsg
* 
msg
,

811 c⁄° * 
fmt
,

	@/home/kartik/nwe/include/http_parser.h

21 #i‚de‡
hâp_∑r£r_h


22 
	#hâp_∑r£r_h


	)

23 #ifde‡
__˝lu•lus


28 
	#HTTP_PARSER_VERSION_MAJOR
 2

	)

29 
	#HTTP_PARSER_VERSION_MINOR
 3

	)

30 
	#HTTP_PARSER_VERSION_PATCH
 0

	)

32 
	~<sys/ty≥s.h
>

33 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__MINGW32__
Ë&& (!deföed(
_MSC_VER
) || _MSC_VER<1600)

34 
	~<Ba£Tsd.h
>

35 
	~<°ddef.h
>

36 
__öt8
 
	töt8_t
;

37 
	t__öt8
 
	tuöt8_t
;

38 
__öt16
 
	töt16_t
;

39 
	t__öt16
 
	tuöt16_t
;

40 
__öt32
 
	töt32_t
;

41 
	t__öt32
 
	tuöt32_t
;

42 
__öt64
 
	töt64_t
;

43 
	t__öt64
 
	tuöt64_t
;

45 
	~<°döt.h
>

51 #i‚de‡
HTTP_PARSER_STRICT


52 
	#HTTP_PARSER_STRICT
 1

	)

62 #i‚de‡
HTTP_MAX_HEADER_SIZE


63 
	#HTTP_MAX_HEADER_SIZE
 (80*1024)

	)

66 
hâp_∑r£r
 
	thâp_∑r£r
;

67 
hâp_∑r£r_£âögs
 
	thâp_∑r£r_£âögs
;

83 (*
hâp_d©a_cb
Ë(
	thâp_∑r£r
*, c⁄° *
	t©
, 
	tsize_t
 
	tÀngth
);

84 (*
hâp_cb
Ë(
	thâp_∑r£r
*);

88 
	#HTTP_METHOD_MAP
(
XX
) \

89 
	`XX
(0, 
DELETE
, DELETE) \

90 
	`XX
(1, 
GET
, GET) \

91 
	`XX
(2, 
HEAD
, HEAD) \

92 
	`XX
(3, 
POST
, POST) \

93 
	`XX
(4, 
PUT
, PUT) \

95 
	`XX
(5, 
CONNECT
, CONNECT) \

96 
	`XX
(6, 
OPTIONS
, OPTIONS) \

97 
	`XX
(7, 
TRACE
, TRACE) \

99 
	`XX
(8, 
COPY
, COPY) \

100 
	`XX
(9, 
LOCK
, LOCK) \

101 
	`XX
(10, 
MKCOL
, MKCOL) \

102 
	`XX
(11, 
MOVE
, MOVE) \

103 
	`XX
(12, 
PROPFIND
, PROPFIND) \

104 
	`XX
(13, 
PROPPATCH
, PROPPATCH) \

105 
	`XX
(14, 
SEARCH
, SEARCH) \

106 
	`XX
(15, 
UNLOCK
, UNLOCK) \

108 
	`XX
(16, 
REPORT
, REPORT) \

109 
	`XX
(17, 
MKACTIVITY
, MKACTIVITY) \

110 
	`XX
(18, 
CHECKOUT
, CHECKOUT) \

111 
	`XX
(19, 
MERGE
, MERGE) \

113 
	`XX
(20, 
MSEARCH
, 
M
-
SEARCH
) \

114 
	`XX
(21, 
NOTIFY
, NOTIFY) \

115 
	`XX
(22, 
SUBSCRIBE
, SUBSCRIBE) \

116 
	`XX
(23, 
UNSUBSCRIBE
, UNSUBSCRIBE) \

118 
	`XX
(24, 
PATCH
, PATCH) \

119 
	`XX
(25, 
PURGE
, PURGE) \

120 
	`XX
(26, 
NONE
, NONE) \

121 

	)

122 
	ehâp_mëhod


124 
	#XX
(
num
, 
«me
, 
°rög
Ë
HTTP_
##«mênum,

	)

125 
HTTP_METHOD_MAP
(
XX
)

126 #unde‡
XX


130 
	ehâp_∑r£r_ty≥
 { 
HTTP_REQUEST
, 
HTTP_RESPONSE
, 
HTTP_BOTH
 };

134 
	eÊags


135 { 
F_CHUNKED
 = 1 << 0

136 , 
F_CONNECTION_KEEP_ALIVE
 = 1 << 1

137 , 
F_CONNECTION_CLOSE
 = 1 << 2

138 , 
F_TRAILING
 = 1 << 3

139 , 
F_UPGRADE
 = 1 << 4

140 , 
F_SKIPBODY
 = 1 << 5

148 
	#HTTP_ERRNO_MAP
(
XX
) \

150 
	`XX
(
OK
, "success") \

153 
	`XX
(
CB_mesßge_begö
, "the on_message_begin callback failed") \

154 
	`XX
(
CB_uæ
, "the on_url callback failed") \

155 
	`XX
(
CB_hódî_fõld
, "the on_header_field callback failed") \

156 
	`XX
(
CB_hódî_vÆue
, "the on_header_value callback failed") \

157 
	`XX
(
CB_hódîs_com∂ëe
, "the on_headers_complete callback failed") \

158 
	`XX
(
CB_body
, "the on_body callback failed") \

159 
	`XX
(
CB_mesßge_com∂ëe
, "the on_message_complete callback failed") \

160 
	`XX
(
CB_°©us
, "the on_status callback failed") \

163 
	`XX
(
INVALID_EOF_STATE
, "streamÉndedátán unexpectedÅime") \

164 
	`XX
(
HEADER_OVERFLOW
, \

166 
	`XX
(
CLOSED_CONNECTION
, \

168 
	`XX
(
INVALID_VERSION
, "invalid HTTP version") \

169 
	`XX
(
INVALID_STATUS
, "invalid HTTP status code") \

170 
	`XX
(
INVALID_METHOD
, "invalid HTTP method") \

171 
	`XX
(
INVALID_URL
, "invalid URL") \

172 
	`XX
(
INVALID_HOST
, "invalid host") \

173 
	`XX
(
INVALID_PORT
, "invalidÖort") \

174 
	`XX
(
INVALID_PATH
, "invalidÖath") \

175 
	`XX
(
INVALID_QUERY_STRING
, "invalid query string") \

176 
	`XX
(
INVALID_FRAGMENT
, "invalid fragment") \

177 
	`XX
(
LF_EXPECTED
, "LF characterÉxpected") \

178 
	`XX
(
INVALID_HEADER_TOKEN
, "invalid character in header") \

179 
	`XX
(
INVALID_CONTENT_LENGTH
, \

181 
	`XX
(
INVALID_CHUNK_SIZE
, \

183 
	`XX
(
INVALID_CONSTANT
, "invalid constant string") \

184 
	`XX
(
INVALID_INTERNAL_STATE
, "encountered unexpected internal state")\

185 
	`XX
(
STRICT
, "strict modeássertion failed") \

186 
	`XX
(
PAUSED
, "parser isÖaused") \

187 
	`XX
(
UNKNOWN
, "™ unknow¿îr‹ occuºed")

	)

191 
	#HTTP_ERRNO_GEN
(
n
, 
s
Ë
HPE_
##n,

	)

192 
	ehâp_î∫o
 {

193 
HTTP_ERRNO_MAP
(
HTTP_ERRNO_GEN
)

195 #unde‡
HTTP_ERRNO_GEN


199 
	#HTTP_PARSER_ERRNO
(
p
Ë((
hâp_î∫o
Ë’)->hâp_î∫o)

	)

202 
	shâp_∑r£r
 {

204 
ty≥
 : 2;

205 
Êags
 : 6;

206 
°©e
 : 8;

207 
hódî_°©e
 : 8;

208 
ödex
 : 8;

210 
uöt32_t
 
ƒód
;

211 
uöt64_t
 
c⁄ã¡_Àngth
;

214 
hâp_maj‹
;

215 
hâp_mö‹
;

216 
°©us_code
 : 16;

217 
mëhod
 : 8;

218 
hâp_î∫o
 : 7;

225 
upgøde
 : 1;

228 *
d©a
;

232 
	shâp_∑r£r_£âögs
 {

233 
hâp_cb
 
⁄_mesßge_begö
;

234 
hâp_d©a_cb
 
⁄_uæ
;

235 
hâp_d©a_cb
 
⁄_°©us
;

236 
hâp_d©a_cb
 
⁄_hódî_fõld
;

237 
hâp_d©a_cb
 
⁄_hódî_vÆue
;

238 
hâp_cb
 
⁄_hódîs_com∂ëe
;

239 
hâp_d©a_cb
 
⁄_body
;

240 
hâp_cb
 
⁄_mesßge_com∂ëe
;

244 
	ehâp_∑r£r_uæ_fõlds


245 { 
UF_SCHEMA
 = 0

246 , 
UF_HOST
 = 1

247 , 
UF_PORT
 = 2

248 , 
UF_PATH
 = 3

249 , 
UF_QUERY
 = 4

250 , 
UF_FRAGMENT
 = 5

251 , 
UF_USERINFO
 = 6

252 , 
UF_MAX
 = 7

263 
	shâp_∑r£r_uæ
 {

264 
uöt16_t
 
fõld_£t
;

265 
uöt16_t
 
p‹t
;

268 
uöt16_t
 
off
;

269 
uöt16_t
 
Àn
;

270 } 
fõld_d©a
[
UF_MAX
];

284 
hâp_∑r£r_vîsi⁄
();

286 
hâp_∑r£r_öô
(
hâp_∑r£r
 *
∑r£r
, 
hâp_∑r£r_ty≥
 
ty≥
);

289 
size_t
 
hâp_∑r£r_execuã
(
hâp_∑r£r
 *
∑r£r
,

290 c⁄° 
hâp_∑r£r_£âögs
 *
£âögs
,

291 c⁄° *
d©a
,

292 
size_t
 
Àn
);

301 
hâp_should_kìp_Æive
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

304 c⁄° *
hâp_mëhod_°r
(
hâp_mëhod
 
m
);

307 c⁄° *
hâp_î∫o_«me
(
hâp_î∫o
 
îr
);

310 c⁄° *
hâp_î∫o_des¸ùti⁄
(
hâp_î∫o
 
îr
);

313 
hâp_∑r£r_∑r£_uæ
(c⁄° *
buf
, 
size_t
 
buÊí
,

314 
is_c⁄√˘
,

315 
hâp_∑r£r_uæ
 *
u
);

318 
hâp_∑r£r_∑u£
(
hâp_∑r£r
 *
∑r£r
, 
∑u£d
);

321 
hâp_body_is_föÆ
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

323 #ifde‡
__˝lu•lus


	@/home/kartik/nwe/include/inpcache/inpc_api.h

1 #i‚de‡
__INPC_API__


2 
	#__INPC_API__


	)

4 
	~"öpc_hash_c⁄f.h
"

5 
	~"öpc_ôem.h
"

6 
	~"ˇche_ty≥s.h
"

8 
	#DATA_COPY_OFF_FLAG
 0

	)

9 
	#DATA_COPY_ON_FLAG
 1

	)

11 
uöt32_t
 
öpc_öô
(c⁄° 
uöt64_t
 
max_mem_size
, c⁄° 
hash_¥›îtõs_t
 
hash_¥›
, c⁄° 
ôem_¥›îtõs_t
 
ô_¥›
);

12 * 
öpc_gë_acquúe
(c⁄° *
key
, c⁄° 
uöt8_t
 
nkey
, 
uöt32_t
* 
nvÆ
, uöt32_t* 
îr‹_code
, uöt8_à
Êags
);

14 
öpc_£t
(c⁄° * 
key
, c⁄° 
uöt8_t
 
nkey
, c⁄° * 
vÆue
, c⁄° 
uöt32_t
 
nvÆ
, c⁄° uöt32_à
expúy
);

15 
öpc_gë_ªÀa£
(**);

	@/home/kartik/nwe/include/inpcache/inpc_common.h

1 #i‚de‡
__COMMON__


2 
	#__COMMON__


	)

4 
	#åue
 1

	)

5 
	#Ál£
 0

	)

7 
	#mö
(
a
, 
b
Ë((◊Ë> (b)Ë? (bË: (a))

	)

10 
	#cuºít_time
(Ë
g_time


	)

12 
	#CLEANUP_THREAD_SLEEP_INTERVAL
 100

	)

13 
	#BACKWARD_EXPIRY_CHECK_LIMIT
 100

	)

14 
	#DEF_BACKWARD_EXPIRY_CHECK_LIMIT
 20

	)

15 
	#AGGRESSIVE_EXPIRY_SIZE_CUTOFF
 40000

	)

17 
	#EXPIRE_CLAIMABLE_ITEM_FLAG
 (128)

	)

18 
	#__wôh_lock
(
¨gs
Ë◊rgs)

	)

19 
	#__wôh_©omic
(
¨gs
)

	)

20 #ifde‡
WITH_ATOMIC


21 
	#__wôh_©omic
(
¨gs
Ë¨gs;

	)

23 
	#__wôh_©omic
(
¨gs
)

	)

25 #ifde‡
STATS_ON


26 
	#__°©s_check
(
¨gs
Ë◊rgs)

	)

28 
	#__°©s_check
(
¨gs
)

	)

31 #ifde‡
SEQ_CHECK


32 
	#__£q_check
(
¨gs
Ë◊rgs)

	)

34 
	#__£q_check
(
¨gs
)

	)

39 * 
	m±r
;

40 
uöt64_t
 
	mmax_size
;

43 
uöt64_t
 
	mu£d_size
;

45 
±hªad_muãx_t
 
	mlock
;

46 }
	tmem‹y_dëaûs_t
;

	@/home/kartik/nwe/include/inpcache/inpc_debug.h

1 #i‚de‡
__INPDEBUG__


2 
	#__INPDEBUG__


	)

5 #ifde‡
INPDEBUG


6 
	#öpc_debug
(
f‹m©
, ...Ë
	`Ârötf
(
°dout
, "D:%s:" f‹m© "\n", 
__FUNCTION__
, ##
__VA_ARGS__
);

	)

8 
	#öpc_debug
(
f‹m©
, ...)

	)

11 
	#öpc_îr‹_¥öt
(
f‹m©
, ...Ë
	`Ârötf
(
°dout
, "E:%s:" f‹m© "\n", 
__FUNCTION__
, ##
__VA_ARGS__
);

	)

12 
	#öpc_îr‹_log
(
f‹m©
, ...Ë
	`Ârötf
(
°dout
, "E:%s:" f‹m© "\n", 
__FUNCTION__
, ##
__VA_ARGS__
);

	)

13 
	#öpc_log
(
f‹m©
, ...Ë
	`Ârötf
(
°dout
, "L:%s:" f‹m© "\n", 
__FUNCTION__
, ##
__VA_ARGS__
);

	)

15 
	#≠röt
(
f‹m©
, ...Ë
	`Ârötf
(
°dout
, "A:%s:" f‹m© "\n", 
__FUNCTION__
, ##
__VA_ARGS__
);

	)

	@/home/kartik/nwe/include/inpcache/inpc_error.h

1 #i‚de‡
__INPC_ERROR__


2 
	#__INPC_ERROR__


	)

4 
	#INPC_ERROR_PAGE_ALLOCATION_FAIL
 1

	)

5 
	#INPC_ERROR_SET_FAILED_TOO_BIG_OBJECT
 2

	)

6 
	#INPC_ERROR_SET_FAILED_NO_SPACE
 3

	)

7 
	#INPC_ERROR_INVALID_SET_COMMAND
 4

	)

8 
	#INPC_ERROR_INVALID_GET_PARAMS
 5

	)

10 
	#INPC_ERROR_ITEM_EXPIRED
 1

	)

11 
	#INPC_ERROR_ITEM_ABSENT
 2

	)

	@/home/kartik/nwe/include/inpcache/inpc_hash.h

1 #i‚de‡
HASH_H


2 
	#HASH_H


	)

4 #ifde‡ 
__˝lu•lus


8 
uöt32_t
 
gë_öpc_hash
(c⁄° *
key
, 
size_t
 
Àngth
, c⁄° uöt32_à
öôvÆ
);

10 #ifde‡ 
__˝lu•lus


	@/home/kartik/nwe/include/inpcache/inpc_hash_conf.h

1 #i‚de‡
__HASH_CONF__


2 
	#__HASH_CONF__


	)

4 
	~"öpc_ôem.h
"

6 
	#DEFAULT_MIN_HASH_SIZE
 1<<23

	)

7 
	#DEFAULT_MAX_HASH_SIZE
 1<<28

	)

8 
	#DEFAULT_HASH_GROW_FACTOR
 2

	)

9 
	#DEFAULT_HASH_GROW_PROBING_LENGTH_TRIGGER
 2

	)

10 
	#DEFAULT_HASH_GROW_FILL_TRIGGER
 80

	)

11 
	#HASHTABLE_DEFAULT_LOCKS_SIZE
 2<<13

	)

12 
	#HASHTABLE_DEFAULT_LOCKS_AND
 0x00000FFF

	)

15 
	#gë_lock_öd
(
öd
, 
hash_size
, 
lock_li°_size
Ë(öd & (lock_li°_size))

	)

16 
	#gë_hash_lock
(
öd
Ë(&
hash
.
lock_li°
.
locks
[öd])

	)

18 
	#gë_©omic_loc
(
öd
Ë(&
hash
.
©omic
[öd])

	)

21 
uöt32_t
 
	mmö_hash_size
;

22 
uöt32_t
 
	mmax_hash_size
;

23 
	mhash_grow_Á˘‹
;

24 
	mhash_grow_¥obög_Àngth_åiggî
;

25 
	mhash_grow_fûl_åiggî
;

26 }
	thash_¥›îtõs_t
;

29 
mem_ôem_t
* 
	m√xt
;

30 }
	thash_íåy_t
;

33 
±hªad_muãx_t
 *
	mlocks
;

34 
	msize
;

35 }
	thash_locks_t
;

38 
hash_íåy_t
* 
	mli°
;

39 
hash_locks_t
 
	mlock_li°
;

40 #ifde‡
WITH_ATOMIC


41 
uöt32_t
 
	m©omic
[2<<13];

43 
uöt32_t
 
	mcur_size
;

44 
uöt32_t
 
	mhash_™d_Á˘‹
;

45 
uöt32_t
 
	mfûÀd_cou¡
;

46 
uöt32_t
 
	m√t_Àngth_cou¡
;

47 
uöt32_t
 
	mmax_chaö
;

48 }
	töpc_hash_èbÀ_t
;

	@/home/kartik/nwe/include/inpcache/inpc_item.h

1 #i‚de‡
_INPC_ITEM_


2 
	#_INPC_ITEM_


	)

4 
	#DEFAULT_MIN_ITEM_SIZE
 8

	)

5 
	#DEFAULT_MAX_ITEM_SIZE
 (1<<20)

	)

6 
	#DEFAULT_PAGE_SIZE
 1<<20

	)

7 
	#DEFAULT_ITEM_SIZE_GROW_FACTOR
 1.25

	)

8 
	#INPC_MAX_KEY_SIZE
 255

	)

9 
	#KEY_MARGIN
 8

	)

11 
	#ITEM_UPDATE
 1

	)

12 
	#ITEM_ADD
 2

	)

14 
	#öôülize_ôem
(
cuºít
, 
nxt
, 
¶ab_id
, 
ôem_size
Ë{((
mem_ôem_t
*)cuºít)->
√xt
 = (mem_item_t*)nxt; ((mem_item_t*)current)->slab_id = slab_id; \

15 ((
mem_ôem_t
*)
cuºít
)->
Ãu_√xt
 = 
NULL
; ((mem_ôem_t*)cuºít)->
Ãu_¥ev
 = NULL;}

	)

16 
	#should_∑ge_be_Æloˇãd
(
¶ab_id
Ë((
¶abs
.
li°
[¶ab_id].
‰ì_ôem
)
_cou¡
 =0)

	)

17 
	#gë_Æig√d_ôem_mëa_size
(Ë(
	`eight_byã_Æign
((
mem_ôem_t
)Ë+Éight_byã_Æign(()))

	)

18 
	#gë_key
(
ô
Ë((*)((*)ô + (
	`eight_byã_Æign
((
mem_ôem_t
)))))

	)

19 
	#gë_vÆue_±r
(
ô
Ë(
	`gë_key
(ôË+ (
	`eight_byã_Æign
(ô->
key_Àn
)) + ())

20 
	#gë_expúy
(
cur
Ë(cur->
expúy
)

	)

21 
	#gë_vÆue_Àngth
(
cur
Ë(cur->
vÆue_Àngth
)

	)

22 
	#ö¸ó£_ôem_ªfcou¡
(
cur
, 
cou¡
Ë(cur->
ªf_cou¡
 +cou¡)

	)

23 
	#gë_ªfcou¡
(
ô
Ë(ô->
ªf_cou¡
)

	)

25 
	#ITEM_CLAIMABLE
 1

	)

27 
	#ITEM_ACCESSED
 4

	)

29 
	#gë_ªf_cou¡_±r
(
ô
Ë((
uöt32_t
*)(
	`gë_key
(ô)+
	`eight_byã_Æign
(ô->
key_Àn
)))

	)

30 
	#gë_Êags_±r
(
ô
Ë(
	`gë_ªf_cou¡_±r
(ôË+ 1)

	)

33 
uöt32_t
 
	mmö_ôem_size
;

34 
uöt32_t
 
	m∑ge_size
;

35 
uöt32_t
 
	ma˘uÆ_∑ge_size
;

36 
uöt32_t
 
	mmax_ôem_size
;

37 
	môem_size_grow_Á˘‹
;

38 }
	tôem_¥›îtõs_t
;

40 
	smem_ôem
 {

41 
uöt32_t
 
	mexpúy
;

42 
uöt32_t
 
	mvÆue_Àngth
;

43 
uöt32_t
 
	mÃu_ch™ge_time
;

44 
uöt8_t
 
	mkey_Àn
;

45 
uöt8_t
 
	m¶ab_id
;

46 
uöt8_t
 
	mÊags
;

47 
uöt8_t
 
	mfûÀr
;

48 
mem_ôem
* 
	m√xt
;

49 
mem_ôem
* 
	mÃu_√xt
;

50 
mem_ôem
* 
	mÃu_¥ev
;

51 }
	tmem_ôem_t
;

	@/home/kartik/nwe/include/inpcache/inpc_settings.h

1 #i‚de‡
_INPC_SETTINGS_


2 
	#_INPC_SETTINGS_


	)

4 
	~"öpc_ôem.h
"

5 
	~"öpc_hash_c⁄f.h
"

8 
uöt64_t
 
	mmax_mem_size
;

9 
hash_¥›îtõs_t
 
	mhash_¥›
;

10 
ôem_¥›îtõs_t
 
	mô_¥›
;

11 #ifde‡
NOT_IN_USE


12 
	mthªad_cou¡
;

13 
	mevi˘i⁄_Ægo
;

14 (*
	mhash_fun˘i⁄
)(c⁄° *, 
	mÀn
);

15 
	mp‹t
;

17 } 
	töpc_£âögs
;

	@/home/kartik/nwe/include/inpcache/inpc_slabclass.h

1 #i‚de‡
__SLABCLASS__


2 
	#__SLABCLASS__


	)

4 
	~"öpc_ôem.h
"

6 
	#MAX_SLAB_SIZE
 64

	)

8 
uöt32_t
 
£tup_∑ge
(c⁄° uöt32_à
¶ab_id
);

11 
uöt32_t
 
	môem_size
;

12 
uöt32_t
 
	m∑ge_size
;

13 
mem_ôem
* 
	m‰ì
;

14 
mem_ôem
 
	mu£d_hód
;

15 
mem_ôem
 
	mu£d_èû
;

16 
uöt32_t
 
	mu£d_ôem_cou¡
;

17 
uöt32_t
 
	m‰ì_ôem_cou¡
;

19 
uöt32_t
 
	m∑ge_cou¡
;

20 
uöt64_t
 
	mgë_ˇŒs
;

21 
uöt64_t
 
	m£t_ˇŒs
;

22 
uöt8_t
 
	mevi˘i⁄_°¨ãd
;

23 
uöt16_t
 
	mthªad_back_check_limô
;

24 
±hªad_muãx_t
 
	mlock
;

25 }
	t¶abíåy_t
;

28 
¶abíåy_t
 
	mli°
[
MAX_SLAB_SIZE
];

29 
uöt8_t
 
	mmax_íåõs
;

30 
uöt8_t
 
	mcur_íåõs
;

31 }
	t¶ab˛ass_t
;

	@/home/kartik/nwe/include/inpcache/inpc_stats.h

1 #i‚de‡
__INPC_STATS__


2 
	#__INPC_STATS__


	)

4 
	#MEM_CROSSED_75_PERCENT
 "INPC:75CROSS"

	)

5 
£nd_öpc_mem_≥r˚¡_°©s
(c⁄° * 
key
);

8 
	m°¨t_time
;

9 
	mc›y_gë_ˇŒs
;

10 
	mno_c›y_gë_ˇŒs
;

11 
	mgë_övÆid_∑øms
;

12 
	m£t_övÆid_∑øms
;

13 
	mgë_mis£s
;

14 
	mgë_expúy_˛aimed
;

15 
	mexp_un„tched
;

16 
	mÃu_ac˚ss_upd©e
;

17 
	mcur_hash_ôems
;

18 
	m£t_ˇŒs
;

19 
	m£t_Áû_no_•a˚
;

20 
	m£t_Áû_too_œrge_obje˘
;

21 
	m£t_ovîwrôe
;

22 
	mtŸÆ_ôems
;

23 
	mevi˘i⁄s
;

24 
	mexpúed_by_thªad
;

25 
	m˛aimed_by_thªad
;

27 
	movw_un„tched
;

28 
	mhash_size
;

29 
	mmax_mem_size
;

30 
	mmax_ôem_size
;

31 
	m∑ge_guidñöe
;

32 
	mbyãs_ªad
;

33 
	mbyãs_wrôãn
;

34 }
	töpc_°©s_t
;

	@/home/kartik/nwe/include/mtwist.h

1 #i‚de‡
MTWIST_H


2 
	#MTWIST_H


	)

127 
	~<°dio.h
>

128 #ifde‡
__˝lu•lus


129 
	~<io°ªam
>

132 
	#__STDC_LIMIT_MACROS


	)

133 
	~<°döt.h
>

140 
	#MT_STATE_SIZE
 624

	)

160 
uöt32_t
 
	m°©evec
[
MT_STATE_SIZE
];

162 
	m°©ïå
;

163 
	möôülized
;

165 
	tmt_°©e
;

167 #ifde‡
__˝lu•lus


175 
mts_m¨k_öôülized
(
mt_°©e
* 
°©e
);

177 
mts_£ed32
(
mt_°©e
* 
°©e
, 
uöt32_t
 
£ed
);

179 
mts_£ed32√w
(
mt_°©e
* 
°©e
, 
uöt32_t
 
£ed
);

181 
mts_£edfuŒ
(
mt_°©e
* 
°©e
,

182 
uöt32_t
 
£eds
[
MT_STATE_SIZE
]);

184 
mts_£ed
(
mt_°©e
* 
°©e
);

189 
mts_good£ed
(
mt_°©e
* 
°©e
);

195 
mts_be°£ed
(
mt_°©e
* 
°©e
);

203 
mts_ª‰esh
(
mt_°©e
* 
°©e
);

205 
mts_ßve°©e
(
FILE
* 
°©efûe
, 
mt_°©e
* 
°©e
);

208 
mts_lﬂd°©e
(
FILE
* 
°©efûe
, 
mt_°©e
* 
°©e
);

215 
mt_£ed32
(
uöt32_t
 
£ed
);

217 
mt_£ed32√w
(
uöt32_t
 
£ed
);

219 
mt_£edfuŒ
(
uöt32_t
 
£eds
[
MT_STATE_SIZE
]);

221 
mt_£ed
();

225 
mt_good£ed
();

231 
mt_be°£ed
();

239 
mt_°©e
* 
mt_gë°©e
();

242 
mt_ßve°©e
(
FILE
* 
°©efûe
);

245 
mt_lﬂd°©e
(
FILE
* 
°©efûe
);

249 #ifde‡
__˝lu•lus


261 #ifde‡
__˝lu•lus


264 
uöt32_t
 
mts_Ã™d
(
mt_°©e
* 
°©e
);

266 #ifde‡
UINT64_MAX


267 
uöt64_t
 
mts_Œønd
(
mt_°©e
* 
°©e
);

270 
mts_dønd
(
mt_°©e
* 
°©e
);

273 
mts_ldønd
(
mt_°©e
* 
°©e
);

277 
uöt32_t
 
mt_Ã™d
();

278 #ifde‡
UINT64_MAX


279 
uöt64_t
 
mt_Œønd
();

282 
mt_dønd
();

285 
mt_ldønd
();

297 
	#MT_TEMPERING_MASK_B
 0x9d2c5680

	)

298 
	#MT_TEMPERING_MASK_C
 0xefc60000

	)

299 
	#MT_TEMPERING_SHIFT_U
(
y
) \

300 (
y
 >> 11)

	)

301 
	#MT_TEMPERING_SHIFT_S
(
y
) \

302 (
y
 << 7)

	)

303 
	#MT_TEMPERING_SHIFT_T
(
y
) \

304 (
y
 << 15)

	)

305 
	#MT_TEMPERING_SHIFT_L
(
y
) \

306 (
y
 >> 18)

	)

315 
	#MT_PRE_TEMPER
(
vÆue
) \

318 
vÆue
 ^
	`MT_TEMPERING_SHIFT_U
(value); \

319 
vÆue
 ^
	`MT_TEMPERING_SHIFT_S
(vÆueË& 
MT_TEMPERING_MASK_B
; \

320 
vÆue
 ^
	`MT_TEMPERING_SHIFT_T
(vÆueË& 
MT_TEMPERING_MASK_C
; \

322 0)

	)

323 
	#MT_FINAL_TEMPER
(
vÆue
) \

324 ((
vÆue
Ë^ 
	`MT_TEMPERING_SHIFT_L
(vÆue))

	)

325 
	#MT_TEMPER
(
vÆue
) \

328 
vÆue
 ^
	`MT_TEMPERING_SHIFT_U
(value); \

329 
vÆue
 ^
	`MT_TEMPERING_SHIFT_S
(vÆueË& 
MT_TEMPERING_MASK_B
; \

330 
vÆue
 ^
	`MT_TEMPERING_SHIFT_T
(vÆueË& 
MT_TEMPERING_MASK_C
; \

331 
vÆue
 ^
	`MT_TEMPERING_SHIFT_L
(value); \

333 0)

	)

335 
mt_°©e
 
mt_deÁu…_°©e
;

337 
mt_32_to_doubÀ
;

339 
mt_64_to_doubÀ
;

347 #i‚de‡
MT_EXTERN


348 #ifde‡
__˝lu•lus


349 
	#MT_EXTERN


	)

351 
	#MT_EXTERN
 

	)

360 #i‚de‡
MT_INLINE


361 
	#MT_INLINE
 
ölöe


	)

370 #i‚de‡
MT_GENERATE_CODE_IN_HEADER


371 #ifde‡
__GNUC__


372 
	#MT_GENERATE_CODE_IN_HEADER
 1

	)

374 #i‡
deföed
(
__INTEL_COMPILER
Ë|| deföed(
_MSC_VER
)

375 
	#MT_GENERATE_CODE_IN_HEADER
 0

	)

379 #i‡
MT_GENERATE_CODE_IN_HEADER


388 
MT_EXTERN
 
MT_INLINE
 
uöt32_t
 
mts_Ã™d
(

389 
mt_°©e
* 
°©e
)

391 
uöt32_t
 
øndom_vÆue
;

393 i‡(
°©e
->
°©ïå
 <= 0)

394 
mts_ª‰esh
(
°©e
);

396 
øndom_vÆue
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

397 
MT_PRE_TEMPER
(
øndom_vÆue
);

398  
MT_FINAL_TEMPER
(
øndom_vÆue
);

401 #ifde‡
UINT64_MAX


417 
MT_EXTERN
 
MT_INLINE
 
uöt64_t
 
mts_Œønd
(

418 
mt_°©e
* 
°©e
)

420 
uöt32_t
 
øndom_vÆue_1
;

421 
uöt32_t
 
øndom_vÆue_2
;

428 i‡(--
°©e
->
°©ïå
 <= 0)

430 i‡(
°©e
->
°©ïå
 < 0)

432 
mts_ª‰esh
(
°©e
);

433 
øndom_vÆue_1
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

437 
øndom_vÆue_1
 = 
°©e
->
°©evec
[°©e->
°©ïå
];

438 
mts_ª‰esh
(
°©e
);

442 
øndom_vÆue_1
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

444 
MT_TEMPER
(
øndom_vÆue_1
);

446 
øndom_vÆue_2
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

447 
MT_PRE_TEMPER
(
øndom_vÆue_2
);

449  ((
uöt64_t
Ë
øndom_vÆue_1
 << 32)

450 | (
uöt64_t
Ë
MT_FINAL_TEMPER
(
øndom_vÆue_2
);

459 
MT_EXTERN
 
MT_INLINE
 
mts_dønd
(

460 
mt_°©e
* 
°©e
)

462 
uöt32_t
 
øndom_vÆue
;

464 i‡(
°©e
->
°©ïå
 <= 0)

465 
mts_ª‰esh
(
°©e
);

467 
øndom_vÆue
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

468 
MT_TEMPER
(
øndom_vÆue
);

470  
øndom_vÆue
 * 
mt_32_to_doubÀ
;

478 
MT_EXTERN
 
MT_INLINE
 
mts_ldønd
(

479 
mt_°©e
* 
°©e
)

481 #ifde‡
UINT64_MAX


482 
uöt64_t
 
föÆ_vÆue
;

484 
uöt32_t
 
øndom_vÆue_1
;

485 
uöt32_t
 
øndom_vÆue_2
;

492 i‡(--
°©e
->
°©ïå
 <= 0)

494 i‡(
°©e
->
°©ïå
 < 0)

496 
mts_ª‰esh
(
°©e
);

497 
øndom_vÆue_1
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

501 
øndom_vÆue_1
 = 
°©e
->
°©evec
[°©e->
°©ïå
];

502 
mts_ª‰esh
(
°©e
);

506 
øndom_vÆue_1
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

508 
MT_TEMPER
(
øndom_vÆue_1
);

510 
øndom_vÆue_2
 = 
°©e
->
°©evec
[--°©e->
°©ïå
];

511 
MT_TEMPER
(
øndom_vÆue_2
);

513 #ifde‡
UINT64_MAX


514 
föÆ_vÆue
 = ((
uöt64_t
Ë
øndom_vÆue_1
 << 32Ë| (uöt64_tË
øndom_vÆue_2
;

515  
föÆ_vÆue
 * 
mt_64_to_doubÀ
;

517  
øndom_vÆue_1
 * 
mt_32_to_doubÀ
 + 
øndom_vÆue_2
 * 
mt_64_to_doubÀ
;

527 
MT_EXTERN
 
MT_INLINE
 
uöt32_t
 
mt_Ã™d
()

529 
uöt32_t
 
øndom_vÆue
;

531 i‡(
mt_deÁu…_°©e
.
°©ïå
 <= 0)

532 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

534 
øndom_vÆue
 = 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

535 
MT_PRE_TEMPER
(
øndom_vÆue
);

537  
MT_FINAL_TEMPER
(
øndom_vÆue
);

540 #ifde‡
UINT64_MAX


547 
MT_EXTERN
 
MT_INLINE
 
uöt64_t
 
mt_Œønd
()

549 
uöt32_t
 
øndom_vÆue_1
;

550 
uöt32_t
 
øndom_vÆue_2
;

557 i‡(--
mt_deÁu…_°©e
.
°©ïå
 <= 0)

559 i‡(
mt_deÁu…_°©e
.
°©ïå
 < 0)

561 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

562 
øndom_vÆue_1
 =

563 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

567 
øndom_vÆue_1
 =

568 
mt_deÁu…_°©e
.
°©evec
[mt_deÁu…_°©e.
°©ïå
];

569 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

573 
øndom_vÆue_1
 =

574 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

576 
MT_TEMPER
(
øndom_vÆue_1
);

578 
øndom_vÆue_2
 = 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

579 
MT_PRE_TEMPER
(
øndom_vÆue_2
);

581  ((
uöt64_t
Ë
øndom_vÆue_1
 << 32)

582 | (
uöt64_t
Ë
MT_FINAL_TEMPER
(
øndom_vÆue_2
);

591 
MT_EXTERN
 
MT_INLINE
 
mt_dønd
()

593 
uöt32_t
 
øndom_vÆue
;

595 i‡(
mt_deÁu…_°©e
.
°©ïå
 <= 0)

596 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

598 
øndom_vÆue
 = 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

599 
MT_TEMPER
(
øndom_vÆue
);

601  
øndom_vÆue
 * 
mt_32_to_doubÀ
;

609 
MT_EXTERN
 
MT_INLINE
 
mt_ldønd
()

611 #ifde‡
UINT64_MAX


612 
uöt64_t
 
föÆ_vÆue
;

614 
uöt32_t
 
øndom_vÆue_1
;

615 
uöt32_t
 
øndom_vÆue_2
;

622 i‡(--
mt_deÁu…_°©e
.
°©ïå
 <= 0)

624 i‡(
mt_deÁu…_°©e
.
°©ïå
 < 0)

626 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

627 
øndom_vÆue_1
 =

628 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

632 
øndom_vÆue_1
 =

633 
mt_deÁu…_°©e
.
°©evec
[mt_deÁu…_°©e.
°©ïå
];

634 
mts_ª‰esh
(&
mt_deÁu…_°©e
);

638 
øndom_vÆue_1
 =

639 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

641 
MT_TEMPER
(
øndom_vÆue_1
);

643 
øndom_vÆue_2
 = 
mt_deÁu…_°©e
.
°©evec
[--mt_deÁu…_°©e.
°©ïå
];

644 
MT_TEMPER
(
øndom_vÆue_2
);

646 #ifde‡
UINT64_MAX


647 
föÆ_vÆue
 = ((
uöt64_t
Ë
øndom_vÆue_1
 << 32Ë| (uöt64_tË
øndom_vÆue_2
;

648  
föÆ_vÆue
 * 
mt_64_to_doubÀ
;

650  
øndom_vÆue_1
 * 
mt_32_to_doubÀ
 + 
øndom_vÆue_2
 * 
mt_64_to_doubÀ
;

655 #ifde‡
__˝lu•lus


662 ˛as†
	cmt_¥ng


664 
‰õnd
 
˛ass
 
mt_empúiˇl_di°ributi⁄
;

665 
public
:

674 
mt_¥ng
(

675 
boﬁ
 
pickSìd
 = 
Ál£
)

679 
°©e
.
°©ïå
 = 0;

680 
°©e
.
öôülized
 = 0;

681 i‡(
pickSìd
)

682 
mts_£ed
(&
°©e
);

684 
mt_¥ng
(
uöt32_t
 
£ed
)

687 
°©e
.
°©ïå
 = 0;

688 
°©e
.
öôülized
 = 0;

689 
mts_£ed32
(&
°©e
, 
£ed
);

691 
mt_¥ng
(
uöt32_t
 
£eds
[
MT_STATE_SIZE
])

694 
°©e
.
°©ïå
 = 0;

695 
°©e
.
öôülized
 = 0;

696 
mts_£edfuŒ
(&
°©e
, 
£eds
);

698 ~
mt_¥ng
() { }

707 
£ed32
(
uöt32_t
 
£ed
)

710 
mts_£ed32
(&
°©e
, 
£ed
);

712 
£ed32√w
(
uöt32_t
 
£ed
)

715 
mts_£ed32√w
(&
°©e
, 
£ed
);

717 
£edfuŒ
(
uöt32_t
 
£eds
[
MT_STATE_SIZE
])

720 
mts_£edfuŒ
(&
°©e
, 
£eds
);

722 
£ed
()

724 
mts_£ed
(&
°©e
);

726 
good£ed
()

728 
mts_good£ed
(&
°©e
);

730 
be°£ed
()

732 
mts_be°£ed
(&
°©e
);

734 
‰õnd
 
°d
::
o°ªam
&

735 
›î©‹
<<(
°d
::
o°ªam
& 
°ªam
, c⁄° 
mt_¥ng
& 
∫g
);

736 
‰õnd
 
°d
::
i°ªam
&

737 
›î©‹
>>(
°d
::
i°ªam
& 
°ªam
, 
mt_¥ng
& 
∫g
);

742 
uöt32_t
 
Ã™d
()

744  
mts_Ã™d
(&
°©e
);

746 #ifde‡
UINT64_MAX


747 
uöt64_t
 
Œønd
()

749  
mts_Œønd
(&
°©e
);

752 
dønd
()

754  
mts_dønd
(&
°©e
);

756 
ldønd
()

758  
mts_ldønd
(&
°©e
);

771 
›î©‹
()()

773  
mts_dønd
(&
°©e
);

775 
¥Ÿe˘ed
:

779 
mt_°©e
 
°©e
;

782 #i‡
MT_GENERATE_CODE_IN_HEADER


786 
MT_INLINE
 
	g°d
::
o°ªam
& 
›î©‹
<<(

787 
°d
::
o°ªam
& 
°ªam
,

788 c⁄° 
	gmt_¥ng
& 
	g∫g
)

790 
	gi
 = 
MT_STATE_SIZE
; --i >= 0; )

792 i‡(!(
	g°ªam
 << 
	g∫g
.
	g°©e
.
	g°©evec
[
i
] << ' '))

793  
	g°ªam
;

796  
	g°ªam
 << 
	g∫g
.
	g°©e
.
	g°©ïå
;

802 
MT_INLINE
 
	g°d
::
i°ªam
& 
›î©‹
>>(

803 
°d
::
i°ªam
& 
°ªam
,

804 
	gmt_¥ng
& 
	g∫g
)

806 
	g∫g
.
	g°©e
.
	göôülized
 = 
∫g
.
°©e
.
°©ïå
 = 0;

807 
	gi
 = 
MT_STATE_SIZE
; --i >= 0; )

809 i‡(!(
	g°ªam
 >> 
	g∫g
.
	g°©e
.
	g°©evec
[
i
]))

810  
	g°ªam
;

813 i‡(!(
	g°ªam
 >> 
	g∫g
.
	g°©e
.
	g°©ïå
))

815 
	g∫g
.
	g°©e
.
	g°©ïå
 = 0;

816  
	g°ªam
;

822 i‡(
	g∫g
.
	g°©e
.
	g°©ïå
 < 0 ||Ñng.°©e.°©ïå > 
	gMT_STATE_SIZE
)

824 
	g∫g
.
	g°©e
.
	g°©ïå
 = 0;

825  
	g°ªam
;

828 
mts_m¨k_öôülized
(&
∫g
.
°©e
);

830  
	g°ªam
;

	@/home/kartik/nwe/libev-4.15/config.h

5 
	#HAVE_CLOCK_GETTIME
 1

	)

11 
	#HAVE_DLFCN_H
 1

	)

14 
	#HAVE_EPOLL_CTL
 1

	)

17 
	#HAVE_EVENTFD
 1

	)

20 
	#HAVE_FLOOR
 1

	)

23 
	#HAVE_INOTIFY_INIT
 1

	)

26 
	#HAVE_INTTYPES_H
 1

	)

35 
	#HAVE_MEMORY_H
 1

	)

38 
	#HAVE_NANOSLEEP
 1

	)

41 
	#HAVE_POLL
 1

	)

44 
	#HAVE_POLL_H
 1

	)

53 
	#HAVE_SELECT
 1

	)

56 
	#HAVE_SIGNALFD
 1

	)

59 
	#HAVE_STDINT_H
 1

	)

62 
	#HAVE_STDLIB_H
 1

	)

65 
	#HAVE_STRINGS_H
 1

	)

68 
	#HAVE_STRING_H
 1

	)

71 
	#HAVE_SYS_EPOLL_H
 1

	)

74 
	#HAVE_SYS_EVENTFD_H
 1

	)

80 
	#HAVE_SYS_INOTIFY_H
 1

	)

83 
	#HAVE_SYS_SELECT_H
 1

	)

86 
	#HAVE_SYS_SIGNALFD_H
 1

	)

89 
	#HAVE_SYS_STAT_H
 1

	)

92 
	#HAVE_SYS_TYPES_H
 1

	)

95 
	#HAVE_UNISTD_H
 1

	)

99 
	#LT_OBJDIR
 ".libs/"

	)

102 
	#PACKAGE
 "libev"

	)

105 
	#PACKAGE_BUGREPORT
 ""

	)

108 
	#PACKAGE_NAME
 ""

	)

111 
	#PACKAGE_STRING
 ""

	)

114 
	#PACKAGE_TARNAME
 ""

	)

117 
	#PACKAGE_URL
 ""

	)

120 
	#PACKAGE_VERSION
 ""

	)

123 
	#STDC_HEADERS
 1

	)

126 
	#VERSION
 "4.15"

	)

	@/home/kartik/nwe/libev-4.15/ev++.h

40 #i‚de‡
EVPP_H__


41 
	#EVPP_H__


	)

43 #ifde‡
EV_H


44 #ö˛udê
EV_H


46 
	~"ev.h
"

49 #i‚de‡
EV_USE_STDEXCEPT


50 
	#EV_USE_STDEXCEPT
 1

	)

53 #i‡
EV_USE_STDEXCEPT


54 
	~<°dex˚±
>

57 
«me•a˚
 
	gev
 {

59 
ev_t°amp
 
	tt°amp
;

62 
	gUNDEF
 = 
EV_UNDEF
,

63 
	gNONE
 = 
EV_NONE
,

64 
	gREAD
 = 
EV_READ
,

65 
	gWRITE
 = 
EV_WRITE
,

66 #i‡
EV_COMPAT3


67 
	gTIMEOUT
 = 
EV_TIMEOUT
,

69 
	gTIMER
 = 
EV_TIMER
,

70 
	gPERIODIC
 = 
EV_PERIODIC
,

71 
	gSIGNAL
 = 
EV_SIGNAL
,

72 
	gCHILD
 = 
EV_CHILD
,

73 
	gSTAT
 = 
EV_STAT
,

74 
	gIDLE
 = 
EV_IDLE
,

75 
	gCHECK
 = 
EV_CHECK
,

76 
	gPREPARE
 = 
EV_PREPARE
,

77 
	gFORK
 = 
EV_FORK
,

78 
	gASYNC
 = 
EV_ASYNC
,

79 
	gEMBED
 = 
EV_EMBED
,

80 #unde‡
ERROR


81 
	gERROR
 = 
EV_ERROR


86 
	gAUTO
 = 
EVFLAG_AUTO
,

87 
	gNOENV
 = 
EVFLAG_NOENV
,

88 
	gFORKCHECK
 = 
EVFLAG_FORKCHECK
,

90 
	gSELECT
 = 
EVBACKEND_SELECT
,

91 
	gPOLL
 = 
EVBACKEND_POLL
,

92 
	gEPOLL
 = 
EVBACKEND_EPOLL
,

93 
	gKQUEUE
 = 
EVBACKEND_KQUEUE
,

94 
	gDEVPOLL
 = 
EVBACKEND_DEVPOLL
,

95 
	gPORT
 = 
EVBACKEND_PORT


100 #i‡
EV_COMPAT3


101 
	gNONBLOCK
 = 
EVLOOP_NONBLOCK
,

102 
	gONESHOT
 = 
EVLOOP_ONESHOT
,

104 
	gNOWAIT
 = 
EVRUN_NOWAIT
,

105 
	gONCE
 = 
EVRUN_ONCE


108 
	ehow_t


110 
	gONE
 = 
EVBREAK_ONE
,

111 
	gALL
 = 
EVBREAK_ALL


114 
	gbad_lo›


115 #i‡
EV_USE_STDEXCEPT


116 : 
°d
::
ru¡ime_îr‹


119 #i‡
EV_USE_STDEXCEPT


120 
bad_lo›
 ()

121 : 
°d
::
ru¡ime_îr‹
 ("libevÉventÜoop cannot be initialized, bad value of LIBEV_FLAGS?")

127 #ifde‡
EV_AX


128 #unde‡
EV_AX


131 #ifde‡
EV_AX_


132 #unde‡
EV_AX_


135 #i‡
EV_MULTIPLICITY


136 
	#EV_AX
 
øw_lo›


	)

137 
	#EV_AX_
 
øw_lo›
,

	)

139 
	#EV_AX


	)

140 
	#EV_AX_


	)

143 
	slo›_ªf


145 
lo›_ªf
 (
EV_P
Ë
throw
 ()

146 #i‡
EV_MULTIPLICITY


147 : 
EV_AX
 (
EV_A
)

152 
boﬁ
 
›î©‹
 =(c⁄° 
lo›_ªf
 &
Ÿhî
Ëc⁄° 
throw
 ()

154 #i‡
EV_MULTIPLICITY


155  
EV_AX
 =
Ÿhî
.EV_AX;

157  
	gåue
;

161 
boﬁ
 
	g›î©‹
 !(c⁄° 
lo›_ªf
 &
Ÿhî
Ëc⁄° 
throw
 ()

163 #i‡
EV_MULTIPLICITY


164  ! (*
this
 =
Ÿhî
);

166  
	gÁl£
;

170 #i‡
EV_MULTIPLICITY


171 
boﬁ
 
	g›î©‹
 =(c⁄° 
EV_P
Ëc⁄° 
throw
 ()

173  
this
->
EV_AX
 =
EV_A
;

176 
boﬁ
 
	g›î©‹
 !(c⁄° 
EV_P
Ëc⁄° 
throw
 ()

178  (*
this
 =
EV_A
);

181 
›î©‹
 
	gev_lo›
 * (Ëc⁄° 
throw
 ()

183  
	gEV_AX
;

186 
›î©‹
 c⁄° 
	gev_lo›
 * (Ëc⁄° 
throw
 ()

188  
	gEV_AX
;

191 
boﬁ
 
is_deÁu…
 (Ëc⁄° 
throw
 ()

193  
	gEV_AX
 =
ev_deÁu…_lo›
 (0);

197 #i‡
EV_COMPAT3


198 
lo›
 (
Êags
 = 0)

200 
ev_run
 (
EV_AX_
 
Êags
);

203 
u∆o›
 (
how_t
 
how
 = 
ONE
Ë
throw
 ()

205 
ev_bªak
 (
EV_AX_
 
how
);

209 
run
 (
Êags
 = 0)

211 
ev_run
 (
EV_AX_
 
Êags
);

214 
bªak_lo›
 (
how_t
 
how
 = 
ONE
Ë
throw
 ()

216 
ev_bªak
 (
EV_AX_
 
how
);

219 
po°_f‹k
 (Ë
throw
 ()

221 
ev_lo›_f‹k
 (
EV_AX
);

224 
backíd
 (Ëc⁄° 
throw
 ()

226  
ev_backíd
 (
EV_AX
);

229 
t°amp
 
now
 (Ëc⁄° 
throw
 ()

231  
ev_now
 (
EV_AX
);

234 
ªf
 (Ë
throw
 ()

236 
ev_ªf
 (
EV_AX
);

239 
uƒef
 (Ë
throw
 ()

241 
ev_uƒef
 (
EV_AX
);

244 #i‡
EV_FEATURE_API


245 
ôî©i⁄
 (Ëc⁄° 
throw
 ()

247  
ev_ôî©i⁄
 (
EV_AX
);

250 
dïth
 (Ëc⁄° 
throw
 ()

252  
ev_dïth
 (
EV_AX
);

255 
£t_io_cﬁÀ˘_öãrvÆ
 (
t°amp
 
öãrvÆ
Ë
throw
 ()

257 
ev_£t_io_cﬁÀ˘_öãrvÆ
 (
EV_AX_
 
öãrvÆ
);

260 
£t_timeout_cﬁÀ˘_öãrvÆ
 (
t°amp
 
öãrvÆ
Ë
throw
 ()

262 
ev_£t_timeout_cﬁÀ˘_öãrvÆ
 (
EV_AX_
 
öãrvÆ
);

267 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
, (*
cb
)(, *), *
¨g
 = 0Ë
throw
 ()

269 
ev_⁄˚
 (
EV_AX_
 
fd
, 
evíts
, 
timeout
, 
cb
, 
¨g
);

273 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

274 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
, 
K
 *
obje˘
Ë
throw
 ()

276 
⁄˚
 (
fd
, 
evíts
, 
timeout
, 
mëhod_thunk
<
K
, 
mëhod
>, 
obje˘
);

280 
	gãm∂©e
<
˛ass
 
	gK
>

281 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
, 
K
 *
obje˘
Ë
throw
 ()

283 
⁄˚
 (
fd
, 
evíts
, 
timeout
, 
mëhod_thunk
<
K
, &K::
›î©‹
 ()>, 
obje˘
);

286 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

287 
mëhod_thunk
 (
ªvíts
, *
¨g
)

289 (
	g°©ic_ˇ°
<
	gK
 *>(
	g¨g
)->*
	gmëhod
)

290 (
	gªvíts
);

294 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

295 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
, 
K
 *
obje˘
Ë
throw
 ()

297 
⁄˚
 (
fd
, 
evíts
, 
timeout
, 
mëhod_nﬂrgs_thunk
<
K
, 
mëhod
>, 
obje˘
);

300 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

301 
mëhod_nﬂrgs_thunk
 (
ªvíts
, *
¨g
)

303 (
	g°©ic_ˇ°
<
	gK
 *>(
	g¨g
)->*
	gmëhod
)

308 
	gãm∂©e
<(*
	gcb
)()>

309 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
Ë
throw
 ()

311 
⁄˚
 (
fd
, 
evíts
, 
timeout
, 
sim∂î_func_thunk
<
cb
>);

314 
	gãm∂©e
<(*
	gcb
)()>

315 
sim∂î_func_thunk
 (
ªvíts
, *
¨g
)

317 (*
	gcb
)

318 (
	gªvíts
);

322 
	gãm∂©e
<(*
	gcb
)()>

323 
⁄˚
 (
fd
, 
evíts
, 
t°amp
 
timeout
Ë
throw
 ()

325 
⁄˚
 (
fd
, 
evíts
, 
timeout
, 
sim∂e°_func_thunk
<
cb
>);

328 
	gãm∂©e
<(*
	gcb
)()>

329 
sim∂e°_func_thunk
 (
ªvíts
, *
¨g
)

331 (*
	gcb
)

335 
„ed_fd_evít
 (
fd
, 
ªvíts
Ë
throw
 ()

337 
ev_„ed_fd_evít
 (
EV_AX_
 
fd
, 
ªvíts
);

340 
„ed_sig«l_evít
 (
signum
Ë
throw
 ()

342 
ev_„ed_sig«l_evít
 (
EV_AX_
 
signum
);

345 #i‡
EV_MULTIPLICITY


346 
ev_lo›
* 
	gEV_AX
;

351 #i‡
EV_MULTIPLICITY


352 
	gdy«mic_lo›
 : 
lo›_ªf


355 
dy«mic_lo›
 (
Êags
 = 
AUTO
Ë
throw
 (
bad_lo›
)

356 : 
lo›_ªf
 (
ev_lo›_√w
 (
Êags
))

358 i‡(!
EV_AX
)

359 
throw
 
bad_lo›
 ();

362 ~
dy«mic_lo›
 (Ë
throw
 ()

364 
ev_lo›_de°roy
 (
EV_AX
);

365 
	gEV_AX
 = 0;

368 
	g¥iv©e
:

370 
dy«mic_lo›
 (const dynamic_loop &);

372 
	gdy«mic_lo›
 & 
	g›î©‹
(c⁄° 
dy«mic_lo›
 &);

377 
	gdeÁu…_lo›
 : 
lo›_ªf


379 
deÁu…_lo›
 (
Êags
 = 
AUTO
Ë
throw
 (
bad_lo›
)

380 #i‡
EV_MULTIPLICITY


381 : 
lo›_ªf
 (
ev_deÁu…_lo›
 (
Êags
))

385 #i‡
EV_MULTIPLICITY


386 !
EV_AX


388 !
ev_deÁu…_lo›
 (
Êags
)

391 
throw
 
bad_lo›
 ();

394 
	g¥iv©e
:

395 
deÁu…_lo›
 (const default_loop &);

396 
	gdeÁu…_lo›
 &
	g›î©‹
 = (c⁄° 
deÁu…_lo›
 &);

399 
ölöe
 
lo›_ªf
 
gë_deÁu…_lo›
 (Ë
throw
 ()

401 #i‡
EV_MULTIPLICITY


402  
ev_deÁu…_lo›
 (0);

404  
lo›_ªf
 ();

408 #unde‡
EV_AX


409 #unde‡
EV_AX_


411 #unde‡
EV_PX


412 #unde‡
EV_PX_


413 #i‡
EV_MULTIPLICITY


414 
	#EV_PX
 
lo›_ªf
 
EV_A


	)

415 
	#EV_PX_
 
lo›_ªf
 
EV_A_


	)

417 
	#EV_PX


	)

418 
	#EV_PX_


	)

421 
	gãm∂©e
<
˛ass
 
	gev_w©chî
, cœs†
	gw©chî
>

422 
	gba£
 : 
ev_w©chî


424 #i‡
EV_MULTIPLICITY


425 
EV_PX
;

428 
£t
 (
EV_P
Ë
throw
 ()

430 
	gthis
->
	gEV_A
 = 
EV_A
;

434 
ba£
 (
EV_PX
Ë
throw
 ()

435 #i‡
EV_MULTIPLICITY


436 : 
EV_A
 (EV_A)

439 
ev_öô
 (
this
, 0);

442 
£t_
 (c⁄° *
d©a
, (*
cb
)(
EV_P_
 
ev_w©chî
 *
w
, 
ªvíts
)Ë
throw
 ()

444 
	gthis
->
	gd©a
 = (*)
d©a
;

445 
ev_£t_cb
 (
°©ic_ˇ°
<
ev_w©chî
 *>(
this
), 
cb
);

449 
	gãm∂©e
<(*
	gfun˘i⁄
)(
	gw©chî
 &
	gw
, )>

450 
£t
 (*
d©a
 = 0Ë
throw
 ()

452 
£t_
 (
d©a
, 
fun˘i⁄_thunk
<
fun˘i⁄
>);

455 
	gãm∂©e
<(*
	gfun˘i⁄
)(
	gw©chî
 &
	gw
, )>

456 
fun˘i⁄_thunk
 (
EV_P_
 
ev_w©chî
 *
w
, 
ªvíts
)

458 
	gfun˘i⁄


459 (*
	g°©ic_ˇ°
<
	gw©chî
 *>(
	gw
), 
	gªvíts
);

463 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)(
w©chî
 &
w
, )>

464 
£t
 (
K
 *
obje˘
Ë
throw
 ()

466 
£t_
 (
obje˘
, 
mëhod_thunk
<
K
, 
mëhod
>);

470 
	gãm∂©e
<
˛ass
 
	gK
>

471 
£t
 (
K
 *
obje˘
Ë
throw
 ()

473 
£t_
 (
obje˘
, 
mëhod_thunk
<
K
, &K::
›î©‹
 ()>);

476 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)(
w©chî
 &
w
, )>

477 
mëhod_thunk
 (
EV_P_
 
ev_w©chî
 *
w
, 
ªvíts
)

479 (
	g°©ic_ˇ°
<
	gK
 *>(
	gw
->
	gd©a
)->*
	gmëhod
)

480 (*
	g°©ic_ˇ°
<
	gw©chî
 *>(
	gw
), 
	gªvíts
);

484 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

485 
£t
 (
K
 *
obje˘
Ë
throw
 ()

487 
£t_
 (
obje˘
, 
mëhod_nﬂrgs_thunk
<
K
, 
mëhod
>);

490 
	gãm∂©e
<
˛ass
 
	gK
, (K::*
mëhod
)()>

491 
mëhod_nﬂrgs_thunk
 (
EV_P_
 
ev_w©chî
 *
w
, 
ªvíts
)

493 (
	g°©ic_ˇ°
<
	gK
 *>(
	gw
->
	gd©a
)->*
	gmëhod
)

497 
›î©‹
 ()(
	gevíts
 = 
EV_UNDEF
)

500 
ev_cb
 (
°©ic_ˇ°
<
ev_w©chî
 *>(
this
))

501 (
°©ic_ˇ°
<
ev_w©chî
 *>(
this
), 
evíts
);

504 
boﬁ
 
is_a˘ive
 (Ëc⁄° 
throw
 ()

506  
ev_is_a˘ive
 (
°©ic_ˇ°
<c⁄° 
ev_w©chî
 *>(
this
));

509 
boﬁ
 
is_≥ndög
 (Ëc⁄° 
throw
 ()

511  
ev_is_≥ndög
 (
°©ic_ˇ°
<c⁄° 
ev_w©chî
 *>(
this
));

514 
„ed_evít
 (
ªvíts
Ë
throw
 ()

516 
ev_„ed_evít
 (
EV_A_
 
°©ic_ˇ°
<
ev_w©chî
 *>(
this
), 
ªvíts
);

520 
ölöe
 
t°amp
 
now
 (
EV_P
Ë
throw
 ()

522  
ev_now
 (
EV_A
);

525 
ölöe
 
dñay
 (
t°amp
 
öãrvÆ
Ë
throw
 ()

527 
ev_¶ìp
 (
öãrvÆ
);

530 
ölöe
 
vîsi⁄_maj‹
 (Ë
throw
 ()

532  
ev_vîsi⁄_maj‹
 ();

535 
ölöe
 
vîsi⁄_mö‹
 (Ë
throw
 ()

537  
ev_vîsi⁄_mö‹
 ();

540 
ölöe
 
suµ‹ãd_backíds
 (Ë
throw
 ()

542  
ev_suµ‹ãd_backíds
 ();

545 
ölöe
 
ªcommíded_backíds
 (Ë
throw
 ()

547  
ev_ªcommíded_backíds
 ();

550 
ölöe
 
embeddabÀ_backíds
 (Ë
throw
 ()

552  
ev_embeddabÀ_backíds
 ();

555 
ölöe
 
£t_Æloˇt‹
 (*(*
cb
)(*
±r
, 
size
Ë
throw
 ())Åhrow ()

557 
ev_£t_Æloˇt‹
 (
cb
);

560 
ölöe
 
£t_sy£º_cb
 ((*
cb
)(c⁄° *
msg
Ë
throw
 ())Åhrow ()

562 
ev_£t_sy£º_cb
 (
cb
);

565 #i‡
EV_MULTIPLICITY


566 
	#EV_CONSTRUCT
(
˝p°em
,
c°em
) \

567 (
EV_PX
 = 
	`gë_deÁu…_lo›
 ()Ë
	`throw
 () \

568 : 
ba£
<
ev_
 ## 
c°em
, 
˝p°em
> (
EV_A
) \

570 }

	)

572 
	#EV_CONSTRUCT
(
˝p°em
,
c°em
) \

573 (Ë
	`throw
 () \

575 }

	)

580 
	#EV_BEGIN_WATCHER
(
˝p°em
,
c°em
) \

582 
˝p°em
 : 
ba£
<
ev_
 ## 
c°em
, cppstem> \

584 
	`°¨t
 (Ë
	`throw
 () \

586 
ev_
 ## 
c°em
 ## 
	`_°¨t
 (
EV_A_
 
°©ic_ˇ°
<ev_ ## c°em *>(
this
)); \

589 
	`°›
 (Ë
	`throw
 () \

591 
ev_
 ## 
c°em
 ## 
	`_°›
 (
EV_A_
 
°©ic_ˇ°
<ev_ ## c°em *>(
this
)); \

594 
˝p°em
 
	`EV_CONSTRUCT
(˝p°em,
c°em
) \

596 ~
	`˝p°em
 (Ë
	`throw
 () \

598 
	`°›
 (); \

601 
usög
 
ba£
<
ev_
 ## 
c°em
, 
˝p°em
>::
£t
; \

603 
¥iv©e
: \

605 
	`˝p°em
 (c⁄° 
˝p°em
 &
o
); \

607 
˝p°em
 &
›î©‹
 =(c⁄° cµ°em &
o
); \

609 
public
:

	)

611 
	#EV_END_WATCHER
(
˝p°em
,
c°em
) \

612 };

	)

614 
EV_BEGIN_WATCHER
 (
io
, io)

615 
£t
 (
fd
, 
evíts
Ë
throw
 ()

617 
	ga˘ive
 = 
is_a˘ive
 ();

618 i‡(
	ga˘ive
Ë
°›
 ();

619 
ev_io_£t
 (
°©ic_ˇ°
<
ev_io
 *>(
this
), 
fd
, 
evíts
);

620 i‡(
	ga˘ive
Ë
°¨t
 ();

623 
£t
 (
evíts
Ë
throw
 ()

625 
	ga˘ive
 = 
is_a˘ive
 ();

626 i‡(
	ga˘ive
Ë
°›
 ();

627 
ev_io_£t
 (
°©ic_ˇ°
<
ev_io
 *>(
this
), 
fd
, 
evíts
);

628 i‡(
	ga˘ive
Ë
°¨t
 ();

631 
°¨t
 (
fd
, 
evíts
Ë
throw
 ()

633 
£t
 (
fd
, 
evíts
);

634 
°¨t
 ();

636 
EV_END_WATCHER
 (
io
, io)

638 
EV_BEGIN_WATCHER
 (
timî
,Åimer)

639 
£t
 (
ev_t°amp
 
a·î
,Év_t°am∞
ª≥©
 = 0.Ë
throw
 ()

641 
a˘ive
 = 
is_a˘ive
 ();

642 i‡(
	ga˘ive
Ë
°›
 ();

643 
ev_timî_£t
 (
°©ic_ˇ°
<
ev_timî
 *>(
this
), 
a·î
, 
ª≥©
);

644 i‡(
	ga˘ive
Ë
°¨t
 ();

647 
°¨t
 (
ev_t°amp
 
a·î
,Év_t°am∞
ª≥©
 = 0.Ë
throw
 ()

649 
£t
 (
a·î
, 
ª≥©
);

650 
°¨t
 ();

653 
agaö
 (Ë
throw
 ()

655 
ev_timî_agaö
 (
EV_A_
 
°©ic_ˇ°
<
ev_timî
 *>(
this
));

658 
ev_t°amp
 
ªmaöög
 ()

660  
ev_timî_ªmaöög
 (
EV_A_
 
°©ic_ˇ°
<
ev_timî
 *>(
this
));

662 
EV_END_WATCHER
 (
timî
,Åimer)

664 #i‡
EV_PERIODIC_ENABLE


665 
EV_BEGIN_WATCHER
 (
≥riodic
,Öeriodic)

666 
£t
 (
ev_t°amp
 
©
,Év_t°am∞
öãrvÆ
 = 0.Ë
throw
 ()

668 
a˘ive
 = 
is_a˘ive
 ();

669 i‡(
	ga˘ive
Ë
°›
 ();

670 
ev_≥riodic_£t
 (
°©ic_ˇ°
<
ev_≥riodic
 *>(
this
), 
©
, 
öãrvÆ
, 0);

671 i‡(
	ga˘ive
Ë
°¨t
 ();

674 
°¨t
 (
ev_t°amp
 
©
,Év_t°am∞
öãrvÆ
 = 0.Ë
throw
 ()

676 
£t
 (
©
, 
öãrvÆ
);

677 
°¨t
 ();

680 
agaö
 (Ë
throw
 ()

682 
ev_≥riodic_agaö
 (
EV_A_
 
°©ic_ˇ°
<
ev_≥riodic
 *>(
this
));

684 
EV_END_WATCHER
 (
≥riodic
,Öeriodic)

687 #i‡
EV_SIGNAL_ENABLE


688 
EV_BEGIN_WATCHER
 (
sig
, 
sig«l
)

689 
£t
 (
signum
Ë
throw
 ()

691 
	ga˘ive
 = 
is_a˘ive
 ();

692 i‡(
	ga˘ive
Ë
°›
 ();

693 
ev_sig«l_£t
 (
°©ic_ˇ°
<
ev_sig«l
 *>(
this
), 
signum
);

694 i‡(
	ga˘ive
Ë
°¨t
 ();

697 
°¨t
 (
signum
Ë
throw
 ()

699 
£t
 (
signum
);

700 
°¨t
 ();

702 
EV_END_WATCHER
 (
sig
, 
sig«l
)

705 #i‡
EV_CHILD_ENABLE


706 
EV_BEGIN_WATCHER
 (
chûd
, child)

707 
£t
 (
pid
, 
åa˚
 = 0Ë
throw
 ()

709 
a˘ive
 = 
is_a˘ive
 ();

710 i‡(
	ga˘ive
Ë
°›
 ();

711 
ev_chûd_£t
 (
°©ic_ˇ°
<
ev_chûd
 *>(
this
), 
pid
, 
åa˚
);

712 i‡(
	ga˘ive
Ë
°¨t
 ();

715 
°¨t
 (
pid
, 
åa˚
 = 0Ë
throw
 ()

717 
£t
 (
pid
, 
åa˚
);

718 
°¨t
 ();

720 
EV_END_WATCHER
 (
chûd
, child)

723 #i‡
EV_STAT_ENABLE


724 
EV_BEGIN_WATCHER
 (
°©
, stat)

725 
£t
 (c⁄° *
∑th
, 
ev_t°amp
 
öãrvÆ
 = 0.Ë
throw
 ()

727 
a˘ive
 = 
is_a˘ive
 ();

728 i‡(
	ga˘ive
Ë
°›
 ();

729 
ev_°©_£t
 (
°©ic_ˇ°
<
ev_°©
 *>(
this
), 
∑th
, 
öãrvÆ
);

730 i‡(
	ga˘ive
Ë
°¨t
 ();

733 
°¨t
 (c⁄° *
∑th
, 
ev_t°amp
 
öãrvÆ
 = 0.Ë
throw
 ()

735 
°›
 ();

736 
£t
 (
∑th
, 
öãrvÆ
);

737 
°¨t
 ();

740 
upd©e
 (Ë
throw
 ()

742 
ev_°©_°©
 (
EV_A_
 
°©ic_ˇ°
<
ev_°©
 *>(
this
));

744 
EV_END_WATCHER
 (
°©
, stat)

747 #i‡
EV_IDLE_ENABLE


748 
EV_BEGIN_WATCHER
 (
idÀ
, idle)

749 
£t
 (Ë
throw
 () { }

750 
EV_END_WATCHER
 (
idÀ
, idle)

753 #i‡
EV_PREPARE_ENABLE


754 
EV_BEGIN_WATCHER
 (
¥ï¨e
,Örepare)

755 
£t
 (Ë
throw
 () { }

756 
EV_END_WATCHER
 (
¥ï¨e
,Örepare)

759 #i‡
EV_CHECK_ENABLE


760 
EV_BEGIN_WATCHER
 (
check
, check)

761 
£t
 (Ë
throw
 () { }

762 
EV_END_WATCHER
 (
check
, check)

765 #i‡
EV_EMBED_ENABLE


766 
EV_BEGIN_WATCHER
 (
embed
,Émbed)

767 
£t_embed
 (
ev_lo›
 *
embedded_lo›
Ë
throw
 ()

769 
	ga˘ive
 = 
is_a˘ive
 ();

770 i‡(
	ga˘ive
Ë
°›
 ();

771 
ev_embed_£t
 (
°©ic_ˇ°
<
ev_embed
 *>(
this
), 
embedded_lo›
);

772 i‡(
	ga˘ive
Ë
°¨t
 ();

775 
°¨t
 (
ev_lo›
 *
embedded_lo›
Ë
throw
 ()

777 
£t
 (
embedded_lo›
);

778 
°¨t
 ();

781 
swìp
 ()

783 
ev_embed_swìp
 (
EV_A_
 
°©ic_ˇ°
<
ev_embed
 *>(
this
));

785 
EV_END_WATCHER
 (
embed
,Émbed)

788 #i‡
EV_FORK_ENABLE


789 
EV_BEGIN_WATCHER
 (
f‹k
, fork)

790 
£t
 (Ë
throw
 () { }

791 
EV_END_WATCHER
 (
f‹k
, fork)

794 #i‡
EV_ASYNC_ENABLE


795 
EV_BEGIN_WATCHER
 (
async
,ásync)

796 
£nd
 (Ë
throw
 ()

798 
ev_async_£nd
 (
EV_A_
 
°©ic_ˇ°
<
ev_async
 *>(
this
));

801 
boﬁ
 
async_≥ndög
 (Ë
throw
 ()

803  
ev_async_≥ndög
 (
°©ic_ˇ°
<
ev_async
 *>(
this
));

805 
EV_END_WATCHER
 (
async
,ásync)

808 #unde‡
EV_PX


809 #unde‡
EV_PX_


810 #unde‡
EV_CONSTRUCT


811 #unde‡
EV_BEGIN_WATCHER


812 #unde‡
EV_END_WATCHER


	@/home/kartik/nwe/libev-4.15/ev.c

41 #i‚de‡
EV_STANDALONE


42 #ifde‡
EV_CONFIG_H


43 #ö˛udê
EV_CONFIG_H


45 
	~"c⁄fig.h
"

48 #i‡
HAVE_FLOOR


49 #i‚de‡
EV_USE_FLOOR


50 
	#EV_USE_FLOOR
 1

	)

54 #i‡
HAVE_CLOCK_SYSCALL


55 #i‚de‡
EV_USE_CLOCK_SYSCALL


56 
	#EV_USE_CLOCK_SYSCALL
 1

	)

57 #i‚de‡
EV_USE_REALTIME


58 
	#EV_USE_REALTIME
 0

	)

60 #i‚de‡
EV_USE_MONOTONIC


61 
	#EV_USE_MONOTONIC
 1

	)

64 #ñi‡!
deföed
 
EV_USE_CLOCK_SYSCALL


65 
	#EV_USE_CLOCK_SYSCALL
 0

	)

68 #i‡
HAVE_CLOCK_GETTIME


69 #i‚de‡
EV_USE_MONOTONIC


70 
	#EV_USE_MONOTONIC
 1

	)

72 #i‚de‡
EV_USE_REALTIME


73 
	#EV_USE_REALTIME
 0

	)

76 #i‚de‡
EV_USE_MONOTONIC


77 
	#EV_USE_MONOTONIC
 0

	)

79 #i‚de‡
EV_USE_REALTIME


80 
	#EV_USE_REALTIME
 0

	)

84 #i‡
HAVE_NANOSLEEP


85 #i‚de‡
EV_USE_NANOSLEEP


86 
	#EV_USE_NANOSLEEP
 
EV_FEATURE_OS


	)

89 #unde‡
EV_USE_NANOSLEEP


90 
	#EV_USE_NANOSLEEP
 0

	)

93 #i‡
HAVE_SELECT
 && 
HAVE_SYS_SELECT_H


94 #i‚de‡
EV_USE_SELECT


95 
	#EV_USE_SELECT
 
EV_FEATURE_BACKENDS


	)

98 #unde‡
EV_USE_SELECT


99 
	#EV_USE_SELECT
 0

	)

102 #i‡
HAVE_POLL
 && 
HAVE_POLL_H


103 #i‚de‡
EV_USE_POLL


104 
	#EV_USE_POLL
 
EV_FEATURE_BACKENDS


	)

107 #unde‡
EV_USE_POLL


108 
	#EV_USE_POLL
 0

	)

111 #i‡
HAVE_EPOLL_CTL
 && 
HAVE_SYS_EPOLL_H


112 #i‚de‡
EV_USE_EPOLL


113 
	#EV_USE_EPOLL
 
EV_FEATURE_BACKENDS


	)

116 #unde‡
EV_USE_EPOLL


117 
	#EV_USE_EPOLL
 0

	)

120 #i‡
HAVE_KQUEUE
 && 
HAVE_SYS_EVENT_H


121 #i‚de‡
EV_USE_KQUEUE


122 
	#EV_USE_KQUEUE
 
EV_FEATURE_BACKENDS


	)

125 #unde‡
EV_USE_KQUEUE


126 
	#EV_USE_KQUEUE
 0

	)

129 #i‡
HAVE_PORT_H
 && 
HAVE_PORT_CREATE


130 #i‚de‡
EV_USE_PORT


131 
	#EV_USE_PORT
 
EV_FEATURE_BACKENDS


	)

134 #unde‡
EV_USE_PORT


135 
	#EV_USE_PORT
 0

	)

138 #i‡
HAVE_INOTIFY_INIT
 && 
HAVE_SYS_INOTIFY_H


139 #i‚de‡
EV_USE_INOTIFY


140 
	#EV_USE_INOTIFY
 
EV_FEATURE_OS


	)

143 #unde‡
EV_USE_INOTIFY


144 
	#EV_USE_INOTIFY
 0

	)

147 #i‡
HAVE_SIGNALFD
 && 
HAVE_SYS_SIGNALFD_H


148 #i‚de‡
EV_USE_SIGNALFD


149 
	#EV_USE_SIGNALFD
 
EV_FEATURE_OS


	)

152 #unde‡
EV_USE_SIGNALFD


153 
	#EV_USE_SIGNALFD
 0

	)

156 #i‡
HAVE_EVENTFD


157 #i‚de‡
EV_USE_EVENTFD


158 
	#EV_USE_EVENTFD
 
EV_FEATURE_OS


	)

161 #unde‡
EV_USE_EVENTFD


162 
	#EV_USE_EVENTFD
 0

	)

167 
	~<°dlib.h
>

168 
	~<°rög.h
>

169 
	~<f˙é.h
>

170 
	~<°ddef.h
>

172 
	~<°dio.h
>

174 
	~<as£π.h
>

175 
	~<î∫o.h
>

176 
	~<sys/ty≥s.h
>

177 
	~<time.h
>

178 
	~<limôs.h
>

180 
	~<sig«l.h
>

182 #ifde‡
EV_H


183 #ö˛udê
EV_H


185 
	~"ev.h
"

188 #i‡
EV_NO_THREADS


189 #unde‡
EV_NO_SMP


190 
	#EV_NO_SMP
 1

	)

191 #unde‡
ECB_NO_THREADS


192 
	#ECB_NO_THREADS
 1

	)

194 #i‡
EV_NO_SMP


195 #unde‡
EV_NO_SMP


196 
	#ECB_NO_SMP
 1

	)

199 #i‚de‡
_WIN32


200 
	~<sys/time.h
>

201 
	~<sys/waô.h
>

202 
	~<uni°d.h
>

204 
	~<io.h
>

205 
	#WIN32_LEAN_AND_MEAN


	)

206 
	~<wösock2.h
>

207 
	~<wödows.h
>

208 #i‚de‡
EV_SELECT_IS_WINSOCKET


209 
	#EV_SELECT_IS_WINSOCKET
 1

	)

211 #unde‡
EV_AVOID_STDIO


220 
	#_DARWIN_UNLIMITED_SELECT
 1

	)

225 #i‡
deföed
 
EV_NSIG


227 #ñi‡
deföed
 
NSIG


228 
	#EV_NSIG
 (
NSIG
)

	)

229 #ñi‡
deföed
 
_NSIG


230 
	#EV_NSIG
 (
_NSIG
)

	)

231 #ñi‡
deföed
 
SIGMAX


232 
	#EV_NSIG
 (
SIGMAX
+1)

	)

233 #ñi‡
deföed
 
SIG_MAX


234 
	#EV_NSIG
 (
SIG_MAX
+1)

	)

235 #ñi‡
deföed
 
_SIG_MAX


236 
	#EV_NSIG
 (
_SIG_MAX
+1)

	)

237 #ñi‡
deföed
 
MAXSIG


238 
	#EV_NSIG
 (
MAXSIG
+1)

	)

239 #ñi‡
deföed
 
MAX_SIG


240 
	#EV_NSIG
 (
MAX_SIG
+1)

	)

241 #ñi‡
deföed
 
SIGARRAYSIZE


242 
	#EV_NSIG
 (
SIGARRAYSIZE
Ë

	)

243 #ñi‡
deföed
 
_sys_nsig


244 
	#EV_NSIG
 (
_sys_nsig
Ë

	)

249 
	#EV_NSIG
 65

	)

252 #i‚de‡
EV_USE_FLOOR


253 
	#EV_USE_FLOOR
 0

	)

256 #i‚de‡
EV_USE_CLOCK_SYSCALL


257 #i‡
__löux
 && 
__GLIBC__
 >= 2

258 
	#EV_USE_CLOCK_SYSCALL
 
EV_FEATURE_OS


	)

260 
	#EV_USE_CLOCK_SYSCALL
 0

	)

264 #i‚de‡
EV_USE_MONOTONIC


265 #i‡
deföed
 
_POSIX_MONOTONIC_CLOCK
 && _POSIX_MONOTONIC_CLOCK >= 0

266 
	#EV_USE_MONOTONIC
 
EV_FEATURE_OS


	)

268 
	#EV_USE_MONOTONIC
 0

	)

272 #i‚de‡
EV_USE_REALTIME


273 
	#EV_USE_REALTIME
 !
EV_USE_CLOCK_SYSCALL


	)

276 #i‚de‡
EV_USE_NANOSLEEP


277 #i‡
_POSIX_C_SOURCE
 >= 199309L

278 
	#EV_USE_NANOSLEEP
 
EV_FEATURE_OS


	)

280 
	#EV_USE_NANOSLEEP
 0

	)

284 #i‚de‡
EV_USE_SELECT


285 
	#EV_USE_SELECT
 
EV_FEATURE_BACKENDS


	)

288 #i‚de‡
EV_USE_POLL


289 #ifde‡
_WIN32


290 
	#EV_USE_POLL
 0

	)

292 
	#EV_USE_POLL
 
EV_FEATURE_BACKENDS


	)

296 #i‚de‡
EV_USE_EPOLL


297 #i‡
__löux
 && (
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 4))

298 
	#EV_USE_EPOLL
 
EV_FEATURE_BACKENDS


	)

300 
	#EV_USE_EPOLL
 0

	)

304 #i‚de‡
EV_USE_KQUEUE


305 
	#EV_USE_KQUEUE
 0

	)

308 #i‚de‡
EV_USE_PORT


309 
	#EV_USE_PORT
 0

	)

312 #i‚de‡
EV_USE_INOTIFY


313 #i‡
__löux
 && (
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 4))

314 
	#EV_USE_INOTIFY
 
EV_FEATURE_OS


	)

316 
	#EV_USE_INOTIFY
 0

	)

320 #i‚de‡
EV_PID_HASHSIZE


321 
	#EV_PID_HASHSIZE
 
EV_FEATURE_DATA
 ? 16 : 1

	)

324 #i‚de‡
EV_INOTIFY_HASHSIZE


325 
	#EV_INOTIFY_HASHSIZE
 
EV_FEATURE_DATA
 ? 16 : 1

	)

328 #i‚de‡
EV_USE_EVENTFD


329 #i‡
__löux
 && (
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 7))

330 
	#EV_USE_EVENTFD
 
EV_FEATURE_OS


	)

332 
	#EV_USE_EVENTFD
 0

	)

336 #i‚de‡
EV_USE_SIGNALFD


337 #i‡
__löux
 && (
__GLIBC__
 > 2 || (__GLIBC__ =2 && 
__GLIBC_MINOR__
 >= 7))

338 
	#EV_USE_SIGNALFD
 
EV_FEATURE_OS


	)

340 
	#EV_USE_SIGNALFD
 0

	)

345 
	#EV_VERIFY
 3

	)

346 
	#EV_USE_4HEAP
 1

	)

347 
	#EV_HEAP_CACHE_AT
 1

	)

350 #i‚de‡
EV_VERIFY


351 
	#EV_VERIFY
 (
EV_FEATURE_API
 ? 1 : 0)

	)

354 #i‚de‡
EV_USE_4HEAP


355 
	#EV_USE_4HEAP
 
EV_FEATURE_DATA


	)

358 #i‚de‡
EV_HEAP_CACHE_AT


359 
	#EV_HEAP_CACHE_AT
 
EV_FEATURE_DATA


	)

362 #ifde‡
ANDROID


364 #unde‡
EV_USE_SELECT


365 
	#EV_USE_SELECT
 0

	)

367 #unde‡
EV_USE_CLOCK_SYSCALL


368 
	#EV_USE_CLOCK_SYSCALL
 0

	)

372 #ifde‡
_AIX


374 #unde‡
EV_USE_POLL


375 
	#EV_USE_POLL
 0

	)

380 #i‡
EV_USE_CLOCK_SYSCALL


381 
	~<sys/sysˇŒ.h
>

382 #ifde‡
SYS_˛ock_gëtime


383 
	#˛ock_gëtime
(
id
, 
ts
Ë
	`sysˇŒ
 (
SYS_˛ock_gëtime
, (id), (ts))

	)

384 #unde‡
EV_USE_MONOTONIC


385 
	#EV_USE_MONOTONIC
 1

	)

387 #unde‡
EV_USE_CLOCK_SYSCALL


388 
	#EV_USE_CLOCK_SYSCALL
 0

	)

394 #i‚de‡
CLOCK_MONOTONIC


395 #unde‡
EV_USE_MONOTONIC


396 
	#EV_USE_MONOTONIC
 0

	)

399 #i‚de‡
CLOCK_REALTIME


400 #unde‡
EV_USE_REALTIME


401 
	#EV_USE_REALTIME
 0

	)

404 #i‡!
EV_STAT_ENABLE


405 #unde‡
EV_USE_INOTIFY


406 
	#EV_USE_INOTIFY
 0

	)

409 #i‡!
EV_USE_NANOSLEEP


411 #i‡!
deföed
 
_WIN32
 && !deföed 
__hpux


412 
	~<sys/£À˘.h
>

416 #i‡
EV_USE_INOTIFY


417 
	~<sys/°©fs.h
>

418 
	~<sys/öŸify.h
>

420 #i‚de‡
IN_DONT_FOLLOW


421 #unde‡
EV_USE_INOTIFY


422 
	#EV_USE_INOTIFY
 0

	)

426 #i‡
EV_USE_EVENTFD


428 
	~<°döt.h
>

429 #i‚de‡
EFD_NONBLOCK


430 
	#EFD_NONBLOCK
 
O_NONBLOCK


	)

432 #i‚de‡
EFD_CLOEXEC


433 #ifde‡
O_CLOEXEC


434 
	#EFD_CLOEXEC
 
O_CLOEXEC


	)

436 
	#EFD_CLOEXEC
 02000000

	)

439 
EV_CPP
("C"Ë(
evítfd
Ë(
öôvÆ
, 
Êags
);

442 #i‡
EV_USE_SIGNALFD


444 
	~<°döt.h
>

445 #i‚de‡
SFD_NONBLOCK


446 
	#SFD_NONBLOCK
 
O_NONBLOCK


	)

448 #i‚de‡
SFD_CLOEXEC


449 #ifde‡
O_CLOEXEC


450 
	#SFD_CLOEXEC
 
O_CLOEXEC


	)

452 
	#SFD_CLOEXEC
 02000000

	)

455 
	`EV_CPP
 ("C"Ë
	`sig«lfd
 (
fd
, c⁄° 
sig£t_t
 *
mask
, 
Êags
);

457 
	ssig«lfd_sigöfo


459 
uöt32_t
 
ssi_signo
;

460 
∑d
[128 -  (
uöt32_t
)];

466 #i‡
EV_VERIFY
 >= 3

467 
	#EV_FREQUENT_CHECK
 
	`ev_vîify
 (
EV_A
)

	)

469 
	#EV_FREQUENT_CHECK
 dÿ{ 
	}
} 0)

	)

476 
	#MIN_INTERVAL
 0.0001220703125

	)

479 
	#MIN_TIMEJUMP
 1.

	)

480 
	#MAX_BLOCKTIME
 59.743

	)

482 
	#EV_TV_SET
(
tv
,
t
Ëdÿ{Åv.
tv_£c
 = (È;Åv.
tv_u£c
 = ()(— -Åv.tv_£cË* 1e6); } 0)

	)

483 
	#EV_TS_SET
(
ts
,
t
Ëdÿ{Ås.
tv_£c
 = (È;Ås.
tv_n£c
 = ()(— -Ås.tv_£cË* 1e9); } 0)

	)

516 #i‚de‡
ECB_H


517 
	#ECB_H


	)

520 
	#ECB_VERSION
 0x00010003

	)

522 #ifde‡
_WIN32


523 sig√d 
	töt8_t
;

524 
	tuöt8_t
;

525 sig√d 
	töt16_t
;

526 
	tuöt16_t
;

527 sig√d 
	töt32_t
;

528 
	tuöt32_t
;

529 #i‡
__GNUC__


530 sig√d 
	töt64_t
;

531 
	tuöt64_t
;

533 sig√d 
	t__öt64
 
	töt64_t
;

534 
	t__öt64
 
	tuöt64_t
;

536 #ifde‡
_WIN64


537 
	#ECB_PTRSIZE
 8

	)

538 
uöt64_t
 
	tuöçå_t
;

539 
öt64_t
 
	töçå_t
;

541 
	#ECB_PTRSIZE
 4

	)

542 
uöt32_t
 
	tuöçå_t
;

543 
öt32_t
 
	töçå_t
;

546 
	~<öây≥s.h
>

547 #i‡
UINTMAX_MAX
 > 0xffffffffU

548 
	#ECB_PTRSIZE
 8

	)

550 
	#ECB_PTRSIZE
 4

	)

555 #i‡
__x86_64
 || 
_M_AMD64


556 #i‡
__ILP32


557 
	#ECB_AMD64_X32
 1

	)

559 
	#ECB_AMD64
 1

	)

570 #i‚de‡
ECB_GCC_VERSION


571 #i‡!
deföed
 
__GNUC_MINOR__
 || deföed 
__INTEL_COMPILER
 || deföed 
__SUNPRO_C
 || deföed 
__SUNPRO_CC
 || deföed 
__Œvm__
 || deföed 
__˛™g__


572 
	#ECB_GCC_VERSION
(
maj‹
,
mö‹
Ë0

	)

574 
	#ECB_GCC_VERSION
(
maj‹
,
mö‹
Ë(
__GNUC__
 > (maj‹Ë|| (__GNUC__ =(maj‹Ë&& 
__GNUC_MINOR__
 >(mö‹)))

	)

578 
	#ECB_C
 (
__STDC__
+0Ë

	)

579 
	#ECB_C99
 (
__STDC_VERSION__
 >199901L)

	)

580 
	#ECB_C11
 (
__STDC_VERSION__
 >201112L)

	)

581 
	#ECB_CPP
 (
__˝lu•lus
+0)

	)

582 
	#ECB_CPP11
 (
__˝lu•lus
 >201103L)

	)

584 #i‡
ECB_CPP


585 
	#ECB_EXTERN_C
 "C"

	)

586 
	#ECB_EXTERN_C_BEG
 
ECB_EXTERN_C
 {

	)

587 
	#ECB_EXTERN_C_END
 }

	)

589 
	#ECB_EXTERN_C
 

	)

590 
	#ECB_EXTERN_C_BEG


	)

591 
	#ECB_EXTERN_C_END


	)

599 #i‡
ECB_NO_THREADS


600 
	#ECB_NO_SMP
 1

	)

603 #i‡
ECB_NO_SMP


604 
	#ECB_MEMORY_FENCE
 dÿ{ } 0)

	)

607 #i‚de‡
ECB_MEMORY_FENCE


608 #i‡
ECB_GCC_VERSION
(2,5Ë|| 
deföed
 
__INTEL_COMPILER
 || (
__Œvm__
 && 
__GNUC__
Ë|| 
__SUNPRO_C
 >0x5110 || 
__SUNPRO_CC
 >= 0x5110

609 #i‡
__i386
 || 
__i386__


610 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("lock; orb $0, -1(%%e•)" : : : "mem‹y")

	)

611 
	#ECB_MEMORY_FENCE_ACQUIRE
 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

612 
	#ECB_MEMORY_FENCE_RELEASE
 
__asm__
 
	`__vﬁ©ûe__
 ("")

	)

613 #ñi‡
__amd64
 || 
__amd64__
 || 
__x86_64
 || 
__x86_64__


614 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("m„n˚" : : : "mem‹y")

	)

615 
	#ECB_MEMORY_FENCE_ACQUIRE
 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

616 
	#ECB_MEMORY_FENCE_RELEASE
 
__asm__
 
	`__vﬁ©ûe__
 ("")

	)

617 #ñi‡
__powîpc__
 || 
__µc__
 || 
__powîpc64__
 || 
__µc64__


618 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

619 #ñi‡
deföed
 
__ARM_ARCH_6__
 || deföed 
__ARM_ARCH_6J__
 \

620 || 
deföed
 
__ARM_ARCH_6K__
 || deföed 
__ARM_ARCH_6ZK__


621 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("m¸Ö15,0,%0,c7,c10,5" : : "r" (0Ë: "mem‹y")

	)

622 #ñi‡
deföed
 
__ARM_ARCH_7__
 || deföed 
__ARM_ARCH_7A__
 \

623 || 
deföed
 
__ARM_ARCH_7M__
 || deföed 
__ARM_ARCH_7R__


624 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("dmb" : : : "mem‹y")

	)

625 #ñi‡
__•¨c
 || 
__•¨c__


626 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("memb¨ #LﬂdSt‹ê| #LﬂdLﬂd | #St‹eSt‹ê| #St‹eLﬂd" : : : "mem‹y")

	)

627 
	#ECB_MEMORY_FENCE_ACQUIRE
 
__asm__
 
	`__vﬁ©ûe__
 ("memb¨ #LﬂdSt‹ê| #LﬂdLﬂd" : : : "mem‹y")

	)

628 
	#ECB_MEMORY_FENCE_RELEASE
 
__asm__
 
	`__vﬁ©ûe__
 ("memb¨ #LﬂdSt‹ê | #St‹eSt‹e")

	)

629 #ñi‡
deföed
 
__s390__
 || deföed 
__s390x__


630 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("b¸ 15,0" : : : "mem‹y")

	)

631 #ñi‡
deföed
 
__mùs__


632 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

633 #ñi‡
deföed
 
__Æpha__


634 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("mb" : : : "mem‹y")

	)

635 #ñi‡
deföed
 
__hµa__


636 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

637 
	#ECB_MEMORY_FENCE_RELEASE
 
__asm__
 
	`__vﬁ©ûe__
 ("")

	)

638 #ñi‡
deföed
 
__ü64__


639 
	#ECB_MEMORY_FENCE
 
__asm__
 
	`__vﬁ©ûe__
 ("mf" : : : "mem‹y")

	)

644 #i‚de‡
ECB_MEMORY_FENCE


645 #i‡
ECB_GCC_VERSION
(4,7)

647 
	#ECB_MEMORY_FENCE
 
	`__©omic_thªad_„n˚
 (
__ATOMIC_SEQ_CST
)

	)

658 #ñi‡
ECB_GCC_VERSION
(4,4Ë|| 
deföed
 
__INTEL_COMPILER
 || deföed 
__˛™g__


659 
	#ECB_MEMORY_FENCE
 
	`__sync_synchr⁄ize
 ()

	)

660 #ñi‡
_MSC_VER
 >= 1400

661 #¥agm®
öåösic
(
_RódB¨rõr
,
_WrôeB¨rõr
,
_RódWrôeB¨rõr
)

662 
	#ECB_MEMORY_FENCE
 
	`_RódWrôeB¨rõr
 ()

	)

663 
	#ECB_MEMORY_FENCE_ACQUIRE
 
	`_RódWrôeB¨rõr
 (Ë

	)

664 
	#ECB_MEMORY_FENCE_RELEASE
 
	`_WrôeB¨rõr
 ()

	)

665 #ñi‡
deföed
 
_WIN32


666 
	~<WöNT.h
>

667 
	#ECB_MEMORY_FENCE
 
	`Mem‹yB¨rõr
 (Ë

	)

668 #ñi‡
__SUNPRO_C
 >0x5110 || 
__SUNPRO_CC
 >= 0x5110

669 
	~<mb¨rõr.h
>

670 
	#ECB_MEMORY_FENCE
 
	`__machöe_rw_b¨rõr
 ()

	)

671 
	#ECB_MEMORY_FENCE_ACQUIRE
 
	`__machöe_r_b¨rõr
 ()

	)

672 
	#ECB_MEMORY_FENCE_RELEASE
 
	`__machöe_w_b¨rõr
 ()

	)

673 #ñi‡
__xlC__


674 
	#ECB_MEMORY_FENCE
 
	`__sync
 ()

	)

678 #i‚de‡
ECB_MEMORY_FENCE


679 #i‡
ECB_C11
 && !
deföed
 
__STDC_NO_ATOMICS__


682 
	~<°d©omic.h
>

689 
	#ECB_MEMORY_FENCE
 
	`©omic_thªad_„n˚
 (
mem‹y_‹dî_£q_c°
)

	)

693 #i‚de‡
ECB_MEMORY_FENCE


694 #i‡!
ECB_AVOID_PTHREADS


702 
	~<±hªad.h
>

703 
	#ECB_NEEDS_PTHREADS
 1

	)

704 
	#ECB_MEMORY_FENCE_NEEDS_PTHREADS
 1

	)

706 
±hªad_muãx_t
 
ecb_mf_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

707 
	#ECB_MEMORY_FENCE
 dÿ{ 
	`±hªad_muãx_lock
 (&
ecb_mf_lock
); 
	`±hªad_muãx_u∆ock
 (&ecb_mf_lock); } 0)

	)

711 #i‡!
deföed
 
ECB_MEMORY_FENCE_ACQUIRE
 && deföed 
ECB_MEMORY_FENCE


712 
	#ECB_MEMORY_FENCE_ACQUIRE
 
ECB_MEMORY_FENCE


	)

715 #i‡!
deföed
 
ECB_MEMORY_FENCE_RELEASE
 && deföed 
ECB_MEMORY_FENCE


716 
	#ECB_MEMORY_FENCE_RELEASE
 
ECB_MEMORY_FENCE


	)

721 #i‡
__˝lu•lus


722 
	#ecb_ölöe
 
ölöe


	)

723 #ñi‡
ECB_GCC_VERSION
(2,5)

724 
	#ecb_ölöe
 
__ölöe__


	)

725 #ñi‡
ECB_C99


726 
	#ecb_ölöe
 
ölöe


	)

728 
	#ecb_ölöe
 

	)

731 #i‡
ECB_GCC_VERSION
(3,3)

732 
	#ecb_ª°ri˘
 
__ª°ri˘__


	)

733 #ñi‡
ECB_C99


734 
	#ecb_ª°ri˘
 
ª°ri˘


	)

736 
	#ecb_ª°ri˘


	)

739 
	tecb_boﬁ
;

741 
	#ECB_CONCAT_
(
a
, 
b
Ë®## 
	)
b

742 
	#ECB_CONCAT
(
a
, 
b
Ë
	`ECB_CONCAT_
◊, b)

	)

743 
	#ECB_STRINGIFY_
(
a
Ë#a

	)

744 
	#ECB_STRINGIFY
(
a
Ë
	`ECB_STRINGIFY_
◊)

	)

746 
	#ecb_fun˘i⁄_
 
ecb_ölöe


	)

748 #i‡
ECB_GCC_VERSION
(3,1)

749 
	#ecb_©åibuã
(
©åli°
Ë
	`__©åibuã__
◊âæi°)

	)

750 
	#ecb_is_c⁄°™t
(
ex¥
Ë
	`__buûtö_c⁄°™t_p
 (ex¥)

	)

751 
	#ecb_ex≥˘
(
ex¥
,
vÆue
Ë
	`__buûtö_ex≥˘
 (”x¥),(vÆue))

	)

752 
	#ecb_¥e„tch
(
addr
,
rw
,
loˇlôy
Ë
	`__buûtö_¥e„tch
 (addr,Ñw,Üoˇlôy)

	)

754 
	#ecb_©åibuã
(
©åli°
)

	)

755 
	#ecb_is_c⁄°™t
(
ex¥
Ë0

	)

756 
	#ecb_ex≥˘
(
ex¥
,
vÆue
Ë”x¥)

	)

757 
	#ecb_¥e„tch
(
addr
,
rw
,
loˇlôy
)

	)

761 #i‡
ECB_GCC_VERSION
(4,5)

762 
	#ecb_de˛ty≥
(
x
Ë
	`__de˛ty≥
(x)

	)

763 #ñi‡
ECB_GCC_VERSION
(3,0)

764 
	#ecb_de˛ty≥
(
x
Ë
	`__ty≥of
(x)

	)

767 
	#ecb_noölöe
 
	`ecb_©åibuã
 ((
__noölöe__
))

	)

768 
	#ecb_unu£d
 
	`ecb_©åibuã
 ((
__unu£d__
))

	)

769 
	#ecb_c⁄°
 
	`ecb_©åibuã
 ((
__c⁄°__
))

	)

770 
	#ecb_puª
 
	`ecb_©åibuã
 ((
__puª__
))

	)

772 #i‡
ECB_C11


773 
	#ecb_n‹ëu∫
 
_N‹ëu∫


	)

775 
	#ecb_n‹ëu∫
 
	`ecb_©åibuã
 ((
__n‹ëu∫__
))

	)

778 #i‡
ECB_GCC_VERSION
(4,3)

779 
	#ecb_¨tificül
 
	`ecb_©åibuã
 ((
__¨tificül__
))

	)

780 
	#ecb_hŸ
 
	`ecb_©åibuã
 ((
__hŸ__
))

	)

781 
	#ecb_cﬁd
 
	`ecb_©åibuã
 ((
__cﬁd__
))

	)

783 
	#ecb_¨tificül


	)

784 
	#ecb_hŸ


	)

785 
	#ecb_cﬁd


	)

791 
	#ecb_ex≥˘_Ál£
(
ex¥
Ë
	`ecb_ex≥˘
 (!!”x¥), 0)

	)

792 
	#ecb_ex≥˘_åue
(
ex¥
Ë
	`ecb_ex≥˘
 (!!”x¥), 1)

	)

794 
	#ecb_likñy
(
ex¥
Ë
	`ecb_ex≥˘_åue
 (ex¥)

	)

795 
	#ecb_u∆ikñy
(
ex¥
Ë
	`ecb_ex≥˘_Ál£
 (ex¥)

	)

798 #i‡
ECB_GCC_VERSION
(3,4)

800 
	#ecb_ld32
(
x
Ë(
	`__buûtö_˛z
 (xË^ 31)

	)

801 
	#ecb_ld64
(
x
Ë(
	`__buûtö_˛zŒ
 (xË^ 63)

	)

802 
	#ecb_˘z32
(
x
Ë
	`__buûtö_˘z
 (x)

	)

803 
	#ecb_˘z64
(
x
Ë
	`__buûtö_˘zŒ
 (x)

	)

804 
	#ecb_p›cou¡32
(
x
Ë
	`__buûtö_p›cou¡
 (x)

	)

807 
ecb_fun˘i⁄_
 
	$ecb_˘z32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

808 
ecb_fun˘i⁄_
 

809 
	$ecb_˘z32
 (
uöt32_t
 
x
)

811 
r
 = 0;

813 
x
 &= ~x + 1;

815 #i‡
ECB_bønchÀss_⁄_i386


816 
r
 +!!(
x
 & 0xaaaaaaaa) << 0;

817 
r
 +!!(
x
 & 0xcccccccc) << 1;

818 
r
 +!!(
x
 & 0xf0f0f0f0) << 2;

819 
r
 +!!(
x
 & 0xff00ff00) << 3;

820 
r
 +!!(
x
 & 0xffff0000) << 4;

822 i‡(
x
 & 0xØØØØË
r
 += 1;

823 i‡(
x
 & 0xccccccccË
r
 += 2;

824 i‡(
x
 & 0xf0f0f0f0Ë
r
 += 4;

825 i‡(
x
 & 0xff00ff00Ë
r
 += 8;

826 i‡(
x
 & 0xffff0000Ë
r
 += 16;

829  
r
;

830 
	}
}

832 
ecb_fun˘i⁄_
 
	$ecb_˘z64
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

833 
ecb_fun˘i⁄_
 

834 
	$ecb_˘z64
 (
uöt64_t
 
x
)

836 
shi·
 = 
x
 & 0xffffffffU ? 0 : 32;

837  
	`ecb_˘z32
 (
x
 >> 
shi·
) + shift;

838 
	}
}

840 
ecb_fun˘i⁄_
 
	$ecb_p›cou¡32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

841 
ecb_fun˘i⁄_
 

842 
	$ecb_p›cou¡32
 (
uöt32_t
 
x
)

844 
x
 -= (x >> 1) & 0x55555555;

845 
x
 = ((x >> 2) & 0x33333333) + (x & 0x33333333);

846 
x
 = ((x >> 4) + x) & 0x0f0f0f0f;

847 
x
 *= 0x01010101;

849  
x
 >> 24;

850 
	}
}

852 
ecb_fun˘i⁄_
 
	$ecb_ld32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

853 
ecb_fun˘i⁄_
 
	$ecb_ld32
 (
uöt32_t
 
x
)

855 
r
 = 0;

857 i‡(
x
 >> 16Ë{ x >>16; 
r
 += 16; }

858 i‡(
x
 >> 8Ë{ x >>8; 
r
 += 8; }

859 i‡(
x
 >> 4Ë{ x >>4; 
r
 += 4; }

860 i‡(
x
 >> 2Ë{ x >>2; 
r
 += 2; }

861 i‡(
x
 >> 1Ë{ 
r
 += 1; }

863  
r
;

864 
	}
}

866 
ecb_fun˘i⁄_
 
	$ecb_ld64
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

867 
ecb_fun˘i⁄_
 
	$ecb_ld64
 (
uöt64_t
 
x
)

869 
r
 = 0;

871 i‡(
x
 >> 32Ë{ x >>32; 
r
 += 32; }

873  
r
 + 
	`ecb_ld32
 (
x
);

874 
	}
}

877 
ecb_fun˘i⁄_
 
ecb_boﬁ
 
	$ecb_is_pŸ32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

878 
ecb_fun˘i⁄_
 
ecb_boﬁ
 
	$ecb_is_pŸ32
 (
uöt32_t
 
x
Ë{  !(x & (x - 1)); 
	}
}

879 
ecb_fun˘i⁄_
 
ecb_boﬁ
 
	$ecb_is_pŸ64
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

880 
ecb_fun˘i⁄_
 
ecb_boﬁ
 
	$ecb_is_pŸ64
 (
uöt64_t
 
x
Ë{  !(x & (x - 1)); 
	}
}

882 
ecb_fun˘i⁄_
 
uöt8_t
 
	$ecb_bôªv8
 (
uöt8_t
 
x
Ë
ecb_c⁄°
;

883 
ecb_fun˘i⁄_
 
uöt8_t
 
	$ecb_bôªv8
 (
uöt8_t
 
x
)

885  ( (
x
 * 0x0802U & 0x22110U)

886 | (
x
 * 0x8020U & 0x88440U)) * 0x10101U >> 16;

887 
	}
}

889 
ecb_fun˘i⁄_
 
uöt16_t
 
	$ecb_bôªv16
 (
uöt16_t
 
x
Ë
ecb_c⁄°
;

890 
ecb_fun˘i⁄_
 
uöt16_t
 
	$ecb_bôªv16
 (
uöt16_t
 
x
)

892 
x
 = ((x >> 1) & 0x5555) | ((x & 0x5555) << 1);

893 
x
 = ((x >> 2) & 0x3333) | ((x & 0x3333) << 2);

894 
x
 = ((x >> 4) & 0x0f0f) | ((x & 0x0f0f) << 4);

895 
x
 = ( x >> 8 ) | ( x << 8);

897  
x
;

898 
	}
}

900 
ecb_fun˘i⁄_
 
uöt32_t
 
	$ecb_bôªv32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

901 
ecb_fun˘i⁄_
 
uöt32_t
 
	$ecb_bôªv32
 (
uöt32_t
 
x
)

903 
x
 = ((x >> 1) & 0x55555555) | ((x & 0x55555555) << 1);

904 
x
 = ((x >> 2) & 0x33333333) | ((x & 0x33333333) << 2);

905 
x
 = ((x >> 4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) << 4);

906 
x
 = ((x >> 8) & 0x00ff00ff) | ((x & 0x00ff00ff) << 8);

907 
x
 = ( x >> 16 ) | ( x << 16);

909  
x
;

910 
	}
}

914 
ecb_fun˘i⁄_
 
	$ecb_p›cou¡64
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

915 
ecb_fun˘i⁄_
 

916 
	$ecb_p›cou¡64
 (
uöt64_t
 
x
)

918  
	`ecb_p›cou¡32
 (
x
) +Écb_popcount32 (x >> 32);

919 
	}
}

921 
ecb_ölöe
 
uöt8_t
 
	$ecb_rŸl8
 (
uöt8_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

922 
ecb_ölöe
 
uöt8_t
 
	$ecb_rŸr8
 (
uöt8_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

923 
ecb_ölöe
 
uöt16_t
 
	$ecb_rŸl16
 (
uöt16_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

924 
ecb_ölöe
 
uöt16_t
 
	$ecb_rŸr16
 (
uöt16_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

925 
ecb_ölöe
 
uöt32_t
 
	$ecb_rŸl32
 (
uöt32_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

926 
ecb_ölöe
 
uöt32_t
 
	$ecb_rŸr32
 (
uöt32_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

927 
ecb_ölöe
 
uöt64_t
 
	$ecb_rŸl64
 (
uöt64_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

928 
ecb_ölöe
 
uöt64_t
 
	$ecb_rŸr64
 (
uöt64_t
 
x
, 
cou¡
Ë
ecb_c⁄°
;

930 
ecb_ölöe
 
uöt8_t
 
	$ecb_rŸl8
 (
uöt8_t
 
x
, 
cou¡
Ë{  (x >> ( 8 - cou¡)Ë| (x << cou¡); 
	}
}

931 
ecb_ölöe
 
uöt8_t
 
	$ecb_rŸr8
 (
uöt8_t
 
x
, 
cou¡
Ë{  (x << ( 8 - cou¡)Ë| (x >> cou¡); 
	}
}

932 
ecb_ölöe
 
uöt16_t
 
	$ecb_rŸl16
 (
uöt16_t
 
x
, 
cou¡
Ë{  (x >> (16 - cou¡)Ë| (x << cou¡); 
	}
}

933 
ecb_ölöe
 
uöt16_t
 
	$ecb_rŸr16
 (
uöt16_t
 
x
, 
cou¡
Ë{  (x << (16 - cou¡)Ë| (x >> cou¡); 
	}
}

934 
ecb_ölöe
 
uöt32_t
 
	$ecb_rŸl32
 (
uöt32_t
 
x
, 
cou¡
Ë{  (x >> (32 - cou¡)Ë| (x << cou¡); 
	}
}

935 
ecb_ölöe
 
uöt32_t
 
	$ecb_rŸr32
 (
uöt32_t
 
x
, 
cou¡
Ë{  (x << (32 - cou¡)Ë| (x >> cou¡); 
	}
}

936 
ecb_ölöe
 
uöt64_t
 
	$ecb_rŸl64
 (
uöt64_t
 
x
, 
cou¡
Ë{  (x >> (64 - cou¡)Ë| (x << cou¡); 
	}
}

937 
ecb_ölöe
 
uöt64_t
 
	$ecb_rŸr64
 (
uöt64_t
 
x
, 
cou¡
Ë{  (x << (64 - cou¡)Ë| (x >> cou¡); 
	}
}

939 #i‡
ECB_GCC_VERSION
(4,3)

940 
	#ecb_bsw≠16
(
x
Ë(
	`__buûtö_bsw≠32
 (xË>> 16)

	)

941 
	#ecb_bsw≠32
(
x
Ë
	`__buûtö_bsw≠32
 (x)

	)

942 
	#ecb_bsw≠64
(
x
Ë
	`__buûtö_bsw≠64
 (x)

	)

944 
ecb_fun˘i⁄_
 
uöt16_t
 
	$ecb_bsw≠16
 (
uöt16_t
 
x
Ë
ecb_c⁄°
;

945 
ecb_fun˘i⁄_
 
uöt16_t


946 
	$ecb_bsw≠16
 (
uöt16_t
 
x
)

948  
	`ecb_rŸl16
 (
x
, 8);

949 
	}
}

951 
ecb_fun˘i⁄_
 
uöt32_t
 
	$ecb_bsw≠32
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

952 
ecb_fun˘i⁄_
 
uöt32_t


953 
	$ecb_bsw≠32
 (
uöt32_t
 
x
)

955  (((
uöt32_t
)
	`ecb_bsw≠16
 (
x
)) << 16) |Écb_bswap16 (x >> 16);

956 
	}
}

958 
ecb_fun˘i⁄_
 
uöt64_t
 
	$ecb_bsw≠64
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

959 
ecb_fun˘i⁄_
 
uöt64_t


960 
	$ecb_bsw≠64
 (
uöt64_t
 
x
)

962  (((
uöt64_t
)
	`ecb_bsw≠32
 (
x
)) << 32) |Écb_bswap32 (x >> 32);

963 
	}
}

966 #i‡
ECB_GCC_VERSION
(4,5)

967 
	#ecb_uƒóchabÀ
(Ë
	`__buûtö_uƒóchabÀ
 ()

	)

970 
ecb_ölöe
 
	$ecb_uƒóchabÀ
 (Ë
ecb_n‹ëu∫
;

971 
ecb_ölöe
 
	$ecb_uƒóchabÀ
 (Ë{ 
	}
}

975 
	#ecb_assume
(
c⁄d
Ëi‡(!(c⁄d)Ë
	`ecb_uƒóchabÀ
 (); 0

	)

977 
ecb_ölöe
 
	$ecb_byã‹dî_hñ≥r
 (Ë
ecb_c⁄°
;

978 
ecb_ölöe
 

979 
	$ecb_byã‹dî_hñ≥r
 ()

987 #i‡
__i386
 || 
__i386__
 || 
_M_X86
 || 
__amd64
 || 
__amd64__
 || 
_M_X64


989 #ñi‡
__BYTE_ORDER__
 && __BYTE_ORDER__ =
__ORDER_LITTLE_ENDIAN__


991 #ñi‡
__BYTE_ORDER__
 && __BYTE_ORDER__ =
__ORDER_BIG_ENDIAN__


996 
uöt32_t
 
i
;

997 
uöt8_t
 
c
;

998 } 
u
 = { 0x11223344 };

999  
u
.
c
;

1001 
	}
}

1003 
ecb_ölöe
 
ecb_boﬁ
 
	$ecb_big_ídün
 (Ë
ecb_c⁄°
;

1004 
ecb_ölöe
 
ecb_boﬁ
 
	$ecb_big_ídün
 (Ë{  
	`ecb_byã‹dî_hñ≥r
 (Ë=0x11; 
	}
}

1005 
ecb_ölöe
 
ecb_boﬁ
 
	$ecb_lôée_ídün
 (Ë
ecb_c⁄°
;

1006 
ecb_ölöe
 
ecb_boﬁ
 
	$ecb_lôée_ídün
 (Ë{  
	`ecb_byã‹dî_hñ≥r
 (Ë=0x44; 
	}
}

1008 #i‡
ECB_GCC_VERSION
(3,0Ë|| 
ECB_C99


1009 
	#ecb_mod
(
m
,
n
Ë((mË% (nË+ ((mË% (nË< 0 ? (nË: 0))

	)

1011 
	#ecb_mod
(
m
,
n
Ë((mË< 0 ? (“Ë- 1 - ((-1 - (m)Ë% (n))Ë: ((mË% (n)))

	)

1014 #i‡
__˝lu•lus


1015 
	gãm∂©e
<
ty≥«me
 
	gT
>

1016 
ölöe
 
T
 
	$ecb_div_rd
 (
T
 
vÆ
, T 
div
)

1018  
vÆ
 < 0 ? - ((-vÆ + 
div
 - 1) / div) : (val ) / div;

1019 
	}
}

1020 
	gãm∂©e
<
ty≥«me
 
	gT
>

1021 
ölöe
 
T
 
	$ecb_div_ru
 (
T
 
vÆ
, T 
div
)

1023  
vÆ
 < 0 ? - ((-vÆ ) / 
div
) : (val + div - 1) / div;

1024 
	}
}

1026 
	#ecb_div_rd
(
vÆ
,
div
Ë((vÆË< 0 ? - ((-(vÆË+ (divË- 1Ë/ (div)Ë: ((vÆËË/ (div))

	)

1027 
	#ecb_div_ru
(
vÆ
,
div
Ë((vÆË< 0 ? - ((-(vÆËË/ (div)Ë: ((vÆË+ (divË- 1Ë/ (div))

	)

1030 #i‡
ecb_˝lu•lus_d€s_nŸ_suck


1032 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gN
>

1033 
ölöe
 
ecb_¨øy_Àngth
 (c⁄° 
T
 (&
¨r
)[
N
])

1035  
	gN
;

1038 
	#ecb_¨øy_Àngth
(
«me
Ë( («meË/  («mê[0]))

	)

1047 || 
	g__i386
 || 
	g__i386__
 \

1048 || 
	g__amd64
 || 
	g__amd64__
 || 
	g__x86_64
 || 
	g__x86_64__
 \

1049 || 
	g__powîpc__
 || 
	g__µc__
 || 
	g__powîpc64__
 || 
	g__µc64__
 \

1050 || 
deföed
 
	g__¨m__
 && deföed 
	g__ARM_EABI__
 \

1051 || 
deföed
 
	g__s390__
 || deföed 
	g__s390x__
 \

1052 || 
deföed
 
	g__mùs__
 \

1053 || 
deföed
 
	g__Æpha__
 \

1054 || 
deföed
 
	g__hµa__
 \

1055 || 
deföed
 
	g__ü64__
 \

1056 || 
deföed
 
	g_M_IX86
 || deföed 
	g_M_AMD64
 || deföed 
	g_M_IA64


1057 
	#ECB_STDFP
 1

	)

1058 
	~<°rög.h
>

1060 
	#ECB_STDFP
 0

	)

1061 
	~<m©h.h
>

1064 #i‚de‡
ECB_NO_LIBM


1067 
ecb_fun˘i⁄_
 
uöt32_t
 
	$ecb_Êﬂt_to_bö¨y32
 (
x
Ë
ecb_c⁄°
;

1068 
ecb_fun˘i⁄_
 
uöt32_t


1069 
	$ecb_Êﬂt_to_bö¨y32
 (
x
)

1071 
uöt32_t
 
r
;

1073 #i‡
ECB_STDFP


1074 
	`mem˝y
 (&
r
, &
x
, 4);

1077 
uöt32_t
 
m
;

1078 
e
;

1080 i‡(
x
 == 0e0f )  0x00000000U;

1081 i‡(
x
 > +3.40282346638528860e+38f)  0x7f800000U;

1082 i‡(
x
 < -3.40282346638528860e+38f)  0xff800000U;

1083 i‡(
x
 != x )  0x7fbfffffU;

1085 
m
 = 
	`‰expf
 (
x
, &
e
) * 0x1000000U;

1087 
r
 = 
m
 & 0x80000000U;

1089 i‡(
r
)

1090 
m
 = -m;

1092 i‡(
e
 <= -126)

1094 
m
 &= 0xffffffU;

1095 
m
 >>(-125 - 
e
);

1096 
e
 = -126;

1099 
r
 |(
e
 + 126) << 23;

1100 
r
 |
m
 & 0x7fffffU;

1103  
r
;

1104 
	}
}

1107 
ecb_fun˘i⁄_
 
	$ecb_bö¨y32_to_Êﬂt
 (
uöt32_t
 
x
Ë
ecb_c⁄°
;

1108 
ecb_fun˘i⁄_
 

1109 
	$ecb_bö¨y32_to_Êﬂt
 (
uöt32_t
 
x
)

1111 
r
;

1113 #i‡
ECB_STDFP


1114 
	`mem˝y
 (&
r
, &
x
, 4);

1117 
√g
 = 
x
 >> 31;

1118 
e
 = (
x
 >> 23) & 0xffU;

1120 
x
 &= 0x7fffffU;

1122 i‡(
e
)

1123 
x
 |= 0x800000U;

1125 
e
 = 1;

1128 
r
 = 
	`ldexpf
 (
x
 * (0.5‡/ 0x800000U), 
e
 - 126);

1130 
r
 = 
√g
 ? -r :Ñ;

1133  
r
;

1134 
	}
}

1137 
ecb_fun˘i⁄_
 
uöt64_t
 
	$ecb_doubÀ_to_bö¨y64
 (
x
Ë
ecb_c⁄°
;

1138 
ecb_fun˘i⁄_
 
uöt64_t


1139 
	$ecb_doubÀ_to_bö¨y64
 (
x
)

1141 
uöt64_t
 
r
;

1143 #i‡
ECB_STDFP


1144 
	`mem˝y
 (&
r
, &
x
, 8);

1147 
uöt64_t
 
m
;

1148 
e
;

1150 i‡(
x
 == 0e0 )  0x0000000000000000U;

1151 i‡(
x
 > +1.79769313486231470e+308)  0x7ff0000000000000U;

1152 i‡(
x
 < -1.79769313486231470e+308)  0xfff0000000000000U;

1153 i‡(
x
 != x )  0X7ff7ffffffffffffU;

1155 
m
 = 
	`‰exp
 (
x
, &
e
) * 0x20000000000000U;

1157 
r
 = 
m
 & 0x8000000000000000;;

1159 i‡(
r
)

1160 
m
 = -m;

1162 i‡(
e
 <= -1022)

1164 
m
 &= 0x1fffffffffffffU;

1165 
m
 >>(-1021 - 
e
);

1166 
e
 = -1022;

1169 
r
 |((
uöt64_t
)(
e
 + 1022)) << 52;

1170 
r
 |
m
 & 0xfffffffffffffU;

1173  
r
;

1174 
	}
}

1177 
ecb_fun˘i⁄_
 
	$ecb_bö¨y64_to_doubÀ
 (
uöt64_t
 
x
Ë
ecb_c⁄°
;

1178 
ecb_fun˘i⁄_
 

1179 
	$ecb_bö¨y64_to_doubÀ
 (
uöt64_t
 
x
)

1181 
r
;

1183 #i‡
ECB_STDFP


1184 
	`mem˝y
 (&
r
, &
x
, 8);

1187 
√g
 = 
x
 >> 63;

1188 
e
 = (
x
 >> 52) & 0x7ffU;

1190 
x
 &= 0xfffffffffffffU;

1192 i‡(
e
)

1193 
x
 |= 0x10000000000000U;

1195 
e
 = 1;

1198 
r
 = 
	`ldexp
 (
x
 * (0.5 / 0x10000000000000U), 
e
 - 1022);

1200 
r
 = 
√g
 ? -r :Ñ;

1203  
r
;

1204 
	}
}

1212 #i‡
ECB_MEMORY_FENCE_NEEDS_PTHREADS


1223 #i‚de‡
ECB_MEMORY_FENCE


1224 
	#ECB_MEMORY_FENCE
 dÿ{ } 0)

	)

1225 
	#ECB_MEMORY_FENCE_ACQUIRE
 
ECB_MEMORY_FENCE


	)

1226 
	#ECB_MEMORY_FENCE_RELEASE
 
ECB_MEMORY_FENCE


	)

1229 
	#ex≥˘_Ál£
(
c⁄d
Ë
	`ecb_ex≥˘_Ál£
 (c⁄d)

	)

1230 
	#ex≥˘_åue
(
c⁄d
Ë
	`ecb_ex≥˘_åue
 (c⁄d)

	)

1231 
	#noölöe
 
ecb_noölöe


	)

1233 
	#ölöe_size
 
ecb_ölöe


	)

1235 #i‡
EV_FEATURE_CODE


1236 
	#ölöe_•ìd
 
ecb_ölöe


	)

1238 
	#ölöe_•ìd
 
noölöe


	)

1241 
	#NUMPRI
 (
EV_MAXPRI
 - 
EV_MINPRI
 + 1)

	)

1243 #i‡
EV_MINPRI
 =
EV_MAXPRI


1244 
	#ABSPRI
(
w
Ë(((
W
)w), 0)

	)

1246 
	#ABSPRI
(
w
Ë(((
W
)w)->
¥i‹ôy
 - 
EV_MINPRI
)

	)

1249 
	#EMPTY


	)

1250 
	#EMPTY2
(
a
,
b
Ë

	)

1252 
ev_w©chî
 *
	tW
;

1253 
ev_w©chî_li°
 *
	tWL
;

1254 
ev_w©chî_time
 *
	tWT
;

1256 
	#ev_a˘ive
(
w
Ë((
W
)(w))->
a˘ive


	)

1257 
	#ev_©
(
w
Ë((
WT
)(w))->
©


	)

1259 #i‡
EV_USE_REALTIME


1262 
EV_ATOMIC_T
 
	ghave_ªÆtime
;

1265 #i‡
EV_USE_MONOTONIC


1266 
EV_ATOMIC_T
 
	ghave_m⁄Ÿ⁄ic
;

1269 #i‚de‡
EV_FD_TO_WIN32_HANDLE


1270 
	#EV_FD_TO_WIN32_HANDLE
(
fd
Ë
	`_gë_osfh™dÀ
 (fd)

	)

1272 #i‚de‡
EV_WIN32_HANDLE_TO_FD


1273 
	#EV_WIN32_HANDLE_TO_FD
(
h™dÀ
Ë
	`_›í_osfh™dÀ
 (h™dÀ, 0)

	)

1275 #i‚de‡
EV_WIN32_CLOSE_FD


1276 
	#EV_WIN32_CLOSE_FD
(
fd
Ë
	`˛o£
 (fd)

	)

1279 #ifde‡
_WIN32


1280 
	~"ev_wö32.c
"

1287 #i‡
EV_USE_FLOOR


1288 
	~<m©h.h
>

1289 
	#ev_Êo‹
(
v
Ë
	`Êo‹
 (v)

	)

1292 
	~<Êﬂt.h
>

1295 
ev_t°amp
 
noölöe


1296 
	$ev_Êo‹
 (
ev_t°amp
 
v
)

1299 #i‡
FLT_RADIX
 != 2

1300 c⁄° 
ev_t°amp
 
shi·
 =  () >= 8 ? 10000000000000000000. : 1000000000.;

1302 c⁄° 
ev_t°amp
 
shi·
 =  () >= 8 ? 18446744073709551616. : 4294967296.;

1306 i‡(
	`ex≥˘_Ál£
 (
v
 >
shi·
))

1308 
ev_t°amp
 
f
;

1310 i‡(
v
 == v - 1.)

1311  
v
;

1313 
f
 = 
shi·
 * 
	`ev_Êo‹
 (
v
 * (1. / shift));

1314  
f
 + 
	`ev_Êo‹
 (
v
 - f);

1318 i‡(
	`ex≥˘_Ál£
 (
v
 < 0.))

1320 
ev_t°amp
 
f
 = -
	`ev_Êo‹
 (-
v
);

1322  
f
 - (‡=
v
 ? 0 : 1);

1326  ()
v
;

1327 
	}
}

1333 #ifde‡
__löux


1334 
	~<sys/ut¢ame.h
>

1337 
noölöe
 
ecb_cﬁd


1338 
	$ev_löux_vîsi⁄
 ()

1340 #ifde‡
__löux


1341 
v
 = 0;

1342 
ut¢ame
 
buf
;

1343 
i
;

1344 *
p
 = 
buf
.
ªÀa£
;

1346 i‡(
	`u«me
 (&
buf
))

1349 
i
 = 3+1; --i; )

1351 
c
 = 0;

1355 i‡(*
p
 >= '0' && *p <= '9')

1356 
c
 = c * 10 + *
p
++ - '0';

1359 
p
 += *p == '.';

1364 
v
 = (v << 8Ë| 
c
;

1367  
v
;

1371 
	}
}

1375 #i‡
EV_AVOID_STDIO


1376 
noölöe
 
ecb_cﬁd


1377 
	$ev_¥öãº
 (c⁄° *
msg
)

1379 
	`wrôe
 (
STDERR_FILENO
, 
msg
, 
	`°æí
 (msg));

1380 
	}
}

1383 (*
sy£º_cb
)(c⁄° *
msg
Ë
EV_THROW
;

1385 
ecb_cﬁd


1386 
	`ev_£t_sy£º_cb
 ((*
cb
)(c⁄° *
msg
Ë
EV_THROW
) EV_THROW

1388 
sy£º_cb
 = 
cb
;

1389 
	}
}

1391 
noölöe
 
ecb_cﬁd


1392 
	$ev_sy£º
 (c⁄° *
msg
)

1394 i‡(!
msg
)

1395 
msg
 = "(libev) systemÉrror";

1397 i‡(
sy£º_cb
)

1398 
	`sy£º_cb
 (
msg
);

1401 #i‡
EV_AVOID_STDIO


1402 
	`ev_¥öãº
 (
msg
);

1403 
	`ev_¥öãº
 (": ");

1404 
	`ev_¥öãº
 (
	`°ªº‹
 (
î∫o
));

1405 
	`ev_¥öãº
 ("\n");

1407 
	`≥º‹
 (
msg
);

1409 
	`ab‹t
 ();

1411 
	}
}

1414 
	$ev_ªÆloc_emul
 (*
±r
, 
size
Ë
EV_THROW


1423 i‡(
size
)

1424  
	`ªÆloc
 (
±r
, 
size
);

1426 
	`‰ì
 (
±r
);

1428 
	}
}

1430 *(*
	gÆloc
)(*
	g±r
, 
	gsize
Ë
	gEV_THROW
 = 
ev_ªÆloc_emul
;

1432 
ecb_cﬁd


1433 
ev_£t_Æloˇt‹
 (*(*
cb
)(*
±r
, 
size
Ë
EV_THROW
Ë
	gEV_THROW


1435 
	gÆloc
 = 
cb
;

1438 
ölöe_•ìd
 *

1439 
	$ev_ªÆloc
 (*
±r
, 
size
)

1441 
±r
 = 
	`Æloc
 (±r, 
size
);

1443 i‡(!
±r
 && 
size
)

1445 #i‡
EV_AVOID_STDIO


1446 
	`ev_¥öãº
 ("(libev) memoryállocation failed,áborting.\n");

1448 
	`Ârötf
 (
°dîr
, "÷ibevËˇ¬ŸáŒoˇã %ld byãs,áb‹tög.", 
size
);

1450 
	`ab‹t
 ();

1453  
±r
;

1454 
	}
}

1456 
	#ev_mÆloc
(
size
Ë
	`ev_ªÆloc
 (0, (size))

	)

1457 
	#ev_‰ì
(
±r
Ë
	`ev_ªÆloc
 (’å), 0)

	)

1462 
	#EV_ANFD_REIFY
 1

	)

1467 
WL
 
	mhód
;

1468 
	mevíts
;

1469 
	mªify
;

1470 
	memask
;

1471 
	munu£d
;

1472 #i‡
EV_USE_EPOLL


1473 
	megí
;

1475 #i‡
EV_SELECT_IS_WINSOCKET
 || 
EV_USE_IOCP


1476 
SOCKET
 
	mh™dÀ
;

1478 #i‡
EV_USE_IOCP


1479 
OVERLAPPED
 
	m‹
, 
	mow
;

1481 } 
	tANFD
;

1486 
W
 
	mw
;

1487 
	mevíts
;

1488 } 
	tANPENDING
;

1490 #i‡
EV_USE_INOTIFY


1494 
WL
 
	mhód
;

1495 } 
	tANFS
;

1499 #i‡
EV_HEAP_CACHE_AT


1502 
ev_t°amp
 
	m©
;

1503 
WT
 
	mw
;

1504 } 
	tANHE
;

1506 
	#ANHE_w
(
he
Ë(he).
w


	)

1507 
	#ANHE_©
(
he
Ë(he).
©


	)

1508 
	#ANHE_©_ˇche
(
he
Ë(he).
©
 = (he).
w
->©

	)

1511 
WT
 
	tANHE
;

1513 
	#ANHE_w
(
he
Ë(he)

	)

1514 
	#ANHE_©
(
he
Ë(he)->
©


	)

1515 
	#ANHE_©_ˇche
(
he
)

	)

1518 #i‡
EV_MULTIPLICITY


1520 
	sev_lo›


1522 
ev_t°amp
 
	mev_π_now
;

1523 
	#ev_π_now
 ((
lo›
)->
ev_π_now
)

	)

1524 
	#VAR
(
«me
,
de˛
Ëde˛;

	)

1525 
	~"ev_v¨s.h
"

1526 #unde‡
VAR


1528 
	~"ev_wøp.h
"

1530 
ev_lo›
 
	gdeÁu…_lo›_°ru˘
;

1531 
EV_API_DECL
 
ev_lo›
 *
	gev_deÁu…_lo›_±r
 = 0;

1535 
EV_API_DECL
 
ev_t°amp
 
	gev_π_now
 = 0;

1536 
	#VAR
(
«me
,
de˛
Ëde˛;

	)

1537 
	~"ev_v¨s.h
"

1538 #unde‡
VAR


1540 
	gev_deÁu…_lo›_±r
;

1544 #i‡
EV_FEATURE_API


1545 
	#EV_RELEASE_CB
 i‡(
	`ex≥˘_Ál£
 (
ªÀa£_cb
)Ë
	`ªÀa£_cb
 (
EV_A
)

	)

1546 
	#EV_ACQUIRE_CB
 i‡(
	`ex≥˘_Ál£
 (
acquúe_cb
)Ë
	`acquúe_cb
 (
EV_A
)

	)

1547 
	#EV_INVOKE_PENDING
 
	`övoke_cb
 (
EV_A
)

	)

1549 
	#EV_RELEASE_CB
 ()0

	)

1550 
	#EV_ACQUIRE_CB
 ()0

	)

1551 
	#EV_INVOKE_PENDING
 
	`ev_övoke_≥ndög
 (
EV_A
)

	)

1554 
	#EVBREAK_RECURSE
 0x80

	)

1558 #i‚de‡
EV_HAVE_EV_TIME


1559 
ev_t°amp


1560 
	$ev_time
 (Ë
EV_THROW


1562 #i‡
EV_USE_REALTIME


1563 i‡(
	`ex≥˘_åue
 (
have_ªÆtime
))

1565 
time•ec
 
ts
;

1566 
	`˛ock_gëtime
 (
CLOCK_REALTIME
, &
ts
);

1567  
ts
.
tv_£c
 +Ås.
tv_n£c
 * 1e-9;

1571 
timevÆ
 
tv
;

1572 
	`gëtimeofday
 (&
tv
, 0);

1573  
tv
.
tv_£c
 +Åv.
tv_u£c
 * 1e-6;

1574 
	}
}

1577 
ölöe_size
 
ev_t°amp


1578 
	$gë_˛ock
 ()

1580 #i‡
EV_USE_MONOTONIC


1581 i‡(
	`ex≥˘_åue
 (
have_m⁄Ÿ⁄ic
))

1583 
time•ec
 
ts
;

1584 
	`˛ock_gëtime
 (
CLOCK_MONOTONIC
, &
ts
);

1585  
ts
.
tv_£c
 +Ås.
tv_n£c
 * 1e-9;

1589  
	`ev_time
 ();

1590 
	}
}

1592 #i‡
EV_MULTIPLICITY


1593 
ev_t°amp


1594 
	$ev_now
 (
EV_P
Ë
EV_THROW


1596  
ev_π_now
;

1597 
	}
}

1601 
	$ev_¶ìp
 (
ev_t°amp
 
dñay
Ë
EV_THROW


1603 i‡(
dñay
 > 0.)

1605 #i‡
EV_USE_NANOSLEEP


1606 
time•ec
 
ts
;

1608 
	`EV_TS_SET
 (
ts
, 
dñay
);

1609 
	`«no¶ìp
 (&
ts
, 0);

1610 #ñi‡
deföed
 
_WIN32


1611 
	`SÀï
 (()(
dñay
 * 1e3));

1613 
timevÆ
 
tv
;

1618 
	`EV_TV_SET
 (
tv
, 
dñay
);

1619 
	`£À˘
 (0, 0, 0, 0, &
tv
);

1622 
	}
}

1626 
	#MALLOC_ROUND
 4096

	)

1630 
ölöe_size
 

1631 
	$¨øy_√xtsize
 (
ñem
, 
cur
, 
˙t
)

1633 
ncur
 = 
cur
 + 1;

1636 
ncur
 <<= 1;

1637 
˙t
 > 
ncur
);

1640 i‡(
ñem
 * 
ncur
 > 
MALLOC_ROUND
 -  (*) * 4)

1642 
ncur
 *
ñem
;

1643 
ncur
 = (ncu∏+ 
ñem
 + (
MALLOC_ROUND
 - 1) +  (*) * 4) & ~(MALLOC_ROUND - 1);

1644 
ncur
 =Çcur -  (*) * 4;

1645 
ncur
 /
ñem
;

1648  
ncur
;

1649 
	}
}

1651 * 
noölöe
 
ecb_cﬁd


1652 
	$¨øy_ªÆloc
 (
ñem
, *
ba£
, *
cur
, 
˙t
)

1654 *
cur
 = 
	`¨øy_√xtsize
 (
ñem
, *cur, 
˙t
);

1655  
	`ev_ªÆloc
 (
ba£
, 
ñem
 * *
cur
);

1656 
	}
}

1658 
	#¨øy_öô_zîo
(
ba£
,
cou¡
) \

1659 
	`mem£t
 ((*)(
ba£
), 0,  (*(ba£)Ë* (
cou¡
))

	)

1661 
	#¨øy_√edsize
(
ty≥
,
ba£
,
cur
,
˙t
,
öô
) \

1662 i‡(
	`ex≥˘_Ál£
 ((
˙t
Ë> (
cur
))) \

1664 
ecb_unu£d
 
ocur_
 = (
cur
); \

1665 (
ba£
Ë(
ty≥
 *)
¨øy_ªÆloc
 \

1666 ( (
ty≥
), (
ba£
), &(
cur
), (
˙t
)); \

1667 
	`öô
 ((
ba£
Ë+ (
ocur_
), (
cur
) - ocur_); \

1668 }

	)

1671 
	#¨øy_¶im
(
ty≥
,
°em
) \

1672 i‡(
°em
 ## 
max
 < 
	`¨øy_roundsize
 (°em ## 
˙t
 >> 2)) \

1674 
°em
 ## 
max
 = 
	`¨øy_roundsize
 (°em ## 
˙t
 >> 1); \

1675 
ba£
 = (
ty≥
 *)
	`ev_ªÆloc
 (ba£,  (ty≥Ë* (
°em
 ## 
max
));\

1676 
	`Ârötf
 (
°dîr
, "¶immed dow¿" #°em "Åÿ%d\n", 
°em
 ## 
max
); \

1677 }

	)

1680 
	#¨øy_‰ì
(
°em
, 
idx
) \

1681 
	`ev_‰ì
 (
°em
 ## 
s
 
idx
); sãm ## 
˙t
 idx = sãm ## 
max
 idx = 0; sãm ## s idx = 0

	)

1686 
noölöe


1687 
	$≥ndögcb
 (
EV_P_
 
ev_¥ï¨e
 *
w
, 
ªvíts
)

1689 
	}
}

1691 
noölöe


1692 
	$ev_„ed_evít
 (
EV_P_
 *
w
, 
ªvíts
Ë
EV_THROW


1694 
W
 
w_
 = (W)
w
;

1695 
¥i
 = 
	`ABSPRI
 (
w_
);

1697 i‡(
	`ex≥˘_Ál£
 (
w_
->
≥ndög
))

1698 
≥ndögs
 [
¥i
][
w_
->
≥ndög
 - 1].
evíts
 |
ªvíts
;

1701 
w_
->
≥ndög
 = ++
≥ndög˙t
 [
¥i
];

1702 
	`¨øy_√edsize
 (
ANPENDING
, 
≥ndögs
 [
¥i
], 
≥ndögmax
 [¥i], 
w_
->
≥ndög
, 
EMPTY2
);

1703 
≥ndögs
 [
¥i
][
w_
->
≥ndög
 - 1].
w
 = w_;

1704 
≥ndögs
 [
¥i
][
w_
->
≥ndög
 - 1].
evíts
 = 
ªvíts
;

1707 
≥ndög¥i
 = 
NUMPRI
 - 1;

1708 
	}
}

1710 
ölöe_•ìd
 

1711 
	$„ed_ªvî£
 (
EV_P_
 
W
 
w
)

1713 
	`¨øy_√edsize
 (
W
, 
r„eds
, 
r„edmax
, 
r„ed˙t
 + 1, 
EMPTY2
);

1714 
r„eds
 [
r„ed˙t
++] = 
w
;

1715 
	}
}

1717 
ölöe_size
 

1718 
	$„ed_ªvî£_d⁄e
 (
EV_P_
 
ªvíts
)

1721 
	`ev_„ed_evít
 (
EV_A_
 
r„eds
 [--
r„ed˙t
], 
ªvíts
);

1722 
r„ed˙t
);

1723 
	}
}

1725 
ölöe_•ìd
 

1726 
	$queue_evíts
 (
EV_P_
 
W
 *
evíts
, 
evít˙t
, 
ty≥
)

1728 
i
;

1730 
i
 = 0; i < 
evít˙t
; ++i)

1731 
	`ev_„ed_evít
 (
EV_A_
 
evíts
 [
i
], 
ty≥
);

1732 
	}
}

1736 
ölöe_•ìd
 

1737 
	$fd_evít_nocheck
 (
EV_P_
 
fd
, 
ªvíts
)

1739 
ANFD
 *
™fd
 = 
™fds
 + 
fd
;

1740 
ev_io
 *
w
;

1742 
w
 = (
ev_io
 *)
™fd
->
hód
; w; w = (ev_iÿ*)((
WL
)w)->
√xt
)

1744 
ev
 = 
w
->
evíts
 & 
ªvíts
;

1746 i‡(
ev
)

1747 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
w
, 
ev
);

1749 
	}
}

1753 
ölöe_•ìd
 

1754 
	$fd_evít
 (
EV_P_
 
fd
, 
ªvíts
)

1756 
ANFD
 *
™fd
 = 
™fds
 + 
fd
;

1758 i‡(
	`ex≥˘_åue
 (!
™fd
->
ªify
))

1759 
	`fd_evít_nocheck
 (
EV_A_
 
fd
, 
ªvíts
);

1760 
	}
}

1763 
	$ev_„ed_fd_evít
 (
EV_P_
 
fd
, 
ªvíts
Ë
EV_THROW


1765 i‡(
fd
 >0 && fd < 
™fdmax
)

1766 
	`fd_evít_nocheck
 (
EV_A_
 
fd
, 
ªvíts
);

1767 
	}
}

1771 
ölöe_size
 

1772 
	$fd_ªify
 (
EV_P
)

1774 
i
;

1776 #i‡
EV_SELECT_IS_WINSOCKET
 || 
EV_USE_IOCP


1777 
i
 = 0; i < 
fdch™ge˙t
; ++i)

1779 
fd
 = 
fdch™ges
 [
i
];

1780 
ANFD
 *
™fd
 = 
™fds
 + 
fd
;

1782 i‡(
™fd
->
ªify
 & 
EV__IOFDSET
 &&ánfd->
hód
)

1784 
SOCKET
 
h™dÀ
 = 
	`EV_FD_TO_WIN32_HANDLE
 (
fd
);

1786 i‡(
h™dÀ
 !
™fd
->handle)

1788 
¨g
;

1790 
	`as£π
 (("libev: o∆y sockë fd†suµ‹ãd i¿thi†c⁄figuøti⁄", 
	`io˘lsockë
 (
h™dÀ
, 
FIONREAD
, &
¨g
) == 0));

1793 
	`backíd_modify
 (
EV_A_
 
fd
, 
™fd
->
evíts
, 0);

1794 
™fd
->
evíts
 = 0;

1795 
™fd
->
h™dÀ
 = handle;

1801 
i
 = 0; i < 
fdch™ge˙t
; ++i)

1803 
fd
 = 
fdch™ges
 [
i
];

1804 
ANFD
 *
™fd
 = 
™fds
 + 
fd
;

1805 
ev_io
 *
w
;

1807 
o_evíts
 = 
™fd
->
evíts
;

1808 
o_ªify
 = 
™fd
->
ªify
;

1810 
™fd
->
ªify
 = 0;

1814 
™fd
->
evíts
 = 0;

1816 
w
 = (
ev_io
 *)
™fd
->
hód
; w; w = (ev_iÿ*)((
WL
)w)->
√xt
)

1817 
™fd
->
evíts
 |()
w
->events;

1819 i‡(
o_evíts
 !
™fd
->
evíts
)

1820 
o_ªify
 = 
EV__IOFDSET
;

1823 i‡(
o_ªify
 & 
EV__IOFDSET
)

1824 
	`backíd_modify
 (
EV_A_
 
fd
, 
o_evíts
, 
™fd
->
evíts
);

1827 
fdch™ge˙t
 = 0;

1828 
	}
}

1831 
ölöe_size
 

1832 
	$fd_ch™ge
 (
EV_P_
 
fd
, 
Êags
)

1834 
ªify
 = 
™fds
 [
fd
].reify;

1835 
™fds
 [
fd
].
ªify
 |
Êags
;

1837 i‡(
	`ex≥˘_åue
 (!
ªify
))

1839 ++
fdch™ge˙t
;

1840 
	`¨øy_√edsize
 (, 
fdch™ges
, 
fdch™gemax
, 
fdch™ge˙t
, 
EMPTY2
);

1841 
fdch™ges
 [
fdch™ge˙t
 - 1] = 
fd
;

1843 
	}
}

1846 
ölöe_•ìd
 
ecb_cﬁd


1847 
	$fd_kûl
 (
EV_P_
 
fd
)

1849 
ev_io
 *
w
;

1851 (
w
 = (
ev_io
 *)
™fds
 [
fd
].
hód
))

1853 
	`ev_io_°›
 (
EV_A_
 
w
);

1854 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
w
, 
EV_ERROR
 | 
EV_READ
 | 
EV_WRITE
);

1856 
	}
}

1859 
ölöe_size
 
ecb_cﬁd


1860 
	$fd_vÆid
 (
fd
)

1862 #ifde‡
_WIN32


1863  
	`EV_FD_TO_WIN32_HANDLE
 (
fd
) != -1;

1865  
	`f˙é
 (
fd
, 
F_GETFD
) != -1;

1867 
	}
}

1870 
noölöe
 
ecb_cﬁd


1871 
	$fd_ebadf
 (
EV_P
)

1873 
fd
;

1875 
fd
 = 0; fd < 
™fdmax
; ++fd)

1876 i‡(
™fds
 [
fd
].
evíts
)

1877 i‡(!
	`fd_vÆid
 (
fd
Ë&& 
î∫o
 =
EBADF
)

1878 
	`fd_kûl
 (
EV_A_
 
fd
);

1879 
	}
}

1882 
noölöe
 
ecb_cﬁd


1883 
	$fd_íomem
 (
EV_P
)

1885 
fd
;

1887 
fd
 = 
™fdmax
; fd--; )

1888 i‡(
™fds
 [
fd
].
evíts
)

1890 
	`fd_kûl
 (
EV_A_
 
fd
);

1893 
	}
}

1896 
noölöe


1897 
	$fd_ª¨m_Æl
 (
EV_P
)

1899 
fd
;

1901 
fd
 = 0; fd < 
™fdmax
; ++fd)

1902 i‡(
™fds
 [
fd
].
evíts
)

1904 
™fds
 [
fd
].
evíts
 = 0;

1905 
™fds
 [
fd
].
emask
 = 0;

1906 
	`fd_ch™ge
 (
EV_A_
 
fd
, 
EV__IOFDSET
 | 
EV_ANFD_REIFY
);

1908 
	}
}

1912 
ölöe_•ìd
 

1913 
	$fd_öã∫
 (
fd
)

1915 #ifde‡
_WIN32


1916 
¨g
 = 1;

1917 
	`io˘lsockë
 (
	`EV_FD_TO_WIN32_HANDLE
 (
fd
), 
FIONBIO
, &
¨g
);

1919 
	`f˙é
 (
fd
, 
F_SETFD
, 
FD_CLOEXEC
);

1920 
	`f˙é
 (
fd
, 
F_SETFL
, 
O_NONBLOCK
);

1922 
	}
}

1938 #i‡
EV_USE_4HEAP


1940 
	#DHEAP
 4

	)

1941 
	#HEAP0
 (
DHEAP
 - 1Ë

	)

1942 
	#HPARENT
(
k
Ë((((kË- 
HEAP0
 - 1Ë/ 
DHEAP
Ë+ HEAP0)

	)

1943 
	#UPHEAP_DONE
(
p
,
k
Ë(’Ë=(k))

	)

1946 
ölöe_•ìd
 

1947 
	$downhóp
 (
ANHE
 *
hóp
, 
N
, 
k
)

1949 
ANHE
 
he
 = 
hóp
 [
k
];

1950 
ANHE
 *
E
 = 
hóp
 + 
N
 + 
HEAP0
;

1954 
ev_t°amp
 
mö©
;

1955 
ANHE
 *
möpos
;

1956 
ANHE
 *
pos
 = 
hóp
 + 
DHEAP
 * (
k
 - 
HEAP0
) + HEAP0 + 1;

1959 i‡(
	`ex≥˘_åue
 (
pos
 + 
DHEAP
 - 1 < 
E
))

1961  (
möpos
 = 
pos
 + 0), (
mö©
 = 
	`ANHE_©
 (*minpos));

1962 i‡–
	`ANHE_©
 (
pos
 [1]Ë< 
mö©
Ë(
möpos
 =Öos + 1), (minat = ANHE_at (*minpos));

1963 i‡–
	`ANHE_©
 (
pos
 [2]Ë< 
mö©
Ë(
möpos
 =Öos + 2), (minat = ANHE_at (*minpos));

1964 i‡–
	`ANHE_©
 (
pos
 [3]Ë< 
mö©
Ë(
möpos
 =Öos + 3), (minat = ANHE_at (*minpos));

1966 i‡(
pos
 < 
E
)

1968  (
möpos
 = 
pos
 + 0), (
mö©
 = 
	`ANHE_©
 (*minpos));

1969 i‡(
pos
 + 1 < 
E
 && 
	`ANHE_©
 (po†[1]Ë< 
mö©
Ë(
möpos
 =Öos + 1), (minat = ANHE_at (*minpos));

1970 i‡(
pos
 + 2 < 
E
 && 
	`ANHE_©
 (po†[2]Ë< 
mö©
Ë(
möpos
 =Öos + 2), (minat = ANHE_at (*minpos));

1971 i‡(
pos
 + 3 < 
E
 && 
	`ANHE_©
 (po†[3]Ë< 
mö©
Ë(
möpos
 =Öos + 3), (minat = ANHE_at (*minpos));

1976 i‡(
	`ANHE_©
 (
he
Ë<
mö©
)

1979 
hóp
 [
k
] = *
möpos
;

1980 
	`ev_a˘ive
 (
	`ANHE_w
 (*
möpos
)Ë
k
;

1982 
k
 = 
möpos
 - 
hóp
;

1985 
hóp
 [
k
] = 
he
;

1986 
	`ev_a˘ive
 (
	`ANHE_w
 (
he
)Ë
k
;

1987 
	}
}

1991 
	#HEAP0
 1

	)

1992 
	#HPARENT
(
k
Ë((kË>> 1)

	)

1993 
	#UPHEAP_DONE
(
p
,
k
Ë(!’))

	)

1996 
ölöe_•ìd
 

1997 
	$downhóp
 (
ANHE
 *
hóp
, 
N
, 
k
)

1999 
ANHE
 
he
 = 
hóp
 [
k
];

2003 
c
 = 
k
 << 1;

2005 i‡(
c
 >
N
 + 
HEAP0
)

2008 
c
 +¯+ 1 < 
N
 + 
HEAP0
 && 
	`ANHE_©
 (
hóp
 [c]) > ANHE_at (heap [c + 1])

2011 i‡(
	`ANHE_©
 (
he
Ë<ANHE_© (
hóp
 [
c
]))

2014 
hóp
 [
k
] = hó∞[
c
];

2015 
	`ev_a˘ive
 (
	`ANHE_w
 (
hóp
 [
k
])) = k;

2017 
k
 = 
c
;

2020 
hóp
 [
k
] = 
he
;

2021 
	`ev_a˘ive
 (
	`ANHE_w
 (
he
)Ë
k
;

2022 
	}
}

2026 
ölöe_•ìd
 

2027 
	$uphóp
 (
ANHE
 *
hóp
, 
k
)

2029 
ANHE
 
he
 = 
hóp
 [
k
];

2033 
p
 = 
	`HPARENT
 (
k
);

2035 i‡(
	`UPHEAP_DONE
 (
p
, 
k
Ë|| 
	`ANHE_©
 (
hóp
 [p]Ë<ANHE_© (
he
))

2038 
hóp
 [
k
] = hó∞[
p
];

2039 
	`ev_a˘ive
 (
	`ANHE_w
 (
hóp
 [
k
])) = k;

2040 
k
 = 
p
;

2043 
hóp
 [
k
] = 
he
;

2044 
	`ev_a˘ive
 (
	`ANHE_w
 (
he
)Ë
k
;

2045 
	}
}

2048 
ölöe_size
 

2049 
	$adju°hóp
 (
ANHE
 *
hóp
, 
N
, 
k
)

2051 i‡(
k
 > 
HEAP0
 && 
	`ANHE_©
 (
hóp
 [k]Ë<ANHE_© (hó∞[
	`HPARENT
 (k)]))

2052 
	`uphóp
 (
hóp
, 
k
);

2054 
	`downhóp
 (
hóp
, 
N
, 
k
);

2055 
	}
}

2058 
ölöe_size
 

2059 
	$ªhóp
 (
ANHE
 *
hóp
, 
N
)

2061 
i
;

2065 
i
 = 0; i < 
N
; ++i)

2066 
	`uphóp
 (
hóp
, 
i
 + 
HEAP0
);

2067 
	}
}

2074 
EV_ATOMIC_T
 
	m≥ndög
;

2075 #i‡
EV_MULTIPLICITY


2076 
	mEV_P
;

2078 
WL
 
	mhód
;

2079 } 
	tANSIG
;

2081 
ANSIG
 
	gsig«ls
 [
EV_NSIG
 - 1];

2085 #i‡
EV_SIGNAL_ENABLE
 || 
EV_ASYNC_ENABLE


2087 
noölöe
 
ecb_cﬁd


2088 
	$evpùe_öô
 (
EV_P
)

2090 i‡(!
	`ev_is_a˘ive
 (&
pùe_w
))

2092 
fds
 [2];

2094 #i‡
EV_USE_EVENTFD


2095 
fds
 [0] = -1;

2096 
fds
 [1] = 
	`evítfd
 (0, 
EFD_NONBLOCK
 | 
EFD_CLOEXEC
);

2097 i‡(
fds
 [1] < 0 && 
î∫o
 =
EINVAL
)

2098 
fds
 [1] = 
	`evítfd
 (0, 0);

2100 i‡(
fds
 [1] < 0)

2103 
	`pùe
 (
fds
))

2104 
	`ev_sy£º
 ("(libev)Érror creating signal/asyncÖipe");

2106 
	`fd_öã∫
 (
fds
 [0]);

2109 
	`fd_öã∫
 (
fds
 [1]);

2111 
evpùe
 [0] = 
fds
 [0];

2113 i‡(
evpùe
 [1] < 0)

2114 
evpùe
 [1] = 
fds
 [1];

2122 
	`dup2
 (
fds
 [1], 
evpùe
 [1]);

2123 
	`˛o£
 (
fds
 [1]);

2126 
	`ev_io_£t
 (&
pùe_w
, 
evpùe
 [0] < 0 ?Évpùê[1] :Évpùê[0], 
EV_READ
);

2127 
	`ev_io_°¨t
 (
EV_A_
 &
pùe_w
);

2128 
	`ev_uƒef
 (
EV_A
);

2130 
	}
}

2132 
ölöe_•ìd
 

2133 
	$evpùe_wrôe
 (
EV_P_
 
EV_ATOMIC_T
 *
Êag
)

2135 
ECB_MEMORY_FENCE
;

2137 i‡(
	`ex≥˘_åue
 (*
Êag
))

2140 *
Êag
 = 1;

2141 
ECB_MEMORY_FENCE_RELEASE
;

2143 
pùe_wrôe_skù≥d
 = 1;

2145 
ECB_MEMORY_FENCE
;

2147 i‡(
pùe_wrôe_w™ãd
)

2149 
ﬁd_î∫o
;

2151 
pùe_wrôe_skù≥d
 = 0;

2152 
ECB_MEMORY_FENCE_RELEASE
;

2154 
ﬁd_î∫o
 = 
î∫o
;

2156 #i‡
EV_USE_EVENTFD


2157 i‡(
evpùe
 [0] < 0)

2159 
uöt64_t
 
cou¡î
 = 1;

2160 
	`wrôe
 (
evpùe
 [1], &
cou¡î
,  (
uöt64_t
));

2165 #ifde‡
_WIN32


2166 
WSABUF
 
buf
;

2167 
DWORD
 
£¡
;

2168 
buf
.buf = &buf;

2169 
buf
.
Àn
 = 1;

2170 
	`WSASíd
 (
	`EV_FD_TO_WIN32_HANDLE
 (
evpùe
 [1]), &
buf
, 1, &
£¡
, 0, 0, 0);

2172 
	`wrôe
 (
evpùe
 [1], &(evpipe [1]), 1);

2176 
î∫o
 = 
ﬁd_î∫o
;

2178 
	}
}

2183 
	$pùecb
 (
EV_P_
 
ev_io
 *
iow
, 
ªvíts
)

2185 
i
;

2187 i‡(
ªvíts
 & 
EV_READ
)

2189 #i‡
EV_USE_EVENTFD


2190 i‡(
evpùe
 [0] < 0)

2192 
uöt64_t
 
cou¡î
;

2193 
	`ªad
 (
evpùe
 [1], &
cou¡î
,  (
uöt64_t
));

2198 
dummy
[4];

2199 #ifde‡
_WIN32


2200 
WSABUF
 
buf
;

2201 
DWORD
 
ªcvd
;

2202 
DWORD
 
Êags
 = 0;

2203 
buf
.bu‡
dummy
;

2204 
buf
.
Àn
 =  (
dummy
);

2205 
	`WSARecv
 (
	`EV_FD_TO_WIN32_HANDLE
 (
evpùe
 [0]), &
buf
, 1, &
ªcvd
, &
Êags
, 0, 0);

2207 
	`ªad
 (
evpùe
 [0], &
dummy
,  (dummy));

2212 
pùe_wrôe_skù≥d
 = 0;

2214 
ECB_MEMORY_FENCE
;

2216 #i‡
EV_SIGNAL_ENABLE


2217 i‡(
sig_≥ndög
)

2219 
sig_≥ndög
 = 0;

2221 
ECB_MEMORY_FENCE
;

2223 
i
 = 
EV_NSIG
 - 1; i--; )

2224 i‡(
	`ex≥˘_Ál£
 (
sig«ls
 [
i
].
≥ndög
))

2225 
	`ev_„ed_sig«l_evít
 (
EV_A_
 
i
 + 1);

2229 #i‡
EV_ASYNC_ENABLE


2230 i‡(
async_≥ndög
)

2232 
async_≥ndög
 = 0;

2234 
ECB_MEMORY_FENCE
;

2236 
i
 = 
async˙t
; i--; )

2237 i‡(
asyncs
 [
i
]->
£¡
)

2239 
asyncs
 [
i
]->
£¡
 = 0;

2240 
ECB_MEMORY_FENCE_RELEASE
;

2241 
	`ev_„ed_evít
 (
EV_A_
 
asyncs
 [
i
], 
EV_ASYNC
);

2245 
	}
}

2250 
	$ev_„ed_sig«l
 (
signum
Ë
EV_THROW


2252 #i‡
EV_MULTIPLICITY


2253 
EV_P
;

2254 
ECB_MEMORY_FENCE_ACQUIRE
;

2255 
EV_A
 = 
sig«ls
 [
signum
 - 1].
lo›
;

2257 i‡(!
EV_A
)

2261 
sig«ls
 [
signum
 - 1].
≥ndög
 = 1;

2262 
	`evpùe_wrôe
 (
EV_A_
 &
sig_≥ndög
);

2263 
	}
}

2266 
	$ev_sigh™dÀr
 (
signum
)

2268 #ifde‡
_WIN32


2269 
	`sig«l
 (
signum
, 
ev_sigh™dÀr
);

2272 
	`ev_„ed_sig«l
 (
signum
);

2273 
	}
}

2275 
noölöe


2276 
	$ev_„ed_sig«l_evít
 (
EV_P_
 
signum
Ë
EV_THROW


2278 
WL
 
w
;

2280 i‡(
	`ex≥˘_Ál£
 (
signum
 <0 || signum >
EV_NSIG
))

2283 --
signum
;

2285 #i‡
EV_MULTIPLICITY


2289 i‡(
	`ex≥˘_Ál£
 (
sig«ls
 [
signum
].
lo›
 !
EV_A
))

2293 
sig«ls
 [
signum
].
≥ndög
 = 0;

2294 
ECB_MEMORY_FENCE_RELEASE
;

2296 
w
 = 
sig«ls
 [
signum
].
hód
; w; w = w->
√xt
)

2297 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
w
, 
EV_SIGNAL
);

2298 
	}
}

2300 #i‡
EV_USE_SIGNALFD


2302 
	$sigfdcb
 (
EV_P_
 
ev_io
 *
iow
, 
ªvíts
)

2304 
sig«lfd_sigöfo
 
si
[2], *
sù
;

2308 
ssize_t
 
ªs
 = 
	`ªad
 (
sigfd
, 
si
,  (si));

2311 
sù
 = 
si
; (*)sù < (*)sò+ 
ªs
; ++sip)

2312 
	`ev_„ed_sig«l_evít
 (
EV_A_
 
sù
->
ssi_signo
);

2314 i‡(
ªs
 < (
ssize_t
) (
si
))

2317 
	}
}

2324 #i‡
EV_CHILD_ENABLE


2325 
WL
 
	gchûds
 [
EV_PID_HASHSIZE
];

2327 
ev_sig«l
 
	gchûdev
;

2329 #i‚de‡
WIFCONTINUED


2330 
	#WIFCONTINUED
(
°©us
Ë0

	)

2334 
ölöe_•ìd
 

2335 
	$chûd_ª≠
 (
EV_P_
 
chaö
, 
pid
, 
°©us
)

2337 
ev_chûd
 *
w
;

2338 
åa˚d
 = 
	`WIFSTOPPED
 (
°©us
Ë|| 
	`WIFCONTINUED
 (status);

2340 
w
 = (
ev_chûd
 *)
chûds
 [
chaö
 & ((
EV_PID_HASHSIZE
Ë- 1)]; w; w = (ev_chûd *)((
WL
)w)->
√xt
)

2342 i‡((
w
->
pid
 ==Öid || !w->pid)

2343 && (!
åa˚d
 || (
w
->
Êags
 & 1)))

2345 
	`ev_£t_¥i‹ôy
 (
w
, 
EV_MAXPRI
);

2346 
w
->
Ωid
 = 
pid
;

2347 
w
->
r°©us
 = 
°©us
;

2348 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
w
, 
EV_CHILD
);

2351 
	}
}

2353 #i‚de‡
WCONTINUED


2354 
	#WCONTINUED
 0

	)

2359 
	$chûdcb
 (
EV_P_
 
ev_sig«l
 *
sw
, 
ªvíts
)

2361 
pid
, 
°©us
;

2364 i‡(0 >(
pid
 = 
	`waôpid
 (-1, &
°©us
, 
WNOHANG
 | 
WUNTRACED
 | 
WCONTINUED
)))

2365 i‡(!
WCONTINUED


2366 || 
î∫o
 !
EINVAL


2367 || 0 >(
pid
 = 
	`waôpid
 (-1, &
°©us
, 
WNOHANG
 | 
WUNTRACED
)))

2372 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
sw
, 
EV_SIGNAL
);

2374 
	`chûd_ª≠
 (
EV_A_
 
pid
,Öid, 
°©us
);

2375 i‡((
EV_PID_HASHSIZE
) > 1)

2376 
	`chûd_ª≠
 (
EV_A_
 0, 
pid
, 
°©us
);

2377 
	}
}

2383 #i‡
EV_USE_IOCP


2384 
	~"ev_io˝.c
"

2386 #i‡
EV_USE_PORT


2387 
	~"ev_p‹t.c
"

2389 #i‡
EV_USE_KQUEUE


2390 
	~"ev_kqueue.c
"

2392 #i‡
EV_USE_EPOLL


2393 
	~"ev_ïﬁl.c
"

2395 #i‡
EV_USE_POLL


2396 
	~"ev_pﬁl.c
"

2398 #i‡
EV_USE_SELECT


2399 
	~"ev_£À˘.c
"

2402 
ecb_cﬁd


2403 
	$ev_vîsi⁄_maj‹
 (Ë
EV_THROW


2405  
EV_VERSION_MAJOR
;

2406 
	}
}

2408 
ecb_cﬁd


2409 
	$ev_vîsi⁄_mö‹
 (Ë
EV_THROW


2411  
EV_VERSION_MINOR
;

2412 
	}
}

2415 
ölöe_size
 
ecb_cﬁd


2416 
	$íabÀ_£cuª
 ()

2418 #ifde‡
_WIN32


2421  
	`gëuid
 (Ë!
	`gëeuid
 ()

2422 || 
	`gëgid
 (Ë!
	`gëegid
 ();

2424 
	}
}

2426 
ecb_cﬁd


2427 
	$ev_suµ‹ãd_backíds
 (Ë
EV_THROW


2429 
Êags
 = 0;

2431 i‡(
EV_USE_PORT
 ) 
Êags
 |
EVBACKEND_PORT
;

2432 i‡(
EV_USE_KQUEUE
Ë
Êags
 |
EVBACKEND_KQUEUE
;

2433 i‡(
EV_USE_EPOLL
 ) 
Êags
 |
EVBACKEND_EPOLL
;

2434 i‡(
EV_USE_POLL
 ) 
Êags
 |
EVBACKEND_POLL
;

2435 i‡(
EV_USE_SELECT
Ë
Êags
 |
EVBACKEND_SELECT
;

2437  
Êags
;

2438 
	}
}

2440 
ecb_cﬁd


2441 
	$ev_ªcommíded_backíds
 (Ë
EV_THROW


2443 
Êags
 = 
	`ev_suµ‹ãd_backíds
 ();

2445 #i‚de‡
__NëBSD__


2448 
Êags
 &~
EVBACKEND_KQUEUE
;

2450 #ifde‡
__APPLE__


2452 
Êags
 &~
EVBACKEND_KQUEUE
;

2453 
Êags
 &~
EVBACKEND_POLL
;

2455 #ifde‡
__FªeBSD__


2456 
Êags
 &~
EVBACKEND_POLL
;

2459  
Êags
;

2460 
	}
}

2462 
ecb_cﬁd


2463 
	$ev_embeddabÀ_backíds
 (Ë
EV_THROW


2465 
Êags
 = 
EVBACKEND_EPOLL
 | 
EVBACKEND_KQUEUE
 | 
EVBACKEND_PORT
;

2468 i‡(
	`ev_löux_vîsi⁄
 () < 0x020620)

2469 
Êags
 &~
EVBACKEND_EPOLL
;

2471  
Êags
;

2472 
	}
}

2475 
	$ev_backíd
 (
EV_P
Ë
EV_THROW


2477  
backíd
;

2478 
	}
}

2480 #i‡
EV_FEATURE_API


2482 
	$ev_ôî©i⁄
 (
EV_P
Ë
EV_THROW


2484  
lo›_cou¡
;

2485 
	}
}

2488 
	$ev_dïth
 (
EV_P
Ë
EV_THROW


2490  
lo›_dïth
;

2491 
	}
}

2494 
	$ev_£t_io_cﬁÀ˘_öãrvÆ
 (
EV_P_
 
ev_t°amp
 
öãrvÆ
Ë
EV_THROW


2496 
io_blocktime
 = 
öãrvÆ
;

2497 
	}
}

2500 
	$ev_£t_timeout_cﬁÀ˘_öãrvÆ
 (
EV_P_
 
ev_t°amp
 
öãrvÆ
Ë
EV_THROW


2502 
timeout_blocktime
 = 
öãrvÆ
;

2503 
	}
}

2506 
	$ev_£t_u£rd©a
 (
EV_P_
 *
d©a
Ë
EV_THROW


2508 
u£rd©a
 = 
d©a
;

2509 
	}
}

2512 
	$ev_u£rd©a
 (
EV_P
Ë
EV_THROW


2514  
u£rd©a
;

2515 
	}
}

2518 
ev_£t_övoke_≥ndög_cb
 (
EV_P_
 (*
övoke_≥ndög_cb
)(
EV_P
)Ë
EV_THROW


2520 
övoke_cb
 = 
övoke_≥ndög_cb
;

2521 
	}
}

2524 
ev_£t_lo›_ªÀa£_cb
 (
EV_P_
 (*
ªÀa£
)(
EV_P
Ë
EV_THROW
, (*
acquúe
)(EV_P) EV_THROW) EV_THROW

2526 
ªÀa£_cb
 = 
ªÀa£
;

2527 
acquúe_cb
 = 
acquúe
;

2528 
	}
}

2532 
noölöe
 
ecb_cﬁd


2533 
	$lo›_öô
 (
EV_P_
 
Êags
Ë
EV_THROW


2535 i‡(!
backíd
)

2537 
‹igÊags
 = 
Êags
;

2539 #i‡
EV_USE_REALTIME


2540 i‡(!
have_ªÆtime
)

2542 
time•ec
 
ts
;

2544 i‡(!
	`˛ock_gëtime
 (
CLOCK_REALTIME
, &
ts
))

2545 
have_ªÆtime
 = 1;

2549 #i‡
EV_USE_MONOTONIC


2550 i‡(!
have_m⁄Ÿ⁄ic
)

2552 
time•ec
 
ts
;

2554 i‡(!
	`˛ock_gëtime
 (
CLOCK_MONOTONIC
, &
ts
))

2555 
have_m⁄Ÿ⁄ic
 = 1;

2560 #i‚de‡
_WIN32


2561 i‡(
Êags
 & 
EVFLAG_FORKCHECK
)

2562 
cuΩid
 = 
	`gëpid
 ();

2565 i‡(!(
Êags
 & 
EVFLAG_NOENV
)

2566 && !
	`íabÀ_£cuª
 ()

2567 && 
	`gëív
 ("LIBEV_FLAGS"))

2568 
Êags
 = 
	`©oi
 (
	`gëív
 ("LIBEV_FLAGS"));

2570 
ev_π_now
 = 
	`ev_time
 ();

2571 
mn_now
 = 
	`gë_˛ock
 ();

2572 
now_Êo‹
 = 
mn_now
;

2573 
πmn_diff
 = 
ev_π_now
 - 
mn_now
;

2574 #i‡
EV_FEATURE_API


2575 
övoke_cb
 = 
ev_övoke_≥ndög
;

2578 
io_blocktime
 = 0.;

2579 
timeout_blocktime
 = 0.;

2580 
backíd
 = 0;

2581 
backíd_fd
 = -1;

2582 
sig_≥ndög
 = 0;

2583 #i‡
EV_ASYNC_ENABLE


2584 
async_≥ndög
 = 0;

2586 
pùe_wrôe_skù≥d
 = 0;

2587 
pùe_wrôe_w™ãd
 = 0;

2588 
evpùe
 [0] = -1;

2589 
evpùe
 [1] = -1;

2590 #i‡
EV_USE_INOTIFY


2591 
fs_fd
 = 
Êags
 & 
EVFLAG_NOINOTIFY
 ? -1 : -2;

2593 #i‡
EV_USE_SIGNALFD


2594 
sigfd
 = 
Êags
 & 
EVFLAG_SIGNALFD
 ? -2 : -1;

2597 i‡(!(
Êags
 & 
EVBACKEND_MASK
))

2598 
Êags
 |
	`ev_ªcommíded_backíds
 ();

2600 #i‡
EV_USE_IOCP


2601 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_IOCP
 )Ëbackíd = 
	`io˝_öô
 (
EV_A_
 flags);

2603 #i‡
EV_USE_PORT


2604 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_PORT
 )Ëbackíd = 
	`p‹t_öô
 (
EV_A_
 flags);

2606 #i‡
EV_USE_KQUEUE


2607 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_KQUEUE
)Ëbackíd = 
	`kqueue_öô
 (
EV_A_
 flags);

2609 #i‡
EV_USE_EPOLL


2610 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_EPOLL
 )Ëbackíd = 
	`ïﬁl_öô
 (
EV_A_
 flags);

2612 #i‡
EV_USE_POLL


2613 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_POLL
 )Ëbackíd = 
	`pﬁl_öô
 (
EV_A_
 flags);

2615 #i‡
EV_USE_SELECT


2616 i‡(!
backíd
 && (
Êags
 & 
EVBACKEND_SELECT
)Ëbackíd = 
	`£À˘_öô
 (
EV_A_
 flags);

2619 
	`ev_¥ï¨e_öô
 (&
≥ndög_w
, 
≥ndögcb
);

2621 #i‡
EV_SIGNAL_ENABLE
 || 
EV_ASYNC_ENABLE


2622 
	`ev_öô
 (&
pùe_w
, 
pùecb
);

2623 
	`ev_£t_¥i‹ôy
 (&
pùe_w
, 
EV_MAXPRI
);

2626 
	}
}

2629 
ecb_cﬁd


2630 
	$ev_lo›_de°roy
 (
EV_P
)

2632 
i
;

2634 #i‡
EV_MULTIPLICITY


2636 i‡(!
EV_A
)

2640 #i‡
EV_CLEANUP_ENABLE


2642 i‡(
	`ex≥˘_Ál£
 (
˛ónup˙t
))

2644 
	`queue_evíts
 (
	`EV_A_
 (
W
 *)
˛ónups
, 
˛ónup˙t
, 
EV_CLEANUP
);

2645 
EV_INVOKE_PENDING
;

2649 #i‡
EV_CHILD_ENABLE


2650 i‡(
	`ev_is_deÁu…_lo›
 (
EV_A
Ë&& 
	`ev_is_a˘ive
 (&
chûdev
))

2652 
	`ev_ªf
 (
EV_A
);

2653 
	`ev_sig«l_°›
 (
EV_A_
 &
chûdev
);

2657 i‡(
	`ev_is_a˘ive
 (&
pùe_w
))

2662 i‡(
evpùe
 [0] >0Ë
	`EV_WIN32_CLOSE_FD
 (evpipe [0]);

2663 i‡(
evpùe
 [1] >0Ë
	`EV_WIN32_CLOSE_FD
 (evpipe [1]);

2666 #i‡
EV_USE_SIGNALFD


2667 i‡(
	`ev_is_a˘ive
 (&
sigfd_w
))

2668 
	`˛o£
 (
sigfd
);

2671 #i‡
EV_USE_INOTIFY


2672 i‡(
fs_fd
 >= 0)

2673 
	`˛o£
 (
fs_fd
);

2676 i‡(
backíd_fd
 >= 0)

2677 
	`˛o£
 (
backíd_fd
);

2679 #i‡
EV_USE_IOCP


2680 i‡(
backíd
 =
EVBACKEND_IOCP
 ) 
	`io˝_de°roy
 (
EV_A
);

2682 #i‡
EV_USE_PORT


2683 i‡(
backíd
 =
EVBACKEND_PORT
 ) 
	`p‹t_de°roy
 (
EV_A
);

2685 #i‡
EV_USE_KQUEUE


2686 i‡(
backíd
 =
EVBACKEND_KQUEUE
Ë
	`kqueue_de°roy
 (
EV_A
);

2688 #i‡
EV_USE_EPOLL


2689 i‡(
backíd
 =
EVBACKEND_EPOLL
 ) 
	`ïﬁl_de°roy
 (
EV_A
);

2691 #i‡
EV_USE_POLL


2692 i‡(
backíd
 =
EVBACKEND_POLL
 ) 
	`pﬁl_de°roy
 (
EV_A
);

2694 #i‡
EV_USE_SELECT


2695 i‡(
backíd
 =
EVBACKEND_SELECT
Ë
	`£À˘_de°roy
 (
EV_A
);

2698 
i
 = 
NUMPRI
; i--; )

2700 
	`¨øy_‰ì
 (
≥ndög
, [
i
]);

2701 #i‡
EV_IDLE_ENABLE


2702 
	`¨øy_‰ì
 (
idÀ
, [
i
]);

2706 
	`ev_‰ì
 (
™fds
);ánfd†0; 
™fdmax
 = 0;

2709 
	`¨øy_‰ì
 (
r„ed
, 
EMPTY
);

2710 
	`¨øy_‰ì
 (
fdch™ge
, 
EMPTY
);

2711 
	`¨øy_‰ì
 (
timî
, 
EMPTY
);

2712 #i‡
EV_PERIODIC_ENABLE


2713 
	`¨øy_‰ì
 (
≥riodic
, 
EMPTY
);

2715 #i‡
EV_FORK_ENABLE


2716 
	`¨øy_‰ì
 (
f‹k
, 
EMPTY
);

2718 #i‡
EV_CLEANUP_ENABLE


2719 
	`¨øy_‰ì
 (
˛ónup
, 
EMPTY
);

2721 
	`¨øy_‰ì
 (
¥ï¨e
, 
EMPTY
);

2722 
	`¨øy_‰ì
 (
check
, 
EMPTY
);

2723 #i‡
EV_ASYNC_ENABLE


2724 
	`¨øy_‰ì
 (
async
, 
EMPTY
);

2727 
backíd
 = 0;

2729 #i‡
EV_MULTIPLICITY


2730 i‡(
	`ev_is_deÁu…_lo›
 (
EV_A
))

2732 
ev_deÁu…_lo›_±r
 = 0;

2733 #i‡
EV_MULTIPLICITY


2735 
	`ev_‰ì
 (
EV_A
);

2737 
	}
}

2739 #i‡
EV_USE_INOTIFY


2740 
ölöe_size
 
öfy_f‹k
 (
EV_P
);

2743 
ölöe_size
 

2744 
	$lo›_f‹k
 (
EV_P
)

2746 #i‡
EV_USE_PORT


2747 i‡(
backíd
 =
EVBACKEND_PORT
 ) 
	`p‹t_f‹k
 (
EV_A
);

2749 #i‡
EV_USE_KQUEUE


2750 i‡(
backíd
 =
EVBACKEND_KQUEUE
Ë
	`kqueue_f‹k
 (
EV_A
);

2752 #i‡
EV_USE_EPOLL


2753 i‡(
backíd
 =
EVBACKEND_EPOLL
 ) 
	`ïﬁl_f‹k
 (
EV_A
);

2755 #i‡
EV_USE_INOTIFY


2756 
	`öfy_f‹k
 (
EV_A
);

2759 #i‡
EV_SIGNAL_ENABLE
 || 
EV_ASYNC_ENABLE


2760 i‡(
	`ev_is_a˘ive
 (&
pùe_w
))

2764 
	`ev_ªf
 (
EV_A
);

2765 
	`ev_io_°›
 (
EV_A_
 &
pùe_w
);

2767 i‡(
evpùe
 [0] >= 0)

2768 
	`EV_WIN32_CLOSE_FD
 (
evpùe
 [0]);

2770 
	`evpùe_öô
 (
EV_A
);

2772 
	`ev_„ed_evít
 (
EV_A_
 &
pùe_w
, 
EV_CUSTOM
);

2776 
po°f‹k
 = 0;

2777 
	}
}

2779 #i‡
EV_MULTIPLICITY


2781 
ev_lo›
 * 
ecb_cﬁd


2782 
	$ev_lo›_√w
 (
Êags
Ë
EV_THROW


2784 
EV_P
 = (
ev_lo›
 *)
	`ev_mÆloc
 ( (ev_loop));

2786 
	`mem£t
 (
EV_A
, 0,  (
ev_lo›
));

2787 
	`lo›_öô
 (
EV_A_
 
Êags
);

2789 i‡(
	`ev_backíd
 (
EV_A
))

2790  
EV_A
;

2792 
	`ev_‰ì
 (
EV_A
);

2794 
	}
}

2798 #i‡
EV_VERIFY


2799 
noölöe
 
ecb_cﬁd


2800 
	$vîify_w©chî
 (
EV_P_
 
W
 
w
)

2802 
	`as£π
 (("libev: w©chî ha†övÆidÖri‹ôy", 
	`ABSPRI
 (
w
Ë>0 && ABSPRI (wË< 
NUMPRI
));

2804 i‡(
w
->
≥ndög
)

2805 
	`as£π
 (("libev:Öídög w©chîÇŸ o¿≥ndög queue", 
≥ndögs
 [
	`ABSPRI
 (
w
)][w->
≥ndög
 - 1].w == w));

2806 
	}
}

2808 
noölöe
 
ecb_cﬁd


2809 
	$vîify_hóp
 (
EV_P_
 
ANHE
 *
hóp
, 
N
)

2811 
i
;

2813 
i
 = 
HEAP0
; i < 
N
 + HEAP0; ++i)

2815 
	`as£π
 (("libev:á˘ivêödex mism©ch i¿hóp", 
	`ev_a˘ive
 (
	`ANHE_w
 (
hóp
 [
i
])) == i));

2816 
	`as£π
 (("libev: hó∞c⁄dôi⁄ viﬁ©ed", 
i
 =
HEAP0
 || 
	`ANHE_©
 (
hóp
 [
	`HPARENT
 (i)]) <= ANHE_at (heap [i])));

2817 
	`as£π
 (("libev: hó∞© cachêmism©ch", 
	`ANHE_©
 (
hóp
 [
i
]Ë=
	`ev_©
 (
	`ANHE_w
 (heap [i]))));

2819 
	`vîify_w©chî
 (
	`EV_A_
 (
W
)
	`ANHE_w
 (
hóp
 [
i
]));

2821 
	}
}

2823 
noölöe
 
ecb_cﬁd


2824 
	$¨øy_vîify
 (
EV_P_
 
W
 *
ws
, 
˙t
)

2826 
˙t
--)

2828 
	`as£π
 (("libev:á˘ivêödex mism©ch", 
	`ev_a˘ive
 (
ws
 [
˙t
]) == cnt + 1));

2829 
	`vîify_w©chî
 (
EV_A_
 
ws
 [
˙t
]);

2831 
	}
}

2834 #i‡
EV_FEATURE_API


2835 
ecb_cﬁd


2836 
	$ev_vîify
 (
EV_P
Ë
EV_THROW


2838 #i‡
EV_VERIFY


2839 
i
;

2840 
WL
 
w
, 
w2
;

2842 
	`as£π
 (
a˘ive˙t
 >= -1);

2844 
	`as£π
 (
fdch™gemax
 >
fdch™ge˙t
);

2845 
i
 = 0; i < 
fdch™ge˙t
; ++i)

2846 
	`as£π
 (("libev:Çeg©ivêfd i¿fdch™ges", 
fdch™ges
 [
i
] >= 0));

2848 
	`as£π
 (
™fdmax
 >= 0);

2849 
i
 = 0; i < 
™fdmax
; ++i)

2851 
j
 = 0;

2853 
w
 = 
w2
 = 
™fds
 [
i
].
hód
; w; w = w->
√xt
)

2855 
	`vîify_w©chî
 (
	`EV_A_
 (
W
)
w
);

2857 i‡(
j
++ & 1)

2859 
	`as£π
 (("libev: iÿw©chîÜi° c⁄èö†®lo›", 
w
 !
w2
));

2860 
w2
 = w2->
√xt
;

2863 
	`as£π
 (("libev: i«˘ivêfd w©chî o¿™fdÜi°", 
	`ev_a˘ive
 (
w
) == 1));

2864 
	`as£π
 (("libev: fd mism©ch bëwì¿w©chîándánfd", ((
ev_io
 *)
w
)->
fd
 =
i
));

2868 
	`as£π
 (
timîmax
 >
timî˙t
);

2869 
	`vîify_hóp
 (
EV_A_
 
timîs
, 
timî˙t
);

2871 #i‡
EV_PERIODIC_ENABLE


2872 
	`as£π
 (
≥riodicmax
 >
≥riodic˙t
);

2873 
	`vîify_hóp
 (
EV_A_
 
≥riodics
, 
≥riodic˙t
);

2876 
i
 = 
NUMPRI
; i--; )

2878 
	`as£π
 (
≥ndögmax
 [
i
] >
≥ndög˙t
 [i]);

2879 #i‡
EV_IDLE_ENABLE


2880 
	`as£π
 (
idÀÆl
 >= 0);

2881 
	`as£π
 (
idÀmax
 [
i
] >
idÀ˙t
 [i]);

2882 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
idÀs
 [
i
], 
idÀ˙t
 [i]);

2886 #i‡
EV_FORK_ENABLE


2887 
	`as£π
 (
f‹kmax
 >
f‹k˙t
);

2888 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
f‹ks
, 
f‹k˙t
);

2891 #i‡
EV_CLEANUP_ENABLE


2892 
	`as£π
 (
˛ónupmax
 >
˛ónup˙t
);

2893 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
˛ónups
, 
˛ónup˙t
);

2896 #i‡
EV_ASYNC_ENABLE


2897 
	`as£π
 (
asyncmax
 >
async˙t
);

2898 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
asyncs
, 
async˙t
);

2901 #i‡
EV_PREPARE_ENABLE


2902 
	`as£π
 (
¥ï¨emax
 >
¥ï¨e˙t
);

2903 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
¥ï¨es
, 
¥ï¨e˙t
);

2906 #i‡
EV_CHECK_ENABLE


2907 
	`as£π
 (
checkmax
 >
check˙t
);

2908 
	`¨øy_vîify
 (
	`EV_A_
 (
W
 *)
checks
, 
check˙t
);

2912 #i‡
EV_CHILD_ENABLE


2913 
w
 = (
ev_chûd
 *)
chûds
 [
chaö
 & ((
EV_PID_HASHSIZE
Ë- 1)]; w; w = (ev_chûd *)((
WL
)w)->
√xt
)

2914 
signum
 = 
EV_NSIG
; signum--; ) i‡(
sig«ls
 [signum].
≥ndög
)

2918 
	}
}

2921 #i‡
EV_MULTIPLICITY


2922 
ev_lo›
 * 
	gecb_cﬁd


2926 
	$ev_deÁu…_lo›
 (
Êags
Ë
EV_THROW


2928 i‡(!
ev_deÁu…_lo›_±r
)

2930 #i‡
EV_MULTIPLICITY


2931 
EV_P
 = 
ev_deÁu…_lo›_±r
 = &
deÁu…_lo›_°ru˘
;

2933 
ev_deÁu…_lo›_±r
 = 1;

2936 
	`lo›_öô
 (
EV_A_
 
Êags
);

2938 i‡(
	`ev_backíd
 (
EV_A
))

2940 #i‡
EV_CHILD_ENABLE


2941 
	`ev_sig«l_öô
 (&
chûdev
, 
chûdcb
, 
SIGCHLD
);

2942 
	`ev_£t_¥i‹ôy
 (&
chûdev
, 
EV_MAXPRI
);

2943 
	`ev_sig«l_°¨t
 (
EV_A_
 &
chûdev
);

2944 
	`ev_uƒef
 (
EV_A
);

2948 
ev_deÁu…_lo›_±r
 = 0;

2951  
ev_deÁu…_lo›_±r
;

2952 
	}
}

2955 
	$ev_lo›_f‹k
 (
EV_P
Ë
EV_THROW


2957 
po°f‹k
 = 1;

2958 
	}
}

2963 
	$ev_övoke
 (
EV_P_
 *
w
, 
ªvíts
)

2965 
	`EV_CB_INVOKE
 ((
W
)
w
, 
ªvíts
);

2966 
	}
}

2969 
	$ev_≥ndög_cou¡
 (
EV_P
Ë
EV_THROW


2971 
¥i
;

2972 
cou¡
 = 0;

2974 
¥i
 = 
NUMPRI
;Öri--; )

2975 
cou¡
 +
≥ndög˙t
 [
¥i
];

2977  
cou¡
;

2978 
	}
}

2980 
noölöe


2981 
	$ev_övoke_≥ndög
 (
EV_P
)

2983 
≥ndög¥i
 = 
NUMPRI
;

2985 
≥ndög¥i
)

2987 --
≥ndög¥i
;

2989 
≥ndög˙t
 [
≥ndög¥i
])

2991 
ANPENDING
 *
p
 = 
≥ndögs
 [
≥ndög¥i
] + --
≥ndög˙t
 [pendingpri];

2993 
p
->
w
->
≥ndög
 = 0;

2994 
	`EV_CB_INVOKE
 (
p
->
w
,Ö->
evíts
);

2995 
EV_FREQUENT_CHECK
;

2998 
	}
}

3000 #i‡
EV_IDLE_ENABLE


3003 
ölöe_size
 

3004 
	$idÀ_ªify
 (
EV_P
)

3006 i‡(
	`ex≥˘_Ál£
 (
idÀÆl
))

3008 
¥i
;

3010 
¥i
 = 
NUMPRI
;Öri--; )

3012 i‡(
≥ndög˙t
 [
¥i
])

3015 i‡(
idÀ˙t
 [
¥i
])

3017 
	`queue_evíts
 (
	`EV_A_
 (
W
 *)
idÀs
 [
¥i
], 
idÀ˙t
 [¥i], 
EV_IDLE
);

3022 
	}
}

3026 
ölöe_size
 

3027 
	$timîs_ªify
 (
EV_P
)

3029 
EV_FREQUENT_CHECK
;

3031 i‡(
timî˙t
 && 
	`ANHE_©
 (
timîs
 [
HEAP0
]Ë< 
mn_now
)

3035 
ev_timî
 *
w
 = (ev_timî *)
	`ANHE_w
 (
timîs
 [
HEAP0
]);

3040 i‡(
w
->
ª≥©
)

3042 
	`ev_©
 (
w
Ë+w->
ª≥©
;

3043 i‡(
	`ev_©
 (
w
Ë< 
mn_now
)

3044 
	`ev_©
 (
w
Ë
mn_now
;

3046 
	`as£π
 (("libev:Çeg©ivêev_timîÑïóàvÆuêfound whûê¥o˚ssögÅimîs", 
w
->
ª≥©
 > 0.));

3048 
	`ANHE_©_ˇche
 (
timîs
 [
HEAP0
]);

3049 
	`downhóp
 (
timîs
, 
timî˙t
, 
HEAP0
);

3052 
	`ev_timî_°›
 (
EV_A_
 
w
);

3054 
EV_FREQUENT_CHECK
;

3055 
	`„ed_ªvî£
 (
	`EV_A_
 (
W
)
w
);

3057 
timî˙t
 && 
	`ANHE_©
 (
timîs
 [
HEAP0
]Ë< 
mn_now
);

3059 
	`„ed_ªvî£_d⁄e
 (
EV_A_
 
EV_TIMER
);

3061 
	}
}

3063 #i‡
EV_PERIODIC_ENABLE


3065 
noölöe


3066 
	$≥riodic_ªˇlc
 (
EV_P_
 
ev_≥riodic
 *
w
)

3068 
ev_t°amp
 
öãrvÆ
 = 
w
->öãrvÆ > 
MIN_INTERVAL
 ? w->interval : MIN_INTERVAL;

3069 
ev_t°amp
 
©
 = 
w
->
off£t
 + 
öãrvÆ
 * 
	`ev_Êo‹
 ((
ev_π_now
 - w->offset) / interval);

3072 
©
 <
ev_π_now
)

3074 
ev_t°amp
 
«t
 = 
©
 + 
w
->
öãrvÆ
;

3077 i‡(
	`ex≥˘_Ál£
 (
«t
 =
©
))

3079 
©
 = 
ev_π_now
;

3083 
©
 = 
«t
;

3086 
	`ev_©
 (
w
Ë
©
;

3087 
	}
}

3090 
ölöe_size
 

3091 
	$≥riodics_ªify
 (
EV_P
)

3093 
EV_FREQUENT_CHECK
;

3095 
≥riodic˙t
 && 
	`ANHE_©
 (
≥riodics
 [
HEAP0
]Ë< 
ev_π_now
)

3099 
ev_≥riodic
 *
w
 = (ev_≥riodi¯*)
	`ANHE_w
 (
≥riodics
 [
HEAP0
]);

3104 i‡(
w
->
ªscheduÀ_cb
)

3106 
	`ev_©
 (
w
Ëw->
	`ªscheduÀ_cb
 (w, 
ev_π_now
);

3108 
	`as£π
 (("libev:Év_≥riodi¯ªscheduÀ cÆlbackÑëu∫edÅimêöÅhê∑°", 
	`ev_©
 (
w
Ë>
ev_π_now
));

3110 
	`ANHE_©_ˇche
 (
≥riodics
 [
HEAP0
]);

3111 
	`downhóp
 (
≥riodics
, 
≥riodic˙t
, 
HEAP0
);

3113 i‡(
w
->
öãrvÆ
)

3115 
	`≥riodic_ªˇlc
 (
EV_A_
 
w
);

3116 
	`ANHE_©_ˇche
 (
≥riodics
 [
HEAP0
]);

3117 
	`downhóp
 (
≥riodics
, 
≥riodic˙t
, 
HEAP0
);

3120 
	`ev_≥riodic_°›
 (
EV_A_
 
w
);

3122 
EV_FREQUENT_CHECK
;

3123 
	`„ed_ªvî£
 (
	`EV_A_
 (
W
)
w
);

3125 
≥riodic˙t
 && 
	`ANHE_©
 (
≥riodics
 [
HEAP0
]Ë< 
ev_π_now
);

3127 
	`„ed_ªvî£_d⁄e
 (
EV_A_
 
EV_PERIODIC
);

3129 
	}
}

3133 
noölöe
 
ecb_cﬁd


3134 
	$≥riodics_ªscheduÀ
 (
EV_P
)

3136 
i
;

3139 
i
 = 
HEAP0
; i < 
≥riodic˙t
 + HEAP0; ++i)

3141 
ev_≥riodic
 *
w
 = (ev_≥riodi¯*)
	`ANHE_w
 (
≥riodics
 [
i
]);

3143 i‡(
w
->
ªscheduÀ_cb
)

3144 
	`ev_©
 (
w
Ëw->
	`ªscheduÀ_cb
 (w, 
ev_π_now
);

3145 i‡(
w
->
öãrvÆ
)

3146 
	`≥riodic_ªˇlc
 (
EV_A_
 
w
);

3148 
	`ANHE_©_ˇche
 (
≥riodics
 [
i
]);

3151 
	`ªhóp
 (
≥riodics
, 
≥riodic˙t
);

3152 
	}
}

3156 
noölöe
 
ecb_cﬁd


3157 
	$timîs_ªscheduÀ
 (
EV_P_
 
ev_t°amp
 
adju°
)

3159 
i
;

3161 
i
 = 0; i < 
timî˙t
; ++i)

3163 
ANHE
 *
he
 = 
timîs
 + 
i
 + 
HEAP0
;

3164 
	`ANHE_w
 (*
he
)->
©
 +
adju°
;

3165 
	`ANHE_©_ˇche
 (*
he
);

3167 
	}
}

3171 
ölöe_•ìd
 

3172 
	$time_upd©e
 (
EV_P_
 
ev_t°amp
 
max_block
)

3174 #i‡
EV_USE_MONOTONIC


3175 i‡(
	`ex≥˘_åue
 (
have_m⁄Ÿ⁄ic
))

3177 
i
;

3178 
ev_t°amp
 
odiff
 = 
πmn_diff
;

3180 
mn_now
 = 
	`gë_˛ock
 ();

3184 i‡(
	`ex≥˘_åue
 (
mn_now
 - 
now_Êo‹
 < 
MIN_TIMEJUMP
 * .5))

3186 
ev_π_now
 = 
πmn_diff
 + 
mn_now
;

3190 
now_Êo‹
 = 
mn_now
;

3191 
ev_π_now
 = 
	`ev_time
 ();

3201 
i
 = 4; --i; )

3203 
ev_t°amp
 
diff
;

3204 
πmn_diff
 = 
ev_π_now
 - 
mn_now
;

3206 
diff
 = 
odiff
 - 
πmn_diff
;

3208 i‡(
	`ex≥˘_åue
 ((
diff
 < 0. ? -dif‡: diffË< 
MIN_TIMEJUMP
))

3211 
ev_π_now
 = 
	`ev_time
 ();

3212 
mn_now
 = 
	`gë_˛ock
 ();

3213 
now_Êo‹
 = 
mn_now
;

3218 #i‡
EV_PERIODIC_ENABLE


3219 
	`≥riodics_ªscheduÀ
 (
EV_A
);

3225 
ev_π_now
 = 
	`ev_time
 ();

3227 i‡(
	`ex≥˘_Ál£
 (
mn_now
 > 
ev_π_now
 ||Év_π_now > mn_now + 
max_block
 + 
MIN_TIMEJUMP
))

3230 
	`timîs_ªscheduÀ
 (
EV_A_
 
ev_π_now
 - 
mn_now
);

3231 #i‡
EV_PERIODIC_ENABLE


3232 
	`≥riodics_ªscheduÀ
 (
EV_A
);

3236 
mn_now
 = 
ev_π_now
;

3238 
	}
}

3241 
	$ev_run
 (
EV_P_
 
Êags
)

3243 #i‡
EV_FEATURE_API


3244 ++
lo›_dïth
;

3247 
	`as£π
 (("libev:Év_lo›Ñecursi⁄ durögÑñó£ dëe˘ed", 
lo›_d⁄e
 !
EVBREAK_RECURSE
));

3249 
lo›_d⁄e
 = 
EVBREAK_CANCEL
;

3251 
EV_INVOKE_PENDING
;

3255 #i‡
EV_VERIFY
 >= 2

3256 
	`ev_vîify
 (
EV_A
);

3259 #i‚de‡
_WIN32


3260 i‡(
	`ex≥˘_Ál£
 (
cuΩid
))

3261 i‡(
	`ex≥˘_Ál£
 (
	`gëpid
 (Ë!
cuΩid
))

3263 
cuΩid
 = 
	`gëpid
 ();

3264 
po°f‹k
 = 1;

3268 #i‡
EV_FORK_ENABLE


3270 i‡(
	`ex≥˘_Ál£
 (
po°f‹k
))

3271 i‡(
f‹k˙t
)

3273 
	`queue_evíts
 (
	`EV_A_
 (
W
 *)
f‹ks
, 
f‹k˙t
, 
EV_FORK
);

3274 
EV_INVOKE_PENDING
;

3278 #i‡
EV_PREPARE_ENABLE


3280 i‡(
	`ex≥˘_Ál£
 (
¥ï¨e˙t
))

3282 
	`queue_evíts
 (
	`EV_A_
 (
W
 *)
¥ï¨es
, 
¥ï¨e˙t
, 
EV_PREPARE
);

3283 
EV_INVOKE_PENDING
;

3287 i‡(
	`ex≥˘_Ál£
 (
lo›_d⁄e
))

3291 i‡(
	`ex≥˘_Ál£
 (
po°f‹k
))

3292 
	`lo›_f‹k
 (
EV_A
);

3295 
	`fd_ªify
 (
EV_A
);

3299 
ev_t°amp
 
waôtime
 = 0.;

3300 
ev_t°amp
 
¶ì±ime
 = 0.;

3303 
ev_t°amp
 
¥ev_mn_now
 = 
mn_now
;

3306 
	`time_upd©e
 (
EV_A_
 1e100);

3309 
pùe_wrôe_w™ãd
 = 1;

3311 
ECB_MEMORY_FENCE
;

3313 i‡(
	`ex≥˘_åue
 (!(
Êags
 & 
EVRUN_NOWAIT
 || 
idÀÆl
 || !
a˘ive˙t
 || 
pùe_wrôe_skù≥d
)))

3315 
waôtime
 = 
MAX_BLOCKTIME
;

3317 i‡(
timî˙t
)

3319 
ev_t°amp
 
to
 = 
	`ANHE_©
 (
timîs
 [
HEAP0
]Ë- 
mn_now
;

3320 i‡(
waôtime
 > 
to
) waittime =Åo;

3323 #i‡
EV_PERIODIC_ENABLE


3324 i‡(
≥riodic˙t
)

3326 
ev_t°amp
 
to
 = 
	`ANHE_©
 (
≥riodics
 [
HEAP0
]Ë- 
ev_π_now
;

3327 i‡(
waôtime
 > 
to
) waittime =Åo;

3332 i‡(
	`ex≥˘_Ál£
 (
waôtime
 < 
timeout_blocktime
))

3333 
waôtime
 = 
timeout_blocktime
;

3337 i‡(
	`ex≥˘_Ál£
 (
waôtime
 < 
backíd_mötime
))

3338 
waôtime
 = 
backíd_mötime
;

3341 i‡(
	`ex≥˘_Ál£
 (
io_blocktime
))

3343 
¶ì±ime
 = 
io_blocktime
 - (
mn_now
 - 
¥ev_mn_now
);

3345 i‡(
¶ì±ime
 > 
waôtime
 - 
backíd_mötime
)

3346 
¶ì±ime
 = 
waôtime
 - 
backíd_mötime
;

3348 i‡(
	`ex≥˘_åue
 (
¶ì±ime
 > 0.))

3350 
	`ev_¶ìp
 (
¶ì±ime
);

3351 
waôtime
 -
¶ì±ime
;

3356 #i‡
EV_FEATURE_API


3357 ++
lo›_cou¡
;

3359 
	`as£π
 ((
lo›_d⁄e
 = 
EVBREAK_RECURSE
, 1));

3360 
	`backíd_pﬁl
 (
EV_A_
 
waôtime
);

3361 
	`as£π
 ((
lo›_d⁄e
 = 
EVBREAK_CANCEL
, 1));

3363 
pùe_wrôe_w™ãd
 = 0;

3365 
ECB_MEMORY_FENCE_ACQUIRE
;

3366 i‡(
pùe_wrôe_skù≥d
)

3368 
	`as£π
 (("libev:Öùe_wÇŸá˘ive, buàpùênŸ wrôãn", 
	`ev_is_a˘ive
 (&
pùe_w
)));

3369 
	`ev_„ed_evít
 (
EV_A_
 &
pùe_w
, 
EV_CUSTOM
);

3374 
	`time_upd©e
 (
EV_A_
 
waôtime
 + 
¶ì±ime
);

3378 
	`timîs_ªify
 (
EV_A
);

3379 #i‡
EV_PERIODIC_ENABLE


3380 
	`≥riodics_ªify
 (
EV_A
);

3383 #i‡
EV_IDLE_ENABLE


3385 
	`idÀ_ªify
 (
EV_A
);

3388 #i‡
EV_CHECK_ENABLE


3390 i‡(
	`ex≥˘_Ál£
 (
check˙t
))

3391 
	`queue_evíts
 (
	`EV_A_
 (
W
 *)
checks
, 
check˙t
, 
EV_CHECK
);

3394 
EV_INVOKE_PENDING
;

3396 
	`ex≥˘_åue
 (

3397 
a˘ive˙t


3398 && !
lo›_d⁄e


3399 && !(
Êags
 & (
EVRUN_ONCE
 | 
EVRUN_NOWAIT
))

3402 i‡(
lo›_d⁄e
 =
EVBREAK_ONE
)

3403 
lo›_d⁄e
 = 
EVBREAK_CANCEL
;

3405 #i‡
EV_FEATURE_API


3406 --
lo›_dïth
;

3409  
a˘ive˙t
;

3410 
	}
}

3413 
	$ev_bªak
 (
EV_P_
 
how
Ë
EV_THROW


3415 
lo›_d⁄e
 = 
how
;

3416 
	}
}

3419 
	$ev_ªf
 (
EV_P
Ë
EV_THROW


3421 ++
a˘ive˙t
;

3422 
	}
}

3425 
	$ev_uƒef
 (
EV_P
Ë
EV_THROW


3427 --
a˘ive˙t
;

3428 
	}
}

3431 
	$ev_now_upd©e
 (
EV_P
Ë
EV_THROW


3433 
	`time_upd©e
 (
EV_A_
 1e100);

3434 
	}
}

3437 
	$ev_su•íd
 (
EV_P
Ë
EV_THROW


3439 
	`ev_now_upd©e
 (
EV_A
);

3440 
	}
}

3443 
	$ev_ªsume
 (
EV_P
Ë
EV_THROW


3445 
ev_t°amp
 
mn_¥ev
 = 
mn_now
;

3447 
	`ev_now_upd©e
 (
EV_A
);

3448 
	`timîs_ªscheduÀ
 (
EV_A_
 
mn_now
 - 
mn_¥ev
);

3449 #i‡
EV_PERIODIC_ENABLE


3451 
	`≥riodics_ªscheduÀ
 (
EV_A
);

3453 
	}
}

3458 
ölöe_size
 

3459 
	$wli°_add
 (
WL
 *
hód
, WL 
ñem
)

3461 
ñem
->
√xt
 = *
hód
;

3462 *
hód
 = 
ñem
;

3463 
	}
}

3465 
ölöe_size
 

3466 
	$wli°_dñ
 (
WL
 *
hód
, WL 
ñem
)

3468 *
hód
)

3470 i‡(
	`ex≥˘_åue
 (*
hód
 =
ñem
))

3472 *
hód
 = 
ñem
->
√xt
;

3476 
hód
 = &(*hód)->
√xt
;

3478 
	}
}

3481 
ölöe_•ìd
 

3482 
	$˛ór_≥ndög
 (
EV_P_
 
W
 
w
)

3484 i‡(
w
->
≥ndög
)

3486 
≥ndögs
 [
	`ABSPRI
 (
w
)][w->
≥ndög
 - 1].w = (
W
)&
≥ndög_w
;

3487 
w
->
≥ndög
 = 0;

3489 
	}
}

3492 
	$ev_˛ór_≥ndög
 (
EV_P_
 *
w
Ë
EV_THROW


3494 
W
 
w_
 = (W)
w
;

3495 
≥ndög
 = 
w_
->pending;

3497 i‡(
	`ex≥˘_åue
 (
≥ndög
))

3499 
ANPENDING
 *
p
 = 
≥ndögs
 [
	`ABSPRI
 (
w_
)] + 
≥ndög
 - 1;

3500 
p
->
w
 = (
W
)&
≥ndög_w
;

3501 
w_
->
≥ndög
 = 0;

3502  
p
->
evíts
;

3506 
	}
}

3508 
ölöe_size
 

3509 
	$¥i_adju°
 (
EV_P_
 
W
 
w
)

3511 
¥i
 = 
	`ev_¥i‹ôy
 (
w
);

3512 
¥i
 =Örò< 
EV_MINPRI
 ? EV_MINPRI :Öri;

3513 
¥i
 =Örò> 
EV_MAXPRI
 ? EV_MAXPRI :Öri;

3514 
	`ev_£t_¥i‹ôy
 (
w
, 
¥i
);

3515 
	}
}

3517 
ölöe_•ìd
 

3518 
	$ev_°¨t
 (
EV_P_
 
W
 
w
, 
a˘ive
)

3520 
	`¥i_adju°
 (
EV_A_
 
w
);

3521 
w
->
a˘ive
 =áctive;

3522 
	`ev_ªf
 (
EV_A
);

3523 
	}
}

3525 
ölöe_size
 

3526 
	$ev_°›
 (
EV_P_
 
W
 
w
)

3528 
	`ev_uƒef
 (
EV_A
);

3529 
w
->
a˘ive
 = 0;

3530 
	}
}

3534 
noölöe


3535 
	$ev_io_°¨t
 (
EV_P_
 
ev_io
 *
w
Ë
EV_THROW


3537 
fd
 = 
w
->fd;

3539 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

3542 
	`as£π
 (("libev:Év_io_°¨àˇŒed wôhÇeg©ivêfd", 
fd
 >= 0));

3543 
	`as£π
 (("libev:Év_io_°¨àˇŒed wôh iŒegÆÉvíàmask", !(
w
->
evíts
 & ~(
EV__IOFDSET
 | 
EV_READ
 | 
EV_WRITE
))));

3545 
EV_FREQUENT_CHECK
;

3547 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 1);

3548 
	`¨øy_√edsize
 (
ANFD
, 
™fds
, 
™fdmax
, 
fd
 + 1, 
¨øy_öô_zîo
);

3549 
	`wli°_add
 (&
™fds
[
fd
].
hód
, (
WL
)
w
);

3552 
	`as£π
 (("libev:Év_io_°¨àˇŒed wôh c‹ru±ed w©chî", ((
WL
)
w
)->
√xt
 != (WL)w));

3554 
	`fd_ch™ge
 (
EV_A_
 
fd
, 
w
->
evíts
 & 
EV__IOFDSET
 | 
EV_ANFD_REIFY
);

3555 
w
->
evíts
 &~
EV__IOFDSET
;

3557 
EV_FREQUENT_CHECK
;

3558 
	}
}

3560 
noölöe


3561 
	$ev_io_°›
 (
EV_P_
 
ev_io
 *
w
Ë
EV_THROW


3563 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3564 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

3567 
	`as£π
 (("libev:Év_io_°› cÆÀd wôh iŒegÆ fd (mu° sèy c⁄°™àa·î sèπ!)", 
w
->
fd
 >0 && w->fd < 
™fdmax
));

3569 
EV_FREQUENT_CHECK
;

3571 
	`wli°_dñ
 (&
™fds
[
w
->
fd
].
hód
, (
WL
)w);

3572 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

3574 
	`fd_ch™ge
 (
EV_A_
 
w
->
fd
, 
EV_ANFD_REIFY
);

3576 
EV_FREQUENT_CHECK
;

3577 
	}
}

3579 
noölöe


3580 
	$ev_timî_°¨t
 (
EV_P_
 
ev_timî
 *
w
Ë
EV_THROW


3582 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

3585 
	`ev_©
 (
w
Ë+
mn_now
;

3587 
	`as£π
 (("libev:Év_timî_°¨àˇŒed wôhÇeg©ivêtimîÑïóàvÆue", 
w
->
ª≥©
 >= 0.));

3589 
EV_FREQUENT_CHECK
;

3591 ++
timî˙t
;

3592 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 
timî˙t
 + 
HEAP0
 - 1);

3593 
	`¨øy_√edsize
 (
ANHE
, 
timîs
, 
timîmax
, 
	`ev_a˘ive
 (
w
Ë+ 1, 
EMPTY2
);

3594 
	`ANHE_w
 (
timîs
 [
	`ev_a˘ive
 (
w
)]Ë(
WT
)w;

3595 
	`ANHE_©_ˇche
 (
timîs
 [
	`ev_a˘ive
 (
w
)]);

3596 
	`uphóp
 (
timîs
, 
	`ev_a˘ive
 (
w
));

3598 
EV_FREQUENT_CHECK
;

3601 
	}
}

3603 
noölöe


3604 
	$ev_timî_°›
 (
EV_P_
 
ev_timî
 *
w
Ë
EV_THROW


3606 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3607 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

3610 
EV_FREQUENT_CHECK
;

3613 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

3615 
	`as£π
 (("libev: i¡î«»timî hó∞c‹ru±i⁄", 
	`ANHE_w
 (
timîs
 [
a˘ive
]Ë=(
WT
)
w
));

3617 --
timî˙t
;

3619 i‡(
	`ex≥˘_åue
 (
a˘ive
 < 
timî˙t
 + 
HEAP0
))

3621 
timîs
 [
a˘ive
] =Åimî†[
timî˙t
 + 
HEAP0
];

3622 
	`adju°hóp
 (
timîs
, 
timî˙t
, 
a˘ive
);

3626 
	`ev_©
 (
w
Ë-
mn_now
;

3628 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

3630 
EV_FREQUENT_CHECK
;

3631 
	}
}

3633 
noölöe


3634 
	$ev_timî_agaö
 (
EV_P_
 
ev_timî
 *
w
Ë
EV_THROW


3636 
EV_FREQUENT_CHECK
;

3638 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3640 i‡(
	`ev_is_a˘ive
 (
w
))

3642 i‡(
w
->
ª≥©
)

3644 
	`ev_©
 (
w
Ë
mn_now
 + w->
ª≥©
;

3645 
	`ANHE_©_ˇche
 (
timîs
 [
	`ev_a˘ive
 (
w
)]);

3646 
	`adju°hóp
 (
timîs
, 
timî˙t
, 
	`ev_a˘ive
 (
w
));

3649 
	`ev_timî_°›
 (
EV_A_
 
w
);

3651 i‡(
w
->
ª≥©
)

3653 
	`ev_©
 (
w
Ëw->
ª≥©
;

3654 
	`ev_timî_°¨t
 (
EV_A_
 
w
);

3657 
EV_FREQUENT_CHECK
;

3658 
	}
}

3660 
ev_t°amp


3661 
	$ev_timî_ªmaöög
 (
EV_P_
 
ev_timî
 *
w
Ë
EV_THROW


3663  
	`ev_©
 (
w
Ë- (
	`ev_is_a˘ive
 (wË? 
mn_now
 : 0.);

3664 
	}
}

3666 #i‡
EV_PERIODIC_ENABLE


3667 
noölöe


3668 
	$ev_≥riodic_°¨t
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
EV_THROW


3670 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

3673 i‡(
w
->
ªscheduÀ_cb
)

3674 
	`ev_©
 (
w
Ëw->
	`ªscheduÀ_cb
 (w, 
ev_π_now
);

3675 i‡(
w
->
öãrvÆ
)

3677 
	`as£π
 (("libev:Év_≥riodic_°¨àˇŒed wôhÇeg©ivêöãrvÆ vÆue", 
w
->
öãrvÆ
 >= 0.));

3678 
	`≥riodic_ªˇlc
 (
EV_A_
 
w
);

3681 
	`ev_©
 (
w
Ëw->
off£t
;

3683 
EV_FREQUENT_CHECK
;

3685 ++
≥riodic˙t
;

3686 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 
≥riodic˙t
 + 
HEAP0
 - 1);

3687 
	`¨øy_√edsize
 (
ANHE
, 
≥riodics
, 
≥riodicmax
, 
	`ev_a˘ive
 (
w
Ë+ 1, 
EMPTY2
);

3688 
	`ANHE_w
 (
≥riodics
 [
	`ev_a˘ive
 (
w
)]Ë(
WT
)w;

3689 
	`ANHE_©_ˇche
 (
≥riodics
 [
	`ev_a˘ive
 (
w
)]);

3690 
	`uphóp
 (
≥riodics
, 
	`ev_a˘ive
 (
w
));

3692 
EV_FREQUENT_CHECK
;

3695 
	}
}

3697 
noölöe


3698 
	$ev_≥riodic_°›
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
EV_THROW


3700 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3701 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

3704 
EV_FREQUENT_CHECK
;

3707 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

3709 
	`as£π
 (("libev: i¡î«»≥riodi¯hó∞c‹ru±i⁄", 
	`ANHE_w
 (
≥riodics
 [
a˘ive
]Ë=(
WT
)
w
));

3711 --
≥riodic˙t
;

3713 i‡(
	`ex≥˘_åue
 (
a˘ive
 < 
≥riodic˙t
 + 
HEAP0
))

3715 
≥riodics
 [
a˘ive
] =Öîiodic†[
≥riodic˙t
 + 
HEAP0
];

3716 
	`adju°hóp
 (
≥riodics
, 
≥riodic˙t
, 
a˘ive
);

3720 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

3722 
EV_FREQUENT_CHECK
;

3723 
	}
}

3725 
noölöe


3726 
	$ev_≥riodic_agaö
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
EV_THROW


3729 
	`ev_≥riodic_°›
 (
EV_A_
 
w
);

3730 
	`ev_≥riodic_°¨t
 (
EV_A_
 
w
);

3731 
	}
}

3734 #i‚de‡
SA_RESTART


3735 
	#SA_RESTART
 0

	)

3738 #i‡
EV_SIGNAL_ENABLE


3740 
noölöe


3741 
	$ev_sig«l_°¨t
 (
EV_P_
 
ev_sig«l
 *
w
Ë
EV_THROW


3743 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

3746 
	`as£π
 (("libev:Év_sig«l_°¨àˇŒed wôh iŒegÆ sig«»numbî", 
w
->
signum
 > 0 && w->signum < 
EV_NSIG
));

3748 #i‡
EV_MULTIPLICITY


3749 
	`as£π
 (("libev:á signal mustÇot beáttachedÅoÅwo differentÜoops",

3750 !
sig«ls
 [
w
->
signum
 - 1].
lo›
 || signals [w->signum - 1].loop ==Üoop));

3752 
sig«ls
 [
w
->
signum
 - 1].
lo›
 = 
EV_A
;

3753 
ECB_MEMORY_FENCE_RELEASE
;

3756 
EV_FREQUENT_CHECK
;

3758 #i‡
EV_USE_SIGNALFD


3759 i‡(
sigfd
 == -2)

3761 
sigfd
 = 
	`sig«lfd
 (-1, &
sigfd_£t
, 
SFD_NONBLOCK
 | 
SFD_CLOEXEC
);

3762 i‡(
sigfd
 < 0 && 
î∫o
 =
EINVAL
)

3763 
sigfd
 = 
	`sig«lfd
 (-1, &
sigfd_£t
, 0);

3765 i‡(
sigfd
 >= 0)

3767 
	`fd_öã∫
 (
sigfd
);

3769 
	`sigem±y£t
 (&
sigfd_£t
);

3771 
	`ev_io_öô
 (&
sigfd_w
, 
sigfdcb
, 
sigfd
, 
EV_READ
);

3772 
	`ev_£t_¥i‹ôy
 (&
sigfd_w
, 
EV_MAXPRI
);

3773 
	`ev_io_°¨t
 (
EV_A_
 &
sigfd_w
);

3774 
	`ev_uƒef
 (
EV_A
);

3778 i‡(
sigfd
 >= 0)

3781 
	`sigadd£t
 (&
sigfd_£t
, 
w
->
signum
);

3782 
	`sig¥ocmask
 (
SIG_BLOCK
, &
sigfd_£t
, 0);

3784 
	`sig«lfd
 (
sigfd
, &
sigfd_£t
, 0);

3788 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 1);

3789 
	`wli°_add
 (&
sig«ls
 [
w
->
signum
 - 1].
hód
, (
WL
)w);

3791 i‡(!((
WL
)
w
)->
√xt
)

3792 #i‡
EV_USE_SIGNALFD


3793 i‡(
sigfd
 < 0)

3796 #ifde‡
_WIN32


3797 
	`evpùe_öô
 (
EV_A
);

3799 
	`sig«l
 (
w
->
signum
, 
ev_sigh™dÀr
);

3801 
siga˘i⁄
 
ß
;

3803 
	`evpùe_öô
 (
EV_A
);

3805 
ß
.
ß_h™dÀr
 = 
ev_sigh™dÀr
;

3806 
	`sigfûl£t
 (&
ß
.
ß_mask
);

3807 
ß
.
ß_Êags
 = 
SA_RESTART
;

3808 
	`siga˘i⁄
 (
w
->
signum
, &
ß
, 0);

3810 i‡(
‹igÊags
 & 
EVFLAG_NOSIGMASK
)

3812 
	`sigem±y£t
 (&
ß
.
ß_mask
);

3813 
	`sigadd£t
 (&
ß
.
ß_mask
, 
w
->
signum
);

3814 
	`sig¥ocmask
 (
SIG_UNBLOCK
, &
ß
.
ß_mask
, 0);

3819 
EV_FREQUENT_CHECK
;

3820 
	}
}

3822 
noölöe


3823 
	$ev_sig«l_°›
 (
EV_P_
 
ev_sig«l
 *
w
Ë
EV_THROW


3825 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3826 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

3829 
EV_FREQUENT_CHECK
;

3831 
	`wli°_dñ
 (&
sig«ls
 [
w
->
signum
 - 1].
hód
, (
WL
)w);

3832 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

3834 i‡(!
sig«ls
 [
w
->
signum
 - 1].
hód
)

3836 #i‡
EV_MULTIPLICITY


3837 
sig«ls
 [
w
->
signum
 - 1].
lo›
 = 0;

3839 #i‡
EV_USE_SIGNALFD


3840 i‡(
sigfd
 >= 0)

3842 
sig£t_t
 
ss
;

3844 
	`sigem±y£t
 (&
ss
);

3845 
	`sigadd£t
 (&
ss
, 
w
->
signum
);

3846 
	`sigdñ£t
 (&
sigfd_£t
, 
w
->
signum
);

3848 
	`sig«lfd
 (
sigfd
, &
sigfd_£t
, 0);

3849 
	`sig¥ocmask
 (
SIG_UNBLOCK
, &
ss
, 0);

3853 
	`sig«l
 (
w
->
signum
, 
SIG_DFL
);

3856 
EV_FREQUENT_CHECK
;

3857 
	}
}

3861 #i‡
EV_CHILD_ENABLE


3864 
	$ev_chûd_°¨t
 (
EV_P_
 
ev_chûd
 *
w
Ë
EV_THROW


3866 #i‡
EV_MULTIPLICITY


3867 
	`as£π
 (("libev: chûd w©chî†¨ê⁄ly suµ‹ãd i¿thêdeÁu…Üo›", 
lo›
 =
ev_deÁu…_lo›_±r
));

3869 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

3872 
EV_FREQUENT_CHECK
;

3874 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 1);

3875 
	`wli°_add
 (&
chûds
 [
w
->
pid
 & ((
EV_PID_HASHSIZE
Ë- 1)], (
WL
)w);

3877 
EV_FREQUENT_CHECK
;

3878 
	}
}

3881 
	$ev_chûd_°›
 (
EV_P_
 
ev_chûd
 *
w
Ë
EV_THROW


3883 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

3884 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

3887 
EV_FREQUENT_CHECK
;

3889 
	`wli°_dñ
 (&
chûds
 [
w
->
pid
 & ((
EV_PID_HASHSIZE
Ë- 1)], (
WL
)w);

3890 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

3892 
EV_FREQUENT_CHECK
;

3893 
	}
}

3897 #i‡
EV_STAT_ENABLE


3899 #ifde‡
_WIN32


3900 #unde‡
l°©


3901 
	#l°©
(
a
,
b
Ë
	`_°©i64
 (a,b)

	)

3904 
	#DEF_STAT_INTERVAL
 5.0074891

	)

3905 
	#NFS_STAT_INTERVAL
 30.1074891

	)

3906 
	#MIN_STAT_INTERVAL
 0.1074891

	)

3908 
noölöe
 
°©_timî_cb
 (
EV_P_
 
ev_timî
 *
w_
, 
ªvíts
);

3910 #i‡
EV_USE_INOTIFY


3913 
	#EV_INOTIFY_BUFSIZE
 ( (
öŸify_evít
Ë* 2 + 
NAME_MAX
)

	)

3915 
noölöe


3916 
	$öfy_add
 (
EV_P_
 
ev_°©
 *
w
)

3918 
w
->
wd
 = 
	`öŸify_add_w©ch
 (
fs_fd
, w->
∑th
,

3919 
IN_ATTRIB
 | 
IN_DELETE_SELF
 | 
IN_MOVE_SELF
 | 
IN_MODIFY


3920 | 
IN_CREATE
 | 
IN_DELETE
 | 
IN_MOVED_FROM
 | 
IN_MOVED_TO


3921 | 
IN_DONT_FOLLOW
 | 
IN_MASK_ADD
);

3923 i‡(
w
->
wd
 >= 0)

3925 
°©fs
 
sfs
;

3931 i‡(!
fs_2625
)

3932 
w
->
timî
.
ª≥©
 = w->
öãrvÆ
 ? w->öãrvÆ : 
DEF_STAT_INTERVAL
;

3933 i‡(!
	`°©fs
 (
w
->
∑th
, &
sfs
)

3934 && (
sfs
.
f_ty≥
 == 0x1373

3935 || 
sfs
.
f_ty≥
 == 0x4006

3936 || 
sfs
.
f_ty≥
 == 0x4d44

3937 || 
sfs
.
f_ty≥
 == 0xEF53

3938 || 
sfs
.
f_ty≥
 == 0x72b6

3939 || 
sfs
.
f_ty≥
 == 0x858458f6

3940 || 
sfs
.
f_ty≥
 == 0x5346544e

3941 || 
sfs
.
f_ty≥
 == 0x3153464a

3942 || 
sfs
.
f_ty≥
 == 0x9123683e

3943 || 
sfs
.
f_ty≥
 == 0x52654973

3944 || 
sfs
.
f_ty≥
 == 0x01021994

3945 || 
sfs
.
f_ty≥
 == 0x58465342 ))

3946 
w
->
timî
.
ª≥©
 = 0.;

3948 
w
->
timî
.
ª≥©
 = w->
öãrvÆ
 ? w->öãrvÆ : 
NFS_STAT_INTERVAL
;

3953 
w
->
timî
.
ª≥©
 = w->
öãrvÆ
 ? w->öãrvÆ : 
DEF_STAT_INTERVAL
;

3958 i‡((
î∫o
 =
ENOENT
 ||Éºnÿ=
EACCES
Ë&& 
	`°æí
 (
w
->
∑th
) < 4096)

3960 
∑th
 [4096];

3961 
	`°r˝y
 (
∑th
, 
w
->path);

3965 
mask
 = 
IN_MASK_ADD
 | 
IN_DELETE_SELF
 | 
IN_MOVE_SELF


3966 | (
î∫o
 =
EACCES
 ? 
IN_ATTRIB
 : 
IN_CREATE
 | 
IN_MOVED_TO
);

3968 *
≥nd
 = 
	`°ºchr
 (
∑th
, '/');

3970 i‡(!
≥nd
 ||Öíd =
∑th
)

3973 *
≥nd
 = 0;

3974 
w
->
wd
 = 
	`öŸify_add_w©ch
 (
fs_fd
, 
∑th
, 
mask
);

3976 
w
->
wd
 < 0 && (
î∫o
 =
ENOENT
 ||Éºnÿ=
EACCES
));

3980 i‡(
w
->
wd
 >= 0)

3981 
	`wli°_add
 (&
fs_hash
 [
w
->
wd
 & ((
EV_INOTIFY_HASHSIZE
Ë- 1)].
hód
, (
WL
)w);

3984 i‡(
	`ev_is_a˘ive
 (&
w
->
timî
)Ë
	`ev_ªf
 (
EV_A
);

3985 
	`ev_timî_agaö
 (
EV_A_
 &
w
->
timî
);

3986 i‡(
	`ev_is_a˘ive
 (&
w
->
timî
)Ë
	`ev_uƒef
 (
EV_A
);

3987 
	}
}

3989 
noölöe


3990 
	$öfy_dñ
 (
EV_P_
 
ev_°©
 *
w
)

3992 
¶Ÿ
;

3993 
wd
 = 
w
->wd;

3995 i‡(
wd
 < 0)

3998 
w
->
wd
 = -2;

3999 
¶Ÿ
 = 
wd
 & ((
EV_INOTIFY_HASHSIZE
) - 1);

4000 
	`wli°_dñ
 (&
fs_hash
 [
¶Ÿ
].
hód
, (
WL
)
w
);

4003 
	`öŸify_rm_w©ch
 (
fs_fd
, 
wd
);

4004 
	}
}

4006 
noölöe


4007 
	$öfy_wd
 (
EV_P_
 
¶Ÿ
, 
wd
, 
öŸify_evít
 *
ev
)

4009 i‡(
¶Ÿ
 < 0)

4011 
¶Ÿ
 = 0; slŸ < (
EV_INOTIFY_HASHSIZE
); ++slot)

4012 
	`öfy_wd
 (
EV_A_
 
¶Ÿ
, 
wd
, 
ev
);

4015 
WL
 
w_
;

4017 
w_
 = 
fs_hash
 [
¶Ÿ
 & ((
EV_INOTIFY_HASHSIZE
Ë- 1)].
hód
; w_; )

4019 
ev_°©
 *
w
 = (ev_°© *)
w_
;

4020 
w_
 = w_->
√xt
;

4022 i‡(
w
->
wd
 == wd || wd == -1)

4024 i‡(
ev
->
mask
 & (
IN_IGNORED
 | 
IN_UNMOUNT
 | 
IN_DELETE_SELF
))

4026 
	`wli°_dñ
 (&
fs_hash
 [
¶Ÿ
 & ((
EV_INOTIFY_HASHSIZE
Ë- 1)].
hód
, (
WL
)
w
);

4027 
w
->
wd
 = -1;

4028 
	`öfy_add
 (
EV_A_
 
w
);

4031 
	`°©_timî_cb
 (
EV_A_
 &
w
->
timî
, 0);

4035 
	}
}

4038 
	$öfy_cb
 (
EV_P_
 
ev_io
 *
w
, 
ªvíts
)

4040 
buf
 [
EV_INOTIFY_BUFSIZE
];

4041 
ofs
;

4042 
Àn
 = 
	`ªad
 (
fs_fd
, 
buf
,  (buf));

4044 
ofs
 = 0; of†< 
Àn
; )

4046 
öŸify_evít
 *
ev
 = (öŸify_evíà*)(
buf
 + 
ofs
);

4047 
	`öfy_wd
 (
EV_A_
 
ev
->
wd
,Év->wd,Év);

4048 
ofs
 + (
öŸify_evít
Ë+ 
ev
->
Àn
;

4050 
	}
}

4052 
ölöe_size
 
ecb_cﬁd


4053 
	$ev_check_2625
 (
EV_P
)

4058 i‡(
	`ev_löux_vîsi⁄
 () < 0x020619)

4061 
fs_2625
 = 1;

4062 
	}
}

4064 
ölöe_size
 

4065 
	$öfy_√wfd
 ()

4067 #i‡
deföed
 
IN_CLOEXEC
 && deföed 
IN_NONBLOCK


4068 
fd
 = 
	`öŸify_öô1
 (
IN_CLOEXEC
 | 
IN_NONBLOCK
);

4069 i‡(
fd
 >= 0)

4070  
fd
;

4072  
	`öŸify_öô
 ();

4073 
	}
}

4075 
ölöe_size
 

4076 
	$öfy_öô
 (
EV_P
)

4078 i‡(
fs_fd
 != -2)

4081 
fs_fd
 = -1;

4083 
	`ev_check_2625
 (
EV_A
);

4085 
fs_fd
 = 
	`öfy_√wfd
 ();

4087 i‡(
fs_fd
 >= 0)

4089 
	`fd_öã∫
 (
fs_fd
);

4090 
	`ev_io_öô
 (&
fs_w
, 
öfy_cb
, 
fs_fd
, 
EV_READ
);

4091 
	`ev_£t_¥i‹ôy
 (&
fs_w
, 
EV_MAXPRI
);

4092 
	`ev_io_°¨t
 (
EV_A_
 &
fs_w
);

4093 
	`ev_uƒef
 (
EV_A
);

4095 
	}
}

4097 
ölöe_size
 

4098 
	$öfy_f‹k
 (
EV_P
)

4100 
¶Ÿ
;

4102 i‡(
fs_fd
 < 0)

4105 
	`ev_ªf
 (
EV_A
);

4106 
	`ev_io_°›
 (
EV_A_
 &
fs_w
);

4107 
	`˛o£
 (
fs_fd
);

4108 
fs_fd
 = 
	`öfy_√wfd
 ();

4110 i‡(
fs_fd
 >= 0)

4112 
	`fd_öã∫
 (
fs_fd
);

4113 
	`ev_io_£t
 (&
fs_w
, 
fs_fd
, 
EV_READ
);

4114 
	`ev_io_°¨t
 (
EV_A_
 &
fs_w
);

4115 
	`ev_uƒef
 (
EV_A
);

4118 
¶Ÿ
 = 0; slŸ < (
EV_INOTIFY_HASHSIZE
); ++slot)

4120 
WL
 
w_
 = 
fs_hash
 [
¶Ÿ
].
hód
;

4121 
fs_hash
 [
¶Ÿ
].
hód
 = 0;

4123 
w_
)

4125 
ev_°©
 *
w
 = (ev_°© *)
w_
;

4126 
w_
 = w_->
√xt
;

4128 
w
->
wd
 = -1;

4130 i‡(
fs_fd
 >= 0)

4131 
	`öfy_add
 (
EV_A_
 
w
);

4134 
w
->
timî
.
ª≥©
 = w->
öãrvÆ
 ? w->öãrvÆ : 
DEF_STAT_INTERVAL
;

4135 i‡(
	`ev_is_a˘ive
 (&
w
->
timî
)Ë
	`ev_ªf
 (
EV_A
);

4136 
	`ev_timî_agaö
 (
EV_A_
 &
w
->
timî
);

4137 i‡(
	`ev_is_a˘ive
 (&
w
->
timî
)Ë
	`ev_uƒef
 (
EV_A
);

4141 
	}
}

4145 #ifde‡
_WIN32


4146 
	#EV_LSTAT
(
p
,
b
Ë
	`_°©i64
 (p, b)

	)

4148 
	#EV_LSTAT
(
p
,
b
Ë
	`l°©
 (p, b)

	)

4152 
	$ev_°©_°©
 (
EV_P_
 
ev_°©
 *
w
Ë
EV_THROW


4154 i‡(
	`l°©
 (
w
->
∑th
, &w->
©å
) < 0)

4155 
w
->
©å
.
°_∆ök
 = 0;

4156 i‡(!
w
->
©å
.
°_∆ök
)

4157 
w
->
©å
.
°_∆ök
 = 1;

4158 
	}
}

4160 
noölöe


4161 
	$°©_timî_cb
 (
EV_P_
 
ev_timî
 *
w_
, 
ªvíts
)

4163 
ev_°©
 *
w
 = (ev_°© *)(((*)
w_
Ë- 
	`off£tof
 (ev_°©, 
timî
));

4165 
ev_°©d©a
 
¥ev
 = 
w
->
©å
;

4166 
	`ev_°©_°©
 (
EV_A_
 
w
);

4170 
¥ev
.
°_dev
 !
w
->
©å
.st_dev

4171 || 
¥ev
.
°_öo
 !
w
->
©å
.st_ino

4172 || 
¥ev
.
°_mode
 !
w
->
©å
.st_mode

4173 || 
¥ev
.
°_∆ök
 !
w
->
©å
.st_nlink

4174 || 
¥ev
.
°_uid
 !
w
->
©å
.st_uid

4175 || 
¥ev
.
°_gid
 !
w
->
©å
.st_gid

4176 || 
¥ev
.
°_rdev
 !
w
->
©å
.st_rdev

4177 || 
¥ev
.
°_size
 !
w
->
©å
.st_size

4178 || 
¥ev
.
°_©ime
 !
w
->
©å
.st_atime

4179 || 
¥ev
.
°_mtime
 !
w
->
©å
.st_mtime

4180 || 
¥ev
.
°_˘ime
 !
w
->
©å
.st_ctime

4185 
w
->
¥ev
 =Örev;

4187 #i‡
EV_USE_INOTIFY


4188 i‡(
fs_fd
 >= 0)

4190 
	`öfy_dñ
 (
EV_A_
 
w
);

4191 
	`öfy_add
 (
EV_A_
 
w
);

4192 
	`ev_°©_°©
 (
EV_A_
 
w
);

4196 
	`ev_„ed_evít
 (
EV_A_
 
w
, 
EV_STAT
);

4198 
	}
}

4201 
	$ev_°©_°¨t
 (
EV_P_
 
ev_°©
 *
w
Ë
EV_THROW


4203 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4206 
	`ev_°©_°©
 (
EV_A_
 
w
);

4208 i‡(
w
->
öãrvÆ
 < 
MIN_STAT_INTERVAL
 && w->interval)

4209 
w
->
öãrvÆ
 = 
MIN_STAT_INTERVAL
;

4211 
	`ev_timî_öô
 (&
w
->
timî
, 
°©_timî_cb
, 0., w->
öãrvÆ
 ? w->öãrvÆ : 
DEF_STAT_INTERVAL
);

4212 
	`ev_£t_¥i‹ôy
 (&
w
->
timî
, 
	`ev_¥i‹ôy
 (w));

4214 #i‡
EV_USE_INOTIFY


4215 
	`öfy_öô
 (
EV_A
);

4217 i‡(
fs_fd
 >= 0)

4218 
	`öfy_add
 (
EV_A_
 
w
);

4222 
	`ev_timî_agaö
 (
EV_A_
 &
w
->
timî
);

4223 
	`ev_uƒef
 (
EV_A
);

4226 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 1);

4228 
EV_FREQUENT_CHECK
;

4229 
	}
}

4232 
	$ev_°©_°›
 (
EV_P_
 
ev_°©
 *
w
Ë
EV_THROW


4234 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4235 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4238 
EV_FREQUENT_CHECK
;

4240 #i‡
EV_USE_INOTIFY


4241 
	`öfy_dñ
 (
EV_A_
 
w
);

4244 i‡(
	`ev_is_a˘ive
 (&
w
->
timî
))

4246 
	`ev_ªf
 (
EV_A
);

4247 
	`ev_timî_°›
 (
EV_A_
 &
w
->
timî
);

4250 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4252 
EV_FREQUENT_CHECK
;

4253 
	}
}

4256 #i‡
EV_IDLE_ENABLE


4258 
	$ev_idÀ_°¨t
 (
EV_P_
 
ev_idÀ
 *
w
Ë
EV_THROW


4260 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4263 
	`¥i_adju°
 (
	`EV_A_
 (
W
)
w
);

4265 
EV_FREQUENT_CHECK
;

4268 
a˘ive
 = ++
idÀ˙t
 [
	`ABSPRI
 (
w
)];

4270 ++
idÀÆl
;

4271 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 
a˘ive
);

4273 
	`¨øy_√edsize
 (
ev_idÀ
 *, 
idÀs
 [
	`ABSPRI
 (
w
)], 
idÀmax
 [ABSPRI (w)], 
a˘ive
, 
EMPTY2
);

4274 
idÀs
 [
	`ABSPRI
 (
w
)][
a˘ive
 - 1] = w;

4277 
EV_FREQUENT_CHECK
;

4278 
	}
}

4281 
	$ev_idÀ_°›
 (
EV_P_
 
ev_idÀ
 *
w
Ë
EV_THROW


4283 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4284 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4287 
EV_FREQUENT_CHECK
;

4290 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4292 
idÀs
 [
	`ABSPRI
 (
w
)][
a˘ive
 - 1] = idÀ†[ABSPRI (w)][--
idÀ˙t
 [ABSPRI (w)]];

4293 
	`ev_a˘ive
 (
idÀs
 [
	`ABSPRI
 (
w
)][
a˘ive
 - 1]) =áctive;

4295 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4296 --
idÀÆl
;

4299 
EV_FREQUENT_CHECK
;

4300 
	}
}

4303 #i‡
EV_PREPARE_ENABLE


4305 
	$ev_¥ï¨e_°¨t
 (
EV_P_
 
ev_¥ï¨e
 *
w
Ë
EV_THROW


4307 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4310 
EV_FREQUENT_CHECK
;

4312 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, ++
¥ï¨e˙t
);

4313 
	`¨øy_√edsize
 (
ev_¥ï¨e
 *, 
¥ï¨es
, 
¥ï¨emax
, 
¥ï¨e˙t
, 
EMPTY2
);

4314 
¥ï¨es
 [
¥ï¨e˙t
 - 1] = 
w
;

4316 
EV_FREQUENT_CHECK
;

4317 
	}
}

4320 
	$ev_¥ï¨e_°›
 (
EV_P_
 
ev_¥ï¨e
 *
w
Ë
EV_THROW


4322 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4323 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4326 
EV_FREQUENT_CHECK
;

4329 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4331 
¥ï¨es
 [
a˘ive
 - 1] =Öª∑ª†[--
¥ï¨e˙t
];

4332 
	`ev_a˘ive
 (
¥ï¨es
 [
a˘ive
 - 1]) =áctive;

4335 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4337 
EV_FREQUENT_CHECK
;

4338 
	}
}

4341 #i‡
EV_CHECK_ENABLE


4343 
	$ev_check_°¨t
 (
EV_P_
 
ev_check
 *
w
Ë
EV_THROW


4345 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4348 
EV_FREQUENT_CHECK
;

4350 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, ++
check˙t
);

4351 
	`¨øy_√edsize
 (
ev_check
 *, 
checks
, 
checkmax
, 
check˙t
, 
EMPTY2
);

4352 
checks
 [
check˙t
 - 1] = 
w
;

4354 
EV_FREQUENT_CHECK
;

4355 
	}
}

4358 
	$ev_check_°›
 (
EV_P_
 
ev_check
 *
w
Ë
EV_THROW


4360 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4361 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4364 
EV_FREQUENT_CHECK
;

4367 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4369 
checks
 [
a˘ive
 - 1] = check†[--
check˙t
];

4370 
	`ev_a˘ive
 (
checks
 [
a˘ive
 - 1]) =áctive;

4373 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4375 
EV_FREQUENT_CHECK
;

4376 
	}
}

4379 #i‡
EV_EMBED_ENABLE


4380 
noölöe


4381 
	$ev_embed_swìp
 (
EV_P_
 
ev_embed
 *
w
Ë
EV_THROW


4383 
	`ev_run
 (
w
->
Ÿhî
, 
EVRUN_NOWAIT
);

4384 
	}
}

4387 
	$embed_io_cb
 (
EV_P_
 
ev_io
 *
io
, 
ªvíts
)

4389 
ev_embed
 *
w
 = (ev_embed *)(((*)
io
Ë- 
	`off£tof
 (ev_embed, io));

4391 i‡(
	`ev_cb
 (
w
))

4392 
	`ev_„ed_evít
 (
	`EV_A_
 (
W
)
w
, 
EV_EMBED
);

4394 
	`ev_run
 (
w
->
Ÿhî
, 
EVRUN_NOWAIT
);

4395 
	}
}

4398 
	$embed_¥ï¨e_cb
 (
EV_P_
 
ev_¥ï¨e
 *
¥ï¨e
, 
ªvíts
)

4400 
ev_embed
 *
w
 = (ev_embed *)(((*)
¥ï¨e
Ë- 
	`off£tof
 (ev_embed,Örepare));

4403 
EV_P
 = 
w
->
Ÿhî
;

4405 
fdch™ge˙t
)

4407 
	`fd_ªify
 (
EV_A
);

4408 
	`ev_run
 (
EV_A_
 
EVRUN_NOWAIT
);

4411 
	}
}

4414 
	$embed_f‹k_cb
 (
EV_P_
 
ev_f‹k
 *
f‹k_w
, 
ªvíts
)

4416 
ev_embed
 *
w
 = (ev_embed *)(((*)
f‹k_w
Ë- 
	`off£tof
 (ev_embed, 
f‹k
));

4418 
	`ev_embed_°›
 (
EV_A_
 
w
);

4421 
EV_P
 = 
w
->
Ÿhî
;

4423 
	`ev_lo›_f‹k
 (
EV_A
);

4424 
	`ev_run
 (
EV_A_
 
EVRUN_NOWAIT
);

4427 
	`ev_embed_°¨t
 (
EV_A_
 
w
);

4428 
	}
}

4432 
	$embed_idÀ_cb
 (
EV_P_
 
ev_idÀ
 *
idÀ
, 
ªvíts
)

4434 
	`ev_idÀ_°›
 (
EV_A_
 
idÀ
);

4435 
	}
}

4439 
	$ev_embed_°¨t
 (
EV_P_
 
ev_embed
 *
w
Ë
EV_THROW


4441 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4445 
EV_P
 = 
w
->
Ÿhî
;

4446 
	`as£π
 (("libev:Üo›Åÿbêembedded i†nŸÉmbeddabÀ", 
backíd
 & 
	`ev_embeddabÀ_backíds
 ()));

4447 
	`ev_io_öô
 (&
w
->
io
, 
embed_io_cb
, 
backíd_fd
, 
EV_READ
);

4450 
EV_FREQUENT_CHECK
;

4452 
	`ev_£t_¥i‹ôy
 (&
w
->
io
, 
	`ev_¥i‹ôy
 (w));

4453 
	`ev_io_°¨t
 (
EV_A_
 &
w
->
io
);

4455 
	`ev_¥ï¨e_öô
 (&
w
->
¥ï¨e
, 
embed_¥ï¨e_cb
);

4456 
	`ev_£t_¥i‹ôy
 (&
w
->
¥ï¨e
, 
EV_MINPRI
);

4457 
	`ev_¥ï¨e_°¨t
 (
EV_A_
 &
w
->
¥ï¨e
);

4459 
	`ev_f‹k_öô
 (&
w
->
f‹k
, 
embed_f‹k_cb
);

4460 
	`ev_f‹k_°¨t
 (
EV_A_
 &
w
->
f‹k
);

4464 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, 1);

4466 
EV_FREQUENT_CHECK
;

4467 
	}
}

4470 
	$ev_embed_°›
 (
EV_P_
 
ev_embed
 *
w
Ë
EV_THROW


4472 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4473 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4476 
EV_FREQUENT_CHECK
;

4478 
	`ev_io_°›
 (
EV_A_
 &
w
->
io
);

4479 
	`ev_¥ï¨e_°›
 (
EV_A_
 &
w
->
¥ï¨e
);

4480 
	`ev_f‹k_°›
 (
EV_A_
 &
w
->
f‹k
);

4482 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4484 
EV_FREQUENT_CHECK
;

4485 
	}
}

4488 #i‡
EV_FORK_ENABLE


4490 
	$ev_f‹k_°¨t
 (
EV_P_
 
ev_f‹k
 *
w
Ë
EV_THROW


4492 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4495 
EV_FREQUENT_CHECK
;

4497 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, ++
f‹k˙t
);

4498 
	`¨øy_√edsize
 (
ev_f‹k
 *, 
f‹ks
, 
f‹kmax
, 
f‹k˙t
, 
EMPTY2
);

4499 
f‹ks
 [
f‹k˙t
 - 1] = 
w
;

4501 
EV_FREQUENT_CHECK
;

4502 
	}
}

4505 
	$ev_f‹k_°›
 (
EV_P_
 
ev_f‹k
 *
w
Ë
EV_THROW


4507 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4508 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4511 
EV_FREQUENT_CHECK
;

4514 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4516 
f‹ks
 [
a˘ive
 - 1] = f‹k†[--
f‹k˙t
];

4517 
	`ev_a˘ive
 (
f‹ks
 [
a˘ive
 - 1]) =áctive;

4520 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4522 
EV_FREQUENT_CHECK
;

4523 
	}
}

4526 #i‡
EV_CLEANUP_ENABLE


4528 
	$ev_˛ónup_°¨t
 (
EV_P_
 
ev_˛ónup
 *
w
Ë
EV_THROW


4530 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4533 
EV_FREQUENT_CHECK
;

4535 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, ++
˛ónup˙t
);

4536 
	`¨øy_√edsize
 (
ev_˛ónup
 *, 
˛ónups
, 
˛ónupmax
, 
˛ónup˙t
, 
EMPTY2
);

4537 
˛ónups
 [
˛ónup˙t
 - 1] = 
w
;

4540 
	`ev_uƒef
 (
EV_A
);

4541 
EV_FREQUENT_CHECK
;

4542 
	}
}

4545 
	$ev_˛ónup_°›
 (
EV_P_
 
ev_˛ónup
 *
w
Ë
EV_THROW


4547 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4548 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4551 
EV_FREQUENT_CHECK
;

4552 
	`ev_ªf
 (
EV_A
);

4555 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4557 
˛ónups
 [
a˘ive
 - 1] = cÀ™up†[--
˛ónup˙t
];

4558 
	`ev_a˘ive
 (
˛ónups
 [
a˘ive
 - 1]) =áctive;

4561 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4563 
EV_FREQUENT_CHECK
;

4564 
	}
}

4567 #i‡
EV_ASYNC_ENABLE


4569 
	$ev_async_°¨t
 (
EV_P_
 
ev_async
 *
w
Ë
EV_THROW


4571 i‡(
	`ex≥˘_Ál£
 (
	`ev_is_a˘ive
 (
w
)))

4574 
w
->
£¡
 = 0;

4576 
	`evpùe_öô
 (
EV_A
);

4578 
EV_FREQUENT_CHECK
;

4580 
	`ev_°¨t
 (
	`EV_A_
 (
W
)
w
, ++
async˙t
);

4581 
	`¨øy_√edsize
 (
ev_async
 *, 
asyncs
, 
asyncmax
, 
async˙t
, 
EMPTY2
);

4582 
asyncs
 [
async˙t
 - 1] = 
w
;

4584 
EV_FREQUENT_CHECK
;

4585 
	}
}

4588 
	$ev_async_°›
 (
EV_P_
 
ev_async
 *
w
Ë
EV_THROW


4590 
	`˛ór_≥ndög
 (
	`EV_A_
 (
W
)
w
);

4591 i‡(
	`ex≥˘_Ál£
 (!
	`ev_is_a˘ive
 (
w
)))

4594 
EV_FREQUENT_CHECK
;

4597 
a˘ive
 = 
	`ev_a˘ive
 (
w
);

4599 
asyncs
 [
a˘ive
 - 1] =ásync†[--
async˙t
];

4600 
	`ev_a˘ive
 (
asyncs
 [
a˘ive
 - 1]) =áctive;

4603 
	`ev_°›
 (
	`EV_A_
 (
W
)
w
);

4605 
EV_FREQUENT_CHECK
;

4606 
	}
}

4609 
	$ev_async_£nd
 (
EV_P_
 
ev_async
 *
w
Ë
EV_THROW


4611 
w
->
£¡
 = 1;

4612 
	`evpùe_wrôe
 (
EV_A_
 &
async_≥ndög
);

4613 
	}
}

4618 
	sev_⁄˚


4620 
ev_io
 
	mio
;

4621 
ev_timî
 
	mto
;

4622 (*
	mcb
)(
	mªvíts
, *
	m¨g
);

4623 *
	m¨g
;

4627 
	$⁄˚_cb
 (
EV_P_
 
ev_⁄˚
 *
⁄˚
, 
ªvíts
)

4629 (*
cb
)(
ªvíts
, *
¨g
Ë
⁄˚
->cb;

4630 *
¨g
 = 
⁄˚
->arg;

4632 
	`ev_io_°›
 (
EV_A_
 &
⁄˚
->
io
);

4633 
	`ev_timî_°›
 (
EV_A_
 &
⁄˚
->
to
);

4634 
	`ev_‰ì
 (
⁄˚
);

4636 
	`cb
 (
ªvíts
, 
¨g
);

4637 
	}
}

4640 
	$⁄˚_cb_io
 (
EV_P_
 
ev_io
 *
w
, 
ªvíts
)

4642 
ev_⁄˚
 *
⁄˚
 = (ev_⁄˚ *)(((*)
w
Ë- 
	`off£tof
 (ev_⁄˚, 
io
));

4644 
	`⁄˚_cb
 (
EV_A_
 
⁄˚
, 
ªvíts
 | 
	`ev_˛ór_≥ndög
 (EV_A_ &⁄˚->
to
));

4645 
	}
}

4648 
	$⁄˚_cb_to
 (
EV_P_
 
ev_timî
 *
w
, 
ªvíts
)

4650 
ev_⁄˚
 *
⁄˚
 = (ev_⁄˚ *)(((*)
w
Ë- 
	`off£tof
 (ev_⁄˚, 
to
));

4652 
	`⁄˚_cb
 (
EV_A_
 
⁄˚
, 
ªvíts
 | 
	`ev_˛ór_≥ndög
 (EV_A_ &⁄˚->
io
));

4653 
	}
}

4656 
ev_⁄˚
 (
EV_P_
 
fd
, 
evíts
, 
ev_t°amp
 
timeout
, (*
cb
)(
ªvíts
, *
¨g
), *¨gË
EV_THROW


4658 
ev_⁄˚
 *
⁄˚
 = (ev_⁄˚ *)
	`ev_mÆloc
 ( (ev_once));

4660 i‡(
	`ex≥˘_Ál£
 (!
⁄˚
))

4662 
	`cb
 (
EV_ERROR
 | 
EV_READ
 | 
EV_WRITE
 | 
EV_TIMER
, 
¨g
);

4666 
⁄˚
->
cb
 = cb;

4667 
⁄˚
->
¨g
 =árg;

4669 
	`ev_öô
 (&
⁄˚
->
io
, 
⁄˚_cb_io
);

4670 i‡(
fd
 >= 0)

4672 
	`ev_io_£t
 (&
⁄˚
->
io
, 
fd
, 
evíts
);

4673 
	`ev_io_°¨t
 (
EV_A_
 &
⁄˚
->
io
);

4676 
	`ev_öô
 (&
⁄˚
->
to
, 
⁄˚_cb_to
);

4677 i‡(
timeout
 >= 0.)

4679 
	`ev_timî_£t
 (&
⁄˚
->
to
, 
timeout
, 0.);

4680 
	`ev_timî_°¨t
 (
EV_A_
 &
⁄˚
->
to
);

4682 
	}
}

4686 #i‡
EV_WALK_ENABLE


4687 
ecb_cﬁd


4688 
ev_wÆk
 (
EV_P_
 
ty≥s
, (*
cb
)(EV_P_ 
ty≥
, *
w
)Ë
EV_THROW


4690 
i
, 
j
;

4691 
ev_w©chî_li°
 *
wl
, *
wn
;

4693 i‡(
ty≥s
 & (
EV_IO
 | 
EV_EMBED
))

4694 
i
 = 0; i < 
™fdmax
; ++i)

4695 
wl
 = 
™fds
 [
i
].
hód
; wl; )

4697 
wn
 = 
wl
->
√xt
;

4699 #i‡
EV_EMBED_ENABLE


4700 i‡(
	`ev_cb
 ((
ev_io
 *)
wl
Ë=
embed_io_cb
)

4702 i‡(
ty≥s
 & 
EV_EMBED
)

4703 
	`cb
 (
EV_A_
 
EV_EMBED
, ((*)
wl
Ë- 
	`off£tof
 (
ev_embed
, 
io
));

4707 #i‡
EV_USE_INOTIFY


4708 i‡(
	`ev_cb
 ((
ev_io
 *)
wl
Ë=
öfy_cb
)

4712 i‡((
ev_io
 *)
wl
 !&
pùe_w
)

4713 i‡(
ty≥s
 & 
EV_IO
)

4714 
	`cb
 (
EV_A_
 
EV_IO
, 
wl
);

4716 
wl
 = 
wn
;

4719 i‡(
ty≥s
 & (
EV_TIMER
 | 
EV_STAT
))

4720 
i
 = 
timî˙t
 + 
HEAP0
; i-- > HEAP0; )

4721 #i‡
EV_STAT_ENABLE


4723 i‡(
	`ev_cb
 ((
ev_timî
 *)
	`ANHE_w
 (
timîs
 [
i
])Ë=
°©_timî_cb
)

4725 i‡(
ty≥s
 & 
EV_STAT
)

4726 
	`cb
 (
EV_A_
 
EV_STAT
, ((*)
	`ANHE_w
 (
timîs
 [
i
])Ë- 
	`off£tof
 (
ev_°©
, 
timî
));

4730 i‡(
ty≥s
 & 
EV_TIMER
)

4731 
	`cb
 (
EV_A_
 
EV_TIMER
, 
	`ANHE_w
 (
timîs
 [
i
]));

4733 #i‡
EV_PERIODIC_ENABLE


4734 i‡(
ty≥s
 & 
EV_PERIODIC
)

4735 
i
 = 
≥riodic˙t
 + 
HEAP0
; i-- > HEAP0; )

4736 
	`cb
 (
EV_A_
 
EV_PERIODIC
, 
	`ANHE_w
 (
≥riodics
 [
i
]));

4739 #i‡
EV_IDLE_ENABLE


4740 i‡(
ty≥s
 & 
EV_IDLE
)

4741 
j
 = 
NUMPRI
; j--; )

4742 
i
 = 
idÀ˙t
 [
j
]; i--; )

4743 
	`cb
 (
EV_A_
 
EV_IDLE
, 
idÀs
 [
j
][
i
]);

4746 #i‡
EV_FORK_ENABLE


4747 i‡(
ty≥s
 & 
EV_FORK
)

4748 
i
 = 
f‹k˙t
; i--; )

4749 i‡(
	`ev_cb
 (
f‹ks
 [
i
]Ë!
embed_f‹k_cb
)

4750 
	`cb
 (
EV_A_
 
EV_FORK
, 
f‹ks
 [
i
]);

4753 #i‡
EV_ASYNC_ENABLE


4754 i‡(
ty≥s
 & 
EV_ASYNC
)

4755 
i
 = 
async˙t
; i--; )

4756 
	`cb
 (
EV_A_
 
EV_ASYNC
, 
asyncs
 [
i
]);

4759 #i‡
EV_PREPARE_ENABLE


4760 i‡(
ty≥s
 & 
EV_PREPARE
)

4761 
i
 = 
¥ï¨e˙t
; i--; )

4762 #i‡
EV_EMBED_ENABLE


4763 i‡(
	`ev_cb
 (
¥ï¨es
 [
i
]Ë!
embed_¥ï¨e_cb
)

4765 
	`cb
 (
EV_A_
 
EV_PREPARE
, 
¥ï¨es
 [
i
]);

4768 #i‡
EV_CHECK_ENABLE


4769 i‡(
ty≥s
 & 
EV_CHECK
)

4770 
i
 = 
check˙t
; i--; )

4771 
	`cb
 (
EV_A_
 
EV_CHECK
, 
checks
 [
i
]);

4774 #i‡
EV_SIGNAL_ENABLE


4775 i‡(
ty≥s
 & 
EV_SIGNAL
)

4776 
i
 = 0; i < 
EV_NSIG
 - 1; ++i)

4777 
wl
 = 
sig«ls
 [
i
].
hód
; wl; )

4779 
wn
 = 
wl
->
√xt
;

4780 
	`cb
 (
EV_A_
 
EV_SIGNAL
, 
wl
);

4781 
wl
 = 
wn
;

4785 #i‡
EV_CHILD_ENABLE


4786 i‡(
ty≥s
 & 
EV_CHILD
)

4787 
i
 = (
EV_PID_HASHSIZE
); i--; )

4788 
wl
 = 
chûds
 [
i
]; wl; )

4790 
wn
 = 
wl
->
√xt
;

4791 
	`cb
 (
EV_A_
 
EV_CHILD
, 
wl
);

4792 
wl
 = 
wn
;

4797 
	}
}

4800 #i‡
EV_MULTIPLICITY


4801 
	~"ev_wøp.h
"

	@/home/kartik/nwe/libev-4.15/ev.h

40 #i‚de‡
EV_H_


41 
	#EV_H_


	)

43 #ifde‡
__˝lu•lus


44 
	#EV_CPP
(
x
Ë
	)
x

46 
	#EV_CPP
(
x
)

	)

49 
	#EV_THROW
 
	`EV_CPP
(
	`throw
())

	)

51 
EV_CPP
("C" {)

56 #i‚de‡
EV_COMPAT3


57 
	#EV_COMPAT3
 1

	)

60 #i‚de‡
EV_FEATURES


61 #i‡
deföed
 
__OPTIMIZE_SIZE__


62 
	#EV_FEATURES
 0x7c

	)

64 
	#EV_FEATURES
 0x7f

	)

68 
	#EV_FEATURE_CODE
 ((
EV_FEATURES
Ë& 1)

	)

69 
	#EV_FEATURE_DATA
 ((
EV_FEATURES
Ë& 2)

	)

70 
	#EV_FEATURE_CONFIG
 ((
EV_FEATURES
Ë& 4)

	)

71 
	#EV_FEATURE_API
 ((
EV_FEATURES
Ë& 8)

	)

72 
	#EV_FEATURE_WATCHERS
 ((
EV_FEATURES
Ë& 16)

	)

73 
	#EV_FEATURE_BACKENDS
 ((
EV_FEATURES
Ë& 32)

	)

74 
	#EV_FEATURE_OS
 ((
EV_FEATURES
Ë& 64)

	)

77 #i‚de‡
EV_MINPRI


78 
	#EV_MINPRI
 (
EV_FEATURE_CONFIG
 ? -2 : 0)

	)

80 #i‚de‡
EV_MAXPRI


81 
	#EV_MAXPRI
 (
EV_FEATURE_CONFIG
 ? +2 : 0)

	)

84 #i‚de‡
EV_MULTIPLICITY


85 
	#EV_MULTIPLICITY
 
EV_FEATURE_CONFIG


	)

88 #i‚de‡
EV_PERIODIC_ENABLE


89 
	#EV_PERIODIC_ENABLE
 
EV_FEATURE_WATCHERS


	)

92 #i‚de‡
EV_STAT_ENABLE


93 
	#EV_STAT_ENABLE
 
EV_FEATURE_WATCHERS


	)

96 #i‚de‡
EV_PREPARE_ENABLE


97 
	#EV_PREPARE_ENABLE
 
EV_FEATURE_WATCHERS


	)

100 #i‚de‡
EV_CHECK_ENABLE


101 
	#EV_CHECK_ENABLE
 
EV_FEATURE_WATCHERS


	)

104 #i‚de‡
EV_IDLE_ENABLE


105 
	#EV_IDLE_ENABLE
 
EV_FEATURE_WATCHERS


	)

108 #i‚de‡
EV_FORK_ENABLE


109 
	#EV_FORK_ENABLE
 
EV_FEATURE_WATCHERS


	)

112 #i‚de‡
EV_CLEANUP_ENABLE


113 
	#EV_CLEANUP_ENABLE
 
EV_FEATURE_WATCHERS


	)

116 #i‚de‡
EV_SIGNAL_ENABLE


117 
	#EV_SIGNAL_ENABLE
 
EV_FEATURE_WATCHERS


	)

120 #i‚de‡
EV_CHILD_ENABLE


121 #ifde‡
_WIN32


122 
	#EV_CHILD_ENABLE
 0

	)

124 
	#EV_CHILD_ENABLE
 
EV_FEATURE_WATCHERS


	)

128 #i‚de‡
EV_ASYNC_ENABLE


129 
	#EV_ASYNC_ENABLE
 
EV_FEATURE_WATCHERS


	)

132 #i‚de‡
EV_EMBED_ENABLE


133 
	#EV_EMBED_ENABLE
 
EV_FEATURE_WATCHERS


	)

136 #i‚de‡
EV_WALK_ENABLE


137 
	#EV_WALK_ENABLE
 0

	)

142 #i‡
EV_CHILD_ENABLE
 && !
EV_SIGNAL_ENABLE


143 #unde‡
EV_SIGNAL_ENABLE


144 
	#EV_SIGNAL_ENABLE
 1

	)

149 
	tev_t°amp
;

151 #i‚de‡
EV_ATOMIC_T


152 
	~<sig«l.h
>

153 
	#EV_ATOMIC_T
 
sig_©omic_t
 vﬁ©ûe

	)

156 #i‡
EV_STAT_ENABLE


157 #ifde‡
_WIN32


158 
	~<time.h
>

159 
	~<sys/ty≥s.h
>

161 
	~<sys/°©.h
>

165 #i‡
EV_MULTIPLICITY


166 
ev_lo›
;

167 
	#EV_P
 
ev_lo›
 *
lo›


	)

168 
	#EV_P_
 
EV_P
,

	)

169 
	#EV_A
 
lo›


	)

170 
	#EV_A_
 
EV_A
,

	)

171 
	#EV_DEFAULT_UC
 
	`ev_deÁu…_lo›_uc_
 (Ë

	)

172 
	#EV_DEFAULT_UC_
 
EV_DEFAULT_UC
,

	)

173 
	#EV_DEFAULT
 
	`ev_deÁu…_lo›
 (0Ë

	)

174 
	#EV_DEFAULT_
 
EV_DEFAULT
,

	)

176 
	#EV_P
 

	)

177 
	#EV_P_


	)

178 
	#EV_A


	)

179 
	#EV_A_


	)

180 
	#EV_DEFAULT


	)

181 
	#EV_DEFAULT_


	)

182 
	#EV_DEFAULT_UC


	)

183 
	#EV_DEFAULT_UC_


	)

184 #unde‡
EV_EMBED_ENABLE


188 #i‡
__STDC_VERSION__
 >199901L || 
__GNUC__
 >= 3

189 
	#EV_INLINE
 
ölöe


	)

191 
	#EV_INLINE
 

	)

194 #ifde‡
EV_API_STATIC


195 
	#EV_API_DECL
 

	)

197 
	#EV_API_DECL
 

	)

201 #i‚de‡
EV_PROTOTYPES


202 
	#EV_PROTOTYPES
 1

	)

207 
	#EV_VERSION_MAJOR
 4

	)

208 
	#EV_VERSION_MINOR
 15

	)

212 
EV_UNDEF
 = ()0xFFFFFFFF,

213 
EV_NONE
 = 0x00,

214 
EV_READ
 = 0x01,

215 
EV_WRITE
 = 0x02,

216 
EV__IOFDSET
 = 0x80,

217 
EV_IO
 = 
EV_READ
,

218 
EV_TIMER
 = 0x00000100,

219 #i‡
EV_COMPAT3


220 
EV_TIMEOUT
 = 
EV_TIMER
,

222 
EV_PERIODIC
 = 0x00000200,

223 
EV_SIGNAL
 = 0x00000400,

224 
EV_CHILD
 = 0x00000800,

225 
EV_STAT
 = 0x00001000,

226 
EV_IDLE
 = 0x00002000,

227 
EV_PREPARE
 = 0x00004000,

228 
EV_CHECK
 = 0x00008000,

229 
EV_EMBED
 = 0x00010000,

230 
EV_FORK
 = 0x00020000,

231 
EV_CLEANUP
 = 0x00040000,

232 
EV_ASYNC
 = 0x00080000,

233 
EV_CUSTOM
 = 0x01000000,

234 
EV_ERROR
 = ()0x80000000

238 #i‚de‡
EV_COMMON


239 
	#EV_COMMON
 *
d©a
;

	)

242 #i‚de‡
EV_CB_DECLARE


243 
	#EV_CB_DECLARE
(
ty≥
Ë(*
cb
)(
EV_P_
 ty≥ *
w
, 
ªvíts
);

	)

245 #i‚de‡
EV_CB_INVOKE


246 
	#EV_CB_INVOKE
(
w©chî
,
ªvíts
Ë(w©chî)->
	`cb
 (
	`EV_A_
 (w©chî), (ªvíts))

	)

250 
	#EV_CB
(
ty≥
,
«me
Ë
	`«me
 (
EV_P_
 
ev_
 ##Åy≥ *
w
, 
ªvíts
)

	)

269 #i‡
EV_MINPRI
 =
EV_MAXPRI


270 
	#EV_DECL_PRIORITY


	)

271 #ñi‡!
deföed
 (
EV_DECL_PRIORITY
)

272 
	#EV_DECL_PRIORITY
 
¥i‹ôy
;

	)

276 
	#EV_WATCHER
(
ty≥
) \

277 
a˘ive
; \

278 
≥ndög
; \

279 
EV_DECL_PRIORITY
 \

280 
EV_COMMON
 \

281 
	`EV_CB_DECLARE
 (
ty≥
Ë

	)

283 
	#EV_WATCHER_LIST
(
ty≥
) \

284 
	`EV_WATCHER
 (
ty≥
) \

285 
ev_w©chî_li°
 *
√xt
;

	)

287 
	#EV_WATCHER_TIME
(
ty≥
) \

288 
	`EV_WATCHER
 (
ty≥
) \

289 
ev_t°amp
 
©
;

	)

292 
	sev_w©chî


294 
EV_WATCHER
 (
ev_w©chî
)

295 } 
	tev_w©chî
;

298 
	sev_w©chî_li°


300 
EV_WATCHER_LIST
 (
ev_w©chî_li°
)

301 } 
	tev_w©chî_li°
;

304 
	sev_w©chî_time


306 
EV_WATCHER_TIME
 (
ev_w©chî_time
)

307 } 
	tev_w©chî_time
;

311 
	sev_io


313 
EV_WATCHER_LIST
 (
ev_io
)

315 
	gfd
;

316 
	gevíts
;

317 } 
	tev_io
;

321 
	sev_timî


323 
EV_WATCHER_TIME
 (
ev_timî
)

325 
ev_t°amp
 
	gª≥©
;

326 } 
	tev_timî
;

330 
	sev_≥riodic


332 
EV_WATCHER_TIME
 (
ev_≥riodic
)

334 
ev_t°amp
 
	goff£t
;

335 
ev_t°amp
 
	göãrvÆ
;

336 
ev_t°amp
 (*
ªscheduÀ_cb
)(
ev_≥riodic
 *
	gw
,Év_t°am∞
	gnow
Ë
	gEV_THROW
;

337 } 
	tev_≥riodic
;

341 
	sev_sig«l


343 
EV_WATCHER_LIST
 (
ev_sig«l
)

345 
	gsignum
;

346 } 
	tev_sig«l
;

351 
	sev_chûd


353 
EV_WATCHER_LIST
 (
ev_chûd
)

355 
	gÊags
;

356 
	gpid
;

357 
	gΩid
;

358 
	gr°©us
;

359 } 
	tev_chûd
;

361 #i‡
EV_STAT_ENABLE


363 #ifde‡
_WIN32


364 
_°©i64
 
	tev_°©d©a
;

366 
°©
 
	tev_°©d©a
;

371 
	sev_°©


373 
EV_WATCHER_LIST
 (
ev_°©
)

375 
ev_timî
 
	gtimî
;

376 
ev_t°amp
 
	göãrvÆ
;

377 c⁄° *
	g∑th
;

378 
ev_°©d©a
 
	g¥ev
;

379 
ev_°©d©a
 
	g©å
;

381 
	gwd
;

382 } 
	tev_°©
;

385 #i‡
EV_IDLE_ENABLE


388 
	sev_idÀ


390 
EV_WATCHER
 (
ev_idÀ
)

391 } 
	tev_idÀ
;

397 
	sev_¥ï¨e


399 
EV_WATCHER
 (
ev_¥ï¨e
)

400 } 
	tev_¥ï¨e
;

404 
	sev_check


406 
EV_WATCHER
 (
ev_check
)

407 } 
	tev_check
;

409 #i‡
EV_FORK_ENABLE


412 
	sev_f‹k


414 
EV_WATCHER
 (
ev_f‹k
)

415 } 
	tev_f‹k
;

418 #i‡
EV_CLEANUP_ENABLE


421 
	sev_˛ónup


423 
EV_WATCHER
 (
ev_˛ónup
)

424 } 
	tev_˛ónup
;

427 #i‡
EV_EMBED_ENABLE


430 
	sev_embed


432 
EV_WATCHER
 (
ev_embed
)

434 
ev_lo›
 *
	gŸhî
;

435 
ev_io
 
	gio
;

436 
ev_¥ï¨e
 
	g¥ï¨e
;

437 
ev_check
 
	gcheck
;

438 
ev_timî
 
	gtimî
;

439 
ev_≥riodic
 
	g≥riodic
;

440 
ev_idÀ
 
	gidÀ
;

441 
ev_f‹k
 
	gf‹k
;

442 #i‡
EV_CLEANUP_ENABLE


443 
ev_˛ónup
 
	g˛ónup
;

445 } 
	tev_embed
;

448 #i‡
EV_ASYNC_ENABLE


451 
	sev_async


453 
EV_WATCHER
 (
ev_async
)

455 
EV_ATOMIC_T
 
	g£¡
;

456 } 
	tev_async
;

458 
	#ev_async_≥ndög
(
w
Ë(+(w)->
£¡
)

	)

462 
	uev_™y_w©chî


464 
ev_w©chî
 
	gw
;

465 
ev_w©chî_li°
 
	gwl
;

467 
ev_io
 
	gio
;

468 
ev_timî
 
	gtimî
;

469 
ev_≥riodic
 
	g≥riodic
;

470 
ev_sig«l
 
	gsig«l
;

471 
ev_chûd
 
	gchûd
;

472 #i‡
EV_STAT_ENABLE


473 
ev_°©
 
	g°©
;

475 #i‡
EV_IDLE_ENABLE


476 
ev_idÀ
 
	gidÀ
;

478 
ev_¥ï¨e
 
	g¥ï¨e
;

479 
ev_check
 
	gcheck
;

480 #i‡
EV_FORK_ENABLE


481 
ev_f‹k
 
	gf‹k
;

483 #i‡
EV_CLEANUP_ENABLE


484 
ev_˛ónup
 
	g˛ónup
;

486 #i‡
EV_EMBED_ENABLE


487 
ev_embed
 
	gembed
;

489 #i‡
EV_ASYNC_ENABLE


490 
ev_async
 
	gasync
;

497 
	gEVFLAG_AUTO
 = 0x00000000U,

499 
	gEVFLAG_NOENV
 = 0x01000000U,

500 
	gEVFLAG_FORKCHECK
 = 0x02000000U,

502 
	gEVFLAG_NOINOTIFY
 = 0x00100000U,

503 #i‡
EV_COMPAT3


504 
	gEVFLAG_NOSIGFD
 = 0,

506 
	gEVFLAG_SIGNALFD
 = 0x00200000U,

507 
	gEVFLAG_NOSIGMASK
 = 0x00400000U

512 
	gEVBACKEND_SELECT
 = 0x00000001U,

513 
	gEVBACKEND_POLL
 = 0x00000002U,

514 
	gEVBACKEND_EPOLL
 = 0x00000004U,

515 
	gEVBACKEND_KQUEUE
 = 0x00000008U,

516 
	gEVBACKEND_DEVPOLL
 = 0x00000010U,

517 
	gEVBACKEND_PORT
 = 0x00000020U,

518 
	gEVBACKEND_ALL
 = 0x0000003FU,

519 
	gEVBACKEND_MASK
 = 0x0000FFFFU

522 #i‡
EV_PROTOTYPES


523 
EV_API_DECL
 
ev_vîsi⁄_maj‹
 (Ë
	gEV_THROW
;

524 
EV_API_DECL
 
ev_vîsi⁄_mö‹
 (Ë
	gEV_THROW
;

526 
EV_API_DECL
 
ev_suµ‹ãd_backíds
 (Ë
	gEV_THROW
;

527 
EV_API_DECL
 
ev_ªcommíded_backíds
 (Ë
	gEV_THROW
;

528 
EV_API_DECL
 
ev_embeddabÀ_backíds
 (Ë
	gEV_THROW
;

530 
EV_API_DECL
 
ev_t°amp
 
ev_time
 (Ë
	gEV_THROW
;

531 
EV_API_DECL
 
ev_¶ìp
 (
ev_t°amp
 
dñay
Ë
	gEV_THROW
;

539 
EV_API_DECL
 
ev_£t_Æloˇt‹
 (*(*
cb
)(*
±r
, 
size
Ë
EV_THROW
Ë
	gEV_THROW
;

545 
EV_API_DECL
 
ev_£t_sy£º_cb
 ((*
cb
)(c⁄° *
msg
Ë
EV_THROW
Ë
	gEV_THROW
;

547 #i‡
EV_MULTIPLICITY


551 
EV_API_DECL
 
ev_lo›
 *
ev_deÁu…_lo›
 (
Êags
 
EV_CPP
 (0)Ë
EV_THROW
;

553 #ifde‡
EV_API_STATIC


554 
EV_API_DECL
 
ev_lo›
 *
	gev_deÁu…_lo›_±r
;

557 
EV_INLINE
 
ev_lo›
 *

558 
ev_deÁu…_lo›_uc_
 (Ë
	gEV_THROW


560 
ev_lo›
 *
ev_deÁu…_lo›_±r
;

562  
	gev_deÁu…_lo›_±r
;

565 
EV_INLINE
 

566 
ev_is_deÁu…_lo›
 (
EV_P
Ë
	gEV_THROW


568  
	gEV_A
 =
EV_DEFAULT_UC
;

572 
EV_API_DECL
 
ev_lo›
 *
ev_lo›_√w
 (
Êags
 
EV_CPP
 (0)Ë
EV_THROW
;

574 
EV_API_DECL
 
ev_t°amp
 
ev_now
 (
EV_P
Ë
	gEV_THROW
;

578 
EV_API_DECL
 
ev_deÁu…_lo›
 (
Êags
 
EV_CPP
 (0)Ë
EV_THROW
;

580 
EV_API_DECL
 
ev_t°amp
 
	gev_π_now
;

582 
EV_INLINE
 
ev_t°amp


583 
ev_now
 (Ë
	gEV_THROW


585  
	gev_π_now
;

589 
EV_INLINE
 

590 
ev_is_deÁu…_lo›
 (Ë
	gEV_THROW


598 
EV_API_DECL
 
ev_lo›_de°roy
 (
EV_P
);

604 
EV_API_DECL
 
ev_lo›_f‹k
 (
EV_P
Ë
	gEV_THROW
;

606 
EV_API_DECL
 
ev_backíd
 (
EV_P
Ë
	gEV_THROW
;

608 
EV_API_DECL
 
ev_now_upd©e
 (
EV_P
Ë
	gEV_THROW
;

610 #i‡
EV_WALK_ENABLE


614 
EV_API_DECL
 
ev_wÆk
 (
EV_P_
 
ty≥s
, (*
cb
)(EV_P_ 
ty≥
, *
w
)Ë
	gEV_THROW
;

621 
	gEVRUN_NOWAIT
 = 1,

622 
	gEVRUN_ONCE
 = 2

627 
	gEVBREAK_CANCEL
 = 0,

628 
	gEVBREAK_ONE
 = 1,

629 
	gEVBREAK_ALL
 = 2

632 #i‡
EV_PROTOTYPES


633 
EV_API_DECL
 
ev_run
 (
EV_P_
 
Êags
 
EV_CPP
 (= 0));

634 
EV_API_DECL
 
ev_bªak
 (
EV_P_
 
how
 
EV_CPP
 (
EVBREAK_ONE
)Ë
EV_THROW
;

641 
EV_API_DECL
 
ev_ªf
 (
EV_P
Ë
	gEV_THROW
;

642 
EV_API_DECL
 
ev_uƒef
 (
EV_P
Ë
	gEV_THROW
;

648 
EV_API_DECL
 
ev_⁄˚
 (
EV_P_
 
fd
, 
evíts
, 
ev_t°amp
 
timeout
, (*
cb
)(
ªvíts
, *
¨g
), *¨gË
	gEV_THROW
;

650 #i‡
EV_FEATURE_API


651 
EV_API_DECL
 
ev_ôî©i⁄
 (
EV_P
Ë
	gEV_THROW
;

652 
EV_API_DECL
 
ev_dïth
 (
EV_P
Ë
	gEV_THROW
;

653 
EV_API_DECL
 
ev_vîify
 (
EV_P
Ë
	gEV_THROW
;

655 
EV_API_DECL
 
ev_£t_io_cﬁÀ˘_öãrvÆ
 (
EV_P_
 
ev_t°amp
 
öãrvÆ
Ë
	gEV_THROW
;

656 
EV_API_DECL
 
ev_£t_timeout_cﬁÀ˘_öãrvÆ
 (
EV_P_
 
ev_t°amp
 
öãrvÆ
Ë
	gEV_THROW
;

659 
EV_API_DECL
 
ev_£t_u£rd©a
 (
EV_P_
 *
d©a
Ë
	gEV_THROW
;

660 
EV_API_DECL
 *
ev_u£rd©a
 (
EV_P
Ë
	gEV_THROW
;

661 
EV_API_DECL
 
ev_£t_övoke_≥ndög_cb
 (
EV_P_
 (*
övoke_≥ndög_cb
)(
EV_P
)Ë
	gEV_THROW
;

662 
EV_API_DECL
 
ev_£t_lo›_ªÀa£_cb
 (
EV_P_
 (*
ªÀa£
)(
EV_P
), (*
acquúe
)(EV_PË
EV_THROW
Ë
	gEV_THROW
;

664 
EV_API_DECL
 
ev_≥ndög_cou¡
 (
EV_P
Ë
	gEV_THROW
;

665 
EV_API_DECL
 
ev_övoke_≥ndög
 (
EV_P
);

670 
EV_API_DECL
 
ev_su•íd
 (
EV_P
Ë
	gEV_THROW
;

671 
EV_API_DECL
 
ev_ªsume
 (
EV_P
Ë
	gEV_THROW
;

678 
	#ev_öô
(
ev
,
cb_
) do { \

679 ((
ev_w©chî
 *)(*)(
ev
))->
a˘ive
 = \

680 ((
ev_w©chî
 *)(*)(
ev
))->
≥ndög
 = 0; \

681 
	`ev_£t_¥i‹ôy
 ((
ev
), 0); \

682 
	`ev_£t_cb
 ((
ev
), 
cb_
); \

683 } 0)

	)

685 
	#ev_io_£t
(
ev
,
fd_
,
evíts_
Ëdÿ{ (ev)->
fd
 = (fd_); (ev)->
evíts
 = (evíts_Ë| 
EV__IOFDSET
; } 0)

	)

686 
	#ev_timî_£t
(
ev
,
a·î_
,
ª≥©_
Ëdÿ{ ((
ev_w©chî_time
 *)”v))->
©
 = (a·î_); (ev)->
ª≥©
 = (ª≥©_); } 0)

	)

687 
	#ev_≥riodic_£t
(
ev
,
ofs_
,
ivÆ_
,
rcb_
Ëdÿ{ (ev)->
off£t
 = (ofs_); (ev)->
öãrvÆ
 = (ivÆ_); (ev)->
ªscheduÀ_cb
 = (rcb_); } 0)

	)

688 
	#ev_sig«l_£t
(
ev
,
signum_
Ëdÿ{ (ev)->
signum
 = (signum_); } 0)

	)

689 
	#ev_chûd_£t
(
ev
,
pid_
,
åa˚_
Ëdÿ{ (ev)->
pid
 = (pid_); (ev)->
Êags
 = !!—ø˚_); } 0)

	)

690 
	#ev_°©_£t
(
ev
,
∑th_
,
öãrvÆ_
Ëdÿ{ (ev)->
∑th
 = (∑th_); (ev)->
öãrvÆ
 = (öãrvÆ_); (ev)->
wd
 = -2; } 0)

	)

691 
	#ev_idÀ_£t
(
ev
Ë

	)

692 
	#ev_¥ï¨e_£t
(
ev
Ë

	)

693 
	#ev_check_£t
(
ev
Ë

	)

694 
	#ev_embed_£t
(
ev
,
Ÿhî_
Ëdÿ{ (ev)->
Ÿhî
 = (Ÿhî_); } 0)

	)

695 
	#ev_f‹k_£t
(
ev
Ë

	)

696 
	#ev_˛ónup_£t
(
ev
Ë

	)

697 
	#ev_async_£t
(
ev
Ë

	)

699 
	#ev_io_öô
(
ev
,
cb
,
fd
,
evíts
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_io_£t
 (”v),(fd),”víts)); } 0)

	)

700 
	#ev_timî_öô
(
ev
,
cb
,
a·î
,
ª≥©
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_timî_£t
 (”v),◊·î),‘ïót)); } 0)

	)

701 
	#ev_≥riodic_öô
(
ev
,
cb
,
ofs
,
ivÆ
,
rcb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_≥riodic_£t
 (”v),(ofs),(ivÆ),‘cb)); } 0)

	)

702 
	#ev_sig«l_öô
(
ev
,
cb
,
signum
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_sig«l_£t
 (”v), (signum)); } 0)

	)

703 
	#ev_chûd_öô
(
ev
,
cb
,
pid
,
åa˚
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_chûd_£t
 (”v),’id),—ø˚)); } 0)

	)

704 
	#ev_°©_öô
(
ev
,
cb
,
∑th
,
öãrvÆ
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_°©_£t
 (”v),’©h),(öãrvÆ)); } 0)

	)

705 
	#ev_idÀ_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_idÀ_£t
 (”v)); } 0)

	)

706 
	#ev_¥ï¨e_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_¥ï¨e_£t
 (”v)); } 0)

	)

707 
	#ev_check_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_check_£t
 (”v)); } 0)

	)

708 
	#ev_embed_öô
(
ev
,
cb
,
Ÿhî
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_embed_£t
 (”v),(Ÿhî)); } 0)

	)

709 
	#ev_f‹k_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_f‹k_£t
 (”v)); } 0)

	)

710 
	#ev_˛ónup_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_˛ónup_£t
 (”v)); } 0)

	)

711 
	#ev_async_öô
(
ev
,
cb
Ëdÿ{ 
	`ev_öô
 (”v), (cb)); 
	`ev_async_£t
 (”v)); } 0)

	)

713 
	#ev_is_≥ndög
(
ev
Ë(0 + ((
ev_w©chî
 *)(*)”v))->
≥ndög
Ë

	)

714 
	#ev_is_a˘ive
(
ev
Ë(0 + ((
ev_w©chî
 *)(*)”v))->
a˘ive
Ë

	)

716 
	#ev_cb
(
ev
Ë”v)->
cb


	)

718 #i‡
EV_MINPRI
 =
EV_MAXPRI


719 
	#ev_¥i‹ôy
(
ev
Ë(”v), 
EV_MINPRI
)

	)

720 
	#ev_£t_¥i‹ôy
(
ev
,
¥i
Ë(”v), (¥i))

	)

722 
	#ev_¥i‹ôy
(
ev
Ë(+(((
ev_w©chî
 *)(*)”v))->
¥i‹ôy
))

	)

723 
	#ev_£t_¥i‹ôy
(
ev
,
¥i
Ë–(
ev_w©chî
 *)(*)”v))->
¥i‹ôy
 = (¥i)

	)

726 
	#ev_≥riodic_©
(
ev
Ë(+((
ev_w©chî_time
 *)”v))->
©
)

	)

728 #i‚de‡
ev_£t_cb


729 
	#ev_£t_cb
(
ev
,
cb_
Ë
	`ev_cb
 (evË(cb_)

	)

734 #i‡
EV_PROTOTYPES


738 
EV_API_DECL
 
ev_„ed_evít
 (
EV_P_
 *
w
, 
ªvíts
Ë
	gEV_THROW
;

739 
EV_API_DECL
 
ev_„ed_fd_evít
 (
EV_P_
 
fd
, 
ªvíts
Ë
	gEV_THROW
;

740 #i‡
EV_SIGNAL_ENABLE


741 
EV_API_DECL
 
ev_„ed_sig«l
 (
signum
Ë
	gEV_THROW
;

742 
EV_API_DECL
 
ev_„ed_sig«l_evít
 (
EV_P_
 
signum
Ë
	gEV_THROW
;

744 
EV_API_DECL
 
ev_övoke
 (
EV_P_
 *
w
, 
ªvíts
);

745 
EV_API_DECL
 
ev_˛ór_≥ndög
 (
EV_P_
 *
w
Ë
	gEV_THROW
;

747 
EV_API_DECL
 
ev_io_°¨t
 (
EV_P_
 
ev_io
 *
w
Ë
	gEV_THROW
;

748 
EV_API_DECL
 
ev_io_°›
 (
EV_P_
 
ev_io
 *
w
Ë
	gEV_THROW
;

750 
EV_API_DECL
 
ev_timî_°¨t
 (
EV_P_
 
ev_timî
 *
w
Ë
	gEV_THROW
;

751 
EV_API_DECL
 
ev_timî_°›
 (
EV_P_
 
ev_timî
 *
w
Ë
	gEV_THROW
;

753 
EV_API_DECL
 
ev_timî_agaö
 (
EV_P_
 
ev_timî
 *
w
Ë
	gEV_THROW
;

755 
EV_API_DECL
 
ev_t°amp
 
ev_timî_ªmaöög
 (
EV_P_
 
ev_timî
 *
w
Ë
	gEV_THROW
;

757 #i‡
EV_PERIODIC_ENABLE


758 
EV_API_DECL
 
ev_≥riodic_°¨t
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
	gEV_THROW
;

759 
EV_API_DECL
 
ev_≥riodic_°›
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
	gEV_THROW
;

760 
EV_API_DECL
 
ev_≥riodic_agaö
 (
EV_P_
 
ev_≥riodic
 *
w
Ë
	gEV_THROW
;

764 #i‡
EV_SIGNAL_ENABLE


765 
EV_API_DECL
 
ev_sig«l_°¨t
 (
EV_P_
 
ev_sig«l
 *
w
Ë
	gEV_THROW
;

766 
EV_API_DECL
 
ev_sig«l_°›
 (
EV_P_
 
ev_sig«l
 *
w
Ë
	gEV_THROW
;

770 #i‡
EV_CHILD_ENABLE


771 
EV_API_DECL
 
ev_chûd_°¨t
 (
EV_P_
 
ev_chûd
 *
w
Ë
	gEV_THROW
;

772 
EV_API_DECL
 
ev_chûd_°›
 (
EV_P_
 
ev_chûd
 *
w
Ë
	gEV_THROW
;

775 #i‡
EV_STAT_ENABLE


776 
EV_API_DECL
 
ev_°©_°¨t
 (
EV_P_
 
ev_°©
 *
w
Ë
	gEV_THROW
;

777 
EV_API_DECL
 
ev_°©_°›
 (
EV_P_
 
ev_°©
 *
w
Ë
	gEV_THROW
;

778 
EV_API_DECL
 
ev_°©_°©
 (
EV_P_
 
ev_°©
 *
w
Ë
	gEV_THROW
;

781 #i‡
EV_IDLE_ENABLE


782 
EV_API_DECL
 
ev_idÀ_°¨t
 (
EV_P_
 
ev_idÀ
 *
w
Ë
	gEV_THROW
;

783 
EV_API_DECL
 
ev_idÀ_°›
 (
EV_P_
 
ev_idÀ
 *
w
Ë
	gEV_THROW
;

786 #i‡
EV_PREPARE_ENABLE


787 
EV_API_DECL
 
ev_¥ï¨e_°¨t
 (
EV_P_
 
ev_¥ï¨e
 *
w
Ë
	gEV_THROW
;

788 
EV_API_DECL
 
ev_¥ï¨e_°›
 (
EV_P_
 
ev_¥ï¨e
 *
w
Ë
	gEV_THROW
;

791 #i‡
EV_CHECK_ENABLE


792 
EV_API_DECL
 
ev_check_°¨t
 (
EV_P_
 
ev_check
 *
w
Ë
	gEV_THROW
;

793 
EV_API_DECL
 
ev_check_°›
 (
EV_P_
 
ev_check
 *
w
Ë
	gEV_THROW
;

796 #i‡
EV_FORK_ENABLE


797 
EV_API_DECL
 
ev_f‹k_°¨t
 (
EV_P_
 
ev_f‹k
 *
w
Ë
	gEV_THROW
;

798 
EV_API_DECL
 
ev_f‹k_°›
 (
EV_P_
 
ev_f‹k
 *
w
Ë
	gEV_THROW
;

801 #i‡
EV_CLEANUP_ENABLE


802 
EV_API_DECL
 
ev_˛ónup_°¨t
 (
EV_P_
 
ev_˛ónup
 *
w
Ë
	gEV_THROW
;

803 
EV_API_DECL
 
ev_˛ónup_°›
 (
EV_P_
 
ev_˛ónup
 *
w
Ë
	gEV_THROW
;

806 #i‡
EV_EMBED_ENABLE


808 
EV_API_DECL
 
ev_embed_°¨t
 (
EV_P_
 
ev_embed
 *
w
Ë
	gEV_THROW
;

809 
EV_API_DECL
 
ev_embed_°›
 (
EV_P_
 
ev_embed
 *
w
Ë
	gEV_THROW
;

810 
EV_API_DECL
 
ev_embed_swìp
 (
EV_P_
 
ev_embed
 *
w
Ë
	gEV_THROW
;

813 #i‡
EV_ASYNC_ENABLE


814 
EV_API_DECL
 
ev_async_°¨t
 (
EV_P_
 
ev_async
 *
w
Ë
	gEV_THROW
;

815 
EV_API_DECL
 
ev_async_°›
 (
EV_P_
 
ev_async
 *
w
Ë
	gEV_THROW
;

816 
EV_API_DECL
 
ev_async_£nd
 (
EV_P_
 
ev_async
 *
w
Ë
	gEV_THROW
;

819 #i‡
EV_COMPAT3


820 
	#EVLOOP_NONBLOCK
 
EVRUN_NOWAIT


	)

821 
	#EVLOOP_ONESHOT
 
EVRUN_ONCE


	)

822 
	#EVUNLOOP_CANCEL
 
EVBREAK_CANCEL


	)

823 
	#EVUNLOOP_ONE
 
EVBREAK_ONE


	)

824 
	#EVUNLOOP_ALL
 
EVBREAK_ALL


	)

825 #i‡
EV_PROTOTYPES


826 
EV_INLINE
 
ev_lo›
 (
EV_P_
 
Êags
Ë{ 
ev_run
 (
EV_A_
 flags); }

827 
EV_INLINE
 
ev_u∆o›
 (
EV_P_
 
how
 ) { 
ev_bªak
 (
EV_A_
 how ); }

828 
EV_INLINE
 
ev_deÁu…_de°roy
 (Ë{ 
ev_lo›_de°roy
 (
EV_DEFAULT
); }

829 
EV_INLINE
 
ev_deÁu…_f‹k
 (Ë{ 
ev_lo›_f‹k
 (
EV_DEFAULT
); }

830 #i‡
EV_FEATURE_API


831 
EV_INLINE
 
ev_lo›_cou¡
 (
EV_P
Ë{  
ev_ôî©i⁄
 (
EV_A
); }

832 
EV_INLINE
 
ev_lo›_dïth
 (
EV_P
Ë{  
ev_dïth
 (
EV_A
); }

833 
EV_INLINE
 
ev_lo›_vîify
 (
EV_P
Ë{ 
ev_vîify
 (
EV_A
); }

837 
ev_lo›
 
	tev_lo›
;

842 
EV_CPP
(})

	@/home/kartik/nwe/libev-4.15/ev_epoll.c

66 
	~<sys/ïﬁl.h
>

68 
	#EV_EMASK_EPERM
 0x80

	)

71 
	$ïﬁl_modify
 (
EV_P_
 
fd
, 
€v
, 
√v
)

73 
ïﬁl_evít
 
ev
;

74 
ﬁdmask
;

84 i‡(!
√v
)

87 
ﬁdmask
 = 
™fds
 [
fd
].
emask
;

88 
™fds
 [
fd
].
emask
 = 
√v
;

91 
ev
.
d©a
.
u64
 = (
uöt64_t
)(
uöt32_t
)
fd


92 | ((
uöt64_t
)(
uöt32_t
)++
™fds
 [
fd
].
egí
 << 32);

93 
ev
.
evíts
 = (
√v
 & 
EV_READ
 ? 
EPOLLIN
 : 0)

94 | (
√v
 & 
EV_WRITE
 ? 
EPOLLOUT
 : 0);

96 i‡(
	`ex≥˘_åue
 (!
	`ïﬁl_˘l
 (
backíd_fd
, 
€v
 && 
ﬁdmask
 !
√v
 ? 
EPOLL_CTL_MOD
 : 
EPOLL_CTL_ADD
, 
fd
, &
ev
)))

99 i‡(
	`ex≥˘_åue
 (
î∫o
 =
ENOENT
))

102 i‡(!
√v
)

103 
dec_egí
;

105 i‡(!
	`ïﬁl_˘l
 (
backíd_fd
, 
EPOLL_CTL_ADD
, 
fd
, &
ev
))

108 i‡(
	`ex≥˘_åue
 (
î∫o
 =
EEXIST
))

112 i‡(
ﬁdmask
 =
√v
)

113 
dec_egí
;

115 i‡(!
	`ïﬁl_˘l
 (
backíd_fd
, 
EPOLL_CTL_MOD
, 
fd
, &
ev
))

118 i‡(
	`ex≥˘_åue
 (
î∫o
 =
EPERM
))

122 
™fds
 [
fd
].
emask
 = 
EV_EMASK_EPERM
;

125 i‡(!(
ﬁdmask
 & 
EV_EMASK_EPERM
))

127 
	`¨øy_√edsize
 (, 
ïﬁl_ïîms
, 
ïﬁl_ïîmmax
, 
ïﬁl_ïîm˙t
 + 1, 
EMPTY2
);

128 
ïﬁl_ïîms
 [
ïﬁl_ïîm˙t
++] = 
fd
;

134 
	`fd_kûl
 (
EV_A_
 
fd
);

136 
dec_egí
:

138 --
™fds
 [
fd
].
egí
;

139 
	}
}

142 
	$ïﬁl_pﬁl
 (
EV_P_
 
ev_t°amp
 
timeout
)

144 
i
;

145 
evít˙t
;

147 i‡(
	`ex≥˘_Ál£
 (
ïﬁl_ïîm˙t
))

148 
timeout
 = 0.;

152 
EV_RELEASE_CB
;

153 
evít˙t
 = 
	`ïﬁl_waô
 (
backíd_fd
, 
ïﬁl_evíts
, 
ïﬁl_evítmax
, 
timeout
 * 1e3);

154 
EV_ACQUIRE_CB
;

156 i‡(
	`ex≥˘_Ál£
 (
evít˙t
 < 0))

158 i‡(
î∫o
 !
EINTR
)

159 
	`ev_sy£º
 ("(libev)Époll_wait");

164 
i
 = 0; i < 
evít˙t
; ++i)

166 
ïﬁl_evít
 *
ev
 = 
ïﬁl_evíts
 + 
i
;

168 
fd
 = (
uöt32_t
)
ev
->
d©a
.
u64
;

169 
w™t
 = 
™fds
 [
fd
].
evíts
;

170 
gŸ
 = (
ev
->
evíts
 & (
EPOLLOUT
 | 
EPOLLERR
 | 
EPOLLHUP
Ë? 
EV_WRITE
 : 0)

171 | (
ev
->
evíts
 & (
EPOLLIN
 | 
EPOLLERR
 | 
EPOLLHUP
Ë? 
EV_READ
 : 0);

179 i‡(
	`ex≥˘_Ál£
 ((
uöt32_t
)
™fds
 [
fd
].
egí
 !(uöt32_t)(
ev
->
d©a
.
u64
 >> 32)))

182 
po°f‹k
 = 1;

186 i‡(
	`ex≥˘_Ál£
 (
gŸ
 & ~
w™t
))

188 
™fds
 [
fd
].
emask
 = 
w™t
;

199 
ev
->
evíts
 = (
w™t
 & 
EV_READ
 ? 
EPOLLIN
 : 0)

200 | (
w™t
 & 
EV_WRITE
 ? 
EPOLLOUT
 : 0);

204 i‡(
	`ïﬁl_˘l
 (
backíd_fd
, 
w™t
 ? 
EPOLL_CTL_MOD
 : 
EPOLL_CTL_DEL
, 
fd
, 
ev
))

206 
po°f‹k
 = 1;

211 
	`fd_evít
 (
EV_A_
 
fd
, 
gŸ
);

215 i‡(
	`ex≥˘_Ál£
 (
evít˙t
 =
ïﬁl_evítmax
))

217 
	`ev_‰ì
 (
ïﬁl_evíts
);

218 
ïﬁl_evítmax
 = 
	`¨øy_√xtsize
 ( (
ïﬁl_evít
),Époll_eventmax,Époll_eventmax + 1);

219 
ïﬁl_evíts
 = (
ïﬁl_evít
 *)
	`ev_mÆloc
 ( (ïﬁl_evítË* 
ïﬁl_evítmax
);

223 
i
 = 
ïﬁl_ïîm˙t
; i--; )

225 
fd
 = 
ïﬁl_ïîms
 [
i
];

226 
evíts
 = 
™fds
 [
fd
].evít†& (
EV_READ
 | 
EV_WRITE
);

228 i‡(
™fds
 [
fd
].
emask
 & 
EV_EMASK_EPERM
 && 
evíts
)

229 
	`fd_evít
 (
EV_A_
 
fd
, 
evíts
);

231 
ïﬁl_ïîms
 [
i
] =Épﬁl_ïîm†[--
ïﬁl_ïîm˙t
];

233 
	}
}

235 
ölöe_size


236 
	$ïﬁl_öô
 (
EV_P_
 
Êags
)

238 #ifde‡
EPOLL_CLOEXEC


239 
backíd_fd
 = 
	`ïﬁl_¸óã1
 (
EPOLL_CLOEXEC
);

241 i‡(
backíd_fd
 < 0 && (
î∫o
 =
EINVAL
 ||Éºnÿ=
ENOSYS
))

243 
backíd_fd
 = 
	`ïﬁl_¸óã
 (256);

245 i‡(
backíd_fd
 < 0)

248 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

250 
backíd_mötime
 = 1e-3;

251 
backíd_modify
 = 
ïﬁl_modify
;

252 
backíd_pﬁl
 = 
ïﬁl_pﬁl
;

254 
ïﬁl_evítmax
 = 64;

255 
ïﬁl_evíts
 = (
ïﬁl_evít
 *)
	`ev_mÆloc
 ( (ïﬁl_evítË* 
ïﬁl_evítmax
);

257  
EVBACKEND_EPOLL
;

258 
	}
}

260 
ölöe_size


261 
	$ïﬁl_de°roy
 (
EV_P
)

263 
	`ev_‰ì
 (
ïﬁl_evíts
);

264 
	`¨øy_‰ì
 (
ïﬁl_ïîm
, 
EMPTY
);

265 
	}
}

267 
ölöe_size


268 
	$ïﬁl_f‹k
 (
EV_P
)

270 
	`˛o£
 (
backíd_fd
);

272 (
backíd_fd
 = 
	`ïﬁl_¸óã
 (256)) < 0)

273 
	`ev_sy£º
 ("(libev)Époll_create");

275 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

277 
	`fd_ª¨m_Æl
 (
EV_A
);

278 
	}
}

	@/home/kartik/nwe/libev-4.15/ev_kqueue.c

40 
	~<sys/ty≥s.h
>

41 
	~<sys/time.h
>

42 
	~<sys/evít.h
>

43 
	~<°rög.h
>

44 
	~<î∫o.h
>

46 
ölöe_•ìd


47 
	$kqueue_ch™ge
 (
EV_P_
 
fd
, 
fûãr
, 
Êags
, 
fÊags
)

49 ++
kqueue_ch™ge˙t
;

50 
	`¨øy_√edsize
 (
kevít
, 
kqueue_ch™ges
, 
kqueue_ch™gemax
, 
kqueue_ch™ge˙t
, 
EMPTY2
);

52 
	`EV_SET
 (&
kqueue_ch™ges
 [
kqueue_ch™ge˙t
 - 1], 
fd
, 
fûãr
, 
Êags
, 
fÊags
, 0, 0);

53 
	}
}

56 #i‚de‡
EV_ENABLE


57 
	#EV_ENABLE
 0

	)

59 #i‚de‡
NOTE_EOF


60 
	#NOTE_EOF
 0

	)

64 
	$kqueue_modify
 (
EV_P_
 
fd
, 
€v
, 
√v
)

66 i‡(
€v
 !
√v
)

68 i‡(
€v
 & 
EV_READ
)

69 
	`kqueue_ch™ge
 (
EV_A_
 
fd
, 
EVFILT_READ
 , 
EV_DELETE
, 0);

71 i‡(
€v
 & 
EV_WRITE
)

72 
	`kqueue_ch™ge
 (
EV_A_
 
fd
, 
EVFILT_WRITE
, 
EV_DELETE
, 0);

78 i‡(
√v
 & 
EV_READ
)

79 
	`kqueue_ch™ge
 (
EV_A_
 
fd
, 
EVFILT_READ
 , 
EV_ADD
 | 
EV_ENABLE
, 
NOTE_EOF
);

81 i‡(
√v
 & 
EV_WRITE
)

82 
	`kqueue_ch™ge
 (
EV_A_
 
fd
, 
EVFILT_WRITE
, 
EV_ADD
 | 
EV_ENABLE
, 
NOTE_EOF
);

83 
	}
}

86 
	$kqueue_pﬁl
 (
EV_P_
 
ev_t°amp
 
timeout
)

88 
ªs
, 
i
;

89 
time•ec
 
ts
;

92 i‡(
kqueue_ch™ge˙t
 > 
kqueue_evítmax
)

94 
	`ev_‰ì
 (
kqueue_evíts
);

95 
kqueue_evítmax
 = 
	`¨øy_√xtsize
 ( (
kevít
), kqueue_evítmax, 
kqueue_ch™ge˙t
);

96 
kqueue_evíts
 = (
kevít
 *)
	`ev_mÆloc
 ( (kevítË* 
kqueue_evítmax
);

99 
EV_RELEASE_CB
;

100 
	`EV_TS_SET
 (
ts
, 
timeout
);

101 
ªs
 = 
	`kevít
 (
backíd_fd
, 
kqueue_ch™ges
, 
kqueue_ch™ge˙t
, 
kqueue_evíts
, 
kqueue_evítmax
, &
ts
);

102 
EV_ACQUIRE_CB
;

103 
kqueue_ch™ge˙t
 = 0;

105 i‡(
	`ex≥˘_Ál£
 (
ªs
 < 0))

107 i‡(
î∫o
 !
EINTR
)

108 
	`ev_sy£º
 ("(libev) kevent");

113 
i
 = 0; i < 
ªs
; ++i)

115 
fd
 = 
kqueue_evíts
 [
i
].
idít
;

117 i‡(
	`ex≥˘_Ál£
 (
kqueue_evíts
 [
i
].
Êags
 & 
EV_ERROR
))

119 
îr
 = 
kqueue_evíts
 [
i
].
d©a
;

122 i‡(
™fds
 [
fd
].
evíts
)

124 i‡(
îr
 =
ENOENT
)

125 
	`kqueue_modify
 (
EV_A_
 
fd
, 0, 
™fds
 [fd].
evíts
);

126 i‡(
îr
 =
EBADF
)

128 i‡(
	`fd_vÆid
 (
fd
))

129 
	`kqueue_modify
 (
EV_A_
 
fd
, 0, 
™fds
 [fd].
evíts
);

131 
	`fd_kûl
 (
EV_A_
 
fd
);

134 
	`fd_kûl
 (
EV_A_
 
fd
);

138 
	`fd_evít
 (

139 
EV_A_


140 
fd
,

141 
kqueue_evíts
 [
i
].
fûãr
 =
EVFILT_READ
 ? 
EV_READ


142 : 
kqueue_evíts
 [
i
].
fûãr
 =
EVFILT_WRITE
 ? 
EV_WRITE


147 i‡(
	`ex≥˘_Ál£
 (
ªs
 =
kqueue_evítmax
))

149 
	`ev_‰ì
 (
kqueue_evíts
);

150 
kqueue_evítmax
 = 
	`¨øy_√xtsize
 ( (
kevít
), kqueue_eventmax, kqueue_eventmax + 1);

151 
kqueue_evíts
 = (
kevít
 *)
	`ev_mÆloc
 ( (kevítË* 
kqueue_evítmax
);

153 
	}
}

155 
ölöe_size


156 
	$kqueue_öô
 (
EV_P_
 
Êags
)

159 
kqueue_fd_pid
 = 
	`gëpid
 ();

160 i‡((
backíd_fd
 = 
	`kqueue
 ()) < 0)

163 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

165 
backíd_mötime
 = 1e-9;

166 
backíd_modify
 = 
kqueue_modify
;

167 
backíd_pﬁl
 = 
kqueue_pﬁl
;

169 
kqueue_evítmax
 = 64;

170 
kqueue_evíts
 = (
kevít
 *)
	`ev_mÆloc
 ( (kevítË* 
kqueue_evítmax
);

172 
kqueue_ch™ges
 = 0;

173 
kqueue_ch™gemax
 = 0;

174 
kqueue_ch™ge˙t
 = 0;

176  
EVBACKEND_KQUEUE
;

177 
	}
}

179 
ölöe_size


180 
	$kqueue_de°roy
 (
EV_P
)

182 
	`ev_‰ì
 (
kqueue_evíts
);

183 
	`ev_‰ì
 (
kqueue_ch™ges
);

184 
	}
}

186 
ölöe_size


187 
	$kqueue_f‹k
 (
EV_P
)

197 
pid_t
 
√wpid
 = 
	`gëpid
 ();

199 i‡(
√wpid
 =
kqueue_fd_pid
)

200 
	`˛o£
 (
backíd_fd
);

202 
kqueue_fd_pid
 = 
√wpid
;

203 (
backíd_fd
 = 
	`kqueue
 ()) < 0)

204 
	`ev_sy£º
 ("(libev) kqueue");

206 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

209 
	`fd_ª¨m_Æl
 (
EV_A
);

210 
	}
}

213 #unde‡
EV_ERROR


	@/home/kartik/nwe/libev-4.15/ev_poll.c

40 
	~<pﬁl.h
>

42 
ölöe_size


43 
	$pﬁlidx_öô
 (*
ba£
, 
cou¡
)

47 
cou¡
--)

48 *
ba£
++ = -1;

49 
	}
}

52 
	$pﬁl_modify
 (
EV_P_
 
fd
, 
€v
, 
√v
)

54 
idx
;

56 i‡(
€v
 =
√v
)

59 
	`¨øy_√edsize
 (, 
pﬁlidxs
, 
pﬁlidxmax
, 
fd
 + 1, 
pﬁlidx_öô
);

61 
idx
 = 
pﬁlidxs
 [
fd
];

63 i‡(
idx
 < 0)

65 
pﬁlidxs
 [
fd
] = 
idx
 = 
pﬁl˙t
++;

66 
	`¨øy_√edsize
 (
pﬁlfd
, 
pﬁls
, 
pﬁlmax
, 
pﬁl˙t
, 
EMPTY2
);

67 
pﬁls
 [
idx
].
fd
 = fd;

70 
	`as£π
 (
pﬁls
 [
idx
].
fd
 == fd);

72 i‡(
√v
)

73 
pﬁls
 [
idx
].
evíts
 =

74 (
√v
 & 
EV_READ
 ? 
POLLIN
 : 0)

75 | (
√v
 & 
EV_WRITE
 ? 
POLLOUT
 : 0);

78 
pﬁlidxs
 [
fd
] = -1;

80 i‡(
	`ex≥˘_åue
 (
idx
 < --
pﬁl˙t
))

82 
pﬁls
 [
idx
] =Öﬁl†[
pﬁl˙t
];

83 
pﬁlidxs
 [
pﬁls
 [
idx
].
fd
] = idx;

86 
	}
}

89 
	$pﬁl_pﬁl
 (
EV_P_
 
ev_t°amp
 
timeout
)

91 
pﬁlfd
 *
p
;

92 
ªs
;

94 
EV_RELEASE_CB
;

95 
ªs
 = 
	`pﬁl
 (
pﬁls
, 
pﬁl˙t
, 
timeout
 * 1e3);

96 
EV_ACQUIRE_CB
;

98 i‡(
	`ex≥˘_Ál£
 (
ªs
 < 0))

100 i‡(
î∫o
 =
EBADF
)

101 
	`fd_ebadf
 (
EV_A
);

102 i‡(
î∫o
 =
ENOMEM
 && !
sy£º_cb
)

103 
	`fd_íomem
 (
EV_A
);

104 i‡(
î∫o
 !
EINTR
)

105 
	`ev_sy£º
 ("(libev)Öoll");

108 
p
 = 
pﬁls
; 
ªs
; ++p)

110 
	`as£π
 (("libev:Öﬁl(Ëªtu∫ed iŒegÆÑesu…, brokí BSD kî√l?", 
p
 < 
pﬁls
 + 
pﬁl˙t
));

112 i‡(
	`ex≥˘_Ál£
 (
p
->
ªvíts
))

114 --
ªs
;

116 i‡(
	`ex≥˘_Ál£
 (
p
->
ªvíts
 & 
POLLNVAL
))

117 
	`fd_kûl
 (
EV_A_
 
p
->
fd
);

119 
	`fd_evít
 (

120 
EV_A_


121 
p
->
fd
,

122 (
p
->
ªvíts
 & (
POLLOUT
 | 
POLLERR
 | 
POLLHUP
Ë? 
EV_WRITE
 : 0)

123 | (
p
->
ªvíts
 & (
POLLIN
 | 
POLLERR
 | 
POLLHUP
Ë? 
EV_READ
 : 0)

127 
	}
}

129 
ölöe_size


130 
	$pﬁl_öô
 (
EV_P_
 
Êags
)

132 
backíd_mötime
 = 1e-3;

133 
backíd_modify
 = 
pﬁl_modify
;

134 
backíd_pﬁl
 = 
pﬁl_pﬁl
;

136 
pﬁlidxs
 = 0; 
pﬁlidxmax
 = 0;

137 
pﬁls
 = 0; 
pﬁlmax
 = 0; 
pﬁl˙t
 = 0;

139  
EVBACKEND_POLL
;

140 
	}
}

142 
ölöe_size


143 
	$pﬁl_de°roy
 (
EV_P
)

145 
	`ev_‰ì
 (
pﬁlidxs
);

146 
	`ev_‰ì
 (
pﬁls
);

147 
	}
}

	@/home/kartik/nwe/libev-4.15/ev_port.c

51 
	~<sys/ty≥s.h
>

52 
	~<sys/time.h
>

53 
	~<pﬁl.h
>

54 
	~<p‹t.h
>

55 
	~<°rög.h
>

56 
	~<î∫o.h
>

58 
ölöe_•ìd


59 
	$p‹t_assocüã_™d_check
 (
EV_P_
 
fd
, 
ev
)

62 
	`p‹t_assocüã
 (

63 
backíd_fd
, 
PORT_SOURCE_FD
, 
fd
,

64 (
ev
 & 
EV_READ
 ? 
POLLIN
 : 0)

65 | (
ev
 & 
EV_WRITE
 ? 
POLLOUT
 : 0),

70 i‡(
î∫o
 =
EBADFD
)

71 
	`fd_kûl
 (
EV_A_
 
fd
);

73 
	`ev_sy£º
 ("(libev)Öort_associate");

75 
	}
}

78 
	$p‹t_modify
 (
EV_P_
 
fd
, 
€v
, 
√v
)

83 i‡(!
√v
)

85 i‡(
€v
)

86 
	`p‹t_dissocüã
 (
backíd_fd
, 
PORT_SOURCE_FD
, 
fd
);

89 
	`p‹t_assocüã_™d_check
 (
EV_A_
 
fd
, 
√v
);

90 
	}
}

93 
	$p‹t_pﬁl
 (
EV_P_
 
ev_t°amp
 
timeout
)

95 
ªs
, 
i
;

96 
time•ec
 
ts
;

97 
uöt_t
 
ngë
 = 1;

102 
p‹t_evíts
 [0].
p‹ãv_sour˚
 = 0;

104 
EV_RELEASE_CB
;

105 
	`EV_TS_SET
 (
ts
, 
timeout
);

106 
ªs
 = 
	`p‹t_gën
 (
backíd_fd
, 
p‹t_evíts
, 
p‹t_evítmax
, &
ngë
, &
ts
);

107 
EV_ACQUIRE_CB
;

111 i‡(
ªs
 =-1 && 
î∫o
 !
ETIME
 &&Éºnÿ!
EINTR
)

112 
	`ev_sy£º
 ("(libev)Öort_getn (see http://bugs.opensolaris.org/view_bug.do?bug_id=6268715,Åry LIBEV_FLAGS=3Énv variable)");

114 
i
 = 0; i < 
ngë
; ++i)

116 i‡(
p‹t_evíts
 [
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_FD
)

118 
fd
 = 
p‹t_evíts
 [
i
].
p‹ãv_obje˘
;

120 
	`fd_evít
 (

121 
EV_A_


122 
fd
,

123 (
p‹t_evíts
 [
i
].
p‹ãv_evíts
 & (
POLLOUT
 | 
POLLERR
 | 
POLLHUP
Ë? 
EV_WRITE
 : 0)

124 | (
p‹t_evíts
 [
i
].
p‹ãv_evíts
 & (
POLLIN
 | 
POLLERR
 | 
POLLHUP
Ë? 
EV_READ
 : 0)

127 
	`fd_ch™ge
 (
EV_A_
 
fd
, 
EV__IOFDSET
);

131 i‡(
	`ex≥˘_Ál£
 (
ngë
 =
p‹t_evítmax
))

133 
	`ev_‰ì
 (
p‹t_evíts
);

134 
p‹t_evítmax
 = 
	`¨øy_√xtsize
 ( (
p‹t_evít_t
),Öort_eventmax,Öort_eventmax + 1);

135 
p‹t_evíts
 = (
p‹t_evít_t
 *)
	`ev_mÆloc
 ( (p‹t_evít_tË* 
p‹t_evítmax
);

137 
	}
}

139 
ölöe_size


140 
	$p‹t_öô
 (
EV_P_
 
Êags
)

143 i‡((
backíd_fd
 = 
	`p‹t_¸óã
 ()) < 0)

146 
	`as£π
 (("libev: PORT_SOURCE_FD mu°ÇŸ bêzîo", 
PORT_SOURCE_FD
));

148 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

156 
backíd_mötime
 = 1e-3;

157 
backíd_modify
 = 
p‹t_modify
;

158 
backíd_pﬁl
 = 
p‹t_pﬁl
;

160 
p‹t_evítmax
 = 64;

161 
p‹t_evíts
 = (
p‹t_evít_t
 *)
	`ev_mÆloc
 ( (p‹t_evít_tË* 
p‹t_evítmax
);

163  
EVBACKEND_PORT
;

164 
	}
}

166 
ölöe_size


167 
	$p‹t_de°roy
 (
EV_P
)

169 
	`ev_‰ì
 (
p‹t_evíts
);

170 
	}
}

172 
ölöe_size


173 
	$p‹t_f‹k
 (
EV_P
)

175 
	`˛o£
 (
backíd_fd
);

177 (
backíd_fd
 = 
	`p‹t_¸óã
 ()) < 0)

178 
	`ev_sy£º
 ("(libev)Öort");

180 
	`f˙é
 (
backíd_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

183 
	`fd_ª¨m_Æl
 (
EV_A
);

184 
	}
}

	@/home/kartik/nwe/libev-4.15/ev_select.c

40 #i‚de‡
_WIN32


42 
	~<öây≥s.h
>

43 #i‚de‡
__hpux


45 
	~<sys/£À˘.h
>

49 #i‚de‡
EV_SELECT_USE_FD_SET


50 #ifde‡
NFDBITS


51 
	#EV_SELECT_USE_FD_SET
 0

	)

53 
	#EV_SELECT_USE_FD_SET
 1

	)

57 #i‡
EV_SELECT_IS_WINSOCKET


58 #unde‡
EV_SELECT_USE_FD_SET


59 
	#EV_SELECT_USE_FD_SET
 1

	)

60 #unde‡
NFDBITS


61 
	#NFDBITS
 0

	)

64 #i‡!
EV_SELECT_USE_FD_SET


65 
	#NFDBYTES
 (
NFDBITS
 / 8)

	)

68 
	~<°rög.h
>

71 
	$£À˘_modify
 (
EV_P_
 
fd
, 
€v
, 
√v
)

73 i‡(
€v
 =
√v
)

77 #i‡
EV_SELECT_USE_FD_SET


79 #i‡
EV_SELECT_IS_WINSOCKET


80 
SOCKET
 
h™dÀ
 = 
™fds
 [
fd
].handle;

82 
h™dÀ
 = 
fd
;

85 
	`as£π
 (("libev: fd >FD_SETSIZEÖas£dÅÿfd_£t-ba£d sñe˘ backíd", 
fd
 < 
FD_SETSIZE
));

90 #i‡
EV_SELECT_IS_WINSOCKET


91 i‡((
€v
 ^ 
√v
Ë& 
EV_READ
)

93 i‡(
√v
 & 
EV_READ
)

94 
	`FD_SET
 (
h™dÀ
, (
fd_£t
 *)
vec_ri
);

96 
	`FD_CLR
 (
h™dÀ
, (
fd_£t
 *)
vec_ri
);

98 #i‡
EV_SELECT_IS_WINSOCKET


99 i‡((
€v
 ^ 
√v
Ë& 
EV_WRITE
)

101 i‡(
√v
 & 
EV_WRITE
)

102 
	`FD_SET
 (
h™dÀ
, (
fd_£t
 *)
vec_wi
);

104 
	`FD_CLR
 (
h™dÀ
, (
fd_£t
 *)
vec_wi
);

108 
w‹d
 = 
fd
 / 
NFDBITS
;

109 
fd_mask
 
mask
 = 1UL << (
fd
 % 
NFDBITS
);

111 i‡(
	`ex≥˘_Ál£
 (
vec_max
 <
w‹d
))

113 
√w_max
 = 
w‹d
 + 1;

115 
vec_ri
 = 
	`ev_ªÆloc
 (vec_ri, 
√w_max
 * 
NFDBYTES
);

116 
vec_ro
 = 
	`ev_ªÆloc
 (vec_ro, 
√w_max
 * 
NFDBYTES
);

117 
vec_wi
 = 
	`ev_ªÆloc
 (vec_wi, 
√w_max
 * 
NFDBYTES
);

118 
vec_wo
 = 
	`ev_ªÆloc
 (vec_wo, 
√w_max
 * 
NFDBYTES
);

119 #ifde‡
_WIN32


120 
vec_eo
 = 
	`ev_ªÆloc
 (vec_eo, 
√w_max
 * 
NFDBYTES
);

123 ; 
vec_max
 < 
√w_max
; ++vec_max)

124 ((
fd_mask
 *)
vec_ri
Ë[
vec_max
] =

125 ((
fd_mask
 *)
vec_wi
Ë[
vec_max
] = 0;

128 ((
fd_mask
 *)
vec_ri
Ë[
w‹d
] |
mask
;

129 i‡(!(
√v
 & 
EV_READ
))

130 ((
fd_mask
 *)
vec_ri
Ë[
w‹d
] &~
mask
;

132 ((
fd_mask
 *)
vec_wi
Ë[
w‹d
] |
mask
;

133 i‡(!(
√v
 & 
EV_WRITE
))

134 ((
fd_mask
 *)
vec_wi
Ë[
w‹d
] &~
mask
;

137 
	}
}

140 
	$£À˘_pﬁl
 (
EV_P_
 
ev_t°amp
 
timeout
)

142 
timevÆ
 
tv
;

143 
ªs
;

144 
fd_£tsize
;

146 
EV_RELEASE_CB
;

147 
	`EV_TV_SET
 (
tv
, 
timeout
);

149 #i‡
EV_SELECT_USE_FD_SET


150 
fd_£tsize
 =  (
fd_£t
);

152 
fd_£tsize
 = 
vec_max
 * 
NFDBYTES
;

155 
	`mem˝y
 (
vec_ro
, 
vec_ri
, 
fd_£tsize
);

156 
	`mem˝y
 (
vec_wo
, 
vec_wi
, 
fd_£tsize
);

158 #ifde‡
_WIN32


164 
	`mem˝y
 (
vec_eo
, 
vec_wi
, 
fd_£tsize
);

165 
ªs
 = 
	`£À˘
 (
vec_max
 * 
NFDBITS
, (
fd_£t
 *)
vec_ro
, (fd_£à*)
vec_wo
, (fd_£à*)
vec_eo
, &
tv
);

166 #ñi‡
EV_SELECT_USE_FD_SET


167 
fd_£tsize
 = 
™fdmax
 < 
FD_SETSIZE
 ?ánfdmax : FD_SETSIZE;

168 
ªs
 = 
	`£À˘
 (
fd_£tsize
, (
fd_£t
 *)
vec_ro
, (fd_£à*)
vec_wo
, 0, &
tv
);

170 
ªs
 = 
	`£À˘
 (
vec_max
 * 
NFDBITS
, (
fd_£t
 *)
vec_ro
, (fd_£à*)
vec_wo
, 0, &
tv
);

172 
EV_ACQUIRE_CB
;

174 i‡(
	`ex≥˘_Ál£
 (
ªs
 < 0))

176 #i‡
EV_SELECT_IS_WINSOCKET


177 
î∫o
 = 
	`WSAGëLa°Eº‹
 ();

179 #ifde‡
WSABASEERR


181 i‡(
î∫o
 >
WSABASEERR
 &&Érrno < WSABASEERR + 1000)

182 i‡(
î∫o
 =
WSAENOTSOCK
)

183 
î∫o
 = 
EBADF
;

185 
î∫o
 -
WSABASEERR
;

188 #ifde‡
_WIN32


196 i‡(
î∫o
 =
EINVAL
)

198 i‡(
timeout
)

200 
ms
 = 
timeout
 * 1e3;

201 
	`SÀï
 (
ms
 ? ms : 1);

208 i‡(
î∫o
 =
EBADF
)

209 
	`fd_ebadf
 (
EV_A
);

210 i‡(
î∫o
 =
ENOMEM
 && !
sy£º_cb
)

211 
	`fd_íomem
 (
EV_A
);

212 i‡(
î∫o
 !
EINTR
)

213 
	`ev_sy£º
 ("(libev) select");

218 #i‡
EV_SELECT_USE_FD_SET


221 
fd
;

223 
fd
 = 0; fd < 
™fdmax
; ++fd)

224 i‡(
™fds
 [
fd
].
evíts
)

226 
evíts
 = 0;

227 #i‡
EV_SELECT_IS_WINSOCKET


228 
SOCKET
 
h™dÀ
 = 
™fds
 [
fd
].handle;

230 
h™dÀ
 = 
fd
;

233 i‡(
	`FD_ISSET
 (
h™dÀ
, (
fd_£t
 *)
vec_ro
)Ë
evíts
 |
EV_READ
;

234 i‡(
	`FD_ISSET
 (
h™dÀ
, (
fd_£t
 *)
vec_wo
)Ë
evíts
 |
EV_WRITE
;

235 #ifde‡
_WIN32


236 i‡(
	`FD_ISSET
 (
h™dÀ
, (
fd_£t
 *)
vec_eo
)Ë
evíts
 |
EV_WRITE
;

239 i‡(
	`ex≥˘_åue
 (
evíts
))

240 
	`fd_evít
 (
EV_A_
 
fd
, 
evíts
);

247 
w‹d
, 
bô
;

248 
w‹d
 = 
vec_max
; word--; )

250 
fd_mask
 
w‹d_r
 = ((fd_mask *)
vec_ro
Ë[
w‹d
];

251 
fd_mask
 
w‹d_w
 = ((fd_mask *)
vec_wo
Ë[
w‹d
];

252 #ifde‡
_WIN32


253 
w‹d_w
 |((
fd_mask
 *)
vec_eo
Ë[
w‹d
];

256 i‡(
w‹d_r
 || 
w‹d_w
)

257 
bô
 = 
NFDBITS
; bit--; )

259 
fd_mask
 
mask
 = 1UL << 
bô
;

260 
evíts
 = 0;

262 
evíts
 |
w‹d_r
 & 
mask
 ? 
EV_READ
 : 0;

263 
evíts
 |
w‹d_w
 & 
mask
 ? 
EV_WRITE
 : 0;

265 i‡(
	`ex≥˘_åue
 (
evíts
))

266 
	`fd_evít
 (
EV_A_
 
w‹d
 * 
NFDBITS
 + 
bô
, 
evíts
);

272 
	}
}

274 
ölöe_size


275 
	$£À˘_öô
 (
EV_P_
 
Êags
)

277 
backíd_mötime
 = 1e-6;

278 
backíd_modify
 = 
£À˘_modify
;

279 
backíd_pﬁl
 = 
£À˘_pﬁl
;

281 #i‡
EV_SELECT_USE_FD_SET


282 
vec_ri
 = 
	`ev_mÆloc
 ( (
fd_£t
)); 
	`FD_ZERO
 ((fd_set *)vec_ri);

283 
vec_ro
 = 
	`ev_mÆloc
 ( (
fd_£t
));

284 
vec_wi
 = 
	`ev_mÆloc
 ( (
fd_£t
)); 
	`FD_ZERO
 ((fd_set *)vec_wi);

285 
vec_wo
 = 
	`ev_mÆloc
 ( (
fd_£t
));

286 #ifde‡
_WIN32


287 
vec_eo
 = 
	`ev_mÆloc
 ( (
fd_£t
));

290 
vec_max
 = 0;

291 
vec_ri
 = 0;

292 
vec_ro
 = 0;

293 
vec_wi
 = 0;

294 
vec_wo
 = 0;

295 #ifde‡
_WIN32


296 
vec_eo
 = 0;

300  
EVBACKEND_SELECT
;

301 
	}
}

303 
ölöe_size


304 
	$£À˘_de°roy
 (
EV_P
)

306 
	`ev_‰ì
 (
vec_ri
);

307 
	`ev_‰ì
 (
vec_ro
);

308 
	`ev_‰ì
 (
vec_wi
);

309 
	`ev_‰ì
 (
vec_wo
);

310 #ifde‡
_WIN32


311 
	`ev_‰ì
 (
vec_eo
);

313 
	}
}

	@/home/kartik/nwe/libev-4.15/ev_vars.h

40 
	#VARx
(
ty≥
,
«me
Ë
	`VAR
“ame,Åy≥Çame)

	)

42 
	$VARx
(
ev_t°amp
, 
now_Êo‹
)

43 
	$VARx
(
ev_t°amp
, 
mn_now
)

44 
	$VARx
(
ev_t°amp
, 
πmn_diff
)

47 
	$VARx
(
W
 *, 
r„eds
)

48 
	$VARx
(, 
r„edmax
)

49 
	$VARx
(, 
r„ed˙t
)

51 
	$VAR
 (
≥ndögs
, 
ANPENDING
 *≥ndög†[
NUMPRI
])

52 
	$VAR
 (
≥ndögmax
, ≥ndögmax [
NUMPRI
])

53 
	$VAR
 (
≥ndög˙t
, ≥ndög˙à[
NUMPRI
])

54 
	$VARx
(, 
≥ndög¥i
)

55 
	$VARx
(
ev_¥ï¨e
, 
≥ndög_w
)

57 
	$VARx
(
ev_t°amp
, 
io_blocktime
)

58 
	$VARx
(
ev_t°amp
, 
timeout_blocktime
)

60 
	$VARx
(, 
backíd
)

61 
	$VARx
(, 
a˘ive˙t
)

62 
	$VARx
(
EV_ATOMIC_T
, 
lo›_d⁄e
)

64 
	$VARx
(, 
backíd_fd
)

65 
	$VARx
(
ev_t°amp
, 
backíd_mötime
)

66 
	`VAR
 (
backíd_modify
, (*backíd_modify)(
EV_P_
 
fd
, 
€v
, 
√v
))

67 
	`VAR
 (
backíd_pﬁl
 , (*backíd_pﬁl)(
EV_P_
 
ev_t°amp
 
timeout
))

69 
	$VARx
(
ANFD
 *, 
™fds
)

70 
	$VARx
(, 
™fdmax
)

72 
	$VAR
 (
evpùe
, evpipe [2])

73 
	$VARx
(
ev_io
, 
pùe_w
)

74 
	$VARx
(
EV_ATOMIC_T
, 
pùe_wrôe_w™ãd
)

75 
	$VARx
(
EV_ATOMIC_T
, 
pùe_wrôe_skù≥d
)

77 #i‡!
	`deföed
(
_WIN32
Ë|| 
EV_GENWRAP


78 
	$VARx
(
pid_t
, 
cuΩid
)

81 
	$VARx
(, 
po°f‹k
)

83 #i‡
EV_USE_SELECT
 || 
EV_GENWRAP


84 
	$VARx
(*, 
vec_ri
)

85 
	$VARx
(*, 
vec_ro
)

86 
	$VARx
(*, 
vec_wi
)

87 
	$VARx
(*, 
vec_wo
)

88 #i‡
	`deföed
(
_WIN32
Ë|| 
EV_GENWRAP


89 
	$VARx
(*, 
vec_eo
)

91 
	$VARx
(, 
vec_max
)

94 #i‡
EV_USE_POLL
 || 
EV_GENWRAP


95 
	$VARx
(
pﬁlfd
 *, 
pﬁls
)

96 
	$VARx
(, 
pﬁlmax
)

97 
	$VARx
(, 
pﬁl˙t
)

98 
	$VARx
(*, 
pﬁlidxs
)

99 
	$VARx
(, 
pﬁlidxmax
)

102 #i‡
EV_USE_EPOLL
 || 
EV_GENWRAP


103 
	$VARx
(
ïﬁl_evít
 *, 
ïﬁl_evíts
)

104 
	$VARx
(, 
ïﬁl_evítmax
)

105 
	$VARx
(*, 
ïﬁl_ïîms
)

106 
	$VARx
(, 
ïﬁl_ïîm˙t
)

107 
	$VARx
(, 
ïﬁl_ïîmmax
)

110 #i‡
EV_USE_KQUEUE
 || 
EV_GENWRAP


111 
	$VARx
(
pid_t
, 
kqueue_fd_pid
)

112 
	$VARx
(
kevít
 *, 
kqueue_ch™ges
)

113 
	$VARx
(, 
kqueue_ch™gemax
)

114 
	$VARx
(, 
kqueue_ch™ge˙t
)

115 
	$VARx
(
kevít
 *, 
kqueue_evíts
)

116 
	$VARx
(, 
kqueue_evítmax
)

119 #i‡
EV_USE_PORT
 || 
EV_GENWRAP


120 
	$VARx
(
p‹t_evít
 *, 
p‹t_evíts
)

121 
	$VARx
(, 
p‹t_evítmax
)

124 #i‡
EV_USE_IOCP
 || 
EV_GENWRAP


125 
	$VARx
(
HANDLE
, 
io˝
)

128 
	$VARx
(*, 
fdch™ges
)

129 
	$VARx
(, 
fdch™gemax
)

130 
	$VARx
(, 
fdch™ge˙t
)

132 
	$VARx
(
ANHE
 *, 
timîs
)

133 
	$VARx
(, 
timîmax
)

134 
	$VARx
(, 
timî˙t
)

136 #i‡
EV_PERIODIC_ENABLE
 || 
EV_GENWRAP


137 
	$VARx
(
ANHE
 *, 
≥riodics
)

138 
	$VARx
(, 
≥riodicmax
)

139 
	$VARx
(, 
≥riodic˙t
)

142 #i‡
EV_IDLE_ENABLE
 || 
EV_GENWRAP


143 
	$VAR
 (
idÀs
, 
ev_idÀ
 **idÀ†[
NUMPRI
])

144 
	$VAR
 (
idÀmax
, idÀmax [
NUMPRI
])

145 
	$VAR
 (
idÀ˙t
, idÀ˙à[
NUMPRI
])

147 
	$VARx
(, 
idÀÆl
)

149 
	$VARx
(
ev_¥ï¨e
 **, 
¥ï¨es
)

150 
	$VARx
(, 
¥ï¨emax
)

151 
	$VARx
(, 
¥ï¨e˙t
)

153 
	$VARx
(
ev_check
 **, 
checks
)

154 
	$VARx
(, 
checkmax
)

155 
	$VARx
(, 
check˙t
)

157 #i‡
EV_FORK_ENABLE
 || 
EV_GENWRAP


158 
	$VARx
(
ev_f‹k
 **, 
f‹ks
)

159 
	$VARx
(, 
f‹kmax
)

160 
	$VARx
(, 
f‹k˙t
)

163 #i‡
EV_CLEANUP_ENABLE
 || 
EV_GENWRAP


164 
	$VARx
(
ev_˛ónup
 **, 
˛ónups
)

165 
	$VARx
(, 
˛ónupmax
)

166 
	$VARx
(, 
˛ónup˙t
)

169 #i‡
EV_ASYNC_ENABLE
 || 
EV_GENWRAP


170 
	$VARx
(
EV_ATOMIC_T
, 
async_≥ndög
)

171 
	$VARx
(
ev_async
 **, 
asyncs
)

172 
	$VARx
(, 
asyncmax
)

173 
	$VARx
(, 
async˙t
)

176 #i‡
EV_USE_INOTIFY
 || 
EV_GENWRAP


177 
	$VARx
(, 
fs_fd
)

178 
	$VARx
(
ev_io
, 
fs_w
)

179 
	$VARx
(, 
fs_2625
)

180 
	$VAR
 (
fs_hash
, 
ANFS
 fs_hash [
EV_INOTIFY_HASHSIZE
])

183 
	$VARx
(
EV_ATOMIC_T
, 
sig_≥ndög
)

184 #i‡
EV_USE_SIGNALFD
 || 
EV_GENWRAP


185 
	$VARx
(, 
sigfd
)

186 
	$VARx
(
ev_io
, 
sigfd_w
)

187 
	$VARx
(
sig£t_t
, 
sigfd_£t
)

190 
	$VARx
(, 
‹igÊags
)

192 #i‡
EV_FEATURE_API
 || 
EV_GENWRAP


193 
	$VARx
(, 
lo›_cou¡
)

194 
	$VARx
(, 
lo›_dïth
)

196 
	$VARx
(*, 
u£rd©a
)

197 
	`VAR
 (
ªÀa£_cb
, (*ªÀa£_cb)(
EV_P
Ë
EV_THROW
)

198 
	`VAR
 (
acquúe_cb
, (*acquúe_cb)(
EV_P
Ë
EV_THROW
)

199 
	`VAR
 (
övoke_cb
 , (*övoke_cbË(
EV_P
))

202 #unde‡
VARx


	@/home/kartik/nwe/libev-4.15/ev_win32.c

40 #ifde‡
_WIN32


43 
	~<sys/timeb.h
>

49 vﬁ©ûê
	gSIGFPE_REQ
 = 0.0f;

51 
SOCKET


52 
	$ev_t˝_sockë
 ()

54 #i‡
EV_USE_WSASOCKET


55  
	`WSASockë
 (
AF_INET
, 
SOCK_STREAM
, 0, 0, 0, 0);

57  
	`sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

59 
	}
}

63 
	$ev_pùe
 (
fûedes
 [2])

65 
sockaddr_ö
 
addr
 = { 0 };

66 
addr_size
 =  (
addr
);

67 
sockaddr_ö
 
adr2
;

68 
adr2_size
 =  (
adr2
);

69 
SOCKET
 
li°íî
;

70 
SOCKET
 
sock
 [2] = { -1, -1 };

72 i‡((
li°íî
 = 
	`ev_t˝_sockë
 ()Ë=
INVALID_SOCKET
)

75 
addr
.
sö_Ámûy
 = 
AF_INET
;

76 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_LOOPBACK
);

77 
addr
.
sö_p‹t
 = 0;

79 i‡(
	`böd
 (
li°íî
, (
sockaddr
 *)&
addr
, 
addr_size
))

80 
Áû
;

82 i‡(
	`gësock«me
 (
li°íî
, (
sockaddr
 *)&
addr
, &
addr_size
))

83 
Áû
;

85 i‡(
	`li°í
 (
li°íî
, 1))

86 
Áû
;

88 i‡((
sock
 [0] = 
	`ev_t˝_sockë
 ()Ë=
INVALID_SOCKET
)

89 
Áû
;

91 i‡(
	`c⁄√˘
 (
sock
 [0], (
sockaddr
 *)&
addr
, 
addr_size
))

92 
Áû
;

94 i‡((
sock
 [1] = 
	`ac˚±
 (
li°íî
, 0, 0)) < 0)

95 
Áû
;

109 i‡(
	`gë≥î«me
 (
sock
 [0], (
sockaddr
 *)&
addr
, &
addr_size
))

110 
Áû
;

112 i‡(
	`gësock«me
 (
sock
 [1], (
sockaddr
 *)&
adr2
, &
adr2_size
))

113 
Áû
;

115 
î∫o
 = 
WSAEINVAL
;

116 i‡(
addr_size
 !
adr2_size


117 || 
addr
.
sö_addr
.
s_addr
 !
adr2
.sin_addr.s_addr

118 || 
addr
.
sö_p‹t
 !
adr2
.sin_port)

119 
Áû
;

121 
	`˛o£sockë
 (
li°íî
);

123 #i‡
EV_SELECT_IS_WINSOCKET


124 
fûedes
 [0] = 
	`EV_WIN32_HANDLE_TO_FD
 (
sock
 [0]);

125 
fûedes
 [1] = 
	`EV_WIN32_HANDLE_TO_FD
 (
sock
 [1]);

129 
fûedes
 [0] = 
sock
 [0];

130 
fûedes
 [1] = 
sock
 [1];

135 
Áû
:

136 
	`˛o£sockë
 (
li°íî
);

138 i‡(
sock
 [0] !
INVALID_SOCKET
Ë
	`˛o£sockë
 (sock [0]);

139 i‡(
sock
 [1] !
INVALID_SOCKET
Ë
	`˛o£sockë
 (sock [1]);

142 
	}
}

144 #unde‡
pùe


145 
	#pùe
(
fûedes
Ë
	`ev_pùe
 (fûedes)

	)

147 
	#EV_HAVE_EV_TIME
 1

	)

148 
ev_t°amp


149 
	$ev_time
 ()

151 
FILETIME
 
·
;

152 
ULARGE_INTEGER
 
ui
;

154 
	`GëSy°emTimeAsFûeTime
 (&
·
);

155 
ui
.
u
.
LowP¨t
 = 
·
.
dwLowD©eTime
;

156 
ui
.
u
.
HighP¨t
 = 
·
.
dwHighD©eTime
;

159  (
LONGLONG
)(
ui
.
QuadP¨t
 - 116444736000000000) * 1e-7;

160 
	}
}

	@/home/kartik/nwe/libev-4.15/ev_wrap.h

2 #i‚de‡
EV_WRAP_H


3 
	#EV_WRAP_H


	)

4 
	#acquúe_cb
 ((
lo›
)->
acquúe_cb
)

	)

5 
	#a˘ive˙t
 ((
lo›
)->
a˘ive˙t
)

	)

6 
	#™fdmax
 ((
lo›
)->
™fdmax
)

	)

7 
	#™fds
 ((
lo›
)->
™fds
)

	)

8 
	#async_≥ndög
 ((
lo›
)->
async_≥ndög
)

	)

9 
	#async˙t
 ((
lo›
)->
async˙t
)

	)

10 
	#asyncmax
 ((
lo›
)->
asyncmax
)

	)

11 
	#asyncs
 ((
lo›
)->
asyncs
)

	)

12 
	#backíd
 ((
lo›
)->
backíd
)

	)

13 
	#backíd_fd
 ((
lo›
)->
backíd_fd
)

	)

14 
	#backíd_mötime
 ((
lo›
)->
backíd_mötime
)

	)

15 
	#backíd_modify
 ((
lo›
)->
backíd_modify
)

	)

16 
	#backíd_pﬁl
 ((
lo›
)->
backíd_pﬁl
)

	)

17 
	#check˙t
 ((
lo›
)->
check˙t
)

	)

18 
	#checkmax
 ((
lo›
)->
checkmax
)

	)

19 
	#checks
 ((
lo›
)->
checks
)

	)

20 
	#˛ónup˙t
 ((
lo›
)->
˛ónup˙t
)

	)

21 
	#˛ónupmax
 ((
lo›
)->
˛ónupmax
)

	)

22 
	#˛ónups
 ((
lo›
)->
˛ónups
)

	)

23 
	#cuΩid
 ((
lo›
)->
cuΩid
)

	)

24 
	#ïﬁl_ïîm˙t
 ((
lo›
)->
ïﬁl_ïîm˙t
)

	)

25 
	#ïﬁl_ïîmmax
 ((
lo›
)->
ïﬁl_ïîmmax
)

	)

26 
	#ïﬁl_ïîms
 ((
lo›
)->
ïﬁl_ïîms
)

	)

27 
	#ïﬁl_evítmax
 ((
lo›
)->
ïﬁl_evítmax
)

	)

28 
	#ïﬁl_evíts
 ((
lo›
)->
ïﬁl_evíts
)

	)

29 
	#evpùe
 ((
lo›
)->
evpùe
)

	)

30 
	#fdch™ge˙t
 ((
lo›
)->
fdch™ge˙t
)

	)

31 
	#fdch™gemax
 ((
lo›
)->
fdch™gemax
)

	)

32 
	#fdch™ges
 ((
lo›
)->
fdch™ges
)

	)

33 
	#f‹k˙t
 ((
lo›
)->
f‹k˙t
)

	)

34 
	#f‹kmax
 ((
lo›
)->
f‹kmax
)

	)

35 
	#f‹ks
 ((
lo›
)->
f‹ks
)

	)

36 
	#fs_2625
 ((
lo›
)->
fs_2625
)

	)

37 
	#fs_fd
 ((
lo›
)->
fs_fd
)

	)

38 
	#fs_hash
 ((
lo›
)->
fs_hash
)

	)

39 
	#fs_w
 ((
lo›
)->
fs_w
)

	)

40 
	#idÀÆl
 ((
lo›
)->
idÀÆl
)

	)

41 
	#idÀ˙t
 ((
lo›
)->
idÀ˙t
)

	)

42 
	#idÀmax
 ((
lo›
)->
idÀmax
)

	)

43 
	#idÀs
 ((
lo›
)->
idÀs
)

	)

44 
	#övoke_cb
 ((
lo›
)->
övoke_cb
)

	)

45 
	#io_blocktime
 ((
lo›
)->
io_blocktime
)

	)

46 
	#io˝
 ((
lo›
)->
io˝
)

	)

47 
	#kqueue_ch™ge˙t
 ((
lo›
)->
kqueue_ch™ge˙t
)

	)

48 
	#kqueue_ch™gemax
 ((
lo›
)->
kqueue_ch™gemax
)

	)

49 
	#kqueue_ch™ges
 ((
lo›
)->
kqueue_ch™ges
)

	)

50 
	#kqueue_evítmax
 ((
lo›
)->
kqueue_evítmax
)

	)

51 
	#kqueue_evíts
 ((
lo›
)->
kqueue_evíts
)

	)

52 
	#kqueue_fd_pid
 ((
lo›
)->
kqueue_fd_pid
)

	)

53 
	#lo›_cou¡
 ((
lo›
)->
lo›_cou¡
)

	)

54 
	#lo›_dïth
 ((
lo›
)->
lo›_dïth
)

	)

55 
	#lo›_d⁄e
 ((
lo›
)->
lo›_d⁄e
)

	)

56 
	#mn_now
 ((
lo›
)->
mn_now
)

	)

57 
	#now_Êo‹
 ((
lo›
)->
now_Êo‹
)

	)

58 
	#‹igÊags
 ((
lo›
)->
‹igÊags
)

	)

59 
	#≥ndög_w
 ((
lo›
)->
≥ndög_w
)

	)

60 
	#≥ndög˙t
 ((
lo›
)->
≥ndög˙t
)

	)

61 
	#≥ndögmax
 ((
lo›
)->
≥ndögmax
)

	)

62 
	#≥ndög¥i
 ((
lo›
)->
≥ndög¥i
)

	)

63 
	#≥ndögs
 ((
lo›
)->
≥ndögs
)

	)

64 
	#≥riodic˙t
 ((
lo›
)->
≥riodic˙t
)

	)

65 
	#≥riodicmax
 ((
lo›
)->
≥riodicmax
)

	)

66 
	#≥riodics
 ((
lo›
)->
≥riodics
)

	)

67 
	#pùe_w
 ((
lo›
)->
pùe_w
)

	)

68 
	#pùe_wrôe_skù≥d
 ((
lo›
)->
pùe_wrôe_skù≥d
)

	)

69 
	#pùe_wrôe_w™ãd
 ((
lo›
)->
pùe_wrôe_w™ãd
)

	)

70 
	#pﬁl˙t
 ((
lo›
)->
pﬁl˙t
)

	)

71 
	#pﬁlidxmax
 ((
lo›
)->
pﬁlidxmax
)

	)

72 
	#pﬁlidxs
 ((
lo›
)->
pﬁlidxs
)

	)

73 
	#pﬁlmax
 ((
lo›
)->
pﬁlmax
)

	)

74 
	#pﬁls
 ((
lo›
)->
pﬁls
)

	)

75 
	#p‹t_evítmax
 ((
lo›
)->
p‹t_evítmax
)

	)

76 
	#p‹t_evíts
 ((
lo›
)->
p‹t_evíts
)

	)

77 
	#po°f‹k
 ((
lo›
)->
po°f‹k
)

	)

78 
	#¥ï¨e˙t
 ((
lo›
)->
¥ï¨e˙t
)

	)

79 
	#¥ï¨emax
 ((
lo›
)->
¥ï¨emax
)

	)

80 
	#¥ï¨es
 ((
lo›
)->
¥ï¨es
)

	)

81 
	#ªÀa£_cb
 ((
lo›
)->
ªÀa£_cb
)

	)

82 
	#r„ed˙t
 ((
lo›
)->
r„ed˙t
)

	)

83 
	#r„edmax
 ((
lo›
)->
r„edmax
)

	)

84 
	#r„eds
 ((
lo›
)->
r„eds
)

	)

85 
	#πmn_diff
 ((
lo›
)->
πmn_diff
)

	)

86 
	#sig_≥ndög
 ((
lo›
)->
sig_≥ndög
)

	)

87 
	#sigfd
 ((
lo›
)->
sigfd
)

	)

88 
	#sigfd_£t
 ((
lo›
)->
sigfd_£t
)

	)

89 
	#sigfd_w
 ((
lo›
)->
sigfd_w
)

	)

90 
	#timeout_blocktime
 ((
lo›
)->
timeout_blocktime
)

	)

91 
	#timî˙t
 ((
lo›
)->
timî˙t
)

	)

92 
	#timîmax
 ((
lo›
)->
timîmax
)

	)

93 
	#timîs
 ((
lo›
)->
timîs
)

	)

94 
	#u£rd©a
 ((
lo›
)->
u£rd©a
)

	)

95 
	#vec_eo
 ((
lo›
)->
vec_eo
)

	)

96 
	#vec_max
 ((
lo›
)->
vec_max
)

	)

97 
	#vec_ri
 ((
lo›
)->
vec_ri
)

	)

98 
	#vec_ro
 ((
lo›
)->
vec_ro
)

	)

99 
	#vec_wi
 ((
lo›
)->
vec_wi
)

	)

100 
	#vec_wo
 ((
lo›
)->
vec_wo
)

	)

102 #unde‡
EV_WRAP_H


103 #unde‡
acquúe_cb


104 #unde‡
a˘ive˙t


105 #unde‡
™fdmax


106 #unde‡
™fds


107 #unde‡
async_≥ndög


108 #unde‡
async˙t


109 #unde‡
asyncmax


110 #unde‡
asyncs


111 #unde‡
backíd


112 #unde‡
backíd_fd


113 #unde‡
backíd_mötime


114 #unde‡
backíd_modify


115 #unde‡
backíd_pﬁl


116 #unde‡
check˙t


117 #unde‡
checkmax


118 #unde‡
checks


119 #unde‡
˛ónup˙t


120 #unde‡
˛ónupmax


121 #unde‡
˛ónups


122 #unde‡
cuΩid


123 #unde‡
ïﬁl_ïîm˙t


124 #unde‡
ïﬁl_ïîmmax


125 #unde‡
ïﬁl_ïîms


126 #unde‡
ïﬁl_evítmax


127 #unde‡
ïﬁl_evíts


128 #unde‡
evpùe


129 #unde‡
fdch™ge˙t


130 #unde‡
fdch™gemax


131 #unde‡
fdch™ges


132 #unde‡
f‹k˙t


133 #unde‡
f‹kmax


134 #unde‡
f‹ks


135 #unde‡
fs_2625


136 #unde‡
fs_fd


137 #unde‡
fs_hash


138 #unde‡
fs_w


139 #unde‡
idÀÆl


140 #unde‡
idÀ˙t


141 #unde‡
idÀmax


142 #unde‡
idÀs


143 #unde‡
övoke_cb


144 #unde‡
io_blocktime


145 #unde‡
io˝


146 #unde‡
kqueue_ch™ge˙t


147 #unde‡
kqueue_ch™gemax


148 #unde‡
kqueue_ch™ges


149 #unde‡
kqueue_evítmax


150 #unde‡
kqueue_evíts


151 #unde‡
kqueue_fd_pid


152 #unde‡
lo›_cou¡


153 #unde‡
lo›_dïth


154 #unde‡
lo›_d⁄e


155 #unde‡
mn_now


156 #unde‡
now_Êo‹


157 #unde‡
‹igÊags


158 #unde‡
≥ndög_w


159 #unde‡
≥ndög˙t


160 #unde‡
≥ndögmax


161 #unde‡
≥ndög¥i


162 #unde‡
≥ndögs


163 #unde‡
≥riodic˙t


164 #unde‡
≥riodicmax


165 #unde‡
≥riodics


166 #unde‡
pùe_w


167 #unde‡
pùe_wrôe_skù≥d


168 #unde‡
pùe_wrôe_w™ãd


169 #unde‡
pﬁl˙t


170 #unde‡
pﬁlidxmax


171 #unde‡
pﬁlidxs


172 #unde‡
pﬁlmax


173 #unde‡
pﬁls


174 #unde‡
p‹t_evítmax


175 #unde‡
p‹t_evíts


176 #unde‡
po°f‹k


177 #unde‡
¥ï¨e˙t


178 #unde‡
¥ï¨emax


179 #unde‡
¥ï¨es


180 #unde‡
ªÀa£_cb


181 #unde‡
r„ed˙t


182 #unde‡
r„edmax


183 #unde‡
r„eds


184 #unde‡
πmn_diff


185 #unde‡
sig_≥ndög


186 #unde‡
sigfd


187 #unde‡
sigfd_£t


188 #unde‡
sigfd_w


189 #unde‡
timeout_blocktime


190 #unde‡
timî˙t


191 #unde‡
timîmax


192 #unde‡
timîs


193 #unde‡
u£rd©a


194 #unde‡
vec_eo


195 #unde‡
vec_max


196 #unde‡
vec_ri


197 #unde‡
vec_ro


198 #unde‡
vec_wi


199 #unde‡
vec_wo


	@/home/kartik/nwe/libev-4.15/event.c

40 
	~<°ddef.h
>

41 
	~<°dlib.h
>

42 
	~<as£π.h
>

44 #ifde‡
EV_EVENT_H


45 #ö˛udê
EV_EVENT_H


47 
	~"evít.h
"

50 #i‡
EV_MULTIPLICITY


51 
	#dLOOPev
 
ev_lo›
 *
lo›
 = (ev_lo› *)
ev
->
ev_ba£


	)

52 
	#dLOOPba£
 
ev_lo›
 *
lo›
 = (ev_lo› *)
ba£


	)

54 
	#dLOOPev


	)

55 
	#dLOOPba£


	)

59 
	sevít_ba£


61 
	mdummy
;

64 
evít_ba£
 *
	gev_x_cur
;

66 
ev_t°amp


67 
	$ev_tv_gë
 (
timevÆ
 *
tv
)

69 i‡(
tv
)

71 
ev_t°amp
 
a·î
 = 
tv
->
tv_£c
 +Åv->
tv_u£c
 * 1e-6;

72  
a·î
 ?áfter : 1e-6;

76 
	}
}

78 
	#EVENT_STRINGIFY
(
s
Ë#s

	)

79 
	#EVENT_VERSION
(
a
,
b
Ë
	`EVENT_STRINGIFY
 (aË"." EVENT_STRINGIFY (b)

	)

82 
	$evít_gë_vîsi⁄
 ()

85  
	`EVENT_VERSION
 (
EV_VERSION_MAJOR
, 
EV_VERSION_MINOR
);

86 
	}
}

89 
	$evít_gë_mëhod
 ()

92 
	}
}

94 *
	$evít_öô
 ()

96 #i‡
EV_MULTIPLICITY


97 i‡(
ev_x_cur
)

98 
ev_x_cur
 = (
evít_ba£
 *)
	`ev_lo›_√w
 (
EVFLAG_AUTO
);

100 
ev_x_cur
 = (
evít_ba£
 *)
	`ev_deÁu…_lo›
 (
EVFLAG_AUTO
);

102 
	`as£π
 (("libev: mu…ùÀÉvíàba£†nŸ suµ‹ãd whíÇŸ compûed wôh EV_MULTIPLICITY", !
ev_x_cur
));

104 
ev_x_cur
 = (
evít_ba£
 *)()
	`ev_deÁu…_lo›
 (
EVFLAG_AUTO
);

107  
ev_x_cur
;

108 
	}
}

111 
	$evít_ba£_gë_mëhod
 (c⁄° 
evít_ba£
 *
ba£
)

114 
	}
}

116 
evít_ba£
 *

117 
	$evít_ba£_√w
 ()

119 #i‡
EV_MULTIPLICITY


120  (
evít_ba£
 *)
	`ev_lo›_√w
 (
EVFLAG_AUTO
);

122 
	`as£π
 (("libev: multipleÉvent basesÇot supported whenÇot compiled with EV_MULTIPLICITY"));

123  
NULL
;

125 
	}
}

127 
	$evít_ba£_‰ì
 (
evít_ba£
 *
ba£
)

129 
dLOOPba£
;

131 #i‡
EV_MULTIPLICITY


132 i‡(!
	`ev_is_deÁu…_lo›
 (
lo›
))

133 
	`ev_lo›_de°roy
 (
lo›
);

135 
	}
}

137 
	$evít_di•©ch
 ()

139  
	`evít_ba£_di•©ch
 (
ev_x_cur
);

140 
	}
}

142 #ifde‡
EV_STANDALONE


143 
	$evít_£t_log_ˇŒback
 (
evít_log_cb
 
cb
)

146 
	}
}

149 
	$evít_lo›
 (
Êags
)

151  
	`evít_ba£_lo›
 (
ev_x_cur
, 
Êags
);

152 
	}
}

154 
	$evít_lo›exô
 (
timevÆ
 *
tv
)

156  
	`evít_ba£_lo›exô
 (
ev_x_cur
, 
tv
);

157 
	}
}

159 
evít_ˇŒback_‚
 
	gevít_gë_ˇŒback


160 (c⁄° 
evít
 *
	gev
)

162  
	gev
->
	gev_ˇŒback
;

166 
	$ev_x_cb
 (
evít
 *
ev
, 
ªvíts
)

168 
ªvíts
 &
EV_READ
 | 
EV_WRITE
 | 
EV_TIMER
 | 
EV_SIGNAL
;

170 
ev
->
ev_ªs
 = 
ªvíts
;

171 
ev
->
	`ev_ˇŒback
 (ev->
ev_fd
, ()
ªvíts
,Év->
ev_¨g
);

172 
	}
}

175 
	$ev_x_cb_sig
 (
EV_P_
 
ev_sig«l
 *
w
, 
ªvíts
)

177 
evít
 *
ev
 = (evíà*)(((*)
w
Ë- 
	`off£tof
 (evít, 
iosig
.
sig
));

179 i‡(
ªvíts
 & 
EV_ERROR
)

180 
	`evít_dñ
 (
ev
);

182 
	`ev_x_cb
 (
ev
, 
ªvíts
);

183 
	}
}

186 
	$ev_x_cb_io
 (
EV_P_
 
ev_io
 *
w
, 
ªvíts
)

188 
evít
 *
ev
 = (evíà*)(((*)
w
Ë- 
	`off£tof
 (evít, 
iosig
.
io
));

190 i‡((
ªvíts
 & 
EV_ERROR
Ë|| !(
ev
->
ev_evíts
 & 
EV_PERSIST
))

191 
	`evít_dñ
 (
ev
);

193 
	`ev_x_cb
 (
ev
, 
ªvíts
);

194 
	}
}

197 
	$ev_x_cb_to
 (
EV_P_
 
ev_timî
 *
w
, 
ªvíts
)

199 
evít
 *
ev
 = (evíà*)(((*)
w
Ë- 
	`off£tof
 (evít, 
to
));

201 
	`evít_dñ
 (
ev
);

203 
	`ev_x_cb
 (
ev
, 
ªvíts
);

204 
	}
}

206 
evít_£t
 (
evít
 *
ev
, 
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
)

208 i‡(
evíts
 & 
EV_SIGNAL
)

209 
	`ev_öô
 (&
ev
->
iosig
.
sig
, 
ev_x_cb_sig
);

211 
	`ev_öô
 (&
ev
->
iosig
.
io
, 
ev_x_cb_io
);

213 
	`ev_öô
 (&
ev
->
to
, 
ev_x_cb_to
);

215 
ev
->
ev_ba£
 = 
ev_x_cur
;

216 
ev
->
ev_fd
 = 
fd
;

217 
ev
->
ev_evíts
 = 
evíts
;

218 
ev
->
ev_¥i
 = 0;

219 
ev
->
ev_ˇŒback
 = 
cb
;

220 
ev
->
ev_¨g
 = 
¨g
;

221 
ev
->
ev_ªs
 = 0;

222 
ev
->
ev_Êags
 = 
EVLIST_INIT
;

223 
	}
}

225 
evít_⁄˚
 (
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
, 
timevÆ
 *
tv
)

227  
	`evít_ba£_⁄˚
 (
ev_x_cur
, 
fd
, 
evíts
, 
cb
, 
¨g
, 
tv
);

228 
	}
}

230 
	$evít_add
 (
evít
 *
ev
, 
timevÆ
 *
tv
)

232 
dLOOPev
;

234 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

236 i‡(!
	`ev_is_a˘ive
 (&
ev
->
iosig
.
sig
))

238 
	`ev_sig«l_£t
 (&
ev
->
iosig
.
sig
,Év->
ev_fd
);

239 
	`ev_sig«l_°¨t
 (
EV_A_
 &
ev
->
iosig
.
sig
);

241 
ev
->
ev_Êags
 |
EVLIST_SIGNAL
;

244 i‡(
ev
->
ev_evíts
 & (
EV_READ
 | 
EV_WRITE
))

246 i‡(!
	`ev_is_a˘ive
 (&
ev
->
iosig
.
io
))

248 
	`ev_io_£t
 (&
ev
->
iosig
.
io
,Év->
ev_fd
,Év->
ev_evíts
 & (
EV_READ
 | 
EV_WRITE
));

249 
	`ev_io_°¨t
 (
EV_A_
 &
ev
->
iosig
.
io
);

251 
ev
->
ev_Êags
 |
EVLIST_INSERTED
;

255 i‡(
tv
)

257 
ev
->
to
.
ª≥©
 = 
	`ev_tv_gë
 (
tv
);

258 
	`ev_timî_agaö
 (
EV_A_
 &
ev
->
to
);

259 
ev
->
ev_Êags
 |
EVLIST_TIMEOUT
;

263 
	`ev_timî_°›
 (
EV_A_
 &
ev
->
to
);

264 
ev
->
ev_Êags
 &~
EVLIST_TIMEOUT
;

267 
ev
->
ev_Êags
 |
EVLIST_ACTIVE
;

270 
	}
}

272 
	$evít_dñ
 (
evít
 *
ev
)

274 
dLOOPev
;

276 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

277 
	`ev_sig«l_°›
 (
EV_A_
 &
ev
->
iosig
.
sig
);

278 i‡(
ev
->
ev_evíts
 & (
EV_READ
 | 
EV_WRITE
))

279 
	`ev_io_°›
 (
EV_A_
 &
ev
->
iosig
.
io
);

281 i‡(
	`ev_is_a˘ive
 (&
ev
->
to
))

282 
	`ev_timî_°›
 (
EV_A_
 &
ev
->
to
);

284 
ev
->
ev_Êags
 = 
EVLIST_INIT
;

287 
	}
}

289 
	$evít_a˘ive
 (
evít
 *
ev
, 
ªs
, 
nˇŒs
)

291 
dLOOPev
;

293 i‡(
ªs
 & 
EV_TIMEOUT
)

294 
	`ev_„ed_evít
 (
EV_A_
 &
ev
->
to
, 
ªs
 & 
EV_TIMEOUT
);

296 i‡(
ªs
 & 
EV_SIGNAL
)

297 
	`ev_„ed_evít
 (
EV_A_
 &
ev
->
iosig
.
sig
, 
ªs
 & 
EV_SIGNAL
);

299 i‡(
ªs
 & (
EV_READ
 | 
EV_WRITE
))

300 
	`ev_„ed_evít
 (
EV_A_
 &
ev
->
iosig
.
io
, 
ªs
 & (
EV_READ
 | 
EV_WRITE
));

301 
	}
}

303 
	$evít_≥ndög
 (
evít
 *
ev
, 
evíts
, 
timevÆ
 *
tv
)

305 
ªvíts
 = 0;

306 
dLOOPev
;

308 i‡(
ev
->
ev_evíts
 & 
EV_SIGNAL
)

311 i‡(
	`ev_is_a˘ive
 (&
ev
->
iosig
.
sig
Ë|| 
	`ev_is_≥ndög
 (&ev->iosig.sig))

312 
ªvíts
 |
EV_SIGNAL
;

314 i‡(
ev
->
ev_evíts
 & (
EV_READ
 | 
EV_WRITE
))

317 i‡(
	`ev_is_a˘ive
 (&
ev
->
iosig
.
io
Ë|| 
	`ev_is_≥ndög
 (&ev->iosig.io))

318 
ªvíts
 |
ev
->
ev_evíts
 & (
EV_READ
 | 
EV_WRITE
);

321 i‡(
ev
->
ev_evíts
 & 
EV_TIMEOUT
 || 
	`ev_is_a˘ive
 (&ev->
to
Ë|| 
	`ev_is_≥ndög
 (&ev->to))

323 
ªvíts
 |
EV_TIMEOUT
;

325 i‡(
tv
)

327 
ev_t°amp
 
©
 = 
	`ev_now
 (
EV_A
);

329 
tv
->
tv_£c
 = ()
©
;

330 
tv
->
tv_u£c
 = ()((
©
 - (
ev_t°amp
Èv->
tv_£c
) * 1e6);

334  
evíts
 & 
ªvíts
;

335 
	}
}

337 
	$evít_¥i‹ôy_öô
 (
≈ri
)

339  
	`evít_ba£_¥i‹ôy_öô
 (
ev_x_cur
, 
≈ri
);

340 
	}
}

342 
	$evít_¥i‹ôy_£t
 (
evít
 *
ev
, 
¥i
)

344 
ev
->
ev_¥i
 = 
¥i
;

347 
	}
}

349 
	$evít_ba£_£t
 (
evít_ba£
 *
ba£
, 
evít
 *
ev
)

351 
ev
->
ev_ba£
 = 
ba£
;

354 
	}
}

356 
	$evít_ba£_lo›
 (
evít_ba£
 *
ba£
, 
Êags
)

358 
dLOOPba£
;

360  !
	`ev_run
 (
EV_A_
 
Êags
);

361 
	}
}

363 
	$evít_ba£_di•©ch
 (
evít_ba£
 *
ba£
)

365  
	`evít_ba£_lo›
 (
ba£
, 0);

366 
	}
}

369 
	$ev_x_lo›exô_cb
 (
ªvíts
, *
ba£
)

371 
dLOOPba£
;

373 
	`ev_bªak
 (
EV_A_
 
EVBREAK_ONE
);

374 
	}
}

376 
	$evít_ba£_lo›exô
 (
evít_ba£
 *
ba£
, 
timevÆ
 *
tv
)

378 
ev_t°amp
 
a·î
 = 
	`ev_tv_gë
 (
tv
);

379 
dLOOPba£
;

381 
	`ev_⁄˚
 (
EV_A_
 -1, 0, 
a·î
 >0. ?á·î : 0., 
ev_x_lo›exô_cb
, (*)
ba£
);

384 
	}
}

386 
	sev_x_⁄˚


388 
	mfd
;

389 (*
	mcb
)(, , *);

390 *
	m¨g
;

394 
	$ev_x_⁄˚_cb
 (
ªvíts
, *
¨g
)

396 
ev_x_⁄˚
 *
⁄˚
 = (ev_x_⁄˚ *)
¨g
;

398 
⁄˚
->
	`cb
 (⁄˚->
fd
, ()
ªvíts
, on˚->
¨g
);

399 
	`‰ì
 (
⁄˚
);

400 
	}
}

402 
evít_ba£_⁄˚
 (
evít_ba£
 *
ba£
, 
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
, 
timevÆ
 *
tv
)

404 
ev_x_⁄˚
 *
⁄˚
 = (ev_x_⁄˚ *)
	`mÆloc
 ( (ev_x_once));

405 
dLOOPba£
;

407 i‡(!
⁄˚
)

410 
⁄˚
->
fd
 = fd;

411 
⁄˚
->
cb
 = cb;

412 
⁄˚
->
¨g
 =árg;

414 
	`ev_⁄˚
 (
EV_A_
 
fd
, 
evíts
 & (
EV_READ
 | 
EV_WRITE
), 
	`ev_tv_gë
 (
tv
), 
ev_x_⁄˚_cb
, (*)
⁄˚
);

417 
	}
}

419 
	$evít_ba£_¥i‹ôy_öô
 (
evít_ba£
 *
ba£
, 
≈ri
)

424 
	}
}

	@/home/kartik/nwe/libev-4.15/event.h

40 #i‚de‡
EVENT_H_


41 
	#EVENT_H_


	)

43 #ifde‡
EV_H


44 #ö˛udê
EV_H


46 
	~"ev.h
"

49 #i‚de‡
EVLOOP_NONBLOCK


50 
	#EVLOOP_NONBLOCK
 
EVRUN_NOWAIT


	)

52 #i‚de‡
EVLOOP_ONESHOT


53 
	#EVLOOP_ONESHOT
 
EVRUN_ONCE


	)

55 #i‚de‡
EV_TIMEOUT


56 
	#EV_TIMEOUT
 
EV_TIMER


	)

59 #ifde‡
__˝lu•lus


64 #i‡!
deföed
 (
WIN32
Ë|| deföed (
__MINGW32__
)

65 
	~<time.h
>

66 
	~<sys/time.h
>

69 
evít_ba£
;

71 
	#EVLIST_TIMEOUT
 0x01

	)

72 
	#EVLIST_INSERTED
 0x02

	)

73 
	#EVLIST_SIGNAL
 0x04

	)

74 
	#EVLIST_ACTIVE
 0x08

	)

75 
	#EVLIST_INTERNAL
 0x10

	)

76 
	#EVLIST_INIT
 0x80

	)

78 (*
evít_ˇŒback_‚
)(, , *);

80 
	sevít


84 
ev_io
 
io
;

85 
ev_sig«l
 
sig
;

86 } 
iosig
;

87 
ev_timî
 
to
;

90 
evít_ba£
 *
ev_ba£
;

91 
evít_ˇŒback_‚
 
ev_ˇŒback
;

92 *
ev_¨g
;

93 
ev_fd
;

94 
ev_¥i
;

95 
ev_ªs
;

96 
ev_Êags
;

97 
ev_evíts
;

100 
evít_ˇŒback_‚
 
evít_gë_ˇŒback
 (c⁄° 
evít
 *
ev
);

102 
	#EV_READ
 
EV_READ


	)

103 
	#EV_WRITE
 
EV_WRITE


	)

104 
	#EV_PERSIST
 0x10

	)

105 
	#EV_ET
 0x20

	)

107 
	#EVENT_SIGNAL
(
ev
Ë((Ë”v)->
ev_fd
)

	)

108 
	#EVENT_FD
(
ev
Ë((Ë”v)->
ev_fd
)

	)

110 
	#evít_öôülized
(
ev
Ë(”v)->
ev_Êags
 & 
EVLIST_INIT
)

	)

112 
	#evtimî_add
(
ev
,
tv
Ë
	`evít_add
 (ev,Åv)

	)

113 
	#evtimî_£t
(
ev
,
cb
,
d©a
Ë
	`evít_£t
 (ev, -1, 0, cb, d©a)

	)

114 
	#evtimî_dñ
(
ev
Ë
	`evít_dñ
 (ev)

	)

115 
	#evtimî_≥ndög
(
ev
,
tv
Ë
	`evít_≥ndög
 (ev, 
EV_TIMEOUT
,Åv)

	)

116 
	#evtimî_öôülized
(
ev
Ë
	`evít_öôülized
 (ev)

	)

118 
	#timeout_add
(
ev
,
tv
Ë
	`evtimî_add
 (ev,Åv)

	)

119 
	#timeout_£t
(
ev
,
cb
,
d©a
Ë
	`evtimî_£t
 (ev, cb, d©a)

	)

120 
	#timeout_dñ
(
ev
Ë
	`evtimî_dñ
 (ev)

	)

121 
	#timeout_≥ndög
(
ev
,
tv
Ë
	`evtimî_≥ndög
 (ev,Åv)

	)

122 
	#timeout_öôülized
(
ev
Ë
	`evtimî_öôülized
 (ev)

	)

124 
	#sig«l_add
(
ev
,
tv
Ë
	`evít_add
 (ev,Åv)

	)

125 
	#sig«l_£t
(
ev
,
sig
,
cb
,
d©a
Ë
	`evít_£t
 (ev, sig, 
EV_SIGNAL
 | 
EV_PERSIST
, cb, d©a)

	)

126 
	#sig«l_dñ
(
ev
Ë
	`evít_dñ
 (ev)

	)

127 
	#sig«l_≥ndög
(
ev
,
tv
Ë
	`evít_≥ndög
 (ev, 
EV_SIGNAL
,Åv)

	)

128 
	#sig«l_öôülized
(
ev
Ë
	`evít_öôülized
 (ev)

	)

130 c⁄° *
evít_gë_vîsi⁄
 ();

131 c⁄° *
evít_gë_mëhod
 ();

133 *
evít_öô
 ();

134 
evít_ba£_‰ì
 (
evít_ba£
 *
ba£
);

136 
	#EVLOOP_ONCE
 
EVLOOP_ONESHOT


	)

137 
evít_lo›
 ();

138 
evít_lo›exô
 (
timevÆ
 *
tv
);

139 
evít_di•©ch
 ();

141 
	#_EVENT_LOG_DEBUG
 0

	)

142 
	#_EVENT_LOG_MSG
 1

	)

143 
	#_EVENT_LOG_WARN
 2

	)

144 
	#_EVENT_LOG_ERR
 3

	)

145 (*
evít_log_cb
)(
	t£vîôy
, c⁄° *
	tmsg
);

146 
evít_£t_log_ˇŒback
(
evít_log_cb
 
cb
);

148 
evít_£t
 (
evít
 *
ev
, 
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
);

149 
evít_⁄˚
 (
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
, 
timevÆ
 *
tv
);

151 
evít_add
 (
evít
 *
ev
, 
timevÆ
 *
tv
);

152 
evít_dñ
 (
evít
 *
ev
);

153 
evít_a˘ive
 (
evít
 *
ev
, 
ªs
, 
nˇŒs
);

155 
evít_≥ndög
 (
evít
 *
ev
, , 
timevÆ
 *
tv
);

157 
evít_¥i‹ôy_öô
 (
≈ri
);

158 
evít_¥i‹ôy_£t
 (
evít
 *
ev
, 
¥i
);

160 
evít_ba£
 *
evít_ba£_√w
 ();

161 c⁄° *
evít_ba£_gë_mëhod
 (c⁄° 
evít_ba£
 *);

162 
evít_ba£_£t
 (
evít_ba£
 *
ba£
, 
evít
 *
ev
);

163 
evít_ba£_lo›
 (
evít_ba£
 *
ba£
, );

164 
evít_ba£_lo›exô
 (
evít_ba£
 *
ba£
, 
timevÆ
 *
tv
);

165 
evít_ba£_di•©ch
 (
evít_ba£
 *
ba£
);

166 
evít_ba£_⁄˚
 (
evít_ba£
 *
ba£
, 
fd
, 
evíts
, (*
cb
)(, , *), *
¨g
, 
timevÆ
 *
tv
);

167 
evít_ba£_¥i‹ôy_öô
 (
evít_ba£
 *
ba£
, 
fd
);

172 #ifde‡
__˝lu•lus


	@/home/kartik/nwe/server.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<as£π.h
>

7 
	~<sys/sockë.h
>

8 
	~<√töë/ö.h
>

9 
	~<¨∑/öë.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<time.h
>

14 
	~<±hªad.h
>

16 
	~<°döt.h
>

18 
	~<f˙é.h
>

19 
	~<sig«l.h
>

20 
	~"ev.h
"

21 
	~"hp.h
"

22 
	~"H™dÀrs.h
"

23 
	~"Eº.h
"

24 
	~"mtwi°.h
"

27 #ifde‡
DEBUG


28 
	$¥ötH™dÀrs
(

29 c⁄° 
URLA˘i⁄sAndH™dÀr
* 
h™dÀrs
,

30 
À·
,

31 
right


34 
À·
 <
right
) {

35 
	`Ârötf
(
°dîr
, "\n%†: %†: %u", 
h™dÀrs
[
À·
].
uæ
, h™dÀrs[À·].
Âå_«me
, h™dÀrs[À·].
a˘i⁄s
);

36 
À·
++;

38 
	`Ârötf
(
°dîr
, "\n");

39 
	}
}

46 
g_num_w‹kî_thªads
;

47 
g_p‹t_num
;

48 
g_li°í_backlog
;

52 
g_höt_num_of_timeouts
;

54 c⁄° * 
g_li°íög_ù
;

58 
g_t˝_c⁄n_r_buf
;

73 
g_t˝_c⁄n_r_timeout
;

80 
g_t˝_c⁄n_w_timeout
;

85 
hâp_∑r£r_£âögs
 
	gg_hâp_ªq_£âögs
;

99 
Ró˘‹
* 
	gg_ªa˘‹s
;

117 
	gEXPECTED_HTTP_REQUEST
[] =

120 
	gEXPECTED_RECV_LEN
;

122 
	gRESPONSE
[] =

132 
size_t
 
	gRESPONSE_LEN
;

141 
	$s‹tH™dÀrs
(

142 c⁄° * 
l
,

143 c⁄° * 
r


146 c⁄° 
URLA˘i⁄sAndH™dÀr
* 
À·
 = (c⁄° URLA˘i⁄sAndH™dÀr*Ë
l
;

147 c⁄° 
URLA˘i⁄sAndH™dÀr
* 
right
 = (c⁄° URLA˘i⁄sAndH™dÀr*Ë
r
;

148  
	`°rcmp
(
À·
->
uæ
, 
right
->url);

149 
	}
}

151 
	$ö°ÆlURLH™dÀr
(

152 
Ró˘‹
* 
πr
,

153 
URLA˘i⁄sAndH™dÀr
* 
§c


156 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

157 
	`as£π
(
πr
 !
NULL
 && 
§c
 != NULL);

159 
ªt
 = 0;

160 
size
 = 
πr
->
n_uæ_h™dÀrs
;

161 i‡(
size
 < 
MAX_URL_HANDLERS
) {

162 
πr
->
uæ_h™dÀr_öfo
[
size
++] = *
§c
;

163 
πr
->
n_uæ_h™dÀrs
 = 
size
;

165 
ªt
 = 
ERR_BUFF_OVERFLOW
;

167  
ªt
;

168 
	}
}

169 
	$öôW‹kîs
(

170 
Ró˘‹
* 
ªa˘‹s
,

171 
n
,

172 
n_timeouts


175 
i
;

176 
ªt
 = 0;

177 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

178 
î∫o
 = 0;

180 
ev_lo›
* 
lo›
 = 
NULL
;

182 
i
 = 0; i < 
n
; i++) {

183 
lo›
 = 
	`ev_lo›_√w
(0);

184 i‡(
lo›
 =
NULL
) {

185 
	`Ârötf
(
°dîr
, "\nERRORÉv_lo›_√w(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

186 
	`exô
(-1);

196 
ªt
 = 
	`pùe2
(
g_ªa˘‹s
[
i
].
r_w_pùe
, 
O_CLOEXEC
 | 
O_NONBLOCK
);

197 i‡(
ªt
 < 0) {

198 
	`≥º‹
("\nERRORÖipe2() failed");

199 
	`exô
(-1);

201 
g_ªa˘‹s
[
i
].
lo›
 =Üoop;

202 
	`öôTimîLi°M≠
(&(
ªa˘‹s
[
i
].
timîs
));

203 
ªt
 = 
	`£tTimîLi°M≠
(&(
ªa˘‹s
[
i
].
timîs
), 
n_timeouts
);

204 i‡(
ªt
 != 0) {

205 
	`Ârötf
(
°dîr
, "\nERROR sëTimîLi°M≠(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

206 
	`exô
(-1);

213 
mt_°©e
* 
ønd_°©e
 = (mt_°©e*Ë
	`mÆloc
((mt_state));

214 i‡(
ønd_°©e
 =
NULL
) {

215 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

216 
	`exô
(-1);

218 
	`mts_£ed
(
ønd_°©e
);

222 
URLA˘i⁄sAndH™dÀr
 
h™dÀrs
[] =

225 "/hñloW‹ld", 
HTTP_PARSE_QUERY_PARAMS
 | 
HTTP_PARSE_HEADERS
 | 
HTTP_PARSE_COOKIES
, 
hñloW‹ld
, 
NULL


227 #ifde‡
DEBUG


232 "/d•", 
HTTP_PARSE_QUERY_PARAMS
, 
d•Sim
, 
NULL


233 #ifde‡
DEBUG


238 "/gëSP", 
HTTP_PARSE_QUERY_PARAMS
, 
gëSP
, (*Ë
ønd_°©e


239 #ifde‡
DEBUG


245 
size
 = (
h™dÀrs
)/(
URLA˘i⁄sAndH™dÀr
);

247 
j
 = 0; j < 
size
; j++) {

248 
ªt
 = 
	`ö°ÆlURLH™dÀr
(&
g_ªa˘‹s
[
i
], &
h™dÀrs
[
j
]);

249 i‡(
ªt
 != 0) {

250 
	`Ârötf
(
°dîr
, "\nERROR in°ÆlURLH™dÀr(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

251 
	`exô
(-1);

254 i‡(
size
 > 1) {

255 
	`qs‹t
(
g_ªa˘‹s
[
i
].
uæ_h™dÀr_öfo
, 
size
, (
URLA˘i⁄sAndH™dÀr
), 
s‹tH™dÀrs
);

257 #ifde‡
DEBUG


258 
	`¥ötH™dÀrs
(
g_ªa˘‹s
[
i
].
uæ_h™dÀr_öfo
, 0, 
size
 - 1);

261 
	}
}

263 
	$öôHTTPReqCBs
(

264 
hâp_∑r£r_£âögs
* 
£âögs


270 
£âögs
->
⁄_mesßge_begö
 = 
⁄HTTPReqMsgBegö
;

271 
£âögs
->
⁄_uæ
 = 
⁄HTTPReqURL
;

275 
£âögs
->
⁄_hódî_fõld
 = 
⁄HTTPReqHódîFõld
;

276 
£âögs
->
⁄_hódî_vÆue
 = 
⁄HTTPReqHódîVÆue
;

277 
£âögs
->
⁄_hódîs_com∂ëe
 = 
⁄HTTPReqHódîsCom∂ëe
;

281 
£âögs
->
⁄_body
 = 
⁄HTTPReqBody
;

285 
£âögs
->
⁄_mesßge_com∂ëe
 = 
⁄HTTPReqMsgCom∂ëe
;

286 
	}
}

298 
	$√wC⁄nOrShutdownCB
(

299 
ev_lo›
* 
lo›
,

300 
ev_io
* 
w
,

301 
ªvíts


304 (Ë
w
;

305 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

306 
	`as£π
(
ªvíts
 & 
EV_READ
);

307 
î∫o
 = 0;

309 (Ë
ªvíts
;

312 
fd
;

313 
ªt
 = 0;

316 
Ró˘‹
* 
ªa˘‹
 = (Ró˘‹*Ë
	`ev_u£rd©a
(
lo›
);

317 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

318 
	`as£π
(
ªa˘‹
 !
NULL
);

321 i‡((Ë!(
ªt
 = 
	`ªad
(
ªa˘‹
->
r_w_pùe
[0], &
fd
, ()))) {

325 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

326 
END
;

336 
	`Ârötf
(
°dîr
, "\nERRORÑód(Ëªtu∫ wôhÑë = %d,Éºnÿ%d %s:%d\n", 
ªt
, 
î∫o
, 
__FILE__
, 
__LINE__
);

337 
	`as£π
(0);

341 i‡(
fd
 < 0) {

349 
	`ev_bªak
(
lo›
, 
EVBREAK_ONE
);

353 
	`exô
(1);

362 
HTTPP¨£r
* 
∑r£r
 = 
	`¸óãHTTPP¨£r
(
HTTP_REQUEST
);

363 i‡(
∑r£r
 !
NULL
) {

365 
TCPC⁄nInfo
* 
c⁄n
 = 
	`TCPC⁄nInô
(
fd
, 
g_t˝_c⁄n_r_buf
, 
g_t˝_c⁄n_r_timeout
, 
g_t˝_c⁄n_w_timeout
, 
APP_HTTP_PARSER
, (*Ë
∑r£r
, 
ªa˘‹
, 
¥o˚ssHTTPReqCB
, 
¥o˚ssWrôeRódyCB
 , 
ªadTimeoutCB
, 
wrôeTimeoutCB
);

366 i‡(
c⁄n
 =
NULL
) {

367 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

368 
	`Ârötf
(
°dîr
, "\nERROR TCPC⁄nInô(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

370 
	`de°royHTTPP¨£r
(
∑r£r
);

371 i‡(
	`˛o£
(
fd
) != 0) {

372 
	`≥º‹
("\nERROR close() failed");

373 
	`as£π
(0);

377 i‡(
	`˛o£
(
fd
) != 0) {

378 
	`≥º‹
("\nERROR close() failed");

379 
	`as£π
(0);

383 
END
:

385 
	}
}

387 * 
	$w‹kîLo›
(

388 * 
¨g


392 
w
 = (Ë(
öçå_t
Ë
¨g
;

394 
ev_lo›
* 
lo›
 = 
g_ªa˘‹s
[
w
].loop;

400 
	`ev_£t_u£rd©a
(
lo›
, &(
g_ªa˘‹s
[
w
]));

403 
ev_io
 
io_√w_c⁄n_‹_shutdown_w©chî
;

404 
	`ev_io_öô
(&
io_√w_c⁄n_‹_shutdown_w©chî
, 
√wC⁄nOrShutdownCB
, 
g_ªa˘‹s
[
w
].
r_w_pùe
[0], 
EV_READ
);

405 
	`ev_io_°¨t
(
lo›
, &
io_√w_c⁄n_‹_shutdown_w©chî
);

407 
boﬁ
 
ªt
 = 
	`ev_run
(
lo›
, 0);

408 
	`Ârötf
(
°dîr
, "\nERRORÅhªadÑëu∫ög fromÉv_run(ËwôhÑëu∫ vÆuê%d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

410 i‡(
ªt
 =
åue
) {

411 
	`Ârötf
("\nERROR AllÉvents have beenÖrocessedándÇo watcher isáctive,Év_run() hasÉxited\n");

412 
	`¶ìp
(10);

414 
	`Ârötf
("\nERRORÉv_run()Éxited dueÅo breakÉither dueÅo shutdown or ERROR...thread isÉxiting\n");

418  
NULL
;

419 
	}
}

421 
	$°¨tW‹kîs
()

423 
i
;

424 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

425 
î∫o
 = 0;

427 
i
 = 0; i < 
g_num_w‹kî_thªads
; i++) {

428 
±hªad_t
 
thªad
;

430 i‡((
î∫o
 = 
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
w‹kîLo›
, (*)(
öçå_t
Ë
i
)) != 0) {

431 
	`≥º‹
("\nERRORÖthread_create() failed");

432 
	`exô
(-1);

435 
	}
}

437 
	$ac˚±Lo›
()

442 
sd
;

453 
sockaddr_ö
 
addr
;

454 
sockÀn_t
 
Æí
 = (
addr
);

455 
p‹t
 = 
g_p‹t_num
;

456 
sock_tmp
;

457 
cuºít_w‹kî
 = 0;

458 
›tvÆ
;

459 
ªt
 = 0;

460 
î∫o
 = 0;

462 i‡(-1 =(
sd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0))) {

463 
	`≥º‹
("\nERROR socket() failed");

464 
	`exô
(-1);

467 
addr
.
sö_Ámûy
 = 
AF_INET
;

474 i‡(
g_li°íög_ù
 =
NULL
 || (
	`°rcmp
(g_listening_ip, "0.0.0.0") == 0)) {

475 
addr
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

477 
ªt
 = 
	`öë_±⁄
(
AF_INET
, 
g_li°íög_ù
, &(
addr
.
sö_addr
.
s_addr
));

478 i‡(
ªt
 != 1) {

479 i‡(
î∫o
 != 0) {

480 
	`≥º‹
("\nERROR inet_pton() failed");

482 
	`Ârötf
(
°dîr
, "\nERROR i√t_±⁄(ËÁûed wôhÑë = %d f‹ ip:%†%s:%d\n", 
ªt
, 
g_li°íög_ù
, 
__FILE__
, 
__LINE__
);

484 
	`exô
(-1);

488 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

490 
›tvÆ
 = 1;

496 
ªt
 = 
	`£tsock›t
(
sd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›tvÆ
, (optval));

497 i‡(
ªt
 < 0) {

498 
	`≥º‹
("\nERROR setsockopt() failed");

499 
	`exô
(-1);

502 i‡(
	`böd
(
sd
, (
sockaddr
*)&
addr
, (addr))) {

503 
	`≥º‹
("\nERROR bind() failed");

504 
	`exô
(-1);

507 i‡(
	`li°í
(
sd
, 
g_li°í_backlog
)) {

508 
	`≥º‹
("\nERRORÜisten() failed");

509 
	`exô
(-1);

512 
	`Ârötf
(
°dîr
, "\nThê£rvî i†li°íög o¿%s:%d\n", 
g_li°íög_ù
 =
NULL
?"NULL":g_li°íög_ù, 
g_p‹t_num
);

518 i‡(0 > (
sock_tmp
 = 
	`ac˚±4
(
sd
, (
sockaddr
*)&
addr
, &
Æí
, 
SOCK_NONBLOCK
 | 
SOCK_CLOEXEC
))) {

519 
	`≥º‹
("\nERRORáccept4() failed");

520 
	`as£π
(0);

522 #ifde‡
DEBUG


523 
	`Ârötf
(
°dîr
, "\nDEBUG AÇew c⁄√˘i⁄ác˚±4()'ed fd = %d %s:%d\n", 
sock_tmp
, 
__FILE__
, 
__LINE__
);

534 i‡((Ë!(
ªt
 = 
	`wrôe
(
g_ªa˘‹s
[
cuºít_w‹kî
].
r_w_pùe
[1], &
sock_tmp
, ()))) {

544 
	`Ârötf
(
°dîr
, "\nERROR wrôe(ËÁûed wôhÑë = %d,Éºnÿ%d %s:%d\n", 
ªt
, 
î∫o
, 
__FILE__
, 
__LINE__
);

545 
	`as£π
(0);

556 
cuºít_w‹kî
 = (cuºít_w‹kî + 1Ë% 
g_num_w‹kî_thªads
;

558 
	`Ârötf
(
°dîr
, "\nERRORác˚±Lo›(Ëi†bªakög...%s:%d\n", 
__FILE__
, 
__LINE__
);

559 
	}
}

561 
	$maö
()

573 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

578 
g_ªa˘‹s
 = (
Ró˘‹
*Ë
	`mÆloc
((Ró˘‹Ë* 
g_num_w‹kî_thªads
);

579 i‡(
g_ªa˘‹s
 =
NULL
) {

580 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

581 
	`exô
(-1);

584 
ªt
 = 0;

588 
	`öôW‹kîs
(
g_ªa˘‹s
, 
g_num_w‹kî_thªads
, 
g_höt_num_of_timeouts
);

592 
	`öôHTTPReqCBs
(&
g_hâp_ªq_£âögs
);

599 
	`°¨tW‹kîs
();

607 
î∫o
 = 0;

608 
time•ec
 
¶p
;

609 
¶p
.
tv_£c
 = 3;

610 
¶p
.
tv_n£c
 = 0;

611 
ªt
 = 
	`«no¶ìp
(&
¶p
, 
NULL
);

612 i‡(
ªt
 != 0) {

613 
	`≥º‹
("\nERRORÇanosleep() failed");

614 
	`exô
(-1);

620 
	`ac˚±Lo›
();

622 
	}
}

	@/home/kartik/nwe/test/HTTPParser.c

1 
	~"HTTPP¨£r.h
"

2 
	~"Utûs.h
"

3 
	~<°dboﬁ.h
>

31 
g_höt_uæ_size
;

32 
g_höt_n_q∑øms
;

33 
g_höt_n_hódîs
;

34 
g_höt_n_cookõs
;

35 
g_höt_body_size
;

37 #ifde‡
DEBUG


38 
	$¥ötS‹ãdQuîyP¨ms
(

39 c⁄° * 
buf
,

40 c⁄° 
Off£tPaú
* 
kv∑ºay
,

41 
À·
,

42 
right


45 
À·
 <
right
) {

46 
	`Ârötf
(
°dîr
, "\n%s:%s", 
buf
 + 
kv∑ºay
[
À·
].
key
, bu‡+ kv∑ºay[À·].
vÆue
);

47 
À·
++;

49 
	`Ârötf
(
°dîr
, "\n");

50 
	}
}

51 
	$¥ötS‹ãdHTTPHódîs
(

52 c⁄° 
KeyVÆuePaú
* 
kv∑ºay
,

53 
À·
,

54 
right


57 
À·
 <
right
) {

58 
	`Ârötf
(
°dîr
, "\n%s:%s", 
kv∑ºay
[
À·
].
key
, kv∑ºay[À·].
vÆue
);

59 
À·
++;

61 
	`Ârötf
(
°dîr
, "\n");

62 
	}
}

65 
	$s‹tHTTPHódîs
(

66 c⁄° * 
l
,

67 c⁄° * 
r


70 c⁄° 
KeyVÆuePaú
* 
À·
 = (c⁄° KeyVÆuePaú*Ë
l
;

71 c⁄° 
KeyVÆuePaú
* 
right
 = (c⁄° KeyVÆuePaú*Ë
r
;

72  
	`°rcmp
(
À·
->
key
, 
right
->key);

73 
	}
}

75 * 
	$£¨chCookõ
(

76 * 
buf
,

77 
Off£tPaú
* 
kv∑ºay
,

78 
À·
,

79 
right
,

80 c⁄° * 
key


83 
ödex
 = -1;

84 
À·
 <
right
) {

85 
middÀ
 = (
À·
 + 
right
)/2;

86 i‡(
	`°rcmp
(
key
, 
buf
 + 
kv∑ºay
[
middÀ
].key) < 0) {

87 
right
 = 
middÀ
 - 1;

88 } i‡(
	`°rcmp
(
key
, 
buf
 + 
kv∑ºay
[
middÀ
].key) > 0) {

89 
À·
 = 
middÀ
 + 1;

91 
ödex
 = 
middÀ
;

95  (
ödex
 =-1)?
NULL
:((
buf
 + 
kv∑ºay
[ödex].
vÆue
)[0] == '\0'?NULL:buf + kvparray[index].value);

96 
	}
}

97 * 
	$£¨chHódî
(

98 
KeyVÆuePaú
* 
kv∑ºay
,

99 
À·
,

100 
right
,

101 c⁄° * 
key


104 
ödex
 = -1;

105 
À·
 <
right
) {

106 
middÀ
 = (
À·
 + 
right
)/2;

107 i‡(
	`°rcmp
(
key
, 
kv∑ºay
[
middÀ
].key) < 0) {

108 
right
 = 
middÀ
 - 1;

109 } i‡(
	`°rcmp
(
key
, 
kv∑ºay
[
middÀ
].key) > 0) {

110 
À·
 = 
middÀ
 + 1;

112 
ödex
 = 
middÀ
;

116  (
ödex
 =-1)?
NULL
:(
kv∑ºay
[ödex].
vÆue
[0] == '\0'?NULL:kvparray[index].value);

117 
	}
}

119 
HTTPP¨£r
* 
	$¸óãHTTPP¨£r
(

120 
hâp_∑r£r_ty≥
 
ty≥
,

121 
hâp_∑r£r_£âögs
* 
£âögs
,

122 
boﬁ
 
∑r£_hódîs


125 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

126 
	`as£π
(
ty≥
 =
HTTP_REQUEST
 ||Åy≥ =
HTTP_RESPONSE
);

127 
	`as£π
(
£âögs
 !
NULL
);

132 
HTTPP¨£r
* 
p
 = (HTTPP¨£r*Ë
	`mÆloc
((HTTPParser));

133 i‡(
p
 !
NULL
) {

134 
	`hâp_∑r£r_öô
(&(
p
->
∑r£r
), 
ty≥
);

135 
p
->
£âögs
 = settings;

136 
p
->
˘xt_œ°_hódî_max_size
 = 0;

137 
p
->
˘xt_œ°_hódî_c›õd
 = 0;

139 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

141 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

142 
	`as£π
(0);

145  
p
;

146 
	}
}

151 
	$de°royHTTPP¨£r
(

152 
HTTPP¨£r
* 
∑r£r


155 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

156 
	`as£π
(
∑r£r
 !
NULL
);

161 
	`‰ì
(
∑r£r
);

162 
	}
}

167 
	$£tHTTPP¨£rC⁄ãxt
(

168 
HTTPP¨£r
* 
∑r£r
,

169 * 
˘xt


172 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

173 
	`as£π
(
∑r£r
 !
NULL
 && 
˘xt
 != NULL);

175 
∑r£r
->∑r£r.
d©a
 = 
˘xt
;

176 
	}
}

178 
	$execuãHTTPP¨£r
(

179 
HTTPP¨£r
* 
∑r£r
,

180 c⁄° * 
±r
,

181 
byãs


184 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

185 
	`as£π
(
∑r£r
 !
NULL
 && 
±r
 !NULL && 
byãs
 > 0);

187 
hâp_∑r£r
* 
p
 = &(
∑r£r
->parser);

188 
hâp_∑r£r_£âögs
* 
£âögs
 = 
∑r£r
->settings;

189 
ªt
 = 0;

192 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, 
£âögs
, 
±r
, 
byãs
);

193 i‡(
≈¨£d
 !(
size_t
Ë
byãs
) {

194 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

195 
	`Ârötf
(
°dîr
, "\nERROR: %†(%sË%s:%d\n", 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(
∑r£r
)), 
	`hâp_î∫o_«me
(HTTP_PARSER_ERRNO’¨£r)), 
__FILE__
, 
__LINE__
);

197 
ªt
 = 
ERR_HTTP_PARSER
;

199  
ªt
;

200 
	}
}

202 
	$öôHTTPMsgDLi°
(

203 
HTTPMsgDLi°
* 
li°


206 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

207 
	`as£π
(
li°
 !
NULL
);

209 
li°
->
hód
 = 
NULL
;

210 
li°
->
èû
 = 
NULL
;

211 
li°
->
√xt_msg
 = 
NULL
;

212 
li°
->
size
 = 0;

213 
	}
}

218 
	$ö£πHTTPMsgAtTaû
(

219 
HTTPMsgDLi°
* 
li°
,

220 
HTTPMsg
* 
msg


223 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

224 
	`as£π
(
li°
 !
NULL
 && 
msg
 != NULL);

227 
HTTPMsg
* 
èû
 = 
li°
->tail;

229 
msg
->
√xt
 = 
NULL
;

231 i‡(
èû
 =
NULL
) {

235 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

236 
	`as£π
(
li°
->
size
 == 0);

239 
li°
->
hód
 = 
msg
;

240 
msg
->
¥ev
 = 
NULL
;

241 
li°
->
√xt_msg
 = 
msg
;

246 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

247 
	`as£π
(
li°
->
size
 > 0 &&Üi°->
hód
 !
NULL
 &&Üi°->
èû
 != NULL);

249 
msg
->
¥ev
 = 
èû
;

250 
èû
->
√xt
 = 
msg
;

252 
li°
->
èû
 = 
msg
;

253 
li°
->
size
 += 1;

254 
	}
}

259 
	$de°royHTTPMsg
(

260 
HTTPMsg
* 
msg


263 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

264 
	`as£π
(
msg
 !
NULL
);

267 
	`de°royDTextBuff
(&(
msg
->
∑r£d_uæ
.
ruæ
));

269 
	`de°royKVPBuf„r
(&(
msg
->
∑r£d_uæ
.
q∑øms
));

271 
	`de°royKVPAºay
(&(
msg
->
hódîs
));

273 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

274 
msg
->
hódîs
.
kv∑ºay
 = 
NULL
;

277 
	`de°royKVPBuf„r
(&(
msg
->
cookõs
));

279 
	`de°royDBö¨yBuff
(&(
msg
->
body
));

281 
	`de°royDTextBuff
(&(
msg
->
ª•⁄£
.
hódî
));

283 
	`de°royDBö¨yBuff
(&(
msg
->
ª•⁄£
.
body
));

285 
	`‰ì
(
msg
);

286 
	}
}

288 
	$de°royHTTPMsgDLi°
(

289 
HTTPMsgDLi°
* 
li°


292 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

293 
	`as£π
(
li°
 !
NULL
);

295 
HTTPMsg
* 
msg
 = 
li°
->
hód
;

296 
HTTPMsg
* 
tmp
 = 
msg
;

297 
msg
 !
NULL
) {

298 
tmp
 = 
msg
->
√xt
;

299 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
) {

305 
msg
->
°©e
 = 
HTTP_MSG_STATE_TCP_CONN_CLOSED
;

307 
	`de°royHTTPMsg
(
msg
);

309 
msg
 = 
tmp
;

311 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

312 
li°
->
hód
 = 
NULL
;

313 
li°
->
èû
 = 
NULL
;

314 
li°
->
size
 = 0;

316 
	`‰ì
(
li°
);

317 
	}
}

328 
	$£ndNëwD©a
(

329 
fd
,

330 
iovec
* 
vio
,

331 
size


335 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

336 
	`as£π
(
fd
 >0 && 
vio
 !
NULL
 && 
size
 > 0);

342 
î∫o
 = 0;

347 
nbyãs
 = 0;

351 
nbyãs
 = 
	`wrôev
(
fd
, 
vio
, 
size
);

356 i‡(
nbyãs
 < 0) {

358 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

360 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

361 
	`≥º‹
("\nERROR writev() failed");

362 
	`as£π
(0);

367 
nbyãs
 = -2;

374 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

375 
	`Ârötf
(
°dîr
, "\nERROR fÆ£ wrôêªadöess: wrôêblock†%s:%d\n", 
__FILE__
, 
__LINE__
);

377 
nbyãs
 = -1;

379 } i‡(
nbyãs
 == 0) {

380 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

381 
	`Ârötf
(
°dîr
, "\nERROR wrôev(Ëªtu∫ed 0 %s:%d\n", 
__FILE__
, 
__LINE__
);

389  
nbyãs
;

390 
	}
}

392 
	$£ndHTTPMsgs
(

393 
TCPC⁄nInfo
* 
c⁄n
,

394 
HTTPMsgDLi°
* 
msg_li°


397 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

398 
	`as£π
(
c⁄n
 !
NULL
 && 
msg_li°
 != NULL);

400 
WrôeCtxt
* 
˘xt
 = &(
c⁄n
->
w_˘xt
);

401 
boﬁ
 
is_wrôe_blocked
 = 
˘xt
->is_write_blocked;

402 
HTTPMsg
* 
msg
 = 
NULL
;

404 !
is_wrôe_blocked
 && (
msg
 = 
	`gëHTTPMsgDLi°Hód
(
msg_li°
))) {

405 i‡(
msg
->
°©e
 =
HTTP_MSG_STATE_RESP_COMPLETE
) {

406 
	`ªmoveHTTPMsg
(
msg_li°
, 
msg
);

407 
h_size
 = 
msg
->
ª•⁄£
.
hódî
.
size
;

408 
b_size
 = 
msg
->
ª•⁄£
.
body
.
size
;

409 
byãs_to_£nd
 = 
h_size
 + 
b_size
;

410 
boﬁ
 
ªgi°î_wrôe_w©chî
 = 
Ál£
;

412 
˘xt
->
ödex
 = 0;

413 
iovec
* 
vio
 = 
˘xt
->vio;

414 
vio
[0].
iov_ba£
 = 
msg
->
ª•⁄£
.
hódî
.
buf
;

415 
vio
[0].
iov_Àn
 = 
h_size
;

416 
vio
[1].
iov_ba£
 = 
msg
->
ª•⁄£
.
body
.
buf
;

417 
vio
[1].
iov_Àn
 = 
b_size
;

418 
nbyãs
 = 
	`£ndNëwD©a
(
c⁄n
->
fd
, 
vio
, 2);

419 
nbyãs
) {

426 
should_∑r£
 = 1;

436 
	`≥º‹
("\nERROR writev() failed");

437 
	`as£π
(0);

460 
ªgi°î_wrôe_w©chî
 = 
åue
;

465 i‡(
nbyãs
 =
byãs_to_£nd
) {

466 
	`de°royHTTPMsg
(
msg
);

468 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

469 
	`as£π
(
nbyãs
 < 
byãs_to_£nd
);

471 i‡(
nbyãs
 > 
h_size
) {

472 
˘xt
->
ödex
 = 1;

473 
vio
[1].
iov_ba£
 = 
msg
->
ª•⁄£
.
body
.
buf
 + 
nbyãs
;

475 
˘xt
->
ödex
 = 0;

476 
vio
[0].
iov_ba£
 = 
msg
->
ª•⁄£
.
hódî
.
buf
 + 
nbyãs
;

478 
ªgi°î_wrôe_w©chî
 = 
åue
;

482 i‡(
ªgi°î_wrôe_w©chî
) {

486 
	`ev_io_°¨t
(
c⁄n
->
lo›
, &(c⁄n->
io_ww©chî
));

487 
	`°¨tTimî
(&(
c⁄n
->
w_tmr
));

488 
˘xt
->
is_wrôe_blocked
 = 
åue
;

494 
	}
}

496 
	$föishHTTPMsg
(

497 
HTTPMsg
* 
msg


500 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

501 
	`as£π
(
msg
 !
NULL
 && (msg->
°©e
 =
HTTP_MSG_STATE_HANDLER_INVOKED
 || msg->°©ê=
HTTP_MSG_STATE_TCP_CONN_CLOSED
));

503 
msg
->
°©e
) {

504 
HTTP_MSG_STATE_HANDLER_INVOKED
:

506 
msg
->
°©e
 = 
HTTP_MSG_STATE_RESP_COMPLETE
;

507 
	`£ndHTTPMsgs
(
msg
->
c⁄n
, (
HTTPMsgDLi°
*Ëmsg->c⁄n->
msg_li°
);

510 
HTTP_MSG_STATE_TCP_CONN_CLOSED
:

512 
	`de°royHTTPMsg
(
msg
);

517 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

518 
	`Ârötf
(
°dîr
, "\nERROR InvÆid sèã o‡HTTPMsg %s:%d\n", 
__FILE__
, 
__LINE__
);

520 
	`as£π
(0);

523 
	}
}

526 
	$öôHTTPHódîs
(

527 
KVPAºay
* 
h


530 
h
->
hódîs
 = 
NULL
;

531 
h
->
size
 = 0;

532 
	}
}

534 
	$öôQuîyP¨ams
(

535 
QuîyP¨ams
* 
q


538 
q
->
∑øms
 = 
NULL
;

539 
q
->
size
 = 0;

540 
	}
}

542 
HTTPMsg
* 
	$gëHTTPMsg
(

543 
hâp_∑r£r_ty≥
 
ty≥
,

544 
TCPC⁄nInfo
* 
c⁄n


550 
HTTPMsg
* 
msg
 = (HTTPMsg*Ë
	`mÆloc
((HTTPMsg));

551 i‡(
msg
 !
NULL
) {

553 
msg
->
ty≥
 =Åype;

554 
msg
->
c⁄n
 = conn;

555 
msg
->
mëhod
 = 
HTTP_NONE
;

556 
msg
->
°©us_code
 = 0;

557 
msg
->
a˘i⁄s
 = 0;

558 
msg
->
uæ_h™dÀr
 = 
NULL
;

559 
msg
->
°©e
 = 
HTTP_MSG_STATE_INIT
;

568 
	`mem£t
(
msg
->
∑r£d_uæ
.
ruæ
, 0, (
DTextBuff
));

569 
	`mem£t
(
msg
->
∑r£d_uæ
.
q∑øms
, 0, (
KVPP¨£r
));

570 
	`mem£t
(
msg
->
hódîs
, 0, (
KVPAºay
));

571 
	`mem£t
(
msg
->
body
, 0, (
DBö¨yBuff
));

572 
	`mem£t
(
msg
->
cookõs
, 0, (
KVPP¨£r
));

573 
	`mem£t
(
msg
->
ª•⁄£
, 0, (
HTTPRe•⁄£
));

575 
msg
->
√xt
 = 
NULL
;

576 
msg
->
¥ev
 = 
NULL
;

578  
msg
;

579 
	}
}

584 
	$ªmoveHTTPMsg
(

585 
HTTPMsgDLi°
* 
li°
,

586 
HTTPMsg
* 
msg


589 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

590 
	`as£π
(
li°
 !
NULL
 && 
msg
 != NULL);

592 i‡(
li°
->
hód
 =
msg
) {

593 
li°
->
hód
 = 
msg
->
√xt
;

595 
msg
->
¥ev
->
√xt
 = msg->next;

597 i‡(
li°
->
hód
 =
msg
) {

598 
li°
->
èû
 = 
msg
->
¥ev
;

600 
msg
->
√xt
->
¥ev
 = msg->prev;

605 
msg
->
√xt
 = 
NULL
;

606 
msg
->
¥ev
 = 
NULL
;

607 
	}
}

609 
HTTPMsg
* 
	$gëHTTPMsgDLi°Hód
(

610 
HTTPMsgDLi°
* 
li°


613 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

614 
	`as£π
(
li°
 !
NULL
);

616  
li°
->
hód
;

617 
	}
}

619 
HTTPMsg
* 
	$ªmoveHTTPMsgDLi°Hód
(

620 
HTTPMsgDLi°
* 
li°


623 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Hód
(
li°
);

624 i‡(
msg
 !
NULL
) {

625 
	`ªmoveHTTPMsg
(
li°
, 
msg
);

627  
msg
;

628 
	}
}

630 
HTTPMsg
* 
	$gëHTTPMsgDLi°Taû
(

631 
HTTPMsgDLi°
* 
li°


634 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

635 
	`as£π
(
li°
 !
NULL
 &&Üi°->
èû
 != NULL);

637  
li°
->
èû
;

638 
	}
}

644 
HTTPMsg
* 
	$gëNextHTTPMsg
(

645 
HTTPMsgDLi°
* 
li°


648 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

649 
	`as£π
(
li°
 !
NULL
);

651 
HTTPMsg
* 
msg
 = 
li°
->
√xt_msg
;

652 
HTTPMsg
* 
ªsu…
 = 
NULL
;

656 i‡(
msg
 !
NULL
 && msg->
°©e
 =
HTTP_MSG_STATE_REQ_COMPLETE
) {

657 
ªsu…
 = 
msg
;

659  
ªsu…
;

660 
	}
}

665 
	$⁄HTTPReqMsgBegö
(

666 
hâp_∑r£r
* 
p


669 #ifde‡
DEBUG


670 
	`Ârötf
(
°dîr
, "\n***MESSAGE BEGIN*** %s:%d\n", 
__FILE__
, 
__LINE__
);

672 
ªt
 = 0;

679 
p
->
mëhod
) {

680 
HTTP_HEAD
:

681 
HTTP_POST
:

682 
HTTP_GET
:

685 
ªt
 = 
ERR_HTTP_METHOD_NOT_IMPLEMENTED
;

686 
END
;

690 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

691 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

692 
HTTPMsgSèã
 
°©e
 = 
HTTP_MSG_STATE_INIT
;

694 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

695 
	`as£π
(
°©e
 =
HTTP_MSG_STATE_NONE
 || sèã =
HTTP_MSG_STATE_MSG_COMPLETE
);

701 i‡(
°©e
 !
HTTP_MSG_STATE_NONE
 && sèã !
HTTP_MSG_STATE_MSG_COMPLETE
) {

705 
	`as£π
(0);

706 
END
;

712 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsg
(
HTTP_REQUEST
, 
c⁄n
);

713 i‡(
msg
 =
NULL
) {

714 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

719 
	`ö£πHTTPMsgAtTaû
(
li°
, 
msg
);

720 
°©e
 =
HTTP_MSG_STATE_PARSING_METHOD
;

721 
END
:

722 
msg
->
°©e
 = state;

723  
ªt
;

724 
	}
}

729 
	$⁄HTTPResSètus
(

730 
hâp_∑r£r
* 
p
,

731 c⁄° * 
©
,

732 
size_t
 
Àngth


735 ()
_
;

736 
	`Ârötf
(
°dîr
, "\n***MESSAGE Status***\n\n");

738 
	}
}

748 
	$⁄HTTPReqURL
(

749 
hâp_∑r£r
* 
p
,

750 c⁄° * 
©
,

751 
size_t
 
Àn


755 #ifde‡
DEBUG


756 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqURL(Ëövoked wôh %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

759 
ªt
 = 0;

761 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

762 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

763 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

764 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

765 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

766 
	`as£π
(
msg
 !
NULL
);

767 
	`as£π
(
°©e
 =
HTTP_MSG_STATE_PARSING_METHOD
 || sèã =
HTTP_MSG_STATE_PARSING_URL
);

770 
°©e
) {

771 
HTTP_MSG_STATE_PARSING_METHOD
:

779 
hâp_mëhod
 
m
 = (hâp_mëhodË
p
->
mëhod
;

780 
m
) {

781 
HTTP_HEAD
:

782 
HTTP_POST
:

783 
HTTP_GET
:

785 
msg
->
mëhod
 = 
m
;

789 
ªt
 = 
ERR_HTTP_METHOD_NOT_IMPLEMENTED
;

790 
END
;

792 
°©e
 = 
HTTP_MSG_STATE_PARSED_METHOD
;

797 
HTTP_MSG_STATE_PARSED_METHOD
:

802 
DTextBuff
* 
ruæ
 = &(
msg
->
∑r£d_uæ
.rurl);

803 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

804 
	`as£π
(
ruæ
->
uæ
 =
NULL
);

805 
	`as£π
(
g_höt_uæ_size
 > 0);

807 
max_size
 = (Ë(
Àn
 + 1 < 
g_höt_uæ_size
)? 
	`√xtPowîOf2
(g_hint_url_size):nextPowerOf2(len + 1);

808 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

809 
	`as£π
(
max_size
 >
Àn
 + 1 && max_sizê>
g_höt_uæ_size
);

811 * 
uæ
 = 
	`mÆloc
(
max_size
 * ());

812 i‡(
uæ
 =
NULL
) {

813 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

814 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

816 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

817 
END
;

822 
	`mem˝y
(
uæ
, 
©
, 
Àn
);

828 
uæ
[
Àn
] = '\0';

830 
msg
->
∑r£d_uæ
.
ruæ
.
uæ
 = url;

831 
msg
->
∑r£d_uæ
.
ruæ
.
max_size
 = max_size;

832 
msg
->
∑r£d_uæ
.
ruæ
.
size
 = 
Àn
;

834 
°©e
 =
HTTP_MSG_STATE_PARSING_URL
;

839 
HTTP_MSG_STATE_PARSING_URL
:

844 
max_size
 = 
msg
->
∑r£d_uæ
.
ruæ
.max_size;

845 
size
 = 
msg
->
∑r£d_uæ
.
ruæ
.size;

846 * 
uæ
 = 
msg
->
∑r£d_uæ
.
ruæ
.url;

847 i‡(
max_size
 - 
size
 - 
Àn
 <= 0) {

851 
max_size
 *= 2;

852 * 
ãmp
 = 
	`ªÆloc
(
uæ
, 
max_size
 * ());

853 i‡(
ãmp
 =
NULL
) {

859 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

860 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

862 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

863 
END
;

865 
uæ
 = 
ãmp
;

872 
	`mem˝y
(
uæ
 + 
size
, 
©
, 
Àn
);

873 
size
 +
Àn
;

874 
uæ
[
size
] = '\0';

880 
msg
->
∑r£d_uæ
.
ruæ
.
uæ
 = url;

881 
msg
->
∑r£d_uæ
.
ruæ
.
max_size
 = max_size;

882 
msg
->
∑r£d_uæ
.
ruæ
.
size
 = size;

890 
	`as£π
(0);

893 
msg
->
°©e
 = state;

894  
ªt
;

895 
	}
}

905 
	$⁄HTTPReqHódîFõld
(

906 
hâp_∑r£r
* 
p
,

907 c⁄° * 
©
,

908 
size_t
 
Àn


911 #ifde‡
DEBUG


912 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîFõld(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

914 
ªt
 = 0;

915 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

916 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

917 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

918 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

919 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

921 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

925 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_PARSING_URL
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 || sèã = 
HTTP_MSG_STATE_PARSING_BODY
 || sèã = 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
 || sèã = 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
));

928 
uöt8_t
 
a˘i⁄s
 = 0;

930 
REEXECUTE
:

931 
°©e
) {

932 
HTTP_MSG_STATE_PARSING_URL
:

938 
size
 = 
msg
->
∑r£d_uæ
.
ruæ
.size;

939 * 
uæ
 = 
msg
->
∑r£d_uæ
.
ruæ
.url;

941 
hâp_∑r£r_uæ
* 
puæ
 = &(
msg
->
∑r£d_uæ
.purl);

943 
ªt
 = 
	`hâp_∑r£r_∑r£_uæ
(
uæ
, 
size
, 0, 
puæ
);

944 i‡(
ªt
 != 0) {

945 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

946 
	`Ârötf
(
°dîr
, "\nERROR Uæ: %†couldÇŸ bê∑r£d %s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

948 
ªt
 = 
ERR_HTTP_PARSER
;

949 
END
;

952 
uöt16_t
 
fõld_£t
 = 
puæ
->field_set;

953 i‡(
fõld_£t
 & 
UF_PATH
) {

959 
uöt16_t
 
off
 = 
puæ
->
fõld_d©a
[
UF_PATH
].off;

960 
uöt16_t
 
Àn
 = 
puæ
->
fõld_d©a
[
UF_PATH
].len;

967 
a˘i⁄s
 = 
	`gëA˘i⁄sAndURLH™dÀr
(
uæ
, 
off
, 
Àn
, &(
msg
->
uæ_h™dÀr
));

968 
msg
->
a˘i⁄s
 =áctions;

969 i‡((
a˘i⁄s
 & 
HTTP_PARSE_QUERY_PARAMS
Ë&& (
fõld_£t
 & 
UF_QUERY
)) {

974 
off
 = 
puæ
->
fõld_d©a
[
UF_QUERY
].off;

975 
Àn
 = 
puæ
->
fõld_d©a
[
UF_QUERY
].len;

977 
KVPP¨£r
* 
q∑øms
 = &(
msg
->qparams);

978 
q∑øms
->
buf
 = 
uæ
 + 
off
;

979 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

980 
	`as£π
(
g_höt_n_q∑øms
 > 0);

982 
ªt
 = 
	`∑r£KVPBuf„r
(
q∑øms
, '&', '=', 
Ál£
, 
g_höt_n_q∑øms
);

983 i‡(
ªt
 != 0) {

984 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

985 
	`Ârötf
(
°dîr
, "\nERRORÖ¨sögÅhêquîy såög f‹ Uæ: %†%s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

987 
END
;

989 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

990 
	`¥ötS‹ãdQuîyP¨ms
(
q∑øms
->
buf
, q∑øms->
kv∑ºay
, 0, q∑øms->
size
 - 1);

994 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

995 
	`Ârötf
(
°dîr
, "\nERROR Uæ: %†d€¢'àhavêUF_PATH së %s:%d\n", 
uæ
, 
__FILE__
, 
__LINE__
);

997 
ªt
 = 
ERR_HTTP_PARSER
;

998 
END
;

1000 
°©e
 =
HTTP_MSG_STATE_PARSED_URL
;

1001 
REEXECUTE
;

1004 
HTTP_MSG_STATE_PARSING_BODY
:

1009 
°©e
 =
HTTP_MSG_STATE_PARSED_BODY
;

1010 
REEXECUTE
;

1013 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1014 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1023 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0;

1024 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0;

1028 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1029 
hódîs
->
size
 += 1;

1031 
°©e
) {

1032 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1034 
°©e
 =
HTTP_MSG_STATE_PARSED_HEADER_VALUE
;

1037 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1039 
°©e
 =
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
;

1044 
	`as£π
(0);

1047 
REEXECUTE
;

1050 
HTTP_MSG_STATE_PARSED_URL
:

1051 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
:

1052 
HTTP_MSG_STATE_PARSED_BODY
:

1053 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
:

1059 i‡(
a˘i⁄s
 & 
HTTP_PARSE_HEADERS
) {

1060 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1061 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1062 
max_size
 = 
hódîs
->max_size;

1063 
size
 = 
hódîs
->size;

1065 i‡(
size
 >
max_size
) {

1066 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1067 
	`as£π
(
g_höt_n_hódîs
 > 0);

1069 
max_size
 = (Ë(max_sizê=0)? 
	`√xtPowîOf2
(
g_höt_n_hódîs
):(max_size * 2);

1070 
KeyVÆuePaú
* 
ãmp
 = 
NULL
;

1071 
ãmp
 = (
KeyVÆuePaú
*Ë
	`ªÆloc
(
kv∑ºay
, 
max_size
 * (KeyValuePair));

1072 i‡(
ãmp
 =
NULL
) {

1078 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1079 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1081 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1082 
END
;

1084 
kv∑ºay
 = 
ãmp
;

1086 
hódîs
->
kv∑ºay
 = kvparray;

1087 
hódîs
->
max_size
 = max_size;

1090 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1095 
kvp
->
key
 = 
NULL
;

1096 
kvp
->
vÆue
 = 
NULL
;

1102 
key_size
 = (Ë
	`√xtPowîOf2
(
Àn
 + 1);

1103 
kvp
->
key
 = (*Ë
	`mÆloc
((Ë* 
key_size
);

1104 i‡(
kvp
->
key
 =
NULL
) {

1105 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1106 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1108 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1109 
END
;

1114 
	`mem˝y
(
kvp
->
key
, 
©
, 
Àn
);

1115 
kvp
->
key
[
Àn
] = '\0';

1116 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
Àn
;

1117 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
key_size
;

1122 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1123 
	`Ârötf
(
°dîr
, "\nDEBUG Hódî P¨sög f‹ %.*†i†nŸ së %s:%d\n", (Ë
size
, 
©
, 
__FILE__
, 
__LINE__
);

1125 
END
;

1127 
°©e
)

1129 
HTTP_MSG_STATE_PARSED_URL
:

1130 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
:

1132 
°©e
 = 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
;

1135 
HTTP_MSG_STATE_PARSED_BODY
:

1136 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
:

1138 
°©e
 = 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
;

1143 
	`as£π
(0);

1148 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1149 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1156 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1157 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1158 
size
 = 
hódîs
->size;

1160 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1162 
key_max_size
 = 
∑r£r
->
˘xt_œ°_hódî_max_size
;

1163 
key_size_c›õd
 = 
∑r£r
->
˘xt_œ°_hódî_c›õd
;

1164 i‡(
key_max_size
 - 
key_size_c›õd
 - 
Àn
 <= 0) {

1168 
key_max_size
 *= 2;

1169 * 
ãmp
 = 
NULL
;

1170 
ãmp
 = (*Ë
	`ªÆloc
(
kvp
->
key
, (Ë* 
key_max_size
);

1171 i‡(
ãmp
 =
NULL
) {

1176 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1177 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1179 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1180 
END
;

1182 
kvp
->
key
 = 
ãmp
;

1190 
	`mem˝y
(
kvp
->
key
 + 
key_size_c›õd
, 
©
, 
Àn
);

1192 
key_size_c›õd
 +
Àn
;

1194 
kvp
->
key
[
key_size_c›õd
] = '\0';

1199 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
key_size_c›õd
;

1200 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
key_max_size
;

1207 
	`as£π
(0);

1210 
END
:

1211 
msg
->
°©e
 = state;

1212  
ªt
;

1213 
	}
}

1223 
	$⁄HTTPReqHódîVÆue
(

1224 
hâp_∑r£r
* 
p
,

1225 c⁄° * 
©
,

1226 
size_t
 
Àn


1229 #ifde‡
DEBUG


1230 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîVÆue(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1232 
ªt
 = 0;

1233 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1234 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1235 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

1236 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1237 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1239 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1243 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_PARSING_HEADER_FIELD
 || sèã =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
 || sèã = 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
 || sèã = 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
));

1247 
°©e
) {

1249 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1250 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1259 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0;

1260 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0;

1262 
°©e
) {

1263 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
:

1265 
°©e
 =
HTTP_MSG_STATE_PARSED_HEADER_FIELD
;

1268 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
:

1270 
°©e
 =
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
;

1275 
	`as£π
(0);

1283 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
:

1284 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
:

1290 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1291 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1292 
size
 = 
hódîs
->size;

1294 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1301 
vÆue_size
 = (Ë
	`√xtPowîOf2
(
Àn
 + 1);

1302 
kvp
->
vÆue
 = (*Ë
	`mÆloc
((Ë* 
vÆue_size
);

1303 i‡(
kvp
->
vÆue
 =
NULL
) {

1304 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1305 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1307 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1308 
END
;

1313 
	`mem˝y
(
kvp
->
vÆue
, 
©
, 
Àn
);

1314 
kvp
->
vÆue
[
Àn
] = '\0';

1315 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
Àn
;

1316 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
vÆue_size
;

1318 
°©e
)

1320 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
:

1322 
°©e
 = 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
;

1325 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
:

1327 
°©e
 = 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
;

1332 
	`as£π
(0);

1338 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
:

1339 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
:

1346 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1347 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1348 
size
 = 
hódîs
->size;

1350 
KeyVÆuePaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

1352 
vÆue_max_size
 = 
∑r£r
->
˘xt_œ°_hódî_max_size
;

1353 
vÆue_size_c›õd
 = 
∑r£r
->
˘xt_œ°_hódî_c›õd
;

1354 i‡(
vÆue_max_size
 - 
vÆue_size_c›õd
 - 
Àn
 <= 0) {

1358 
vÆue_max_size
 *= 2;

1359 * 
ãmp
 = 
NULL
;

1360 
ãmp
 = (*Ë
	`ªÆloc
(
kvp
->
vÆue
, (Ë* 
vÆue_max_size
);

1361 i‡(
ãmp
 =
NULL
) {

1366 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1367 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1369 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1370 
END
;

1372 
kvp
->
vÆue
 = 
ãmp
;

1379 
	`mem˝y
(
kvp
->
vÆue
 + 
vÆue_size_c›õd
, 
©
, 
Àn
);

1381 
vÆue_size_c›õd
 +
Àn
;

1383 
kvp
->
vÆue
[
vÆue_size_c›õd
] = '\0';

1388 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 
vÆue_size_c›õd
;

1389 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 
vÆue_max_size
;

1398 
	`as£π
(0);

1402 
END
:

1403 
msg
->
°©e
 = state;

1404  
ªt
;

1405 
	}
}

1414 
	$⁄HTTPReqHódîsCom∂ëe
(

1415 
hâp_∑r£r
* 
p


1418 #ifde‡
DEBUG


1419 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqHódîsCom∂ëe(Ëövoked *** %s:%d\n", 
__FILE__
, 
__LINE__
);

1421 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1422 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1423 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1427 
	`as£π
(
msg
->
°©e
 =
HTTP_MSG_STATE_PARSING_HEADER_VALUE
);

1430 
∑r£r
->
˘xt_œ°_hódî_c›õd
 = 0

1431 
∑r£r
->
˘xt_œ°_hódî_max_size
 = 0

1432 
msg
->
°©e
 = 
HTTP_MSG_STATE_HEADERS_COMPLETE
;

1434 
	}
}

1443 
	$⁄HTTPReqBody
(

1444 
hâp_∑r£r
* 
p
,

1445 c⁄° * 
©
,

1446 
size_t
 
Àn


1449 #ifde‡
DEBUG


1450 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqBody(Ëövoked %.*†*** %s:%d\n", (Ë
Àn
, 
©
, 
__FILE__
, 
__LINE__
);

1452 
ªt
 = 0;

1453 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1454 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

1455 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1456 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1458 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1463 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_HEADERS_COMPLETE
 || sèã =
HTTP_MSG_STATE_PARSING_BODY
 || sèã =
HTTP_MSG_STATE_PARSING_URL
));

1466 
°©e
) {

1467 
HTTP_MSG_STATE_PARSING_URL
:

1468 
HTTP_MSG_STATE_HEADERS_COMPLETE
:

1470 
°©e
 = 
HTTP_MSG_STATE_PARSING_BODY
;

1475 
HTTP_MSG_STATE_PARSING_BODY
:

1477 
DBö¨yBuff
* 
body
 = &(
msg
->body);

1478 * 
buf
 = 
body
->buf;

1479 
size
 = 
body
->size;

1480 
max_size
 = 
body
->max_size;

1481 i‡(
size
 >
max_size
) {

1482 
max_size
 = (Ë(max_sizê=0)? ((
Àn
 + 1 < 
g_höt_body_size
)? 
	`√xtPowîOf2
(g_hint_body_size):nextPowerOf2(len + 1)):(max_size * 2);

1483 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1488 
	`as£π
(
max_size
 >
Àn
 + 1 && max_sizê>
g_höt_body_size
);

1490 * 
ãmp
 = 
NULL
;

1491 
ãmp
 = (*Ë
	`ªÆloc
(
buf
, 
max_size
 * ());

1492 i‡(
ãmp
 =
NULL
) {

1498 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1499 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1501 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

1502 
END
;

1504 
buf
 = 
ãmp
;

1505 
body
->
buf
 = buf;

1506 
body
->
max_size
 = max_size;

1508 
	`mem˝y
(
buf
 + 
size
, 
©
, 
Àn
);

1509 
size
 +
Àn
;

1510 
buf
[
size
] = '\0';

1511 
body
->
size
 = size;

1519 
	`as£π
(0);

1522  
ªt
;

1523 
	}
}

1529 
	$⁄HTTPReqMsgCom∂ëe
(

1530 
hâp_∑r£r
* 
p


1533 #ifde‡
DEBUG


1534 
	`Ârötf
(
°dîr
, "\n⁄HTTPReqMsgCom∂ëe(Ëövoked *** %s:%d\n", 
__FILE__
, 
__LINE__
);

1536 
ªt
 = 0;

1537 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
p
->
d©a
;

1538 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

1539 
HTTPMsg
* 
msg
 = 
	`gëHTTPMsgDLi°Taû
(
li°
);

1540 
HTTPMsgSèã
 
°©e
 = 
msg
->state;

1542 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1547 
	`as£π
(
msg
 !
NULL
 && (
°©e
 =
HTTP_MSG_STATE_HEADERS_COMPLETE
 || sèã =
HTTP_MSG_STATE_PARSING_BODY
 || sèã =
HTTP_MSG_STATE_PARSING_URL
));

1550 
msg
->
°©e
 = 
HTTP_MSG_STATE_MSG_COMPLETE
;

1552 
uöt8_t
 
a˘i⁄s
 = 
msg
->actions;

1553 i‡(
a˘i⁄s
 & 
HTTP_PARSE_HEADERS
) {

1554 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1555 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1556 
size
 = 
hódîs
->size;

1557 i‡(
size
 > 1) {

1558 
	`qs‹t
(
kv∑ºay
, 
size
, (
KeyVÆuePaú
), 
s‹tHTTPHódîs
);

1559 #ifde‡
DEBUG


1560 
	`¥ötS‹ãdHTTPHódîs
(
kv∑ºay
, 0, 
size
 - 1);

1563 i‡(
a˘i⁄s
 & 
HTTP_PARSE_COOKIES
) {

1564 * 
cookõ_hódî_vÆue
 = 
	`£¨chHódî
(
kv∑ºay
, 0, 
size
 - 1, "Cookie");

1565 i‡(
cookõ_hódî_vÆue
 !
NULL
) {

1566 
KVPP¨£r
* 
cookõs
 = 
msg
->cookies;

1567 
cookõs
->
buf
 = 
cookõ_hódî_vÆue
;

1568 
ªt
 = 
	`∑r£KVPBuf„r
(
cookõs
, ';', '=', 
åue
, 
g_höt_n_cookõs
);

1569 i‡(
ªt
 != 0) {

1570 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1571 
	`Ârötf
(
°dîr
, "\nERRORÖ¨sögÅhêcookõ_hódî_vÆuêf‹ cookõ†: %†%s:%d\n", 
cookõs
->
buf
, 
__FILE__
, 
__LINE__
);

1577  
ªt
;

1578 
	}
}

1584 c⁄° * 
	$gëHTTPMsgHódî
(

1585 
HTTPMsg
* 
msg
,

1586 c⁄° * 
hódî_«me


1589 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1590 
	`as£π
(
msg
 !
NULL
 && 
hódî_«me
 != NULL && header_name[0] != '\0');

1592 
KVPAºay
* 
hódîs
 = &(
msg
->headers);

1593 
KeyVÆuePaú
* 
kv∑ºay
 = 
hódîs
->kvparray;

1594 
size
 = 
hódîs
->size;

1595 * 
ªsu…
 = 
	`£¨chHódî
(
kv∑ºay
, 0, 
size
 - 1, 
hódî_«me
);

1596  
ªsu…
;

1597 
	}
}

1599 c⁄° * 
	$gëHTTPMsgCookõ
(

1600 
HTTPMsg
* 
msg
,

1601 c⁄° * 
cookõ_«me


1604 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1605 
	`as£π
(
msg
 !
NULL
 && 
cookõ_«me
 != NULL && cookie_name[0] != '\0');

1607 
KVPP¨£r
* 
cookõs
 = &(
msg
->cookies);

1608 
Off£tPaú
* 
kv∑ºay
 = 
cookõs
->kvparray;

1609 * 
buf
 = 
cookõs
->buf;

1610 
size
 = 
cookõs
->size;

1611 * 
ªsu…
 = 
	`£¨chCookõ
(
buf
, 
kv∑ºay
, 0, 
size
 - 1, 
cookõ_«me
);

1612  
ªsu…
;

1613 
	}
}

1617 * 
	$gëHTTPMsgBody
(

1618 
HTTPMsg
* 
msg
,

1619 * 
Àn


1622 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1623 
	`as£π
(
msg
 !
NULL
);

1625 
DBö¨yBuff
* 
body
 = &(
msg
->body);

1626 *
Àn
 = 
body
->
size
;

1627  
body
->
buf
;

1628 
	}
}

1631 
	$HTTPP¨£rExecuã
(

1632 * 
∑r£r_obj
,

1633 
¨gs
,

1637 
va_li°
 
li°
;

1638 
	`va_°¨t
(
li°
, 
¨gs
);

1640 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

1641 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

1643 
hâp_∑r£r_£âögs
* 
£âögs
 = 
x
->settings;

1645 * 
buf
 = 
	`va_¨g
(
li°
, *);

1646 
Àn
 = 
	`v¨_¨g
(
li°
, );

1648 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, 
£âögs
, 
buf
, 
Àn
);

1650 i‡(
≈¨£d
 !(
size_t
)
Àn
) {

1654 
	`Ârötf
(
°dîr
,

1656 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

1657 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

1658  
EXIT_FAILURE
;

1661 
	}
}

1663 
	$HTTPP¨£rEº‹
(

1664 * 
∑r£r_obj
,

1665 
¨gs
,

1669 
va_li°
 
li°
;

1670 
	`va_°¨t
(
li°
, 
¨gs
);

1672 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

1673 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

1675 
	`Ârötf
(
°dîr
,

1677 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

1678 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

1680 
	}
}

1682 
	$HTTPP¨£rDe°roy
(

1683 * 
∑r£r_obj
,

1684 
£âögs
,

1685 * 
˘xt


1689 
	}
}

	@/home/kartik/nwe/test/HTTPParser.h

1 #i‚de‡
__HTTP_PARSER_H__


2 
	#__HTTP_PARSER_H__


	)

4 
	~"hâp_∑r£r.h
"

5 
	~<°döt.h
>

7 
	gTCPC⁄nInfo
;

9 
	gHTTPMsg
;

11 (*
	tFPTRURLH™dÀr
Ë(
	tHTTPMsg
*);

17 
	eHTTPMsgSèã
 {

18 
HTTP_MSG_STATE_INIT
,

19 
HTTP_MSG_STATE_PARSING_METHOD
,

20 
HTTP_MSG_STATE_PARSED_METHOD
,

21 
HTTP_MSG_STATE_PARSED_STATUS
,

22 
HTTP_MSG_STATE_PARSING_URL
,

23 
HTTP_MSG_STATE_PARSED_URL
,

24 
HTTP_MSG_STATE_PARSING_HEADER_FIELD
,

25 
HTTP_MSG_STATE_PARSED_HEADER_FIELD
,

26 
HTTP_MSG_STATE_PARSING_HEADER_VALUE
,

27 
HTTP_MSG_STATE_PARSED_HEADER_VALUE
,

28 
HTTP_MSG_STATE_HEADERS_COMPLETE
,

29 
HTTP_MSG_STATE_PARSING_BODY
,

30 
HTTP_MSG_STATE_PARSED_BODY
,

31 
HTTP_MSG_STATE_PARSING_FOOTER_FIELD
,

32 
HTTP_MSG_STATE_PARSED_FOOTER_FIELD
,

33 
HTTP_MSG_STATE_PARSING_FOOTER_VALUE
,

34 
HTTP_MSG_STATE_PARSED_FOOTER_VALUE
,

35 
HTTP_MSG_STATE_REQ_COMPLETE
,

36 
HTTP_MSG_STATE_HANDLER_INVOKED
,

37 
HTTP_MSG_STATE_RESPONSE_WRITTEN
,

43 
HTTP_MSG_STATE_TCP_CONN_CLOSED


46 
	eHTTPURLH™dÀrFœgs
 {

47 
HTTP_PARSE_QUERY_PARAMS
 = 1,

48 
HTTP_PARSE_HEADERS
 = 2

56 
uöt8_t
 
a˘i⁄s
;

59 
	sHTTPP¨£r
 {

60 
hâp_∑r£r
 
∑r£r
;

64 
hâp_∑r£r_£âögs
* 
£âögs
;

73 
˘xt_œ°_hódî_c›õd
;

78 
˘xt_œ°_hódî_max_size
;

84 
˘xt_msg_body_c›õd
;

86 
˘xt_msg_body_c›õd
;

119 
	sHTTPP¨£dURL
 {

120 
DTextBuff
 
ruæ
;

121 
KVPP¨£r
 
q∑øms
;

122 
hâp_∑r£r_uæ
 
puæ
;

125 
	sHTTPRe•⁄£
 {

126 
DTextBuff
 
hódî
;

127 
DBö¨yBuff
 
body
;

131 
	sHTTPMsg
 {

137 
hâp_∑r£r_ty≥
 
ty≥
;

139 
TCPC⁄nInfo
* 
c⁄n
;

143 
hâp_mëhod
 
mëhod
;

144 
uöt8_t
 
a˘i⁄s
;

145 
FPTRURLH™dÀr
 
uæ_h™dÀr
;

149 
°©us_code
;

154 
HTTPP¨£dURL
 
∑r£d_uæ
;

159 
KVPAºay
 
hódîs
;

163 
KVPP¨£r
 
cookõs
;

170 
DBö¨yBuff
 
body
;

175 
HTTPRe•⁄£
 
ª•⁄£
;

177 
HTTPMsgSèã
 
°©e
;

181 
HTTPMsg
* 
√xt
;

183 
HTTPMsg
* 
¥ev
;

187 
	sHTTPMsgDLi°
 {

188 
HTTPMsg
* 
hód
;

189 
HTTPMsg
* 
èû
;

196 
HTTPMsg
* 
√xt_msg
;

197 
size
;

211 
	`⁄HTTPReqMsgBegö
(
hâp_∑r£r
*);

212 
	`⁄HTTPReqURL
(
hâp_∑r£r
*, c⁄° *, 
size_t
);

213 
	`⁄HTTPReqHódîsCom∂ëe
(
hâp_∑r£r
*);

214 
	`⁄HTTPReqMsgCom∂ëe
(
hâp_∑r£r
*);

215 
	`⁄HTTPReqHódîFõld
(
hâp_∑r£r
*, c⁄° *, 
size_t
);

216 
	`⁄HTTPReqHódîVÆue
(
hâp_∑r£r
*, c⁄° *, 
size_t
);

217 
	`⁄HTTPReqBody
(
hâp_∑r£r
*, c⁄° *, 
size_t
);

219 
	`⁄Sètus
(
hâp_∑r£r
*, c⁄° *, 
size_t
);

221 
HTTPP¨£r
* 
	`¸óãHTTPP¨£r
(
hâp_∑r£r_ty≥
 
ty≥
, 
hâp_∑r£r_£âögs
* 
£âögs
, 
boﬁ
 
∑r£_hódîs
);

222 
	`£tHTTPP¨£rC⁄ãxt
(
HTTPP¨£r
* 
∑r£r
, * 
˘xt
);

	@/home/kartik/nwe/test/NetUtils.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<as£π.h
>

7 
	~<sys/sockë.h
>

8 
	~<√töë/ö.h
>

9 
	~<¨∑/öë.h
>

10 
	~<°rög.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<time.h
>

14 
	~<±hªad.h
>

15 
	~<sys/evítfd.h
>

16 
	~<°döt.h
>

22 
	~"ev.h
"

24 
	~"NëUtûs.h
"

25 
	~"Timî.h
"

26 
	~"Eº.h
"

35 
	$√twBuffInô
(

36 
TCPC⁄nInfo
* 
c⁄n
,

37 
NëwBuff
* 
buf
,

38 
max_size
,

39 
NëwBuffTy≥
 
ty≥


42 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

43 
	`as£π
(
ty≥
 =
NETW_BUFF_READ
 ||Åy≥ =
NETW_BUFF_WRITE
);

44 i‡(
ty≥
 = 
NETW_BUFF_READ
) {

45 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
rbuf
));

47 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
wbuf
));

51 
buf
->
d©a
 = (*Ë
	`mÆloc
((Ë* 
max_size
);

52 i‡(
buf
->
d©a
 =
NULL
) {

53 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

54 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

55 
	`as£π
(0);

57  
ERR_HEAP_ALLOC_FAILURE
;

59 
buf
->
°¨t_ödex
 = 0;

63 
buf
->
íd_ödex
 = 0;

64 
buf
->
max_Àn
 = 
max_size
;

65 
buf
->
c⁄n
 = conn;

66 
buf
->
em±y_•a˚
 = 
max_size
;

67 
buf
->
ty≥
 =Åype;

73 
	}
}

75 
	$öôTCPC⁄nBuff
(

76 
TCPC⁄nInfo
* 
c⁄n
,

77 
TCPC⁄nBuff
* 
buf
,

78 
max_size


81 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

82 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
rbuf
));

85 
ªt
 = 0;

86 
DBö¨yBuff
* 
d©a
 = &(
buf
->data);

88 
d©a
->
buf
 = (*Ë
	`mÆloc
((Ë* 
max_size
);

89 i‡(
d©a
->
buf
 =
NULL
) {

90 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

91 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

92 
	`as£π
(0);

94 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

95 
END
;

98 
d©a
->
max_size
 = max_size;

99 
d©a
->
size
 = 0;

100 
buf
->
c⁄n
 = conn;

102 
END
:

103  
ªt
;

104 
	}
}

115 
	$√twBuffByãsToPro˚ss
(

116 
NëwBuff
* 
buf


117 ** 
±r1
,

118 * 
byãs1
,

119 ** 
±r2


123 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

124 
	`as£π
(
buf
 !
NULL
 && buf->
ty≥
 = 
NETW_BUFF_READ
);

127 * 
d©a
 = 
buf
->data;

128 
°¨t_ödex
 = 
buf
->start_index;

129 
íd_ödex
 = 
buf
->end_index;

130 
max_size
 = 
buf
->max_size;

131 
ªsu…
 = 0;

133 **
±r1
 = 
d©a
 + 
íd_ödex
;

134 i‡(
°¨t_ödex
 <
íd_ödex
) {

136 *
byãs1
 = 
max_size
 - 
íd_ödex
;

137 **
±r2
 = 
d©a
;

138 
ªsu…
 = *
byãs1
 + 
°¨t_ödex
;

140 *
byãs1
 = 
°¨t_ödex
 - 
íd_ödex
;

141 **
±r2
 = 
NULL
;

142 
ªsu…
 = *
byãs1
;

144  
ªsu…
;

145 
	}
}

146 
	$gëTCPC⁄nByãsToPro˚ss
(

147 
TCPC⁄nBuff
* 
buf


151 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

152 
	`as£π
(
buf
 !
NULL
);

154  
buf
->
d©a
.
size
;

155 
	}
}

168 
	$√tw_buff_em±y_•a˚
(

169 
NëwBuff
* 
buf


172  
buf
->
em±y_•a˚
;

173 
	}
}

175 
	$√twBuffDe°roy
(

176 
NëwBuff
* 
buf


179 
	`‰ì
(
buf
->
d©a
);

180 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

181 
buf
->
d©a
 = 
NULL
;

182 
buf
->
°¨t_ödex
 = 0;

183 
buf
->
íd_ödex
 = 0;

184 
buf
->
max_Àn
 = 0;

185 
buf
->
c⁄n
 = 
NULL
;

186 
buf
->
ty≥
 = 
NETW_BUFF_UNDEFINED
;

187 
buf
->
em±y_•a˚
 = 0;

189 
	}
}

191 
	$de°royTCPC⁄nBuff
(

192 
TCPC⁄nBuff
* 
buf


199 
	`‰ì
(
buf
->
d©a
.buf);

200 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

201 
buf
->
d©a
.bu‡
NULL
;

202 
buf
->
d©a
.
size
 = 0;

203 
buf
->
d©a
.
max_size
 = 0;

204 
buf
->
c⁄n
 = 
NULL
;

206 
	}
}

223 
	$√tw_buff_£nd
(

224 
NëwBuff
* 
buf


227 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

228 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_WRITE
);

230 
fd
 = 
buf
->
c⁄n
->fd;

231 
°¨t_ödex
 = 
buf
->start_index;

232 
íd_ödex
 = 
buf
->end_index;

233 
max_size
 = 
buf
->max_size;

234 
em±y_•a˚
 = 
buf
->empty_space;

235 * 
d©a
 = 
buf
->data;

237 
byãs_to_£nd
 = 0;

238 
right_•a˚_fûÀd
 = 0;

239 
À·_•a˚_fûÀd
 = 0;

241 
î∫o
 = 0;

243 
nbyãs
 = 0;

244 i‡(
em±y_•a˚
 =
max_size
) {

249 
nbyãs
 = 0;

254 i‡(
íd_ödex
 < 
°¨t_ödex
) {

258 
byãs_to_£nd
 = 
°¨t_ödex
 - 
íd_ödex
;

259 
d©a
 = d©®+ 
íd_ödex
;

260 
nbyãs
 = 
	`£nd
(
fd
, 
d©a
, 
byãs_to_£nd
, 0);

266 
io_vec
 
vec
[2];

267 
ödex
 = 0;

268 
right_•a˚_fûÀd
 = 
max_size
 - 
íd_ödex
;

269 i‡(
right_•a˚_fûÀd
 > 0) {

270 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
íd_ödex
;

271 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_fûÀd
;

272 
ödex
++;

275 
À·_•a˚_fûÀd
 = 
°¨t_ödex
 - 0;

277 i‡(
À·_•a˚_fûÀd
 > 0) {

278 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
 - 1;

279 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_fûÀd
;

280 
ödex
++;

282 
nbyãs
 = 
	`wrôev
(
fd
, 
vec
, 
ödex
);

286 i‡(
nbyãs
 < 0) {

288 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

290 
	`≥º‹
("\nERROR send() failed");

291 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

292 
	`as£π
(0);

294 
nbyãs
 = -2;

301 
nbyãs
 = -1;

304 i‡(
nbyãs
 > 0) {

309 
íd_ödex
 = (íd_ödex + 
nbyãs
Ë% 
max_size
;

310 
em±y_•a˚
 +
nbyãs
;

311 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

312 
	`as£π
(
íd_ödex
 >=0 &&Énd_ödex < 
max_size
);

313 
	`as£π
(
em±y_•a˚
 >= 0);

315 
buf
->
íd_ödex
 =Énd_index;

316 
buf
->
em±y_•a˚
 =Émpty_space;

318 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

322 
	`as£π
(
î∫o
 == 0);

324  
nbyãs
;

325 
	}
}

337 
	$√twBuffRecv
(

338 
NëwBuff
* 
buf


342 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

343 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_READ
);

346 
fd
 = 
buf
->
c⁄n
->fd;

347 
°¨t_ödex
 = 
buf
->start_index;

348 
íd_ödex
 = 
buf
->end_index;

349 
max_size
 = 
buf
->max_size;

350 
em±y_•a˚
 = 
buf
->empty_space;

351 * 
d©a
 = 
buf
->data;

357 
byãs_to_ªcv
 = 0;

358 
right_•a˚_À·
 = 0;

359 
À·_•a˚_À·
 = 0;

365 
î∫o
 = 0;

369 
nbyãs
 = 0;

370 i‡(
em±y_•a˚
 == 0) {

375 
nbyãs
 = -3;

376 
END
;

381 i‡(
°¨t_ödex
 < 
íd_ödex
) {

385 
byãs_to_ªcv
 = 
íd_ödex
 - 
°¨t_ödex
;

386 
d©a
 = d©®+ 
°¨t_ödex
;

387 
nbyãs
 = 
	`ªcv
(
fd
, 
d©a
, 
byãs_to_ªcv
, 0);

393 
io_vec
 
vec
[2];

394 
ödex
 = 0;

398 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

400 i‡(
right_•a˚_À·
 > 0) {

401 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
;

402 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_À·
;

403 
ödex
++;

408 
À·_•a˚_À·
 = 
íd_ödex
;

410 i‡(
À·_•a˚_À·
 > 0) {

412 
vec
[
ödex
].
iov_ba£
 = 
d©a
;

413 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_À·
;

414 
ödex
++;

416 
nbyãs
 = 
	`ªadv
(
fd
, 
vec
, 
ödex
);

420 i‡(
nbyãs
 < 0) {

422 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

424 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

425 
	`≥º‹
("\nERRORÑecv() failed");

426 
	`as£π
(0);

431 
nbyãs
 = -2;

438 
nbyãs
 = -1;

441 i‡(
nbyãs
 > 0) {

446 
°¨t_ödex
 = (°¨t_ödex + 
nbyãs
Ë% 
max_size
;

447 
em±y_•a˚
 +
nbyãs
;

448 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

449 
	`as£π
(
°¨t_ödex
 >=0 && sèπ_ödex < 
max_size
);

450 
	`as£π
(
em±y_•a˚
 >= 0);

452 
buf
->
°¨t_ödex
 = start_index;

453 
buf
->
em±y_•a˚
 =Émpty_space;

456 
END
:

457 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

461 
	`as£π
(
î∫o
 == 0);

463  
nbyãs
;

464 
	}
}

474 
	$ªcvNëwD©a
(

475 
TCPC⁄nBuff
* 
buf


479 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

480 
	`as£π
(
buf
 !
NULL
 && buf->
d©a
.
size
 == 0);

483 
fd
 = 
buf
->
c⁄n
->fd;

484 
max_size
 = 
buf
->
d©a
.max_size;

485 * 
d©a
 = (*Ë
buf
->data.buf;

492 
î∫o
 = 0;

497 
nbyãs
 = 0;

501 
nbyãs
 = 
	`ªcv
(
fd
, 
d©a
, 
max_size
, 0);

504 i‡(
nbyãs
 < 0) {

506 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

508 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

509 
	`≥º‹
("\nERRORÑecv() failed");

510 
	`as£π
(0);

515 
nbyãs
 = -2;

522 
nbyãs
 = -1;

525 
buf
->
d©a
.
size
 = 
nbyãs
;

526 
	}
}

528 
	$√tw_buff_¢¥ötf
(

529 
NëwBuff
* 
buf
,

530 c⁄° * 
f‹m©
,

538 
va_li°
 
¨gs
;

539 
	`va_°¨t
(
¨gs
, 
f‹m©
);

540 
°¨t_ödex
 = 
buf
->start_index;

541 
íd_ödex
 = 
buf
->end_index;

542 
max_size
 = 
buf
->max_size;

543 * 
d©a
 = 
buf
->data;

545 
•a˚_À·
 = 0;

546 
right_•a˚_À·
 = 0;

547 
À·_•a˚_À·
 = 0;

548 
Êag
 = 0;

549 i‡(
°¨t_ödex
 < 
íd_ödex
) {

550 
•a˚_À·
 = 
íd_ödex
 - 
°¨t_ödex
;

553 
Êag
 = 1;

554 
•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

555 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

556 
À·_•a˚_À·
 = 
íd_ödex
;

558 i‡(
•a˚_À·
 != 0) {

559 i‡(!
Êag
) {

561 
byãs_wrôãn
;

562 
byãs_wrôãn
 = 
	`v¢¥ötf
(
d©a
, 
•a˚_À·
, 
f‹m©
, 
¨gs
);

563 i‡(
ªsu…
 >
buf
->
max_size
) {

565 #ifde‡
DEBUG


570 
	`Ârötf
(
°dîr
, "\nERROR Nëw‹k buf„∏i†fuŒ, wrôög iàtÿthêkî√»%s:%d\n", 
__FILE__
, 
__LINE__
);

571 
î∫o
 = 0;

572 
nbyãs
 = 
	`£nd
(
fd
, 
buf
->
d©a
, buf->
max_size
, 0);

573 i‡(
nbyãs
 < 0) {

574 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

575 
	`≥º‹
("\nERROR send() failed");

576 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

577 
	`as£π
(0);

581 i‡(
nbyãs
 == 0) {

597 
	`va_íd
(
¨gs
);

598  
ªsu…
;

599 
	}
}

607 
TCPC⁄nInfo
* 
	$TCPC⁄nInô
(

608 
fd
,

609 
r_buf_size
,

611 
r_timeout
,

612 
w_timeout
,

615 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
,

616 * 
∑r£r
,

617 
ev_lo›
* 
lo›
,

618 
FPTRIOCB
 
io_rcb
,

619 
FPTRIOCB
 
io_wcb
,

620 
FPTRTimeoutCB
 
r_timeout_cb
,

621 
FPTRTimeoutCB
 
w_timeout_cb


624 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

625 
	`as£π
(
fd
 >0 && 
r_buf_size
 > 0 && 
r_timeout
 > 0 && 
w_timeout
 > 0 && 
lo›
 !
NULL
 && 
io_rcb
 !NULL && 
io_wcb
 !NULL && 
r_timeout_cb
 !NULL && 
w_timeout_cb
 !NULL && 
∑r£r
 != NULL);

631 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë
	`mÆloc
((TCPConnInfo));

632 i‡(
c⁄n
 =
NULL
) {

633 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

634 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

636 
END
;

639 
î∫o
 = 0;

640 
c⁄n
->
fd
 = fd;

641 
c⁄n
->
lo›
 =Üoop;

642 
c⁄n
->
ªad_timeout
 = 
r_timeout
;

643 
c⁄n
->
wrôe_timeout
 = 
w_timeout
;

645 
sockÀn_t
 
Àn
;

646 
sockaddr_°‹age
 
addr
;

647 
Àn
 = (
addr
);

649 #ifde‡
DEBUG


650 
ù°r
[
INET6_ADDRSTRLEN
];

653 i‡(
	`gë≥î«me
(
fd
, (
sockaddr
*Ë&
addr
, &
Àn
) != 0) {

654 
	`≥º‹
("\nERROR getpeername() failed");

655 
	`exô
(-1);

661 i‡(
addr
.
ss_Ámûy
 =
AF_INET
) {

662 
sockaddr_ö
* 
s
 = (sockaddr_ö*Ë&
addr
;

663 
c⁄n
->
≥î_addr
.
p‹t
 = 
	`¡ohs
(
s
->
sö_p‹t
);

664 
c⁄n
->
≥î_addr
.
ù
.
ùv4_addr
 = 
s
->
sö_addr
;

665 #ifde‡
DEBUG


666 
	`öë_¡›
(
AF_INET
, &(
c⁄n
->
≥î_addr
.
ù
.
ùv4_addr
), 
ù°r
, (ipstr));

667 
	`Ârötf
(
°dîr
, "\nPì∏IPáddªss: %†™dÖ‹à%d, %s:%d\n", 
ù°r
, 
c⁄n
->
≥î_addr
.
p‹t
, 
__FILE__
, 
__LINE__
);

673 
sockaddr_ö6
* 
s
 = (sockaddr_ö6 *Ë&
addr
;

674 
c⁄n
->
≥î_addr
.
p‹t
 = 
	`¡ohs
(
s
->
sö6_p‹t
);

675 
c⁄n
->
≥î_addr
.
ù
.
ùv6_addr
 = 
s
->
sö6_addr
;

676 #ifde‡
DEBUG


677 
	`öë_¡›
(
AF_INET6
, &(
c⁄n
->
≥î_addr
.
ù
.
ùv6_addr
), 
ù°r
, (ipstr));

678 
	`Ârötf
(
°dîr
, "\nPì∏IPáddªss: %†™dÖ‹à%d, %s:%d\n", 
ù°r
, 
c⁄n
->
≥î_addr
.
p‹t
, 
__FILE__
, 
__LINE__
);

687 
c⁄n
->
w_˘xt
.
is_wrôe_blocked
 = 
Ál£
;

698 
ªt
 = 0;

702 i‡((
ªt
 = 
	`öôTCPC⁄nBuff
(
c⁄n
, &(c⁄n->
rbuf
), 
r_buf_size
)) != 0) {

708 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

709 
	`Ârötf
(
°dîr
, "\nöôTCPC⁄nRBuff(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

710 
	`as£π
(0);

712 
	`‰ì
(
c⁄n
);

713 
c⁄n
 = 
NULL
;

714 
END
;

718 i‡((
ªt
 = 
	`√twBuffInô
(
c⁄n
, &(c⁄n->
wbuf
), 
w_buf_size
, 
NETW_BUFF_WRITE
)) != 0) {

724 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

725 
	`Ârötf
(
°dîr
, "\¬ëwBuffInô(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

726 
	`as£π
(0);

728 
	`√twBuffDe°roy
(&(
c⁄n
->
rbuf
));

729 
	`‰ì
(
c⁄n
);

730 
c⁄n
 = 
NULL
;

731 
END
;

738 
c⁄n
->
∑r£r
 =Öarser;

743 
c⁄n
->
∑r£r_ty≥
 =Öarser_type;

750 
∑r£r_ty≥
) {

752 
APP_HTTP_PARSER
:

757 
	`£tHTTPP¨£rC⁄ãxt
((
HTTPP¨£r
*Ë
∑r£r
, 
c⁄n
);

763 
c⁄n
->
msg_li°
 = (
HTTPMsgDLi°
*Ë
	`mÆloc
((HTTPMsgDList));

764 i‡(
c⁄n
->
msg_li°
 =
NULL
) {

765 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

766 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

767 
	`as£π
(0);

769 
	`de°royTCPC⁄nBuff
(&(
c⁄n
->
rbuf
));

770 
	`‰ì
(
c⁄n
);

771 
c⁄n
 = 
NULL
;

772 
END
;

774 
	`öôHTTPMsgDLi°
(
c⁄n
->
msg_li°
);

783 
	`as£π
(0);

790 
	`ev_io_öô
(&(
c⁄n
->
io_rw©chî
), 
io_rcb
, 
fd
, 
EV_READ
);

795 
	`ev_£t_¥i‹ôy
((&
c⁄n
->
io_rw©chî
), 1);

800 
	`ev_io_öô
(&(
c⁄n
->
io_ww©chî
), 
io_wcb
, 
fd
, 
EV_WRITE
);

806 
	`ev_£t_¥i‹ôy
((&
c⁄n
->
io_ww©chî
), 1);

813 i‡((
ªt
 = 
	`öôTimî
(
lo›
, &(
c⁄n
->
r_tmr
), 
r_timeout_cb
, c⁄n, 
r_timeout
)) != 0) {

814 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

815 
	`Ârötf
(
°dîr
, "\nöôTimî(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

816 
	`as£π
(0);

818 
	`de°royHTTPMsgDLi°
(
c⁄n
->
msg_li°
);

819 
	`de°royTCPC⁄nBuff
(&(
c⁄n
->
rbuf
));

820 
	`‰ì
(
c⁄n
);

821 
c⁄n
 = 
NULL
;

822 
END
;

829 i‡((
ªt
 = 
	`öôTimî
(
lo›
, &(
c⁄n
->
w_tmr
), 
w_timeout_cb
, c⁄n, 
w_timeout
)) != 0) {

830 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

831 
	`Ârötf
(
°dîr
, "\nöôTimî(ËÁûed wôhÑë = %d %s:%d\n", 
ªt
, 
__FILE__
, 
__LINE__
);

832 
	`as£π
(0);

834 
	`de°royHTTPMsgDLi°
(
c⁄n
->
msg_li°
);

835 
	`de°royTCPC⁄nBuff
(&(
c⁄n
->
rbuf
));

836 
	`‰ì
(
c⁄n
);

837 
c⁄n
 = 
NULL
;

838 
END
;

846 
	`ev_io_°¨t
(
lo›
, &(
c⁄n
->
io_rw©chî
));

853 
	`°¨tTimî
(&(
c⁄n
->
r_tmr
));

861 
c⁄n
->
w_tmr
 = 
NULL
;

863 
c⁄n
->
r_tmr
 = 
NULL
;

884 
END
:

885  
c⁄n
;

886 
	}
}

898 
	$ªadTimeoutCB
(

899 
ev_lo›
* 
lo›
,

900 
ev_timî
* 
w
,

901 
ªvíts


904 #ifde‡
DEBUG


905 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

907 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë(((*Ë
w
 - 
	`off£tof
(TCPC⁄nInfo, 
ªad_timeout_w©chî
)));

909 
	`c⁄n_de°roy
(
c⁄n
);

911 
	}
}

913 
	$de°royTCPC⁄n
(

914 
TCPC⁄nInfo
* 
c⁄n


918 
î∫o
 = 0;

922 
c⁄n
->
∑r£r_ty≥
) {

923 
APP_HTTP_PARSER
:

925 
	`de°royHTTPP¨£r
(
HTTPP¨£r
* (
c⁄n
->
∑r£r
));

926 
	`de°royHTTPMsgDLi°
(
HTTPMsgDLi°
* (
c⁄n
->
msg_li°
))

930 
	`as£π
(0);

935 
	`de°royTCPC⁄nBuff
(&(
c⁄n
->
rbuf
));

940 
ev_lo›
* 
lo›
 = 
c⁄n
->loop;

944 
	`ev_io_°›
(
lo›
, 
c⁄n
->
io_rw©chî
);

950 
	`ev_io_°›
(
lo›
, 
c⁄n
->
io_ww©chî
);

954 
	`°›Timî
(*(
c⁄n
->
r_tmr
));

958 
	`°›Timî
(*(
c⁄n
->
w_tmr
));

960 i‡(
	`˛o£
(
c⁄n
->
fd
) != 0) {

961 
	`≥º‹
("\nERROR close() failed");

962 
	`as£π
(0);

967 
	`‰ì
(
c⁄n
);

968 
	}
}

980 
	$wrôeTimeoutCB
(
ev_lo›
* 
lo›
, 
ev_timî
* 
w
, 
ªvíts
)

982 #ifde‡
DEBUG


983 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

985 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë(((*Ë
w
 - 
	`off£tof
(TCPC⁄nInfo, 
wrôe_timeout_w©chî
)));

986 
	`c⁄n_de°roy
(
c⁄n
);

987 
	}
}

990 
	$¥o˚ssHTTPMsgDLi°
(

991 
HTTPMsgDLi°
* 
li°


994 
HTTPMsg
* 
msg
 = 
	`gëNextHTTPMsg
(
li°
);

995 
msg
 !
NULL
) {

999 
msg
->
°©e
 = 
HTTP_MSG_STATE_HANDLER_INVOKED
;

1000 
msg
->
	`uæ_h™dÀr
(msg);

1001 
li°
->
√xt_msg
 = 
msg
->
√xt
;

1002 
msg
 = 
	`gëNextHTTPMsg
(
li°
);

1004 
	}
}

1006 
	$¥o˚ssHTTPReqCB
(

1007 
ev_lo›
* 
lo›
,

1008 
ev_io
* 
w
,

1009 
ªvíts


1012 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1013 
	`as£π
(
ªvíts
 & 
EV_READ
);

1014 
	`as£π
(
lo›
 !
NULL
 && 
w
 != NULL);

1019 
TCPC⁄nInfo
* 
c⁄n
 = (TCPC⁄nInfo*Ë(((*Ë
w
 - 
	`off£tof
(TCPC⁄nInfo, 
io_rw©chî
)));

1021 
	`ªcvNëwD©a
(&(
c⁄n
->
rbuf
));

1023 
nbyãs
 = 
c⁄n
->
rbuf
.
d©a
.
size
;

1025 
should_∑r£
 = 0;

1027 
nbyãs
) {

1034 
should_∑r£
 = 1;

1044 
	`≥º‹
("\nERRORÑecv()/readv() failed");

1045 
	`as£π
(0);

1064 
	`de°royTCPC⁄n
(
c⁄n
);

1069 
should_∑r£
 = 1;

1072 i‡(
should_∑r£
 == 1) {

1074 c⁄° * 
±r
 = 
c⁄n
->
rbuf
.
d©a
.
buf
;

1076 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1077 
	`as£π
(
nbyãs
 > 0);

1080 
HTTPP¨£r
* 
∑r£r
 = (HTTPP¨£r*Ë
c⁄n
->parser;

1081 
ªt
 = 
	`execuãHTTPP¨£r
(
∑r£r
, 
±r
, 
nbyãs
);

1082 i‡(
ªt
 != 0) {

1086 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

1087 
	`Ârötf
(
°dîr
, "\nERRORÉxecuãHTTPP¨£r(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

1089 
	`de°royTCPC⁄n
(
c⁄n
);

1094 
HTTPMsgDLi°
* 
li°
 = (HTTPMsgDLi°*Ë
c⁄n
->
msg_li°
;

1095 
	`¥o˚ssHTTPMsgDLi°
(
li°
);

1098 
	}
}

1101 
	$£tN⁄Blockög
(
fd
) {

1102 
Êags
;

1103 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0))) {

1104 
	`≥º‹
("Getting NONBLOCKING failed.\n");

1105 
	`exô
(-1);

1107 i‡–
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
 ) < 0 ) {

1108 
	`≥º‹
("Setting NONBLOCKING failed.\n");

1109 
	`exô
(-1);

1112 
	}
}

	@/home/kartik/nwe/test/NetUtils.h

1 #i‚de‡
__NET_UTILS_H__


2 
	#__NET_UTILS_H__


	)

4 
	~"ev.h
"

5 
	~"Timî.h
"

6 
	~"Utûs.h
"

8 
	gTCPC⁄nInfo
;

10 (*
	tFPTRIOCB
Ë(
	tev_lo›
*, 
	tev_io
*, );

17 
	eNëwBuffTy≥
 {

18 
NETW_BUFF_UNDEFINED
,

19 
NETW_BUFF_READ
,

20 
NETW_BUFF_WRITE


23 
	eC⁄nD©aP¨£rTy≥
 {

24 
APP_UNKNOWN
 = 0,

29 
APP_HTTP_PARSER
,

33 
APP_HTTP2_PARSER
,

38 
APP_MEMCACHED_PARSER


49 
	sNëwBuff
 {

50 * 
d©a
;

51 
°¨t_ödex
;

53 
íd_ödex
;

54 
max_Àn
;

58 
em±y_•a˚
;

59 
NëwBuffTy≥
 
ty≥
;

61 
TCPC⁄nInfo
* 
c⁄n
;

67 
	sTCPC⁄nBuff
 {

68 
DBö¨yBuff
 
d©a
;

69 
TCPC⁄nInfo
* 
c⁄n
;

109 
	snode
 {

114 
ev_t°amp
 
t
;

116 * 
˘xt
;

118 
node
* 
√xt
;

119 
node
* 
¥ev
;

122 
	sdli°
 {

123 
node
* 
hód
;

124 
node
* 
èû
;

125 
size
;

133 
	stimî_li°
 {

138 
ev_t°amp
 
timeout
;

139 
dli°
 
li°
;

140 
ev_timî
 
tmr
;

141 
FPTRCu°omTimeoutCB
 
cb
;

144 
	`ö¸emítHód
(

145 
dli°
* 
l


148 
	`öô_timî_li°
(

149 
timî_li°
* 
l
,

150 
ev_t°amp
 
timeout
,

151 
FPTRCu°omTimeoutCB
 
cb


154 
	`ö£πAtTaû
(

155 
dli°
* 
li°
,

156 
ev_t°amp
 
timeout
,

160 
	`moveToTaû
(

161 
dli°
* 
li°
,

162 
node
* 
ñemít


165 
	`ch™geNodeTime°amp
(

166 
node
* 
ñemít
,

167 
ev_t°amp
 
timeout


171 
	sWrôeCtxt
 {

172 
iovec
 
vio
[2];

173 
boﬁ
 
is_wrôe_blocked
;

174 
uöt8_t
 
ödex
;

177 
	sTCPC⁄nInfo
 {

179 
fd
;

185 
ö_addr
 
ùv4_addr
;

186 
ö6_addr
 
ùv6_addr
;

187 }
ù
;

188 
uöt16_t
 
p‹t
;

189 }
≥î_addr
;

193 
ev_lo›
* 
lo›
;

199 
ªad_timeout
;

204 
wrôe_timeout
;

219 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
;

224 * 
∑r£r
;

233 * 
msg_li°
;

238 
ev_io
 
io_rw©chî
;

242 
ev_io
 
io_ww©chî
;

251 
Timî
 
r_tmr
;

256 
Timî
 
w_tmr
;

265 
TCPC⁄nBuff
 
rbuf
;

269 
WrôeCtxt
 
w_˘xt
;

280 
TCPC⁄nInfo
* 
	`TCPC⁄nInô
(

281 
fd
,

282 
r_buf_size
,

284 
r_timeout
,

285 
w_timeout
,

288 
C⁄nD©aP¨£rTy≥
 
∑r£r_ty≥
,

289 * 
∑r£r
,

290 
ev_lo›
* 
lo›
,

291 
FPTRIOCB
 
io_rcb
,

292 
FPTRIOCB
 
io_wcb
,

293 
FPTRTimeoutCB
 
r_timeout_cb
,

294 
FPTRTimeoutCB
 
w_timeout_cb


297 
	`¥o˚ssHTTPReqCB
(

298 
ev_lo›
* 
lo›
,

299 
ev_io
* 
w
,

300 
ªvíts


303 
	`√twBuffInô
(

304 
TCPC⁄nInfo
* 
c⁄n
,

305 
NëwBuff
* 
buf
,

306 
max_size
,

307 
NëwBuffTy≥
 
ty≥


	@/home/kartik/nwe/test/c.future_use_code.c

2 
	$£tN⁄Blockög
(
fd
) {

3 
Êags
;

4 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0))) {

5 
	`≥º‹
("Getting NONBLOCKING failed.\n");

6 
	`exô
(-1);

8 i‡–
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
 ) < 0 ) {

9 
	`≥º‹
("Setting NONBLOCKING failed.\n");

10 
	`exô
(-1);

13 
	}
}

15 
	$öôHTTPHódîs
(

16 
KVPAºay
* 
h


19 
h
->
hódîs
 = 
NULL
;

20 
h
->
size
 = 0;

21 
	}
}

23 
	$öôQuîyP¨ams
(

24 
QuîyP¨ams
* 
q


27 
q
->
∑øms
 = 
NULL
;

28 
q
->
size
 = 0;

29 
	}
}

30 
	$HTTPP¨£rExecuã
(

31 * 
∑r£r_obj
,

32 
¨gs
,

36 
va_li°
 
li°
;

37 
	`va_°¨t
(
li°
, 
¨gs
);

39 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

40 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

42 
hâp_∑r£r_£âögs
* 
£âögs
 = 
x
->settings;

44 * 
buf
 = 
	`va_¨g
(
li°
, *);

45 
Àn
 = 
	`v¨_¨g
(
li°
, );

47 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, 
£âögs
, 
buf
, 
Àn
);

49 i‡(
≈¨£d
 !(
size_t
)
Àn
) {

52 
	`Ârötf
(
°dîr
,

54 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

55 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

56  
EXIT_FAILURE
;

58 
	}
}

60 
	$HTTPP¨£rEº‹
(

61 * 
∑r£r_obj
,

62 
¨gs
,

66 
va_li°
 
li°
;

67 
	`va_°¨t
(
li°
, 
¨gs
);

69 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

70 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

72 
	`Ârötf
(
°dîr
,

74 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

75 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

77 
	}
}

79 
	$HTTPP¨£rDe°roy
(

80 * 
∑r£r_obj
,

81 
£âögs
,

82 * 
˘xt


86 
	}
}

91 
	$√twBuffInô
(

92 
TCPC⁄nInfo
* 
c⁄n
,

93 
NëwBuff
* 
buf
,

94 
max_size
,

95 
NëwBuffTy≥
 
ty≥


98 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

99 
	`as£π
(
ty≥
 =
NETW_BUFF_READ
 ||Åy≥ =
NETW_BUFF_WRITE
);

100 i‡(
ty≥
 = 
NETW_BUFF_READ
) {

101 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
rbuf
));

103 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
wbuf
));

107 
buf
->
d©a
 = (*Ë
	`mÆloc
((Ë* 
max_size
);

108 i‡(
buf
->
d©a
 =
NULL
) {

109 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

110 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

111 
	`as£π
(0);

113  
ERR_HEAP_ALLOC_FAILURE
;

115 
buf
->
°¨t_ödex
 = 0;

119 
buf
->
íd_ödex
 = 0;

120 
buf
->
max_Àn
 = 
max_size
;

121 
buf
->
c⁄n
 = conn;

122 
buf
->
em±y_•a˚
 = 
max_size
;

123 
buf
->
ty≥
 =Åype;

129 
	}
}

138 
	$√twBuffByãsToPro˚ss
(

139 
NëwBuff
* 
buf


140 ** 
±r1
,

141 * 
byãs1
,

142 ** 
±r2


146 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

147 
	`as£π
(
buf
 !
NULL
 && buf->
ty≥
 = 
NETW_BUFF_READ
);

150 * 
d©a
 = 
buf
->data;

151 
°¨t_ödex
 = 
buf
->start_index;

152 
íd_ödex
 = 
buf
->end_index;

153 
max_size
 = 
buf
->max_size;

154 
ªsu…
 = 0;

156 **
±r1
 = 
d©a
 + 
íd_ödex
;

157 i‡(
°¨t_ödex
 <
íd_ödex
) {

159 *
byãs1
 = 
max_size
 - 
íd_ödex
;

160 **
±r2
 = 
d©a
;

161 
ªsu…
 = *
byãs1
 + 
°¨t_ödex
;

163 *
byãs1
 = 
°¨t_ödex
 - 
íd_ödex
;

164 **
±r2
 = 
NULL
;

165 
ªsu…
 = *
byãs1
;

167  
ªsu…
;

168 
	}
}

169 
	$gëTCPC⁄nByãsToPro˚ss
(

170 
TCPC⁄nBuff
* 
buf


174 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

175 
	`as£π
(
buf
 !
NULL
);

177  
buf
->
d©a
.
size
;

178 
	}
}

190 
	$√tw_buff_em±y_•a˚
(

191 
NëwBuff
* 
buf


194  
buf
->
em±y_•a˚
;

195 
	}
}

197 
	$√twBuffDe°roy
(

198 
NëwBuff
* 
buf


201 
	`‰ì
(
buf
->
d©a
);

202 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

203 
buf
->
d©a
 = 
NULL
;

204 
buf
->
°¨t_ödex
 = 0;

205 
buf
->
íd_ödex
 = 0;

206 
buf
->
max_Àn
 = 0;

207 
buf
->
c⁄n
 = 
NULL
;

208 
buf
->
ty≥
 = 
NETW_BUFF_UNDEFINED
;

209 
buf
->
em±y_•a˚
 = 0;

211 
	}
}

227 
	$√tw_buff_£nd
(

228 
NëwBuff
* 
buf


231 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

232 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_WRITE
);

234 
fd
 = 
buf
->
c⁄n
->fd;

235 
°¨t_ödex
 = 
buf
->start_index;

236 
íd_ödex
 = 
buf
->end_index;

237 
max_size
 = 
buf
->max_size;

238 
em±y_•a˚
 = 
buf
->empty_space;

239 * 
d©a
 = 
buf
->data;

241 
byãs_to_£nd
 = 0;

242 
right_•a˚_fûÀd
 = 0;

243 
À·_•a˚_fûÀd
 = 0;

245 
î∫o
 = 0;

247 
nbyãs
 = 0;

248 i‡(
em±y_•a˚
 =
max_size
) {

253 
nbyãs
 = 0;

258 i‡(
íd_ödex
 < 
°¨t_ödex
) {

262 
byãs_to_£nd
 = 
°¨t_ödex
 - 
íd_ödex
;

263 
d©a
 = d©®+ 
íd_ödex
;

264 
nbyãs
 = 
	`£nd
(
fd
, 
d©a
, 
byãs_to_£nd
, 0);

270 
io_vec
 
vec
[2];

271 
ödex
 = 0;

272 
right_•a˚_fûÀd
 = 
max_size
 - 
íd_ödex
;

273 i‡(
right_•a˚_fûÀd
 > 0) {

274 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
íd_ödex
;

275 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_fûÀd
;

276 
ödex
++;

279 
À·_•a˚_fûÀd
 = 
°¨t_ödex
 - 0;

281 i‡(
À·_•a˚_fûÀd
 > 0) {

282 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
 - 1;

283 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_fûÀd
;

284 
ödex
++;

286 
nbyãs
 = 
	`wrôev
(
fd
, 
vec
, 
ödex
);

290 i‡(
nbyãs
 < 0) {

292 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

294 
	`≥º‹
("\nERROR send() failed");

295 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

296 
	`as£π
(0);

298 
nbyãs
 = -2;

305 
nbyãs
 = -1;

308 i‡(
nbyãs
 > 0) {

313 
íd_ödex
 = (íd_ödex + 
nbyãs
Ë% 
max_size
;

314 
em±y_•a˚
 +
nbyãs
;

315 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

316 
	`as£π
(
íd_ödex
 >=0 &&Énd_ödex < 
max_size
);

317 
	`as£π
(
em±y_•a˚
 >= 0);

319 
buf
->
íd_ödex
 =Énd_index;

320 
buf
->
em±y_•a˚
 =Émpty_space;

322 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

326 
	`as£π
(
î∫o
 == 0);

328  
nbyãs
;

329 
	}
}

341 
	$√twBuffRecv
(

342 
NëwBuff
* 
buf


346 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

347 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_READ
);

350 
fd
 = 
buf
->
c⁄n
->fd;

351 
°¨t_ödex
 = 
buf
->start_index;

352 
íd_ödex
 = 
buf
->end_index;

353 
max_size
 = 
buf
->max_size;

354 
em±y_•a˚
 = 
buf
->empty_space;

355 * 
d©a
 = 
buf
->data;

361 
byãs_to_ªcv
 = 0;

362 
right_•a˚_À·
 = 0;

363 
À·_•a˚_À·
 = 0;

369 
î∫o
 = 0;

373 
nbyãs
 = 0;

374 i‡(
em±y_•a˚
 == 0) {

379 
nbyãs
 = -3;

380 
END
;

385 i‡(
°¨t_ödex
 < 
íd_ödex
) {

389 
byãs_to_ªcv
 = 
íd_ödex
 - 
°¨t_ödex
;

390 
d©a
 = d©®+ 
°¨t_ödex
;

391 
nbyãs
 = 
	`ªcv
(
fd
, 
d©a
, 
byãs_to_ªcv
, 0);

397 
io_vec
 
vec
[2];

398 
ödex
 = 0;

402 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

404 i‡(
right_•a˚_À·
 > 0) {

405 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
;

406 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_À·
;

407 
ödex
++;

412 
À·_•a˚_À·
 = 
íd_ödex
;

414 i‡(
À·_•a˚_À·
 > 0) {

416 
vec
[
ödex
].
iov_ba£
 = 
d©a
;

417 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_À·
;

418 
ödex
++;

420 
nbyãs
 = 
	`ªadv
(
fd
, 
vec
, 
ödex
);

424 i‡(
nbyãs
 < 0) {

426 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

428 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

429 
	`≥º‹
("\nERRORÑecv() failed");

430 
	`as£π
(0);

435 
nbyãs
 = -2;

442 
nbyãs
 = -1;

445 i‡(
nbyãs
 > 0) {

450 
°¨t_ödex
 = (°¨t_ödex + 
nbyãs
Ë% 
max_size
;

451 
em±y_•a˚
 +
nbyãs
;

452 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

453 
	`as£π
(
°¨t_ödex
 >=0 && sèπ_ödex < 
max_size
);

454 
	`as£π
(
em±y_•a˚
 >= 0);

456 
buf
->
°¨t_ödex
 = start_index;

457 
buf
->
em±y_•a˚
 =Émpty_space;

460 
END
:

461 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

465 
	`as£π
(
î∫o
 == 0);

467  
nbyãs
;

468 
	}
}

469 
	$√tw_buff_¢¥ötf
(

470 
NëwBuff
* 
buf
,

471 c⁄° * 
f‹m©
,

479 
va_li°
 
¨gs
;

480 
	`va_°¨t
(
¨gs
, 
f‹m©
);

481 
°¨t_ödex
 = 
buf
->start_index;

482 
íd_ödex
 = 
buf
->end_index;

483 
max_size
 = 
buf
->max_size;

484 * 
d©a
 = 
buf
->data;

486 
•a˚_À·
 = 0;

487 
right_•a˚_À·
 = 0;

488 
À·_•a˚_À·
 = 0;

489 
Êag
 = 0;

490 i‡(
°¨t_ödex
 < 
íd_ödex
) {

491 
•a˚_À·
 = 
íd_ödex
 - 
°¨t_ödex
;

494 
Êag
 = 1;

495 
•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

496 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

497 
À·_•a˚_À·
 = 
íd_ödex
;

499 i‡(
•a˚_À·
 != 0) {

500 i‡(!
Êag
) {

502 
byãs_wrôãn
;

503 
byãs_wrôãn
 = 
	`v¢¥ötf
(
d©a
, 
•a˚_À·
, 
f‹m©
, 
¨gs
);

504 i‡(
ªsu…
 >
buf
->
max_size
) {

510 
	`Ârötf
(
°dîr
, "\nERROR Nëw‹k buf„∏i†fuŒ, wrôög iàtÿthêkî√»%s:%d\n", 
__FILE__
, 
__LINE__
);

511 
î∫o
 = 0;

512 
nbyãs
 = 
	`£nd
(
fd
, 
buf
->
d©a
, buf->
max_size
, 0);

513 i‡(
nbyãs
 < 0) {

514 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

515 
	`≥º‹
("\nERROR send() failed");

516 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

517 
	`as£π
(0);

521 i‡(
nbyãs
 == 0) {

537 
	`va_íd
(
¨gs
);

538  
ªsu…
;

539 
	}
}

540 
	$£tN⁄Blockög
(
fd
) {

541 
Êags
;

542 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0))) {

543 
	`≥º‹
("Getting NONBLOCKING failed.\n");

544 
	`exô
(-1);

546 i‡–
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
 ) < 0 ) {

547 
	`≥º‹
("Setting NONBLOCKING failed.\n");

548 
	`exô
(-1);

551 
	}
}

552 
sockÀn_t
 
	gÀn
;

553 
sockaddr_°‹age
 
	gaddr
;

554 
	gù°r
[
INET6_ADDRSTRLEN
];

555 
	gp‹t
;

557 
	gÀn
 =  
addr
;

558 
gë≥î«me
(
s
, (
sockaddr
*)&
addr
, &
Àn
);

561 i‡(
	gaddr
.
	gss_Ámûy
 =
AF_INET
) {

562 
sockaddr_ö
 *
s
 = (sockaddr_ö *)&
addr
;

563 
	gp‹t
 = 
¡ohs
(
s
->
sö_p‹t
);

564 
öë_¡›
(
AF_INET
, &
s
->
sö_addr
, 
ù°r
,  ipstr);

566 
sockaddr_ö6
 *
	gs
 = (sockaddr_ö6 *)&
addr
;

567 
	gp‹t
 = 
¡ohs
(
s
->
sö6_p‹t
);

568 
öë_¡›
(
AF_INET6
, &
s
->
sö6_addr
, 
ù°r
,  ipstr);

571 
¥ötf
("Pì∏IPáddªss: %s\n", 
ù°r
);

572 
¥ötf
("Pì∏p‹à : %d\n", 
p‹t
);

574 
	$ª˚iveLo›
(
sock
, 
ïfd
, 
ªcvbuf
[]) {

575 
ssize_t
 
m
;

576 
numSít
;

577 
ïﬁl_evít
 
evít
;

581 
m
 = 
	`ªad
(
sock
, 
ªcvbuf
, 
EXPECTED_RECV_LEN
);

582 
	`Ârötf
(
°dîr
, "\ƒecv(ËˇŒedándÑëu∫ed %d\n", 
m
);

584 i‡(
m
==0) ;

585 i‡(
m
 > 0) {

586 
ªcvbuf
[
m
] = '\0';

587 i‡(
m
 =
EXPECTED_RECV_LEN
 && !
	`°rcmp
(
ªcvbuf
, 
EXPECTED_HTTP_REQUEST
)) {

588 
	`Ârötf
(
°dîr
, "\nhi\n");

589 
numSít
 = 
	`£nd
(
sock
, 
RESPONSE
, 
RESPONSE_LEN
, 0);

590 i‡(
numSít
 == -1) {

591 
	`≥º‹
("send failed");

592 
	`exô
(-1);

594 i‡(
numSít
 !
RESPONSE_LEN
) {

595 
	`≥º‹
("partial send");

596 
	`exô
(-1);

598 i‡(
	`evítfd_wrôe
(
evfd
, 1)) {

599 
	`≥º‹
("eventfd_write");

600 
	`exô
(-1);

603 
	`≥º‹
("partialÑecv");

604 
	`exô
(-1);

607 i‡(
m
==-1) {

608 i‡(
î∫o
==
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

610 
	`Ârötf
(
°dîr
, "\nArmingágain");

611 
evít
.
d©a
.
fd
 = 
sock
;

612 
evít
.
evíts
 = 
EPOLLIN
 | 
EPOLLET
 | 
EPOLLONESHOT
;

613 i‡(
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_MOD
, 
sock
, &
evít
)) {

614 
	`≥º‹
("rearmÉpoll_ctl");

615 
	`exô
(-1);

619 
	`≥º‹
("recv");

620 
	`exô
(-1);

624 
	}
}

626 
	$°¨tWakeupThªad
() {

627 
±hªad_t
 
waô_thªad
;

628 i‡(
	`±hªad_¸óã
(&
waô_thªad
, 
NULL
, 
wakeupThªadLo›
, NULL) != 0) {

629 
	`≥º‹
("Thread create failed.");

630 
	`exô
(-1);

632 
	}
}

634 * 
	$wakeupThªadLo›
(* 
nuŒ
) {

636 
evfd
 = 
	`evítfd
(0, 
EFD_CLOEXEC
 | 
EFD_NONBLOCK
);

637 i‡(
evfd
 == -1) {

638 
	`≥º‹
("eventfd failed");

639 
	`exô
(-1);

641 #ifde‡
READ_EVENT_FD


642 
ïfd
;

643 
ïﬁl_evít
 
evít
;

644 
ïﬁl_evít
 *
evíts
;

645 
uöt64_t
 
vÆ
;

646 
n
;

648 
ïfd
 = 
	`ïﬁl_¸óã1
(0);

649 
evíts
 = 
	`ˇŒoc
 (1,  
evít
);

650 
evít
.
d©a
.
fd
 = 
evfd
;

651 
evít
.
evíts
 = 
EPOLLIN
;

653 i‡(
	`ïﬁl_˘l
 (
ïfd
, 
EPOLL_CTL_ADD
, 
evfd
, &
evít
)) {

654 
	`≥º‹
("epoll_ctl");

655 
	`exô
(-1);

658 
n
 = 
	`ïﬁl_waô
(
ïfd
, 
evíts
, 1, -1);

659 i‡(
n
>0) {

660 i‡(
	`evítfd_ªad
(
evfd
, &
vÆ
)) {

661 
	`≥º‹
("eventfd_read");

662 
	`exô
(-1);

667 
	`¶ìp
(20);

669 
	`±hªad_exô
(
NULL
);

670 
	}
}

673 
	$°¨tSockëCheckThªad
() {

674 
±hªad_t
 
thªad
;

675 i‡(
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
sockëCheck
, (*)NULL)) {

676 
	`≥º‹
("pthread_create");

677 
	`exô
(-1);

680 
	}
}

682 *
	$sockëCheck
(* 
¨g
) {

683 
i
, 
byãsAvaûabÀ
;

684 
	`¶ìp
(10);

685 
i
 = 0; i < 
NUM_CLIENTS
; i++) {

686 i‡(
	`io˘l
(
sockës
[
i
], 
FIONREAD
, &
byãsAvaûabÀ
) < 0) {

687 
	`≥º‹
("ioctl");

688 
	`exô
(-1);

690 i‡(
byãsAvaûabÀ
 > 0) {

691 
	`¥ötf
("sockë %d ha†%d byã†o‡d©®ªady\n", 
sockës
[
i
], 
byãsAvaûabÀ
);

694 
	`±hªad_exô
(
NULL
);

695 
	}
}

	@/home/kartik/nwe/test/future_use_code.c

2 
	$£tN⁄Blockög
(
fd
) {

3 
Êags
;

4 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0))) {

5 
	`≥º‹
("Getting NONBLOCKING failed.\n");

6 
	`exô
(-1);

8 i‡–
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
 ) < 0 ) {

9 
	`≥º‹
("Setting NONBLOCKING failed.\n");

10 
	`exô
(-1);

13 
	}
}

15 
	$öôHTTPHódîs
(

16 
KVPAºay
* 
h


19 
h
->
hódîs
 = 
NULL
;

20 
h
->
size
 = 0;

21 
	}
}

23 
	$öôQuîyP¨ams
(

24 
QuîyP¨ams
* 
q


27 
q
->
∑øms
 = 
NULL
;

28 
q
->
size
 = 0;

29 
	}
}

30 
	$HTTPP¨£rExecuã
(

31 * 
∑r£r_obj
,

32 
¨gs
,

36 
va_li°
 
li°
;

37 
	`va_°¨t
(
li°
, 
¨gs
);

39 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

40 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

42 
hâp_∑r£r_£âögs
* 
£âögs
 = 
x
->settings;

44 * 
buf
 = 
	`va_¨g
(
li°
, *);

45 
Àn
 = 
	`v¨_¨g
(
li°
, );

47 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, 
£âögs
, 
buf
, 
Àn
);

49 i‡(
≈¨£d
 !(
size_t
)
Àn
) {

52 
	`Ârötf
(
°dîr
,

54 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

55 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

56  
EXIT_FAILURE
;

58 
	}
}

60 
	$HTTPP¨£rEº‹
(

61 * 
∑r£r_obj
,

62 
¨gs
,

66 
va_li°
 
li°
;

67 
	`va_°¨t
(
li°
, 
¨gs
);

69 
HTTPP¨£r
* 
x
 = (HTTPP¨£r*Ë
∑r£r_obj
;

70 
hâp_∑r£r
* 
∑r£r
 = &(
x
->parser);

72 
	`Ârötf
(
°dîr
,

74 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

75 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

77 
	}
}

79 
	$HTTPP¨£rDe°roy
(

80 * 
∑r£r_obj
,

81 
£âögs
,

82 * 
˘xt


86 
	}
}

91 
	$√twBuffInô
(

92 
TCPC⁄nInfo
* 
c⁄n
,

93 
NëwBuff
* 
buf
,

94 
max_size
,

95 
NëwBuffTy≥
 
ty≥


98 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

99 
	`as£π
(
ty≥
 =
NETW_BUFF_READ
 ||Åy≥ =
NETW_BUFF_WRITE
);

100 i‡(
ty≥
 = 
NETW_BUFF_READ
) {

101 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
rbuf
));

103 
	`as£π
(
c⁄n
 !
NULL
 && 
buf
 !NULL && bu‡=&(c⁄n->
wbuf
));

107 
buf
->
d©a
 = (*Ë
	`mÆloc
((Ë* 
max_size
);

108 i‡(
buf
->
d©a
 =
NULL
) {

109 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

110 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

111 
	`as£π
(0);

113  
ERR_HEAP_ALLOC_FAILURE
;

115 
buf
->
°¨t_ödex
 = 0;

119 
buf
->
íd_ödex
 = 0;

120 
buf
->
max_Àn
 = 
max_size
;

121 
buf
->
c⁄n
 = conn;

122 
buf
->
em±y_•a˚
 = 
max_size
;

123 
buf
->
ty≥
 =Åype;

129 
	}
}

138 
	$√twBuffByãsToPro˚ss
(

139 
NëwBuff
* 
buf


140 ** 
±r1
,

141 * 
byãs1
,

142 ** 
±r2


146 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

147 
	`as£π
(
buf
 !
NULL
 && buf->
ty≥
 = 
NETW_BUFF_READ
);

150 * 
d©a
 = 
buf
->data;

151 
°¨t_ödex
 = 
buf
->start_index;

152 
íd_ödex
 = 
buf
->end_index;

153 
max_size
 = 
buf
->max_size;

154 
ªsu…
 = 0;

156 **
±r1
 = 
d©a
 + 
íd_ödex
;

157 i‡(
°¨t_ödex
 <
íd_ödex
) {

159 *
byãs1
 = 
max_size
 - 
íd_ödex
;

160 **
±r2
 = 
d©a
;

161 
ªsu…
 = *
byãs1
 + 
°¨t_ödex
;

163 *
byãs1
 = 
°¨t_ödex
 - 
íd_ödex
;

164 **
±r2
 = 
NULL
;

165 
ªsu…
 = *
byãs1
;

167  
ªsu…
;

168 
	}
}

169 
	$gëTCPC⁄nByãsToPro˚ss
(

170 
TCPC⁄nBuff
* 
buf


174 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

175 
	`as£π
(
buf
 !
NULL
);

177  
buf
->
d©a
.
size
;

178 
	}
}

190 
	$√tw_buff_em±y_•a˚
(

191 
NëwBuff
* 
buf


194  
buf
->
em±y_•a˚
;

195 
	}
}

197 
	$√twBuffDe°roy
(

198 
NëwBuff
* 
buf


201 
	`‰ì
(
buf
->
d©a
);

202 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

203 
buf
->
d©a
 = 
NULL
;

204 
buf
->
°¨t_ödex
 = 0;

205 
buf
->
íd_ödex
 = 0;

206 
buf
->
max_Àn
 = 0;

207 
buf
->
c⁄n
 = 
NULL
;

208 
buf
->
ty≥
 = 
NETW_BUFF_UNDEFINED
;

209 
buf
->
em±y_•a˚
 = 0;

211 
	}
}

227 
	$√tw_buff_£nd
(

228 
NëwBuff
* 
buf


231 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

232 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_WRITE
);

234 
fd
 = 
buf
->
c⁄n
->fd;

235 
°¨t_ödex
 = 
buf
->start_index;

236 
íd_ödex
 = 
buf
->end_index;

237 
max_size
 = 
buf
->max_size;

238 
em±y_•a˚
 = 
buf
->empty_space;

239 * 
d©a
 = 
buf
->data;

241 
byãs_to_£nd
 = 0;

242 
right_•a˚_fûÀd
 = 0;

243 
À·_•a˚_fûÀd
 = 0;

245 
î∫o
 = 0;

247 
nbyãs
 = 0;

248 i‡(
em±y_•a˚
 =
max_size
) {

253 
nbyãs
 = 0;

258 i‡(
íd_ödex
 < 
°¨t_ödex
) {

262 
byãs_to_£nd
 = 
°¨t_ödex
 - 
íd_ödex
;

263 
d©a
 = d©®+ 
íd_ödex
;

264 
nbyãs
 = 
	`£nd
(
fd
, 
d©a
, 
byãs_to_£nd
, 0);

270 
io_vec
 
vec
[2];

271 
ödex
 = 0;

272 
right_•a˚_fûÀd
 = 
max_size
 - 
íd_ödex
;

273 i‡(
right_•a˚_fûÀd
 > 0) {

274 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
íd_ödex
;

275 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_fûÀd
;

276 
ödex
++;

279 
À·_•a˚_fûÀd
 = 
°¨t_ödex
 - 0;

281 i‡(
À·_•a˚_fûÀd
 > 0) {

282 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
 - 1;

283 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_fûÀd
;

284 
ödex
++;

286 
nbyãs
 = 
	`wrôev
(
fd
, 
vec
, 
ödex
);

290 i‡(
nbyãs
 < 0) {

292 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

294 
	`≥º‹
("\nERROR send() failed");

295 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

296 
	`as£π
(0);

298 
nbyãs
 = -2;

305 
nbyãs
 = -1;

308 i‡(
nbyãs
 > 0) {

313 
íd_ödex
 = (íd_ödex + 
nbyãs
Ë% 
max_size
;

314 
em±y_•a˚
 +
nbyãs
;

315 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

316 
	`as£π
(
íd_ödex
 >=0 &&Énd_ödex < 
max_size
);

317 
	`as£π
(
em±y_•a˚
 >= 0);

319 
buf
->
íd_ödex
 =Énd_index;

320 
buf
->
em±y_•a˚
 =Émpty_space;

322 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

326 
	`as£π
(
î∫o
 == 0);

328  
nbyãs
;

329 
	}
}

341 
	$√twBuffRecv
(

342 
NëwBuff
* 
buf


346 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

347 
	`as£π
(
buf
->
ty≥
 =
NETW_BUFF_READ
);

350 
fd
 = 
buf
->
c⁄n
->fd;

351 
°¨t_ödex
 = 
buf
->start_index;

352 
íd_ödex
 = 
buf
->end_index;

353 
max_size
 = 
buf
->max_size;

354 
em±y_•a˚
 = 
buf
->empty_space;

355 * 
d©a
 = 
buf
->data;

361 
byãs_to_ªcv
 = 0;

362 
right_•a˚_À·
 = 0;

363 
À·_•a˚_À·
 = 0;

369 
î∫o
 = 0;

373 
nbyãs
 = 0;

374 i‡(
em±y_•a˚
 == 0) {

379 
nbyãs
 = -3;

380 
END
;

385 i‡(
°¨t_ödex
 < 
íd_ödex
) {

389 
byãs_to_ªcv
 = 
íd_ödex
 - 
°¨t_ödex
;

390 
d©a
 = d©®+ 
°¨t_ödex
;

391 
nbyãs
 = 
	`ªcv
(
fd
, 
d©a
, 
byãs_to_ªcv
, 0);

397 
io_vec
 
vec
[2];

398 
ödex
 = 0;

402 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

404 i‡(
right_•a˚_À·
 > 0) {

405 
vec
[
ödex
].
iov_ba£
 = 
d©a
 + 
°¨t_ödex
;

406 
vec
[
ödex
].
iov_Àn
 = 
right_•a˚_À·
;

407 
ödex
++;

412 
À·_•a˚_À·
 = 
íd_ödex
;

414 i‡(
À·_•a˚_À·
 > 0) {

416 
vec
[
ödex
].
iov_ba£
 = 
d©a
;

417 
vec
[
ödex
].
iov_Àn
 = 
À·_•a˚_À·
;

418 
ödex
++;

420 
nbyãs
 = 
	`ªadv
(
fd
, 
vec
, 
ödex
);

424 i‡(
nbyãs
 < 0) {

426 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

428 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

429 
	`≥º‹
("\nERRORÑecv() failed");

430 
	`as£π
(0);

435 
nbyãs
 = -2;

442 
nbyãs
 = -1;

445 i‡(
nbyãs
 > 0) {

450 
°¨t_ödex
 = (°¨t_ödex + 
nbyãs
Ë% 
max_size
;

451 
em±y_•a˚
 +
nbyãs
;

452 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

453 
	`as£π
(
°¨t_ödex
 >=0 && sèπ_ödex < 
max_size
);

454 
	`as£π
(
em±y_•a˚
 >= 0);

456 
buf
->
°¨t_ödex
 = start_index;

457 
buf
->
em±y_•a˚
 =Émpty_space;

460 
END
:

461 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

465 
	`as£π
(
î∫o
 == 0);

467  
nbyãs
;

468 
	}
}

469 
	$√tw_buff_¢¥ötf
(

470 
NëwBuff
* 
buf
,

471 c⁄° * 
f‹m©
,

479 
va_li°
 
¨gs
;

480 
	`va_°¨t
(
¨gs
, 
f‹m©
);

481 
°¨t_ödex
 = 
buf
->start_index;

482 
íd_ödex
 = 
buf
->end_index;

483 
max_size
 = 
buf
->max_size;

484 * 
d©a
 = 
buf
->data;

486 
•a˚_À·
 = 0;

487 
right_•a˚_À·
 = 0;

488 
À·_•a˚_À·
 = 0;

489 
Êag
 = 0;

490 i‡(
°¨t_ödex
 < 
íd_ödex
) {

491 
•a˚_À·
 = 
íd_ödex
 - 
°¨t_ödex
;

494 
Êag
 = 1;

495 
•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

496 
right_•a˚_À·
 = 
max_size
 - 
°¨t_ödex
;

497 
À·_•a˚_À·
 = 
íd_ödex
;

499 i‡(
•a˚_À·
 != 0) {

500 i‡(!
Êag
) {

502 
byãs_wrôãn
;

503 
byãs_wrôãn
 = 
	`v¢¥ötf
(
d©a
, 
•a˚_À·
, 
f‹m©
, 
¨gs
);

504 i‡(
ªsu…
 >
buf
->
max_size
) {

510 
	`Ârötf
(
°dîr
, "\nERROR Nëw‹k buf„∏i†fuŒ, wrôög iàtÿthêkî√»%s:%d\n", 
__FILE__
, 
__LINE__
);

511 
î∫o
 = 0;

512 
nbyãs
 = 
	`£nd
(
fd
, 
buf
->
d©a
, buf->
max_size
, 0);

513 i‡(
nbyãs
 < 0) {

514 i‡(
î∫o
 !
EAGAIN
 &&Éºnÿ!
EWOULDBLOCK
) {

515 
	`≥º‹
("\nERROR send() failed");

516 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

517 
	`as£π
(0);

521 i‡(
nbyãs
 == 0) {

537 
	`va_íd
(
¨gs
);

538  
ªsu…
;

539 
	}
}

540 
	$£tN⁄Blockög
(
fd
) {

541 
Êags
;

542 i‡(-1 =(
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0))) {

543 
	`≥º‹
("Getting NONBLOCKING failed.\n");

544 
	`exô
(-1);

546 i‡–
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
 ) < 0 ) {

547 
	`≥º‹
("Setting NONBLOCKING failed.\n");

548 
	`exô
(-1);

551 
	}
}

552 
sockÀn_t
 
	gÀn
;

553 
sockaddr_°‹age
 
	gaddr
;

554 
	gù°r
[
INET6_ADDRSTRLEN
];

555 
	gp‹t
;

557 
	gÀn
 =  
addr
;

558 
gë≥î«me
(
s
, (
sockaddr
*)&
addr
, &
Àn
);

561 i‡(
	gaddr
.
	gss_Ámûy
 =
AF_INET
) {

562 
sockaddr_ö
 *
s
 = (sockaddr_ö *)&
addr
;

563 
	gp‹t
 = 
¡ohs
(
s
->
sö_p‹t
);

564 
öë_¡›
(
AF_INET
, &
s
->
sö_addr
, 
ù°r
,  ipstr);

566 
sockaddr_ö6
 *
	gs
 = (sockaddr_ö6 *)&
addr
;

567 
	gp‹t
 = 
¡ohs
(
s
->
sö6_p‹t
);

568 
öë_¡›
(
AF_INET6
, &
s
->
sö6_addr
, 
ù°r
,  ipstr);

571 
¥ötf
("Pì∏IPáddªss: %s\n", 
ù°r
);

572 
¥ötf
("Pì∏p‹à : %d\n", 
p‹t
);

574 
	$ª˚iveLo›
(
sock
, 
ïfd
, 
ªcvbuf
[]) {

575 
ssize_t
 
m
;

576 
numSít
;

577 
ïﬁl_evít
 
evít
;

581 
m
 = 
	`ªad
(
sock
, 
ªcvbuf
, 
EXPECTED_RECV_LEN
);

582 
	`Ârötf
(
°dîr
, "\ƒecv(ËˇŒedándÑëu∫ed %d\n", 
m
);

584 i‡(
m
==0) ;

585 i‡(
m
 > 0) {

586 
ªcvbuf
[
m
] = '\0';

587 i‡(
m
 =
EXPECTED_RECV_LEN
 && !
	`°rcmp
(
ªcvbuf
, 
EXPECTED_HTTP_REQUEST
)) {

588 
	`Ârötf
(
°dîr
, "\nhi\n");

589 
numSít
 = 
	`£nd
(
sock
, 
RESPONSE
, 
RESPONSE_LEN
, 0);

590 i‡(
numSít
 == -1) {

591 
	`≥º‹
("send failed");

592 
	`exô
(-1);

594 i‡(
numSít
 !
RESPONSE_LEN
) {

595 
	`≥º‹
("partial send");

596 
	`exô
(-1);

598 i‡(
	`evítfd_wrôe
(
evfd
, 1)) {

599 
	`≥º‹
("eventfd_write");

600 
	`exô
(-1);

603 
	`≥º‹
("partialÑecv");

604 
	`exô
(-1);

607 i‡(
m
==-1) {

608 i‡(
î∫o
==
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

610 
	`Ârötf
(
°dîr
, "\nArmingágain");

611 
evít
.
d©a
.
fd
 = 
sock
;

612 
evít
.
evíts
 = 
EPOLLIN
 | 
EPOLLET
 | 
EPOLLONESHOT
;

613 i‡(
	`ïﬁl_˘l
(
ïfd
, 
EPOLL_CTL_MOD
, 
sock
, &
evít
)) {

614 
	`≥º‹
("rearmÉpoll_ctl");

615 
	`exô
(-1);

619 
	`≥º‹
("recv");

620 
	`exô
(-1);

624 
	}
}

626 
	$°¨tWakeupThªad
() {

627 
±hªad_t
 
waô_thªad
;

628 i‡(
	`±hªad_¸óã
(&
waô_thªad
, 
NULL
, 
wakeupThªadLo›
, NULL) != 0) {

629 
	`≥º‹
("Thread create failed.");

630 
	`exô
(-1);

632 
	}
}

634 * 
	$wakeupThªadLo›
(* 
nuŒ
) {

636 
evfd
 = 
	`evítfd
(0, 
EFD_CLOEXEC
 | 
EFD_NONBLOCK
);

637 i‡(
evfd
 == -1) {

638 
	`≥º‹
("eventfd failed");

639 
	`exô
(-1);

641 #ifde‡
READ_EVENT_FD


642 
ïfd
;

643 
ïﬁl_evít
 
evít
;

644 
ïﬁl_evít
 *
evíts
;

645 
uöt64_t
 
vÆ
;

646 
n
;

648 
ïfd
 = 
	`ïﬁl_¸óã1
(0);

649 
evíts
 = 
	`ˇŒoc
 (1,  
evít
);

650 
evít
.
d©a
.
fd
 = 
evfd
;

651 
evít
.
evíts
 = 
EPOLLIN
;

653 i‡(
	`ïﬁl_˘l
 (
ïfd
, 
EPOLL_CTL_ADD
, 
evfd
, &
evít
)) {

654 
	`≥º‹
("epoll_ctl");

655 
	`exô
(-1);

658 
n
 = 
	`ïﬁl_waô
(
ïfd
, 
evíts
, 1, -1);

659 i‡(
n
>0) {

660 i‡(
	`evítfd_ªad
(
evfd
, &
vÆ
)) {

661 
	`≥º‹
("eventfd_read");

662 
	`exô
(-1);

667 
	`¶ìp
(20);

669 
	`±hªad_exô
(
NULL
);

670 
	}
}

673 
	$°¨tSockëCheckThªad
() {

674 
±hªad_t
 
thªad
;

675 i‡(
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
sockëCheck
, (*)NULL)) {

676 
	`≥º‹
("pthread_create");

677 
	`exô
(-1);

680 
	}
}

682 *
	$sockëCheck
(* 
¨g
) {

683 
i
, 
byãsAvaûabÀ
;

684 
	`¶ìp
(10);

685 
i
 = 0; i < 
NUM_CLIENTS
; i++) {

686 i‡(
	`io˘l
(
sockës
[
i
], 
FIONREAD
, &
byãsAvaûabÀ
) < 0) {

687 
	`≥º‹
("ioctl");

688 
	`exô
(-1);

690 i‡(
byãsAvaûabÀ
 > 0) {

691 
	`¥ötf
("sockë %d ha†%d byã†o‡d©®ªady\n", 
sockës
[
i
], 
byãsAvaûabÀ
);

694 
	`±hªad_exô
(
NULL
);

695 
	}
}

	@/home/kartik/nwe/test/samples/ev_sample.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<î∫o.h
>

5 
	~<as£π.h
>

6 
	~"ev.h
"

8 
	#MAXBUF
 124

	)

9 
	$io_cb
(
EV_P_
 
ev_io
* 
w
, 
ªvíts
)

11 
fd
;

12 
byãs
 = 0;

13 i‡(
ªvíts
 & 
EV_WRITE
) {

14 
	`Ârötf
(
°dîr
, "\nstdinÑeady for write\n");

15 } i‡(
ªvíts
 & 
EV_READ
) {

16 
	`Ârötf
(
°dîr
, "\nstdinÑeady forÑead\n");

18 
	`as£π
(0);

20 
buf
[
MAXBUF
 + 1];

21 i‡(
ªvíts
 & 
EV_READ
) {

22 
fd
 = *(*Ë
	`ev_u£rd©a
(
lo›
);

23 
byãs
 = 
	`ªad
(
fd
, 
buf
, 
MAXBUF
);

24 i‡(
byãs
 < 0) {

25 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
) {

26 
	`Ârötf
(
°dîr
, "\nread() would block\n");

28 
	`≥º‹
("readÉrror");

31 
buf
[
byãs
] = '\0';

32 
	`Ârötf
(
°dîr
, "\n%s\n", 
buf
);

37 
	}
}

38 
	$timeout_cb
(
EV_P_
 
ev_timî
* 
w
, 
ªvíts
)

40 
	`Ârötf
(
°dîr
, "\ntimerÉxpired\n");

43 
	}
}

44 
	$maö
()

46 
ev_io
 
io_w©chî
;

47 
ev_timî
 
timeout_w©chî
;

48 
ev_lo›
* 
lo›
 = 
NULL
;

49 
fd
 = 0;

51 
lo›
 = 
	`ev_lo›_√w
(0);

52 i‡(
lo›
 =
NULL
) {

53 
	`Ârötf
(
°dîr
, "\nev_loop_new() failed\n");

55 
	`ev_£t_u£rd©a
(
lo›
, &
fd
);

57 
	`ev_io_öô
(&
io_w©chî
, 
io_cb
, 1, 
EV_READ
);

59 
	`ev_öô
(&
timeout_w©chî
, 
timeout_cb
);

60 
timeout_w©chî
.
ª≥©
 = 3;

61 
	`ev_io_°¨t
(
lo›
, &
io_w©chî
);

63 
	`ev_timî_agaö
(
lo›
, &
timeout_w©chî
);

64 
	`ev_run
(
lo›
, 0);

65 
	}
}

	@/home/kartik/nwe/test/samples/http-parser-master/contrib/parsertrace.c

27 
	~"hâp_∑r£r.h
"

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

32 
	$⁄_mesßge_begö
(
hâp_∑r£r
* 
_
) {

33 ()
_
;

34 
	`¥ötf
("\n***MESSAGE BEGIN***\n\n");

36 
	}
}

38 
	$⁄_hódîs_com∂ëe
(
hâp_∑r£r
* 
_
) {

39 ()
_
;

40 
	`¥ötf
("\n***HEADERS COMPLETE***\n\n");

42 
	}
}

44 
	$⁄_mesßge_com∂ëe
(
hâp_∑r£r
* 
_
) {

45 ()
_
;

46 
	`¥ötf
("\n***MESSAGE COMPLETE***\n\n");

48 
	}
}

50 
	$⁄_uæ
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

51 ()
_
;

52 
	`¥ötf
("Uæ: %.*s\n", ()
Àngth
, 
©
);

54 
	}
}

56 
	$⁄_hódî_fõld
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

57 ()
_
;

58 
	`¥ötf
("Hódî fõld: %.*s\n", ()
Àngth
, 
©
);

60 
	}
}

62 
	$⁄_hódî_vÆue
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

63 ()
_
;

64 
	`¥ötf
("Hódî vÆue: %.*s\n", ()
Àngth
, 
©
);

66 
	}
}

68 
	$⁄_body
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

69 ()
_
;

70 
	`¥ötf
("Body: %.*s\n", ()
Àngth
, 
©
);

72 
	}
}

74 
	$ußge
(c⁄° * 
«me
) {

75 
	`Ârötf
(
°dîr
,

79 
«me
);

80 
	`exô
(
EXIT_FAILURE
);

81 
	}
}

83 
	$maö
(
¨gc
, * 
¨gv
[]) {

84 
hâp_∑r£r_ty≥
 
fûe_ty≥
;

86 i‡(
¨gc
 != 3) {

87 
	`ußge
(
¨gv
[0]);

90 * 
ty≥
 = 
¨gv
[1];

91 i‡(
ty≥
[0] != '-') {

92 
	`ußge
(
¨gv
[0]);

95 
ty≥
[1]) {

98 
fûe_ty≥
 = 
HTTP_RESPONSE
;

101 
fûe_ty≥
 = 
HTTP_REQUEST
;

104 
fûe_ty≥
 = 
HTTP_BOTH
;

107 
	`ußge
(
¨gv
[0]);

110 * 
fûíame
 = 
¨gv
[2];

111 
FILE
* 
fûe
 = 
	`f›í
(
fûíame
, "r");

112 i‡(
fûe
 =
NULL
) {

113 
	`≥º‹
("fopen");

114 
Áû
;

117 
	`f£ek
(
fûe
, 0, 
SEEK_END
);

118 
fûe_Àngth
 = 
	`·ñl
(
fûe
);

119 i‡(
fûe_Àngth
 == -1) {

120 
	`≥º‹
("ftell");

121 
Áû
;

123 
	`f£ek
(
fûe
, 0, 
SEEK_SET
);

125 * 
d©a
 = 
	`mÆloc
(
fûe_Àngth
);

126 i‡(
	`‰ód
(
d©a
, 1, 
fûe_Àngth
, 
fûe
Ë!(
size_t
)file_length) {

127 
	`Ârötf
(
°dîr
, "couldn'tÑeadÉntire file\n");

128 
	`‰ì
(
d©a
);

129 
Áû
;

132 
hâp_∑r£r_£âögs
 
£âögs
;

133 
	`mem£t
(&
£âögs
, 0, (settings));

134 
£âögs
.
⁄_mesßge_begö
 = on_message_begin;

135 
£âögs
.
⁄_uæ
 = on_url;

136 
£âögs
.
⁄_hódî_fõld
 = on_header_field;

137 
£âögs
.
⁄_hódî_vÆue
 = on_header_value;

138 
£âögs
.
⁄_hódîs_com∂ëe
 = on_headers_complete;

139 
£âögs
.
⁄_body
 = on_body;

140 
£âögs
.
⁄_mesßge_com∂ëe
 = on_message_complete;

142 
hâp_∑r£r
 
∑r£r
;

143 
	`hâp_∑r£r_öô
(&
∑r£r
, 
fûe_ty≥
);

144 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs
, 
d©a
, 
fûe_Àngth
);

145 
	`‰ì
(
d©a
);

147 i‡(
≈¨£d
 !(
size_t
)
fûe_Àngth
) {

148 
	`Ârötf
(
°dîr
,

150 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

151 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

152 
Áû
;

155  
EXIT_SUCCESS
;

157 
Áû
:

158 
	`f˛o£
(
fûe
);

159  
EXIT_FAILURE
;

160 
	}
}

	@/home/kartik/nwe/test/samples/http-parser-master/contrib/url_parser.c

1 
	~"hâp_∑r£r.h
"

2 
	~<°dio.h
>

3 
	~<°rög.h
>

6 
	$dump_uæ
 (c⁄° *
uæ
, c⁄° 
hâp_∑r£r_uæ
 *
u
)

8 
i
;

10 
	`¥ötf
("\tfõld_£t: 0x%x,Ö‹t: %u\n", 
u
->
fõld_£t
, u->
p‹t
);

11 
i
 = 0; i < 
UF_MAX
; i++) {

12 i‡((
u
->
fõld_£t
 & (1 << 
i
)) == 0) {

13 
	`¥ötf
("\tfõld_d©a[%u]: un£t\n", 
i
);

17 
	`¥ötf
("\tfield_data[%u]: off: %uÜen: %uÖart: \"%.*s\n",

18 
i
,

19 
u
->
fõld_d©a
[
i
].
off
,

20 
u
->
fõld_d©a
[
i
].
Àn
,

21 
u
->
fõld_d©a
[
i
].
Àn
,

22 
uæ
 + 
u
->
fõld_d©a
[
i
].
off
);

24 
	}
}

26 
	$maö
(
¨gc
, ** 
¨gv
) {

27 i‡(
¨gc
 != 3) {

28 
	`¥ötf
("Sy¡ax : %†c⁄√˘|gë uæ\n", 
¨gv
[0]);

31 
hâp_∑r£r_uæ
 
u
;

32 
Àn
 = 
	`°æí
(
¨gv
[2]);

33 
c⁄√˘
 = 
	`°rcmp
("c⁄√˘", 
¨gv
[1]) == 0 ? 1 : 0;

34 
	`¥ötf
("P¨sög %s, c⁄√˘ %d\n", 
¨gv
[2], 
c⁄√˘
);

36 
ªsu…
 = 
	`hâp_∑r£r_∑r£_uæ
(
¨gv
[2], 
Àn
, 
c⁄√˘
, &
u
);

37 i‡(
ªsu…
 != 0) {

38 
	`¥ötf
("P¨£Éº‹ : %d\n", 
ªsu…
);

39  
ªsu…
;

41 
	`¥ötf
("Parse ok,Ñesult : \n");

42 
	`dump_uæ
(
¨gv
[2], &
u
);

44 
	}
}

	@/home/kartik/nwe/test/samples/http-parser-master/http_parser.c

24 
	~"hâp_∑r£r.h
"

25 
	~<as£π.h
>

26 
	~<°ddef.h
>

27 
	~<˘y≥.h
>

28 
	~<°dlib.h
>

29 
	~<°rög.h
>

30 
	~<limôs.h
>

32 #i‚de‡
ULLONG_MAX


33 
	#ULLONG_MAX
 ((
uöt64_t
Ë-1Ë

	)

36 #i‚de‡
MIN


37 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

40 #i‚de‡
ARRAY_SIZE


41 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

44 #i‚de‡
BIT_AT


45 
	#BIT_AT
(
a
, 
i
) \

46 (!!((Ë(
a
)[(Ë(
i
) >> 3] & \

47 (1 << ((Ë(
i
Ë& 7))))

	)

50 #i‚de‡
ELEM_AT


51 
	#ELEM_AT
(
a
, 
i
, 
v
Ë((Ë(iË< 
	`ARRAY_SIZE
◊Ë? (a)[(i)] : (v))

	)

54 
	#SET_ERRNO
(
e
) \

56 
∑r£r
->
hâp_î∫o
 = (
e
); \

57 } 0)

	)

61 
	#CALLBACK_NOTIFY_
(
FOR
, 
ER
) \

63 
	`as£π
(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
); \

65 i‡(
£âögs
->
⁄_
##
FOR
) { \

66 i‡(0 !
£âögs
->
⁄_
##
	`FOR
(
∑r£r
)) { \

67 
	`SET_ERRNO
(
HPE_CB_
##
FOR
); \

71 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) { \

72  (
ER
); \

75 } 0)

	)

78 
	#CALLBACK_NOTIFY
(
FOR
Ë
	`CALLBACK_NOTIFY_
(FOR, 
p
 - 
d©a
 + 1)

	)

81 
	#CALLBACK_NOTIFY_NOADVANCE
(
FOR
Ë
	`CALLBACK_NOTIFY_
(FOR, 
p
 - 
d©a
)

	)

84 
	#CALLBACK_DATA_
(
FOR
, 
LEN
, 
ER
) \

86 
	`as£π
(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
); \

88 i‡(
FOR
##
_m¨k
) { \

89 i‡(
£âögs
->
⁄_
##
FOR
) { \

90 i‡(0 !
£âögs
->
⁄_
##
	`FOR
(
∑r£r
, 
FOR
##
_m¨k
, (
LEN
))) { \

91 
	`SET_ERRNO
(
HPE_CB_
##
FOR
); \

95 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) { \

96  (
ER
); \

99 
FOR
##
_m¨k
 = 
NULL
; \

101 } 0)

	)

104 
	#CALLBACK_DATA
(
FOR
) \

105 
	`CALLBACK_DATA_
(
FOR
, 
p
 - FOR##
_m¨k
,Ö - 
d©a
 + 1)

	)

108 
	#CALLBACK_DATA_NOADVANCE
(
FOR
) \

109 
	`CALLBACK_DATA_
(
FOR
, 
p
 - FOR##
_m¨k
,Ö - 
d©a
)

	)

112 
	#MARK
(
FOR
) \

114 i‡(!
FOR
##
_m¨k
) { \

115 
FOR
##
_m¨k
 = 
p
; \

117 } 0)

	)

120 
	#PROXY_CONNECTION
 "¥oxy-c⁄√˘i⁄"

	)

121 
	#CONNECTION
 "c⁄√˘i⁄"

	)

122 
	#CONTENT_LENGTH
 "c⁄ã¡-Àngth"

	)

123 
	#TRANSFER_ENCODING
 "å™s„r-ícodög"

	)

124 
	#UPGRADE
 "upgøde"

	)

125 
	#CHUNKED
 "chunked"

	)

126 
	#KEEP_ALIVE
 "kìp-Æive"

	)

127 
	#CLOSE
 "˛o£"

	)

130 c⁄° *
	gmëhod_°rögs
[] =

132 
	#XX
(
num
, 
«me
, 
°rög
Ë#°rög,

	)

133 
HTTP_METHOD_MAP
(
XX
)

134 #unde‡
XX


145 c⁄° 
	gtokís
[256] = {

180 c⁄° 
öt8_t
 
	gunhex
[256] =

192 #i‡
HTTP_PARSER_STRICT


193 
	#T
(
v
Ë0

	)

195 
	#T
(
v
Ë
	)
v

199 c⁄° 
uöt8_t
 
	gn‹mÆ_uæ_ch¨
[32] = {

203 0 | 
T
(2) | 0 | 0 | T(16) | 0 | 0 | 0,

233 #unde‡
T


235 
	e°©e


236 { 
	ms_dód
 = 1

238 , 
	ms_°¨t_ªq_‹_ªs


239 , 
	ms_ªs_‹_ª•_H


240 , 
	ms_°¨t_ªs


241 , 
	ms_ªs_H


242 , 
	ms_ªs_HT


243 , 
	ms_ªs_HTT


244 , 
	ms_ªs_HTTP


245 , 
	ms_ªs_fú°_hâp_maj‹


246 , 
	ms_ªs_hâp_maj‹


247 , 
	ms_ªs_fú°_hâp_mö‹


248 , 
	ms_ªs_hâp_mö‹


249 , 
	ms_ªs_fú°_°©us_code


250 , 
	ms_ªs_°©us_code


251 , 
	ms_ªs_°©us_°¨t


252 , 
	ms_ªs_°©us


253 , 
	ms_ªs_löe_Æmo°_d⁄e


255 , 
	ms_°¨t_ªq


257 , 
	ms_ªq_mëhod


258 , 
	ms_ªq_•a˚s_bef‹e_uæ


259 , 
	ms_ªq_schema


260 , 
	ms_ªq_schema_¶ash


261 , 
	ms_ªq_schema_¶ash_¶ash


262 , 
	ms_ªq_£rvî_°¨t


263 , 
	ms_ªq_£rvî


264 , 
	ms_ªq_£rvî_wôh_©


265 , 
	ms_ªq_∑th


266 , 
	ms_ªq_quîy_°rög_°¨t


267 , 
	ms_ªq_quîy_°rög


268 , 
	ms_ªq_‰agmít_°¨t


269 , 
	ms_ªq_‰agmít


270 , 
	ms_ªq_hâp_°¨t


271 , 
	ms_ªq_hâp_H


272 , 
	ms_ªq_hâp_HT


273 , 
	ms_ªq_hâp_HTT


274 , 
	ms_ªq_hâp_HTTP


275 , 
	ms_ªq_fú°_hâp_maj‹


276 , 
	ms_ªq_hâp_maj‹


277 , 
	ms_ªq_fú°_hâp_mö‹


278 , 
	ms_ªq_hâp_mö‹


279 , 
	ms_ªq_löe_Æmo°_d⁄e


281 , 
	ms_hódî_fõld_°¨t


282 , 
	ms_hódî_fõld


283 , 
	ms_hódî_vÆue_disˇrd_ws


284 , 
	ms_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e


285 , 
	ms_hódî_vÆue_disˇrd_lws


286 , 
	ms_hódî_vÆue_°¨t


287 , 
	ms_hódî_vÆue


288 , 
	ms_hódî_vÆue_lws


290 , 
	ms_hódî_Æmo°_d⁄e


292 , 
	ms_chunk_size_°¨t


293 , 
	ms_chunk_size


294 , 
	ms_chunk_∑ømëîs


295 , 
	ms_chunk_size_Æmo°_d⁄e


297 , 
	ms_hódîs_Æmo°_d⁄e


298 , 
	ms_hódîs_d⁄e


305 , 
	ms_chunk_d©a


306 , 
	ms_chunk_d©a_Æmo°_d⁄e


307 , 
	ms_chunk_d©a_d⁄e


309 , 
	ms_body_idítôy


310 , 
	ms_body_idítôy_eof


312 , 
	ms_mesßge_d⁄e


316 
	#PARSING_HEADER
(
°©e
Ë(°©ê<
s_hódîs_d⁄e
)

	)

319 
	ehódî_°©es


320 { 
	mh_gíîÆ
 = 0

321 , 
	mh_C


322 , 
	mh_CO


323 , 
	mh_CON


325 , 
	mh_m©chög_c⁄√˘i⁄


326 , 
	mh_m©chög_¥oxy_c⁄√˘i⁄


327 , 
	mh_m©chög_c⁄ã¡_Àngth


328 , 
	mh_m©chög_å™s„r_ícodög


329 , 
	mh_m©chög_upgøde


331 , 
	mh_c⁄√˘i⁄


332 , 
	mh_c⁄ã¡_Àngth


333 , 
	mh_å™s„r_ícodög


334 , 
	mh_upgøde


336 , 
	mh_m©chög_å™s„r_ícodög_chunked


337 , 
	mh_m©chög_c⁄√˘i⁄_kìp_Æive


338 , 
	mh_m©chög_c⁄√˘i⁄_˛o£


340 , 
	mh_å™s„r_ícodög_chunked


341 , 
	mh_c⁄√˘i⁄_kìp_Æive


342 , 
	mh_c⁄√˘i⁄_˛o£


345 
	ehâp_ho°_°©e


347 
	ms_hâp_ho°_dód
 = 1

348 , 
	ms_hâp_u£röfo_°¨t


349 , 
	ms_hâp_u£röfo


350 , 
	ms_hâp_ho°_°¨t


351 , 
	ms_hâp_ho°_v6_°¨t


352 , 
	ms_hâp_ho°


353 , 
	ms_hâp_ho°_v6


354 , 
	ms_hâp_ho°_v6_íd


355 , 
	ms_hâp_ho°_p‹t_°¨t


356 , 
	ms_hâp_ho°_p‹t


360 
	#CR
 '\r'

	)

361 
	#LF
 '\n'

	)

362 
	#LOWER
(
c
Ë()(¯| 0x20)

	)

363 
	#IS_ALPHA
(
c
Ë(
	`LOWER
(cË>'a' && LOWER(cË<'z')

	)

364 
	#IS_NUM
(
c
Ë((cË>'0' && (cË<'9')

	)

365 
	#IS_ALPHANUM
(
c
Ë(
	`IS_ALPHA
(cË|| 
	`IS_NUM
(c))

	)

366 
	#IS_HEX
(
c
Ë(
	`IS_NUM
(cË|| (
	`LOWER
(cË>'a' && LOWER(cË<'f'))

	)

367 
	#IS_MARK
(
c
) ((c) == '-' || (c) == '_' || (c) == '.' || \

368 (
c
) == '!' || (c) == '~' || (c) == '*' || (c) == '\'' || (c) == '(' || \

369 (
c
Ë=')')

	)

370 
	#IS_USERINFO_CHAR
(
c
Ë(
	`IS_ALPHANUM
(cË|| 
	`IS_MARK
(c) || (c) == '%' || \

371 (
c
) == ';' || (c) == ':' || (c) == '&' || (c) == '=' || (c) == '+' || \

372 (
c
Ë='$' || (cË=',')

	)

374 #i‡
HTTP_PARSER_STRICT


375 
	#TOKEN
(
c
Ë(
tokís
[()c])

	)

376 
	#IS_URL_CHAR
(
c
Ë(
	`BIT_AT
(
n‹mÆ_uæ_ch¨
, ()c))

	)

377 
	#IS_HOST_CHAR
(
c
Ë(
	`IS_ALPHANUM
(cË|| (cË='.' || (cË='-')

	)

379 
	#TOKEN
(
c
Ë((¯=' 'Ë? ' ' : 
tokís
[()c])

	)

380 
	#IS_URL_CHAR
(
c
) \

381 (
	`BIT_AT
(
n‹mÆ_uæ_ch¨
, ()
c
Ë|| ((cË& 0x80))

	)

382 
	#IS_HOST_CHAR
(
c
) \

383 (
	`IS_ALPHANUM
(
c
Ë|| (cË='.' || (cË='-' || (cË='_')

	)

387 
	#°¨t_°©e
 (
∑r£r
->
ty≥
 =
HTTP_REQUEST
 ? 
s_°¨t_ªq
 : 
s_°¨t_ªs
)

	)

390 #i‡
HTTP_PARSER_STRICT


391 
	#STRICT_CHECK
(
c⁄d
) \

393 i‡(
c⁄d
) { \

394 
	`SET_ERRNO
(
HPE_STRICT
); \

395 
îr‹
; \

397 } 0)

	)

398 
	#NEW_MESSAGE
(Ë(
	`hâp_should_kìp_Æive
(
∑r£r
Ë? 
°¨t_°©e
 : 
s_dód
)

	)

400 
	#STRICT_CHECK
(
c⁄d
)

	)

401 
	#NEW_MESSAGE
(Ë
°¨t_°©e


	)

406 
	#HTTP_STRERROR_GEN
(
n
, 
s
Ë{ "HPE_" #n, s },

	)

408 c⁄° *
	m«me
;

409 c⁄° *
	mdes¸ùti⁄
;

410 } 
	ghâp_°ªº‹_èb
[] = {

411 
HTTP_ERRNO_MAP
(
HTTP_STRERROR_GEN
)

413 #unde‡
HTTP_STRERROR_GEN


415 
hâp_mesßge_√eds_eof
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

428 
°©e


429 
	$∑r£_uæ_ch¨
(
°©e
 
s
, c⁄° 
ch
)

431 i‡(
ch
 == ' ' || ch == '\r' || ch == '\n') {

432  
s_dód
;

435 #i‡
HTTP_PARSER_STRICT


436 i‡(
ch
 == '\t' || ch == '\f') {

437  
s_dód
;

441 
s
) {

442 
s_ªq_•a˚s_bef‹e_uæ
:

447 i‡(
ch
 == '/' || ch == '*') {

448  
s_ªq_∑th
;

451 i‡(
	`IS_ALPHA
(
ch
)) {

452  
s_ªq_schema
;

457 
s_ªq_schema
:

458 i‡(
	`IS_ALPHA
(
ch
)) {

459  
s
;

462 i‡(
ch
 == ':') {

463  
s_ªq_schema_¶ash
;

468 
s_ªq_schema_¶ash
:

469 i‡(
ch
 == '/') {

470  
s_ªq_schema_¶ash_¶ash
;

475 
s_ªq_schema_¶ash_¶ash
:

476 i‡(
ch
 == '/') {

477  
s_ªq_£rvî_°¨t
;

482 
s_ªq_£rvî_wôh_©
:

483 i‡(
ch
 == '@') {

484  
s_dód
;

488 
s_ªq_£rvî_°¨t
:

489 
s_ªq_£rvî
:

490 i‡(
ch
 == '/') {

491  
s_ªq_∑th
;

494 i‡(
ch
 == '?') {

495  
s_ªq_quîy_°rög_°¨t
;

498 i‡(
ch
 == '@') {

499  
s_ªq_£rvî_wôh_©
;

502 i‡(
	`IS_USERINFO_CHAR
(
ch
) || ch == '[' || ch == ']') {

503  
s_ªq_£rvî
;

508 
s_ªq_∑th
:

509 i‡(
	`IS_URL_CHAR
(
ch
)) {

510  
s
;

513 
ch
) {

515  
s_ªq_quîy_°rög_°¨t
;

518  
s_ªq_‰agmít_°¨t
;

523 
s_ªq_quîy_°rög_°¨t
:

524 
s_ªq_quîy_°rög
:

525 i‡(
	`IS_URL_CHAR
(
ch
)) {

526  
s_ªq_quîy_°rög
;

529 
ch
) {

532  
s_ªq_quîy_°rög
;

535  
s_ªq_‰agmít_°¨t
;

540 
s_ªq_‰agmít_°¨t
:

541 i‡(
	`IS_URL_CHAR
(
ch
)) {

542  
s_ªq_‰agmít
;

545 
ch
) {

547  
s_ªq_‰agmít
;

550  
s
;

555 
s_ªq_‰agmít
:

556 i‡(
	`IS_URL_CHAR
(
ch
)) {

557  
s
;

560 
ch
) {

563  
s
;

573  
s_dód
;

574 
	}
}

576 
size_t
 
	$hâp_∑r£r_execuã
 (
hâp_∑r£r
 *
∑r£r
,

577 c⁄° 
hâp_∑r£r_£âögs
 *
£âögs
,

578 c⁄° *
d©a
,

579 
size_t
 
Àn
)

581 
c
, 
ch
;

582 
öt8_t
 
unhex_vÆ
;

583 c⁄° *
p
 = 
d©a
;

584 c⁄° *
hódî_fõld_m¨k
 = 0;

585 c⁄° *
hódî_vÆue_m¨k
 = 0;

586 c⁄° *
uæ_m¨k
 = 0;

587 c⁄° *
body_m¨k
 = 0;

588 c⁄° *
°©us_m¨k
 = 0;

591 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) {

595 i‡(
Àn
 == 0) {

596 
∑r£r
->
°©e
) {

597 
s_body_idítôy_eof
:

601 
	`CALLBACK_NOTIFY_NOADVANCE
(
mesßge_com∂ëe
);

604 
s_dód
:

605 
s_°¨t_ªq_‹_ªs
:

606 
s_°¨t_ªs
:

607 
s_°¨t_ªq
:

611 
	`SET_ERRNO
(
HPE_INVALID_EOF_STATE
);

617 i‡(
∑r£r
->
°©e
 =
s_hódî_fõld
)

618 
hódî_fõld_m¨k
 = 
d©a
;

619 i‡(
∑r£r
->
°©e
 =
s_hódî_vÆue
)

620 
hódî_vÆue_m¨k
 = 
d©a
;

621 
∑r£r
->
°©e
) {

622 
s_ªq_∑th
:

623 
s_ªq_schema
:

624 
s_ªq_schema_¶ash
:

625 
s_ªq_schema_¶ash_¶ash
:

626 
s_ªq_£rvî_°¨t
:

627 
s_ªq_£rvî
:

628 
s_ªq_£rvî_wôh_©
:

629 
s_ªq_quîy_°rög_°¨t
:

630 
s_ªq_quîy_°rög
:

631 
s_ªq_‰agmít_°¨t
:

632 
s_ªq_‰agmít
:

633 
uæ_m¨k
 = 
d©a
;

635 
s_ªs_°©us
:

636 
°©us_m¨k
 = 
d©a
;

640 
p
=
d©a
;Ö !d©®+ 
Àn
;Ö++) {

641 
ch
 = *
p
;

643 i‡(
	`PARSING_HEADER
(
∑r£r
->
°©e
)) {

644 ++
∑r£r
->
ƒód
;

656 i‡(
∑r£r
->
ƒód
 > (
HTTP_MAX_HEADER_SIZE
)) {

657 
	`SET_ERRNO
(
HPE_HEADER_OVERFLOW
);

658 
îr‹
;

662 
ªexecuã_byã
:

663 
∑r£r
->
°©e
) {

665 
s_dód
:

669 i‡(
ch
 =
CR
 || ch =
LF
)

672 
	`SET_ERRNO
(
HPE_CLOSED_CONNECTION
);

673 
îr‹
;

675 
s_°¨t_ªq_‹_ªs
:

677 i‡(
ch
 =
CR
 || ch =
LF
)

679 
∑r£r
->
Êags
 = 0;

680 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

682 i‡(
ch
 == 'H') {

683 
∑r£r
->
°©e
 = 
s_ªs_‹_ª•_H
;

685 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

687 
∑r£r
->
ty≥
 = 
HTTP_REQUEST
;

688 
∑r£r
->
°©e
 = 
s_°¨t_ªq
;

689 
ªexecuã_byã
;

695 
s_ªs_‹_ª•_H
:

696 i‡(
ch
 == 'T') {

697 
∑r£r
->
ty≥
 = 
HTTP_RESPONSE
;

698 
∑r£r
->
°©e
 = 
s_ªs_HT
;

700 i‡(
ch
 != 'E') {

701 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

702 
îr‹
;

705 
∑r£r
->
ty≥
 = 
HTTP_REQUEST
;

706 
∑r£r
->
mëhod
 = 
HTTP_HEAD
;

707 
∑r£r
->
ödex
 = 2;

708 
∑r£r
->
°©e
 = 
s_ªq_mëhod
;

712 
s_°¨t_ªs
:

714 
∑r£r
->
Êags
 = 0;

715 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

717 
ch
) {

719 
∑r£r
->
°©e
 = 
s_ªs_H
;

722 
CR
:

723 
LF
:

727 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

728 
îr‹
;

731 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

735 
s_ªs_H
:

736 
	`STRICT_CHECK
(
ch
 != 'T');

737 
∑r£r
->
°©e
 = 
s_ªs_HT
;

740 
s_ªs_HT
:

741 
	`STRICT_CHECK
(
ch
 != 'T');

742 
∑r£r
->
°©e
 = 
s_ªs_HTT
;

745 
s_ªs_HTT
:

746 
	`STRICT_CHECK
(
ch
 != 'P');

747 
∑r£r
->
°©e
 = 
s_ªs_HTTP
;

750 
s_ªs_HTTP
:

751 
	`STRICT_CHECK
(
ch
 != '/');

752 
∑r£r
->
°©e
 = 
s_ªs_fú°_hâp_maj‹
;

755 
s_ªs_fú°_hâp_maj‹
:

756 i‡(
ch
 < '0' || ch > '9') {

757 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

758 
îr‹
;

761 
∑r£r
->
hâp_maj‹
 = 
ch
 - '0';

762 
∑r£r
->
°©e
 = 
s_ªs_hâp_maj‹
;

766 
s_ªs_hâp_maj‹
:

768 i‡(
ch
 == '.') {

769 
∑r£r
->
°©e
 = 
s_ªs_fú°_hâp_mö‹
;

773 i‡(!
	`IS_NUM
(
ch
)) {

774 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

775 
îr‹
;

778 
∑r£r
->
hâp_maj‹
 *= 10;

779 
∑r£r
->
hâp_maj‹
 +
ch
 - '0';

781 i‡(
∑r£r
->
hâp_maj‹
 > 999) {

782 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

783 
îr‹
;

790 
s_ªs_fú°_hâp_mö‹
:

791 i‡(!
	`IS_NUM
(
ch
)) {

792 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

793 
îr‹
;

796 
∑r£r
->
hâp_mö‹
 = 
ch
 - '0';

797 
∑r£r
->
°©e
 = 
s_ªs_hâp_mö‹
;

801 
s_ªs_hâp_mö‹
:

803 i‡(
ch
 == ' ') {

804 
∑r£r
->
°©e
 = 
s_ªs_fú°_°©us_code
;

808 i‡(!
	`IS_NUM
(
ch
)) {

809 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

810 
îr‹
;

813 
∑r£r
->
hâp_mö‹
 *= 10;

814 
∑r£r
->
hâp_mö‹
 +
ch
 - '0';

816 i‡(
∑r£r
->
hâp_mö‹
 > 999) {

817 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

818 
îr‹
;

824 
s_ªs_fú°_°©us_code
:

826 i‡(!
	`IS_NUM
(
ch
)) {

827 i‡(
ch
 == ' ') {

831 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

832 
îr‹
;

834 
∑r£r
->
°©us_code
 = 
ch
 - '0';

835 
∑r£r
->
°©e
 = 
s_ªs_°©us_code
;

839 
s_ªs_°©us_code
:

841 i‡(!
	`IS_NUM
(
ch
)) {

842 
ch
) {

844 
∑r£r
->
°©e
 = 
s_ªs_°©us_°¨t
;

846 
CR
:

847 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

849 
LF
:

850 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

853 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

854 
îr‹
;

859 
∑r£r
->
°©us_code
 *= 10;

860 
∑r£r
->
°©us_code
 +
ch
 - '0';

862 i‡(
∑r£r
->
°©us_code
 > 999) {

863 
	`SET_ERRNO
(
HPE_INVALID_STATUS
);

864 
îr‹
;

870 
s_ªs_°©us_°¨t
:

872 i‡(
ch
 =
CR
) {

873 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

877 i‡(
ch
 =
LF
) {

878 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

882 
	`MARK
(
°©us
);

883 
∑r£r
->
°©e
 = 
s_ªs_°©us
;

884 
∑r£r
->
ödex
 = 0;

888 
s_ªs_°©us
:

889 i‡(
ch
 =
CR
) {

890 
∑r£r
->
°©e
 = 
s_ªs_löe_Æmo°_d⁄e
;

891 
	`CALLBACK_DATA
(
°©us
);

895 i‡(
ch
 =
LF
) {

896 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

897 
	`CALLBACK_DATA
(
°©us
);

903 
s_ªs_löe_Æmo°_d⁄e
:

904 
	`STRICT_CHECK
(
ch
 !
LF
);

905 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

908 
s_°¨t_ªq
:

910 i‡(
ch
 =
CR
 || ch =
LF
)

912 
∑r£r
->
Êags
 = 0;

913 
∑r£r
->
c⁄ã¡_Àngth
 = 
ULLONG_MAX
;

915 i‡(!
	`IS_ALPHA
(
ch
)) {

916 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

917 
îr‹
;

920 
∑r£r
->
mëhod
 = (
hâp_mëhod
) 0;

921 
∑r£r
->
ödex
 = 1;

922 
ch
) {

923 'C': 
∑r£r
->
mëhod
 = 
HTTP_CONNECT
; ;

924 'D': 
∑r£r
->
mëhod
 = 
HTTP_DELETE
; ;

925 'G': 
∑r£r
->
mëhod
 = 
HTTP_GET
; ;

926 'H': 
∑r£r
->
mëhod
 = 
HTTP_HEAD
; ;

927 'L': 
∑r£r
->
mëhod
 = 
HTTP_LOCK
; ;

928 'M': 
∑r£r
->
mëhod
 = 
HTTP_MKCOL
; ;

929 'N': 
∑r£r
->
mëhod
 = 
HTTP_NOTIFY
; ;

930 'O': 
∑r£r
->
mëhod
 = 
HTTP_OPTIONS
; ;

931 'P': 
∑r£r
->
mëhod
 = 
HTTP_POST
;

934 'R': 
∑r£r
->
mëhod
 = 
HTTP_REPORT
; ;

935 'S': 
∑r£r
->
mëhod
 = 
HTTP_SUBSCRIBE
; ;

936 'T': 
∑r£r
->
mëhod
 = 
HTTP_TRACE
; ;

937 'U': 
∑r£r
->
mëhod
 = 
HTTP_UNLOCK
; ;

939 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

940 
îr‹
;

942 
∑r£r
->
°©e
 = 
s_ªq_mëhod
;

944 
	`CALLBACK_NOTIFY
(
mesßge_begö
);

949 
s_ªq_mëhod
:

951 c⁄° *
m©chî
;

952 i‡(
ch
 == '\0') {

953 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

954 
îr‹
;

957 
m©chî
 = 
mëhod_°rögs
[
∑r£r
->
mëhod
];

958 i‡(
ch
 =' ' && 
m©chî
[
∑r£r
->
ödex
] == '\0') {

959 
∑r£r
->
°©e
 = 
s_ªq_•a˚s_bef‹e_uæ
;

960 } i‡(
ch
 =
m©chî
[
∑r£r
->
ödex
]) {

962 } i‡(
∑r£r
->
mëhod
 =
HTTP_CONNECT
) {

963 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'H') {

964 
∑r£r
->
mëhod
 = 
HTTP_CHECKOUT
;

965 } i‡(
∑r£r
->
ödex
 =2 && 
ch
 == 'P') {

966 
∑r£r
->
mëhod
 = 
HTTP_COPY
;

968 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

969 
îr‹
;

971 } i‡(
∑r£r
->
mëhod
 =
HTTP_MKCOL
) {

972 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'O') {

973 
∑r£r
->
mëhod
 = 
HTTP_MOVE
;

974 } i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'E') {

975 
∑r£r
->
mëhod
 = 
HTTP_MERGE
;

976 } i‡(
∑r£r
->
ödex
 =1 && 
ch
 == '-') {

977 
∑r£r
->
mëhod
 = 
HTTP_MSEARCH
;

978 } i‡(
∑r£r
->
ödex
 =2 && 
ch
 == 'A') {

979 
∑r£r
->
mëhod
 = 
HTTP_MKACTIVITY
;

981 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

982 
îr‹
;

984 } i‡(
∑r£r
->
mëhod
 =
HTTP_SUBSCRIBE
) {

985 i‡(
∑r£r
->
ödex
 =1 && 
ch
 == 'E') {

986 
∑r£r
->
mëhod
 = 
HTTP_SEARCH
;

988 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

989 
îr‹
;

991 } i‡(
∑r£r
->
ödex
 =1 &&Ö¨£r->
mëhod
 =
HTTP_POST
) {

992 i‡(
ch
 == 'R') {

993 
∑r£r
->
mëhod
 = 
HTTP_PROPFIND
;

994 } i‡(
ch
 == 'U') {

995 
∑r£r
->
mëhod
 = 
HTTP_PUT
;

996 } i‡(
ch
 == 'A') {

997 
∑r£r
->
mëhod
 = 
HTTP_PATCH
;

999 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1000 
îr‹
;

1002 } i‡(
∑r£r
->
ödex
 == 2) {

1003 i‡(
∑r£r
->
mëhod
 =
HTTP_PUT
) {

1004 i‡(
ch
 == 'R') {

1005 
∑r£r
->
mëhod
 = 
HTTP_PURGE
;

1007 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1008 
îr‹
;

1010 } i‡(
∑r£r
->
mëhod
 =
HTTP_UNLOCK
) {

1011 i‡(
ch
 == 'S') {

1012 
∑r£r
->
mëhod
 = 
HTTP_UNSUBSCRIBE
;

1014 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1015 
îr‹
;

1018 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1019 
îr‹
;

1021 } i‡(
∑r£r
->
ödex
 =4 &&Ö¨£r->
mëhod
 =
HTTP_PROPFIND
 && 
ch
 == 'P') {

1022 
∑r£r
->
mëhod
 = 
HTTP_PROPPATCH
;

1024 
	`SET_ERRNO
(
HPE_INVALID_METHOD
);

1025 
îr‹
;

1028 ++
∑r£r
->
ödex
;

1032 
s_ªq_•a˚s_bef‹e_uæ
:

1034 i‡(
ch
 == ' ') ;

1036 
	`MARK
(
uæ
);

1037 i‡(
∑r£r
->
mëhod
 =
HTTP_CONNECT
) {

1038 
∑r£r
->
°©e
 = 
s_ªq_£rvî_°¨t
;

1041 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1042 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1043 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1044 
îr‹
;

1050 
s_ªq_schema
:

1051 
s_ªq_schema_¶ash
:

1052 
s_ªq_schema_¶ash_¶ash
:

1053 
s_ªq_£rvî_°¨t
:

1055 
ch
) {

1058 
CR
:

1059 
LF
:

1060 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1061 
îr‹
;

1063 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1064 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1065 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1066 
îr‹
;

1073 
s_ªq_£rvî
:

1074 
s_ªq_£rvî_wôh_©
:

1075 
s_ªq_∑th
:

1076 
s_ªq_quîy_°rög_°¨t
:

1077 
s_ªq_quîy_°rög
:

1078 
s_ªq_‰agmít_°¨t
:

1079 
s_ªq_‰agmít
:

1081 
ch
) {

1083 
∑r£r
->
°©e
 = 
s_ªq_hâp_°¨t
;

1084 
	`CALLBACK_DATA
(
uæ
);

1086 
CR
:

1087 
LF
:

1088 
∑r£r
->
hâp_maj‹
 = 0;

1089 
∑r£r
->
hâp_mö‹
 = 9;

1090 
∑r£r
->
°©e
 = (
ch
 =
CR
) ?

1091 
s_ªq_löe_Æmo°_d⁄e
 :

1092 
s_hódî_fõld_°¨t
;

1093 
	`CALLBACK_DATA
(
uæ
);

1096 
∑r£r
->
°©e
 = 
	`∑r£_uæ_ch¨
((°©eÌ¨£r->°©e, 
ch
);

1097 i‡(
∑r£r
->
°©e
 =
s_dód
) {

1098 
	`SET_ERRNO
(
HPE_INVALID_URL
);

1099 
îr‹
;

1105 
s_ªq_hâp_°¨t
:

1106 
ch
) {

1108 
∑r£r
->
°©e
 = 
s_ªq_hâp_H
;

1113 
	`SET_ERRNO
(
HPE_INVALID_CONSTANT
);

1114 
îr‹
;

1118 
s_ªq_hâp_H
:

1119 
	`STRICT_CHECK
(
ch
 != 'T');

1120 
∑r£r
->
°©e
 = 
s_ªq_hâp_HT
;

1123 
s_ªq_hâp_HT
:

1124 
	`STRICT_CHECK
(
ch
 != 'T');

1125 
∑r£r
->
°©e
 = 
s_ªq_hâp_HTT
;

1128 
s_ªq_hâp_HTT
:

1129 
	`STRICT_CHECK
(
ch
 != 'P');

1130 
∑r£r
->
°©e
 = 
s_ªq_hâp_HTTP
;

1133 
s_ªq_hâp_HTTP
:

1134 
	`STRICT_CHECK
(
ch
 != '/');

1135 
∑r£r
->
°©e
 = 
s_ªq_fú°_hâp_maj‹
;

1139 
s_ªq_fú°_hâp_maj‹
:

1140 i‡(
ch
 < '1' || ch > '9') {

1141 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1142 
îr‹
;

1145 
∑r£r
->
hâp_maj‹
 = 
ch
 - '0';

1146 
∑r£r
->
°©e
 = 
s_ªq_hâp_maj‹
;

1150 
s_ªq_hâp_maj‹
:

1152 i‡(
ch
 == '.') {

1153 
∑r£r
->
°©e
 = 
s_ªq_fú°_hâp_mö‹
;

1157 i‡(!
	`IS_NUM
(
ch
)) {

1158 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1159 
îr‹
;

1162 
∑r£r
->
hâp_maj‹
 *= 10;

1163 
∑r£r
->
hâp_maj‹
 +
ch
 - '0';

1165 i‡(
∑r£r
->
hâp_maj‹
 > 999) {

1166 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1167 
îr‹
;

1174 
s_ªq_fú°_hâp_mö‹
:

1175 i‡(!
	`IS_NUM
(
ch
)) {

1176 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1177 
îr‹
;

1180 
∑r£r
->
hâp_mö‹
 = 
ch
 - '0';

1181 
∑r£r
->
°©e
 = 
s_ªq_hâp_mö‹
;

1185 
s_ªq_hâp_mö‹
:

1187 i‡(
ch
 =
CR
) {

1188 
∑r£r
->
°©e
 = 
s_ªq_löe_Æmo°_d⁄e
;

1192 i‡(
ch
 =
LF
) {

1193 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1199 i‡(!
	`IS_NUM
(
ch
)) {

1200 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1201 
îr‹
;

1204 
∑r£r
->
hâp_mö‹
 *= 10;

1205 
∑r£r
->
hâp_mö‹
 +
ch
 - '0';

1207 i‡(
∑r£r
->
hâp_mö‹
 > 999) {

1208 
	`SET_ERRNO
(
HPE_INVALID_VERSION
);

1209 
îr‹
;

1216 
s_ªq_löe_Æmo°_d⁄e
:

1218 i‡(
ch
 !
LF
) {

1219 
	`SET_ERRNO
(
HPE_LF_EXPECTED
);

1220 
îr‹
;

1223 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1227 
s_hódî_fõld_°¨t
:

1229 i‡(
ch
 =
CR
) {

1230 
∑r£r
->
°©e
 = 
s_hódîs_Æmo°_d⁄e
;

1234 i‡(
ch
 =
LF
) {

1237 
∑r£r
->
°©e
 = 
s_hódîs_Æmo°_d⁄e
;

1238 
ªexecuã_byã
;

1241 
c
 = 
	`TOKEN
(
ch
);

1243 i‡(!
c
) {

1244 
	`SET_ERRNO
(
HPE_INVALID_HEADER_TOKEN
);

1245 
îr‹
;

1248 
	`MARK
(
hódî_fõld
);

1250 
∑r£r
->
ödex
 = 0;

1251 
∑r£r
->
°©e
 = 
s_hódî_fõld
;

1253 
c
) {

1255 
∑r£r
->
hódî_°©e
 = 
h_C
;

1259 
∑r£r
->
hódî_°©e
 = 
h_m©chög_¥oxy_c⁄√˘i⁄
;

1263 
∑r£r
->
hódî_°©e
 = 
h_m©chög_å™s„r_ícodög
;

1267 
∑r£r
->
hódî_°©e
 = 
h_m©chög_upgøde
;

1271 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1277 
s_hódî_fõld
:

1279 
c
 = 
	`TOKEN
(
ch
);

1281 i‡(
c
) {

1282 
∑r£r
->
hódî_°©e
) {

1283 
h_gíîÆ
:

1286 
h_C
:

1287 
∑r£r
->
ödex
++;

1288 
∑r£r
->
hódî_°©e
 = (
c
 ='o' ? 
h_CO
 : 
h_gíîÆ
);

1291 
h_CO
:

1292 
∑r£r
->
ödex
++;

1293 
∑r£r
->
hódî_°©e
 = (
c
 ='n' ? 
h_CON
 : 
h_gíîÆ
);

1296 
h_CON
:

1297 
∑r£r
->
ödex
++;

1298 
c
) {

1300 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄
;

1303 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄ã¡_Àngth
;

1306 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1313 
h_m©chög_c⁄√˘i⁄
:

1314 
∑r£r
->
ödex
++;

1315 i‡(
∑r£r
->
ödex
 > (
CONNECTION
)-1

1316 || 
c
 !
CONNECTION
[
∑r£r
->
ödex
]) {

1317 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1318 } i‡(
∑r£r
->
ödex
 =(
CONNECTION
)-2) {

1319 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄
;

1325 
h_m©chög_¥oxy_c⁄√˘i⁄
:

1326 
∑r£r
->
ödex
++;

1327 i‡(
∑r£r
->
ödex
 > (
PROXY_CONNECTION
)-1

1328 || 
c
 !
PROXY_CONNECTION
[
∑r£r
->
ödex
]) {

1329 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1330 } i‡(
∑r£r
->
ödex
 =(
PROXY_CONNECTION
)-2) {

1331 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄
;

1337 
h_m©chög_c⁄ã¡_Àngth
:

1338 
∑r£r
->
ödex
++;

1339 i‡(
∑r£r
->
ödex
 > (
CONTENT_LENGTH
)-1

1340 || 
c
 !
CONTENT_LENGTH
[
∑r£r
->
ödex
]) {

1341 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1342 } i‡(
∑r£r
->
ödex
 =(
CONTENT_LENGTH
)-2) {

1343 
∑r£r
->
hódî_°©e
 = 
h_c⁄ã¡_Àngth
;

1349 
h_m©chög_å™s„r_ícodög
:

1350 
∑r£r
->
ödex
++;

1351 i‡(
∑r£r
->
ödex
 > (
TRANSFER_ENCODING
)-1

1352 || 
c
 !
TRANSFER_ENCODING
[
∑r£r
->
ödex
]) {

1353 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1354 } i‡(
∑r£r
->
ödex
 =(
TRANSFER_ENCODING
)-2) {

1355 
∑r£r
->
hódî_°©e
 = 
h_å™s„r_ícodög
;

1361 
h_m©chög_upgøde
:

1362 
∑r£r
->
ödex
++;

1363 i‡(
∑r£r
->
ödex
 > (
UPGRADE
)-1

1364 || 
c
 !
UPGRADE
[
∑r£r
->
ödex
]) {

1365 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1366 } i‡(
∑r£r
->
ödex
 =(
UPGRADE
)-2) {

1367 
∑r£r
->
hódî_°©e
 = 
h_upgøde
;

1371 
h_c⁄√˘i⁄
:

1372 
h_c⁄ã¡_Àngth
:

1373 
h_å™s„r_ícodög
:

1374 
h_upgøde
:

1375 i‡(
ch
 !' 'Ë
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1379 
	`as£π
(0 && "Unknown header_state");

1385 i‡(
ch
 == ':') {

1386 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws
;

1387 
	`CALLBACK_DATA
(
hódî_fõld
);

1391 i‡(
ch
 =
CR
) {

1392 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1393 
	`CALLBACK_DATA
(
hódî_fõld
);

1397 i‡(
ch
 =
LF
) {

1398 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1399 
	`CALLBACK_DATA
(
hódî_fõld
);

1403 
	`SET_ERRNO
(
HPE_INVALID_HEADER_TOKEN
);

1404 
îr‹
;

1407 
s_hódî_vÆue_disˇrd_ws
:

1408 i‡(
ch
 == ' ' || ch == '\t') ;

1410 i‡(
ch
 =
CR
) {

1411 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e
;

1415 i‡(
ch
 =
LF
) {

1416 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_lws
;

1422 
s_hódî_vÆue_°¨t
:

1424 
	`MARK
(
hódî_vÆue
);

1426 
∑r£r
->
°©e
 = 
s_hódî_vÆue
;

1427 
∑r£r
->
ödex
 = 0;

1429 
c
 = 
	`LOWER
(
ch
);

1431 
∑r£r
->
hódî_°©e
) {

1432 
h_upgøde
:

1433 
∑r£r
->
Êags
 |
F_UPGRADE
;

1434 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1437 
h_å™s„r_ícodög
:

1439 i‡('c' =
c
) {

1440 
∑r£r
->
hódî_°©e
 = 
h_m©chög_å™s„r_ícodög_chunked
;

1442 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1446 
h_c⁄ã¡_Àngth
:

1447 i‡(!
	`IS_NUM
(
ch
)) {

1448 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1449 
îr‹
;

1452 
∑r£r
->
c⁄ã¡_Àngth
 = 
ch
 - '0';

1455 
h_c⁄√˘i⁄
:

1457 i‡(
c
 == 'k') {

1458 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄_kìp_Æive
;

1460 } i‡(
c
 == 'c') {

1461 
∑r£r
->
hódî_°©e
 = 
h_m©chög_c⁄√˘i⁄_˛o£
;

1463 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1468 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1474 
s_hódî_vÆue
:

1477 i‡(
ch
 =
CR
) {

1478 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1479 
	`CALLBACK_DATA
(
hódî_vÆue
);

1483 i‡(
ch
 =
LF
) {

1484 
∑r£r
->
°©e
 = 
s_hódî_Æmo°_d⁄e
;

1485 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1486 
ªexecuã_byã
;

1489 
c
 = 
	`LOWER
(
ch
);

1491 
∑r£r
->
hódî_°©e
) {

1492 
h_gíîÆ
:

1495 
h_c⁄√˘i⁄
:

1496 
h_å™s„r_ícodög
:

1497 
	`as£π
(0 && "Shouldn't get here.");

1500 
h_c⁄ã¡_Àngth
:

1502 
uöt64_t
 
t
;

1504 i‡(
ch
 == ' ') ;

1506 i‡(!
	`IS_NUM
(
ch
)) {

1507 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1508 
îr‹
;

1511 
t
 = 
∑r£r
->
c⁄ã¡_Àngth
;

1512 
t
 *= 10;

1513 
t
 +
ch
 - '0';

1516 i‡((
ULLONG_MAX
 - 10Ë/ 10 < 
∑r£r
->
c⁄ã¡_Àngth
) {

1517 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1518 
îr‹
;

1521 
∑r£r
->
c⁄ã¡_Àngth
 = 
t
;

1526 
h_m©chög_å™s„r_ícodög_chunked
:

1527 
∑r£r
->
ödex
++;

1528 i‡(
∑r£r
->
ödex
 > (
CHUNKED
)-1

1529 || 
c
 !
CHUNKED
[
∑r£r
->
ödex
]) {

1530 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1531 } i‡(
∑r£r
->
ödex
 =(
CHUNKED
)-2) {

1532 
∑r£r
->
hódî_°©e
 = 
h_å™s„r_ícodög_chunked
;

1537 
h_m©chög_c⁄√˘i⁄_kìp_Æive
:

1538 
∑r£r
->
ödex
++;

1539 i‡(
∑r£r
->
ödex
 > (
KEEP_ALIVE
)-1

1540 || 
c
 !
KEEP_ALIVE
[
∑r£r
->
ödex
]) {

1541 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1542 } i‡(
∑r£r
->
ödex
 =(
KEEP_ALIVE
)-2) {

1543 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄_kìp_Æive
;

1548 
h_m©chög_c⁄√˘i⁄_˛o£
:

1549 
∑r£r
->
ödex
++;

1550 i‡(
∑r£r
->
ödex
 > (
CLOSE
)-1 || 
c
 != CLOSE[parser->index]) {

1551 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1552 } i‡(
∑r£r
->
ödex
 =(
CLOSE
)-2) {

1553 
∑r£r
->
hódî_°©e
 = 
h_c⁄√˘i⁄_˛o£
;

1557 
h_å™s„r_ícodög_chunked
:

1558 
h_c⁄√˘i⁄_kìp_Æive
:

1559 
h_c⁄√˘i⁄_˛o£
:

1560 i‡(
ch
 !' 'Ë
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1564 
∑r£r
->
°©e
 = 
s_hódî_vÆue
;

1565 
∑r£r
->
hódî_°©e
 = 
h_gíîÆ
;

1571 
s_hódî_Æmo°_d⁄e
:

1573 
	`STRICT_CHECK
(
ch
 !
LF
);

1575 
∑r£r
->
°©e
 = 
s_hódî_vÆue_lws
;

1579 
s_hódî_vÆue_lws
:

1581 i‡(
ch
 == ' ' || ch == '\t') {

1582 
∑r£r
->
°©e
 = 
s_hódî_vÆue_°¨t
;

1583 
ªexecuã_byã
;

1587 
∑r£r
->
hódî_°©e
) {

1588 
h_c⁄√˘i⁄_kìp_Æive
:

1589 
∑r£r
->
Êags
 |
F_CONNECTION_KEEP_ALIVE
;

1591 
h_c⁄√˘i⁄_˛o£
:

1592 
∑r£r
->
Êags
 |
F_CONNECTION_CLOSE
;

1594 
h_å™s„r_ícodög_chunked
:

1595 
∑r£r
->
Êags
 |
F_CHUNKED
;

1601 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1602 
ªexecuã_byã
;

1605 
s_hódî_vÆue_disˇrd_ws_Æmo°_d⁄e
:

1607 
	`STRICT_CHECK
(
ch
 !
LF
);

1608 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_lws
;

1612 
s_hódî_vÆue_disˇrd_lws
:

1614 i‡(
ch
 == ' ' || ch == '\t') {

1615 
∑r£r
->
°©e
 = 
s_hódî_vÆue_disˇrd_ws
;

1619 
	`MARK
(
hódî_vÆue
);

1620 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1621 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1622 
ªexecuã_byã
;

1626 
s_hódîs_Æmo°_d⁄e
:

1628 
	`STRICT_CHECK
(
ch
 !
LF
);

1630 i‡(
∑r£r
->
Êags
 & 
F_TRAILING
) {

1632 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1633 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1637 
∑r£r
->
°©e
 = 
s_hódîs_d⁄e
;

1640 
∑r£r
->
upgøde
 =

1641 (
∑r£r
->
Êags
 & 
F_UPGRADE
 ||Ö¨£r->
mëhod
 =
HTTP_CONNECT
);

1652 i‡(
£âögs
->
⁄_hódîs_com∂ëe
) {

1653 
£âögs
->
	`⁄_hódîs_com∂ëe
(
∑r£r
)) {

1658 
∑r£r
->
Êags
 |
F_SKIPBODY
;

1662 
	`SET_ERRNO
(
HPE_CB_hódîs_com∂ëe
);

1663  
p
 - 
d©a
;

1667 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë!
HPE_OK
) {

1668  
p
 - 
d©a
;

1671 
ªexecuã_byã
;

1674 
s_hódîs_d⁄e
:

1676 
	`STRICT_CHECK
(
ch
 !
LF
);

1678 
∑r£r
->
ƒód
 = 0;

1681 i‡(
∑r£r
->
upgøde
) {

1682 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1683 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1684  (
p
 - 
d©a
) + 1;

1687 i‡(
∑r£r
->
Êags
 & 
F_SKIPBODY
) {

1688 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1689 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1690 } i‡(
∑r£r
->
Êags
 & 
F_CHUNKED
) {

1692 
∑r£r
->
°©e
 = 
s_chunk_size_°¨t
;

1694 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1696 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1697 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1698 } i‡(
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
) {

1700 
∑r£r
->
°©e
 = 
s_body_idítôy
;

1702 i‡(
∑r£r
->
ty≥
 =
HTTP_REQUEST
 ||

1703 !
	`hâp_mesßge_√eds_eof
(
∑r£r
)) {

1705 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1706 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1709 
∑r£r
->
°©e
 = 
s_body_idítôy_eof
;

1717 
s_body_idítôy
:

1719 
uöt64_t
 
to_ªad
 = 
	`MIN
(
∑r£r
->
c⁄ã¡_Àngth
,

1720 (
uöt64_t
Ë((
d©a
 + 
Àn
Ë- 
p
));

1722 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 != 0

1723 && 
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
);

1730 
	`MARK
(
body
);

1731 
∑r£r
->
c⁄ã¡_Àngth
 -
to_ªad
;

1732 
p
 +
to_ªad
 - 1;

1734 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1735 
∑r£r
->
°©e
 = 
s_mesßge_d⁄e
;

1746 
	`CALLBACK_DATA_
(
body
, 
p
 - 
body_m¨k
 + 1,Ö - 
d©a
);

1747 
ªexecuã_byã
;

1754 
s_body_idítôy_eof
:

1755 
	`MARK
(
body
);

1756 
p
 = 
d©a
 + 
Àn
 - 1;

1760 
s_mesßge_d⁄e
:

1761 
∑r£r
->
°©e
 = 
	`NEW_MESSAGE
();

1762 
	`CALLBACK_NOTIFY
(
mesßge_com∂ëe
);

1765 
s_chunk_size_°¨t
:

1767 
	`as£π
(
∑r£r
->
ƒód
 == 1);

1768 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1770 
unhex_vÆ
 = 
unhex
[()
ch
];

1771 i‡(
unhex_vÆ
 == -1) {

1772 
	`SET_ERRNO
(
HPE_INVALID_CHUNK_SIZE
);

1773 
îr‹
;

1776 
∑r£r
->
c⁄ã¡_Àngth
 = 
unhex_vÆ
;

1777 
∑r£r
->
°©e
 = 
s_chunk_size
;

1781 
s_chunk_size
:

1783 
uöt64_t
 
t
;

1785 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1787 i‡(
ch
 =
CR
) {

1788 
∑r£r
->
°©e
 = 
s_chunk_size_Æmo°_d⁄e
;

1792 
unhex_vÆ
 = 
unhex
[()
ch
];

1794 i‡(
unhex_vÆ
 == -1) {

1795 i‡(
ch
 == ';' || ch == ' ') {

1796 
∑r£r
->
°©e
 = 
s_chunk_∑ømëîs
;

1800 
	`SET_ERRNO
(
HPE_INVALID_CHUNK_SIZE
);

1801 
îr‹
;

1804 
t
 = 
∑r£r
->
c⁄ã¡_Àngth
;

1805 
t
 *= 16;

1806 
t
 +
unhex_vÆ
;

1809 i‡((
ULLONG_MAX
 - 16Ë/ 16 < 
∑r£r
->
c⁄ã¡_Àngth
) {

1810 
	`SET_ERRNO
(
HPE_INVALID_CONTENT_LENGTH
);

1811 
îr‹
;

1814 
∑r£r
->
c⁄ã¡_Àngth
 = 
t
;

1818 
s_chunk_∑ømëîs
:

1820 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1822 i‡(
ch
 =
CR
) {

1823 
∑r£r
->
°©e
 = 
s_chunk_size_Æmo°_d⁄e
;

1829 
s_chunk_size_Æmo°_d⁄e
:

1831 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1832 
	`STRICT_CHECK
(
ch
 !
LF
);

1834 
∑r£r
->
ƒód
 = 0;

1836 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1837 
∑r£r
->
Êags
 |
F_TRAILING
;

1838 
∑r£r
->
°©e
 = 
s_hódî_fõld_°¨t
;

1840 
∑r£r
->
°©e
 = 
s_chunk_d©a
;

1845 
s_chunk_d©a
:

1847 
uöt64_t
 
to_ªad
 = 
	`MIN
(
∑r£r
->
c⁄ã¡_Àngth
,

1848 (
uöt64_t
Ë((
d©a
 + 
Àn
Ë- 
p
));

1850 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1851 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 != 0

1852 && 
∑r£r
->
c⁄ã¡_Àngth
 !
ULLONG_MAX
);

1857 
	`MARK
(
body
);

1858 
∑r£r
->
c⁄ã¡_Àngth
 -
to_ªad
;

1859 
p
 +
to_ªad
 - 1;

1861 i‡(
∑r£r
->
c⁄ã¡_Àngth
 == 0) {

1862 
∑r£r
->
°©e
 = 
s_chunk_d©a_Æmo°_d⁄e
;

1868 
s_chunk_d©a_Æmo°_d⁄e
:

1869 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1870 
	`as£π
(
∑r£r
->
c⁄ã¡_Àngth
 == 0);

1871 
	`STRICT_CHECK
(
ch
 !
CR
);

1872 
∑r£r
->
°©e
 = 
s_chunk_d©a_d⁄e
;

1873 
	`CALLBACK_DATA
(
body
);

1876 
s_chunk_d©a_d⁄e
:

1877 
	`as£π
(
∑r£r
->
Êags
 & 
F_CHUNKED
);

1878 
	`STRICT_CHECK
(
ch
 !
LF
);

1879 
∑r£r
->
ƒód
 = 0;

1880 
∑r£r
->
°©e
 = 
s_chunk_size_°¨t
;

1884 
	`as£π
(0 && "unhandled state");

1885 
	`SET_ERRNO
(
HPE_INVALID_INTERNAL_STATE
);

1886 
îr‹
;

1900 
	`as£π
(((
hódî_fõld_m¨k
 ? 1 : 0) +

1901 (
hódî_vÆue_m¨k
 ? 1 : 0) +

1902 (
uæ_m¨k
 ? 1 : 0) +

1903 (
body_m¨k
 ? 1 : 0) +

1904 (
°©us_m¨k
 ? 1 : 0)) <= 1);

1906 
	`CALLBACK_DATA_NOADVANCE
(
hódî_fõld
);

1907 
	`CALLBACK_DATA_NOADVANCE
(
hódî_vÆue
);

1908 
	`CALLBACK_DATA_NOADVANCE
(
uæ
);

1909 
	`CALLBACK_DATA_NOADVANCE
(
body
);

1910 
	`CALLBACK_DATA_NOADVANCE
(
°©us
);

1912  
Àn
;

1914 
îr‹
:

1915 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
) {

1916 
	`SET_ERRNO
(
HPE_UNKNOWN
);

1919  (
p
 - 
d©a
);

1920 
	}
}

1925 
	$hâp_mesßge_√eds_eof
 (c⁄° 
hâp_∑r£r
 *
∑r£r
)

1927 i‡(
∑r£r
->
ty≥
 =
HTTP_REQUEST
) {

1932 i‡(
∑r£r
->
°©us_code
 / 100 == 1 ||

1933 
∑r£r
->
°©us_code
 == 204 ||

1934 
∑r£r
->
°©us_code
 == 304 ||

1935 
∑r£r
->
Êags
 & 
F_SKIPBODY
) {

1939 i‡((
∑r£r
->
Êags
 & 
F_CHUNKED
Ë||Ö¨£r->
c⁄ã¡_Àngth
 !
ULLONG_MAX
) {

1944 
	}
}

1948 
	$hâp_should_kìp_Æive
 (c⁄° 
hâp_∑r£r
 *
∑r£r
)

1950 i‡(
∑r£r
->
hâp_maj‹
 > 0 &&Ö¨£r->
hâp_mö‹
 > 0) {

1952 i‡(
∑r£r
->
Êags
 & 
F_CONNECTION_CLOSE
) {

1957 i‡(!(
∑r£r
->
Êags
 & 
F_CONNECTION_KEEP_ALIVE
)) {

1962  !
	`hâp_mesßge_√eds_eof
(
∑r£r
);

1963 
	}
}

1967 
	$hâp_mëhod_°r
 (
hâp_mëhod
 
m
)

1969  
	`ELEM_AT
(
mëhod_°rögs
, 
m
, "<unknown>");

1970 
	}
}

1974 
	$hâp_∑r£r_öô
 (
hâp_∑r£r
 *
∑r£r
, 
hâp_∑r£r_ty≥
 
t
)

1976 *
d©a
 = 
∑r£r
->data;

1977 
	`mem£t
(
∑r£r
, 0, (*parser));

1978 
∑r£r
->
d©a
 = data;

1979 
∑r£r
->
ty≥
 = 
t
;

1980 
∑r£r
->
°©e
 = (
t
 =
HTTP_REQUEST
 ? 
s_°¨t_ªq
 : (à=
HTTP_RESPONSE
 ? 
s_°¨t_ªs
 : 
s_°¨t_ªq_‹_ªs
));

1981 
∑r£r
->
hâp_î∫o
 = 
HPE_OK
;

1982 
	}
}

1985 
	$hâp_î∫o_«me
(
hâp_î∫o
 
îr
) {

1986 
	`as£π
(
îr
 < ((
hâp_°ªº‹_èb
)/(http_strerror_tab[0])));

1987  
hâp_°ªº‹_èb
[
îr
].
«me
;

1988 
	}
}

1991 
	$hâp_î∫o_des¸ùti⁄
(
hâp_î∫o
 
îr
) {

1992 
	`as£π
(
îr
 < ((
hâp_°ªº‹_èb
)/(http_strerror_tab[0])));

1993  
hâp_°ªº‹_èb
[
îr
].
des¸ùti⁄
;

1994 
	}
}

1996 
hâp_ho°_°©e


1997 
	$hâp_∑r£_ho°_ch¨
(
hâp_ho°_°©e
 
s
, c⁄° 
ch
) {

1998 
s
) {

1999 
s_hâp_u£röfo
:

2000 
s_hâp_u£röfo_°¨t
:

2001 i‡(
ch
 == '@') {

2002  
s_hâp_ho°_°¨t
;

2005 i‡(
	`IS_USERINFO_CHAR
(
ch
)) {

2006  
s_hâp_u£röfo
;

2010 
s_hâp_ho°_°¨t
:

2011 i‡(
ch
 == '[') {

2012  
s_hâp_ho°_v6_°¨t
;

2015 i‡(
	`IS_HOST_CHAR
(
ch
)) {

2016  
s_hâp_ho°
;

2021 
s_hâp_ho°
:

2022 i‡(
	`IS_HOST_CHAR
(
ch
)) {

2023  
s_hâp_ho°
;

2027 
s_hâp_ho°_v6_íd
:

2028 i‡(
ch
 == ':') {

2029  
s_hâp_ho°_p‹t_°¨t
;

2034 
s_hâp_ho°_v6
:

2035 i‡(
ch
 == ']') {

2036  
s_hâp_ho°_v6_íd
;

2040 
s_hâp_ho°_v6_°¨t
:

2041 i‡(
	`IS_HEX
(
ch
) || ch == ':' || ch == '.') {

2042  
s_hâp_ho°_v6
;

2047 
s_hâp_ho°_p‹t
:

2048 
s_hâp_ho°_p‹t_°¨t
:

2049 i‡(
	`IS_NUM
(
ch
)) {

2050  
s_hâp_ho°_p‹t
;

2058  
s_hâp_ho°_dód
;

2059 
	}
}

2062 
	$hâp_∑r£_ho°
(c⁄° * 
buf
, 
hâp_∑r£r_uæ
 *
u
, 
found_©
) {

2063 
hâp_ho°_°©e
 
s
;

2065 c⁄° *
p
;

2066 
size_t
 
buÊí
 = 
u
->
fõld_d©a
[
UF_HOST
].
off
 + u->fõld_d©a[UF_HOST].
Àn
;

2068 
u
->
fõld_d©a
[
UF_HOST
].
Àn
 = 0;

2070 
s
 = 
found_©
 ? 
s_hâp_u£röfo_°¨t
 : 
s_hâp_ho°_°¨t
;

2072 
p
 = 
buf
 + 
u
->
fõld_d©a
[
UF_HOST
].
off
;Ö < bu‡+ 
buÊí
;Ö++) {

2073 
hâp_ho°_°©e
 
√w_s
 = 
	`hâp_∑r£_ho°_ch¨
(
s
, *
p
);

2075 i‡(
√w_s
 =
s_hâp_ho°_dód
) {

2079 
√w_s
) {

2080 
s_hâp_ho°
:

2081 i‡(
s
 !
s_hâp_ho°
) {

2082 
u
->
fõld_d©a
[
UF_HOST
].
off
 = 
p
 - 
buf
;

2084 
u
->
fõld_d©a
[
UF_HOST
].
Àn
++;

2087 
s_hâp_ho°_v6
:

2088 i‡(
s
 !
s_hâp_ho°_v6
) {

2089 
u
->
fõld_d©a
[
UF_HOST
].
off
 = 
p
 - 
buf
;

2091 
u
->
fõld_d©a
[
UF_HOST
].
Àn
++;

2094 
s_hâp_ho°_p‹t
:

2095 i‡(
s
 !
s_hâp_ho°_p‹t
) {

2096 
u
->
fõld_d©a
[
UF_PORT
].
off
 = 
p
 - 
buf
;

2097 
u
->
fõld_d©a
[
UF_PORT
].
Àn
 = 0;

2098 
u
->
fõld_£t
 |(1 << 
UF_PORT
);

2100 
u
->
fõld_d©a
[
UF_PORT
].
Àn
++;

2103 
s_hâp_u£röfo
:

2104 i‡(
s
 !
s_hâp_u£röfo
) {

2105 
u
->
fõld_d©a
[
UF_USERINFO
].
off
 = 
p
 - 
buf
 ;

2106 
u
->
fõld_d©a
[
UF_USERINFO
].
Àn
 = 0;

2107 
u
->
fõld_£t
 |(1 << 
UF_USERINFO
);

2109 
u
->
fõld_d©a
[
UF_USERINFO
].
Àn
++;

2115 
s
 = 
√w_s
;

2119 
s
) {

2120 
s_hâp_ho°_°¨t
:

2121 
s_hâp_ho°_v6_°¨t
:

2122 
s_hâp_ho°_v6
:

2123 
s_hâp_ho°_p‹t_°¨t
:

2124 
s_hâp_u£röfo
:

2125 
s_hâp_u£röfo_°¨t
:

2132 
	}
}

2135 
	$hâp_∑r£r_∑r£_uæ
(c⁄° *
buf
, 
size_t
 
buÊí
, 
is_c⁄√˘
,

2136 
hâp_∑r£r_uæ
 *
u
)

2138 
°©e
 
s
;

2139 c⁄° *
p
;

2140 
hâp_∑r£r_uæ_fõlds
 
uf
, 
ﬁd_uf
;

2141 
found_©
 = 0;

2143 
u
->
p‹t
 = u->
fõld_£t
 = 0;

2144 
s
 = 
is_c⁄√˘
 ? 
s_ªq_£rvî_°¨t
 : 
s_ªq_•a˚s_bef‹e_uæ
;

2145 
uf
 = 
ﬁd_uf
 = 
UF_MAX
;

2147 
p
 = 
buf
;Ö < bu‡+ 
buÊí
;Ö++) {

2148 
s
 = 
	`∑r£_uæ_ch¨
(s, *
p
);

2151 
s
) {

2152 
s_dód
:

2156 
s_ªq_schema_¶ash
:

2157 
s_ªq_schema_¶ash_¶ash
:

2158 
s_ªq_£rvî_°¨t
:

2159 
s_ªq_quîy_°rög_°¨t
:

2160 
s_ªq_‰agmít_°¨t
:

2163 
s_ªq_schema
:

2164 
uf
 = 
UF_SCHEMA
;

2167 
s_ªq_£rvî_wôh_©
:

2168 
found_©
 = 1;

2171 
s_ªq_£rvî
:

2172 
uf
 = 
UF_HOST
;

2175 
s_ªq_∑th
:

2176 
uf
 = 
UF_PATH
;

2179 
s_ªq_quîy_°rög
:

2180 
uf
 = 
UF_QUERY
;

2183 
s_ªq_‰agmít
:

2184 
uf
 = 
UF_FRAGMENT
;

2188 
	`as£π
(!"Unexpected state");

2193 i‡(
uf
 =
ﬁd_uf
) {

2194 
u
->
fõld_d©a
[
uf
].
Àn
++;

2198 
u
->
fõld_d©a
[
uf
].
off
 = 
p
 - 
buf
;

2199 
u
->
fõld_d©a
[
uf
].
Àn
 = 1;

2201 
u
->
fõld_£t
 |(1 << 
uf
);

2202 
ﬁd_uf
 = 
uf
;

2207 i‡((
u
->
fõld_£t
 & ((1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
))) != 0) {

2208 i‡(
	`hâp_∑r£_ho°
(
buf
, 
u
, 
found_©
) != 0) {

2214 i‡(
is_c⁄√˘
 && 
u
->
fõld_£t
 !((1 << 
UF_HOST
)|(1 << 
UF_PORT
))) {

2218 i‡(
u
->
fõld_£t
 & (1 << 
UF_PORT
)) {

2220 
v
 = 
	`°πoul
(
buf
 + 
u
->
fõld_d©a
[
UF_PORT
].
off
, 
NULL
, 10);

2223 i‡(
v
 > 0xffff) {

2227 
u
->
p‹t
 = (
uöt16_t
Ë
v
;

2231 
	}
}

2234 
	$hâp_∑r£r_∑u£
(
hâp_∑r£r
 *
∑r£r
, 
∑u£d
) {

2239 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_OK
 ||

2240 
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_PAUSED
) {

2241 
	`SET_ERRNO
((
∑u£d
Ë? 
HPE_PAUSED
 : 
HPE_OK
);

2243 
	`as£π
(0 && "AttemptingÅoÖauseÖarser inÉrror state");

2245 
	}
}

2248 
	$hâp_body_is_föÆ
(c⁄° 
hâp_∑r£r
 *
∑r£r
) {

2249  
∑r£r
->
°©e
 =
s_mesßge_d⁄e
;

2250 
	}
}

2253 
	$hâp_∑r£r_vîsi⁄
() {

2254  
HTTP_PARSER_VERSION_MAJOR
 * 0x10000 |

2255 
HTTP_PARSER_VERSION_MINOR
 * 0x00100 |

2256 
HTTP_PARSER_VERSION_PATCH
 * 0x00001;

2257 
	}
}

	@/home/kartik/nwe/test/samples/http-parser-master/http_parser.h

21 #i‚de‡
hâp_∑r£r_h


22 
	#hâp_∑r£r_h


	)

23 #ifde‡
__˝lu•lus


28 
	#HTTP_PARSER_VERSION_MAJOR
 2

	)

29 
	#HTTP_PARSER_VERSION_MINOR
 3

	)

30 
	#HTTP_PARSER_VERSION_PATCH
 0

	)

32 
	~<sys/ty≥s.h
>

33 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__MINGW32__
Ë&& (!deföed(
_MSC_VER
) || _MSC_VER<1600)

34 
	~<Ba£Tsd.h
>

35 
	~<°ddef.h
>

36 
__öt8
 
	töt8_t
;

37 
	t__öt8
 
	tuöt8_t
;

38 
__öt16
 
	töt16_t
;

39 
	t__öt16
 
	tuöt16_t
;

40 
__öt32
 
	töt32_t
;

41 
	t__öt32
 
	tuöt32_t
;

42 
__öt64
 
	töt64_t
;

43 
	t__öt64
 
	tuöt64_t
;

45 
	~<°döt.h
>

51 #i‚de‡
HTTP_PARSER_STRICT


52 
	#HTTP_PARSER_STRICT
 1

	)

62 #i‚de‡
HTTP_MAX_HEADER_SIZE


63 
	#HTTP_MAX_HEADER_SIZE
 (80*1024)

	)

66 
hâp_∑r£r
 
	thâp_∑r£r
;

67 
hâp_∑r£r_£âögs
 
	thâp_∑r£r_£âögs
;

83 (*
hâp_d©a_cb
Ë(
	thâp_∑r£r
*, c⁄° *
	t©
, 
	tsize_t
 
	tÀngth
);

84 (*
hâp_cb
Ë(
	thâp_∑r£r
*);

88 
	#HTTP_METHOD_MAP
(
XX
) \

89 
	`XX
(0, 
DELETE
, DELETE) \

90 
	`XX
(1, 
GET
, GET) \

91 
	`XX
(2, 
HEAD
, HEAD) \

92 
	`XX
(3, 
POST
, POST) \

93 
	`XX
(4, 
PUT
, PUT) \

95 
	`XX
(5, 
CONNECT
, CONNECT) \

96 
	`XX
(6, 
OPTIONS
, OPTIONS) \

97 
	`XX
(7, 
TRACE
, TRACE) \

99 
	`XX
(8, 
COPY
, COPY) \

100 
	`XX
(9, 
LOCK
, LOCK) \

101 
	`XX
(10, 
MKCOL
, MKCOL) \

102 
	`XX
(11, 
MOVE
, MOVE) \

103 
	`XX
(12, 
PROPFIND
, PROPFIND) \

104 
	`XX
(13, 
PROPPATCH
, PROPPATCH) \

105 
	`XX
(14, 
SEARCH
, SEARCH) \

106 
	`XX
(15, 
UNLOCK
, UNLOCK) \

108 
	`XX
(16, 
REPORT
, REPORT) \

109 
	`XX
(17, 
MKACTIVITY
, MKACTIVITY) \

110 
	`XX
(18, 
CHECKOUT
, CHECKOUT) \

111 
	`XX
(19, 
MERGE
, MERGE) \

113 
	`XX
(20, 
MSEARCH
, 
M
-
SEARCH
) \

114 
	`XX
(21, 
NOTIFY
, NOTIFY) \

115 
	`XX
(22, 
SUBSCRIBE
, SUBSCRIBE) \

116 
	`XX
(23, 
UNSUBSCRIBE
, UNSUBSCRIBE) \

118 
	`XX
(24, 
PATCH
, PATCH) \

119 
	`XX
(25, 
PURGE
, PURGE) \

120 

	)

121 
	ehâp_mëhod


123 
	#XX
(
num
, 
«me
, 
°rög
Ë
HTTP_
##«mênum,

	)

124 
HTTP_METHOD_MAP
(
XX
)

125 #unde‡
XX


129 
	ehâp_∑r£r_ty≥
 { 
HTTP_REQUEST
, 
HTTP_RESPONSE
, 
HTTP_BOTH
 };

133 
	eÊags


134 { 
F_CHUNKED
 = 1 << 0

135 , 
F_CONNECTION_KEEP_ALIVE
 = 1 << 1

136 , 
F_CONNECTION_CLOSE
 = 1 << 2

137 , 
F_TRAILING
 = 1 << 3

138 , 
F_UPGRADE
 = 1 << 4

139 , 
F_SKIPBODY
 = 1 << 5

147 
	#HTTP_ERRNO_MAP
(
XX
) \

149 
	`XX
(
OK
, "success") \

152 
	`XX
(
CB_mesßge_begö
, "the on_message_begin callback failed") \

153 
	`XX
(
CB_uæ
, "the on_url callback failed") \

154 
	`XX
(
CB_hódî_fõld
, "the on_header_field callback failed") \

155 
	`XX
(
CB_hódî_vÆue
, "the on_header_value callback failed") \

156 
	`XX
(
CB_hódîs_com∂ëe
, "the on_headers_complete callback failed") \

157 
	`XX
(
CB_body
, "the on_body callback failed") \

158 
	`XX
(
CB_mesßge_com∂ëe
, "the on_message_complete callback failed") \

159 
	`XX
(
CB_°©us
, "the on_status callback failed") \

162 
	`XX
(
INVALID_EOF_STATE
, "streamÉndedátán unexpectedÅime") \

163 
	`XX
(
HEADER_OVERFLOW
, \

165 
	`XX
(
CLOSED_CONNECTION
, \

167 
	`XX
(
INVALID_VERSION
, "invalid HTTP version") \

168 
	`XX
(
INVALID_STATUS
, "invalid HTTP status code") \

169 
	`XX
(
INVALID_METHOD
, "invalid HTTP method") \

170 
	`XX
(
INVALID_URL
, "invalid URL") \

171 
	`XX
(
INVALID_HOST
, "invalid host") \

172 
	`XX
(
INVALID_PORT
, "invalidÖort") \

173 
	`XX
(
INVALID_PATH
, "invalidÖath") \

174 
	`XX
(
INVALID_QUERY_STRING
, "invalid query string") \

175 
	`XX
(
INVALID_FRAGMENT
, "invalid fragment") \

176 
	`XX
(
LF_EXPECTED
, "LF characterÉxpected") \

177 
	`XX
(
INVALID_HEADER_TOKEN
, "invalid character in header") \

178 
	`XX
(
INVALID_CONTENT_LENGTH
, \

180 
	`XX
(
INVALID_CHUNK_SIZE
, \

182 
	`XX
(
INVALID_CONSTANT
, "invalid constant string") \

183 
	`XX
(
INVALID_INTERNAL_STATE
, "encountered unexpected internal state")\

184 
	`XX
(
STRICT
, "strict modeássertion failed") \

185 
	`XX
(
PAUSED
, "parser isÖaused") \

186 
	`XX
(
UNKNOWN
, "™ unknow¿îr‹ occuºed")

	)

190 
	#HTTP_ERRNO_GEN
(
n
, 
s
Ë
HPE_
##n,

	)

191 
	ehâp_î∫o
 {

192 
HTTP_ERRNO_MAP
(
HTTP_ERRNO_GEN
)

194 #unde‡
HTTP_ERRNO_GEN


198 
	#HTTP_PARSER_ERRNO
(
p
Ë((
hâp_î∫o
Ë’)->hâp_î∫o)

	)

201 
	shâp_∑r£r
 {

203 
ty≥
 : 2;

204 
Êags
 : 6;

205 
°©e
 : 8;

206 
hódî_°©e
 : 8;

207 
ödex
 : 8;

209 
uöt32_t
 
ƒód
;

210 
uöt64_t
 
c⁄ã¡_Àngth
;

213 
hâp_maj‹
;

214 
hâp_mö‹
;

215 
°©us_code
 : 16;

216 
mëhod
 : 8;

217 
hâp_î∫o
 : 7;

224 
upgøde
 : 1;

227 *
d©a
;

231 
	shâp_∑r£r_£âögs
 {

232 
hâp_cb
 
⁄_mesßge_begö
;

233 
hâp_d©a_cb
 
⁄_uæ
;

234 
hâp_d©a_cb
 
⁄_°©us
;

235 
hâp_d©a_cb
 
⁄_hódî_fõld
;

236 
hâp_d©a_cb
 
⁄_hódî_vÆue
;

237 
hâp_cb
 
⁄_hódîs_com∂ëe
;

238 
hâp_d©a_cb
 
⁄_body
;

239 
hâp_cb
 
⁄_mesßge_com∂ëe
;

243 
	ehâp_∑r£r_uæ_fõlds


244 { 
UF_SCHEMA
 = 0

245 , 
UF_HOST
 = 1

246 , 
UF_PORT
 = 2

247 , 
UF_PATH
 = 3

248 , 
UF_QUERY
 = 4

249 , 
UF_FRAGMENT
 = 5

250 , 
UF_USERINFO
 = 6

251 , 
UF_MAX
 = 7

262 
	shâp_∑r£r_uæ
 {

263 
uöt16_t
 
fõld_£t
;

264 
uöt16_t
 
p‹t
;

267 
uöt16_t
 
off
;

268 
uöt16_t
 
Àn
;

269 } 
fõld_d©a
[
UF_MAX
];

283 
hâp_∑r£r_vîsi⁄
();

285 
hâp_∑r£r_öô
(
hâp_∑r£r
 *
∑r£r
, 
hâp_∑r£r_ty≥
 
ty≥
);

288 
size_t
 
hâp_∑r£r_execuã
(
hâp_∑r£r
 *
∑r£r
,

289 c⁄° 
hâp_∑r£r_£âögs
 *
£âögs
,

290 c⁄° *
d©a
,

291 
size_t
 
Àn
);

300 
hâp_should_kìp_Æive
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

303 c⁄° *
hâp_mëhod_°r
(
hâp_mëhod
 
m
);

306 c⁄° *
hâp_î∫o_«me
(
hâp_î∫o
 
îr
);

309 c⁄° *
hâp_î∫o_des¸ùti⁄
(
hâp_î∫o
 
îr
);

312 
hâp_∑r£r_∑r£_uæ
(c⁄° *
buf
, 
size_t
 
buÊí
,

313 
is_c⁄√˘
,

314 
hâp_∑r£r_uæ
 *
u
);

317 
hâp_∑r£r_∑u£
(
hâp_∑r£r
 *
∑r£r
, 
∑u£d
);

320 
hâp_body_is_föÆ
(c⁄° 
hâp_∑r£r
 *
∑r£r
);

322 #ifde‡
__˝lu•lus


	@/home/kartik/nwe/test/samples/http-parser-master/test.c

21 
	~"hâp_∑r£r.h
"

22 
	~<°dlib.h
>

23 
	~<as£π.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<°d¨g.h
>

29 #i‡
deföed
(
__APPLE__
)

30 #unde‡
°æˇt


31 #unde‡
°æn˝y


32 #unde‡
°æ˝y


35 #unde‡
TRUE


36 
	#TRUE
 1

	)

37 #unde‡
FALSE


38 
	#FALSE
 0

	)

40 
	#MAX_HEADERS
 13

	)

41 
	#MAX_ELEMENT_SIZE
 2048

	)

43 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

45 
hâp_∑r£r
 *
	g∑r£r
;

47 
	smesßge
 {

48 c⁄° *
	m«me
;

49 c⁄° *
	møw
;

50 
hâp_∑r£r_ty≥
 
	mty≥
;

51 
hâp_mëhod
 
	mmëhod
;

52 
	m°©us_code
;

53 
	mª•⁄£_°©us
[
MAX_ELEMENT_SIZE
];

54 
	mªque°_∑th
[
MAX_ELEMENT_SIZE
];

55 
	mªque°_uæ
[
MAX_ELEMENT_SIZE
];

56 
	m‰agmít
[
MAX_ELEMENT_SIZE
];

57 
	mquîy_°rög
[
MAX_ELEMENT_SIZE
];

58 
	mbody
[
MAX_ELEMENT_SIZE
];

59 
size_t
 
	mbody_size
;

60 c⁄° *
	mho°
;

61 c⁄° *
	mu£röfo
;

62 
uöt16_t
 
	mp‹t
;

63 
	mnum_hódîs
;

64 íum { 
	mNONE
=0, 
	mFIELD
, 
	mVALUE
 } 
	mœ°_hódî_ñemít
;

65 
	mhódîs
 [
MAX_HEADERS
][2][
MAX_ELEMENT_SIZE
];

66 
	mshould_kìp_Æive
;

68 c⁄° *
	mupgøde
;

70 
	mhâp_maj‹
;

71 
	mhâp_mö‹
;

73 
	mmesßge_begö_cb_ˇŒed
;

74 
	mhódîs_com∂ëe_cb_ˇŒed
;

75 
	mmesßge_com∂ëe_cb_ˇŒed
;

76 
	mmesßge_com∂ëe_⁄_eof
;

77 
	mbody_is_föÆ
;

80 
	gcuºíéy_∑rsög_eof
;

82 
mesßge
 
	gmesßges
[5];

83 
	gnum_mesßges
;

84 
hâp_∑r£r_£âögs
 *
	gcuºít_∑u£_∑r£r
;

87 c⁄° 
mesßge
 
	gªque°s
[] =

88 
	#CURL_GET
 0

	)

89 { {.
«me
= "curl get"

90 ,.
	gty≥

HTTP_REQUEST


91 ,.
	gøw
= "GET /test HTTP/1.1\r\n"

96 ,.
	gshould_kìp_Æive

TRUE


97 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


98 ,.
	ghâp_maj‹
= 1

99 ,.
	ghâp_mö‹
= 1

100 ,.
	gmëhod

HTTP_GET


101 ,.
	gquîy_°rög
= ""

102 ,.
	g‰agmít
= ""

103 ,.
	gªque°_∑th
= "/test"

104 ,.
	gªque°_uæ
= "/test"

105 ,.
	gnum_hódîs
= 3

106 ,.
	ghódîs
=

111 ,.
	gbody
= ""

114 
	#FIREFOX_GET
 1

	)

115 , {.
	g«me
= "firefox get"

116 ,.
	gty≥

HTTP_REQUEST


117 ,.
	gøw
= "GET /favicon.ico HTTP/1.1\r\n"

127 ,.
	gshould_kìp_Æive

TRUE


128 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


129 ,.
	ghâp_maj‹
= 1

130 ,.
	ghâp_mö‹
= 1

131 ,.
	gmëhod

HTTP_GET


132 ,.
	gquîy_°rög
= ""

133 ,.
	g‰agmít
= ""

134 ,.
	gªque°_∑th
= "/favicon.ico"

135 ,.
	gªque°_uæ
= "/favicon.ico"

136 ,.
	gnum_hódîs
= 8

137 ,.
	ghódîs
=

147 ,.
	gbody
= ""

150 
	#DUMBFUCK
 2

	)

151 , {.
	g«me
= "dumbfuck"

152 ,.
	gty≥

HTTP_REQUEST


153 ,.
	gøw
= "GET /dumbfuck HTTP/1.1\r\n"

156 ,.
	gshould_kìp_Æive

TRUE


157 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


158 ,.
	ghâp_maj‹
= 1

159 ,.
	ghâp_mö‹
= 1

160 ,.
	gmëhod

HTTP_GET


161 ,.
	gquîy_°rög
= ""

162 ,.
	g‰agmít
= ""

163 ,.
	gªque°_∑th
= "/dumbfuck"

164 ,.
	gªque°_uæ
= "/dumbfuck"

165 ,.
	gnum_hódîs
= 1

166 ,.
	ghódîs
=

169 ,.
	gbody
= ""

172 
	#FRAGMENT_IN_URI
 3

	)

173 , {.
	g«me
= "fragment in url"

174 ,.
	gty≥

HTTP_REQUEST


175 ,.
	gøw
= "GET /forums/1/topics/2375?page=1#posts-17408 HTTP/1.1\r\n"

177 ,.
	gshould_kìp_Æive

TRUE


178 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


179 ,.
	ghâp_maj‹
= 1

180 ,.
	ghâp_mö‹
= 1

181 ,.
	gmëhod

HTTP_GET


182 ,.
	gquîy_°rög
= "page=1"

183 ,.
	g‰agmít
= "posts-17408"

184 ,.
	gªque°_∑th
= "/forums/1/topics/2375"

186 ,.
	gªque°_uæ
= "/forums/1/topics/2375?page=1#posts-17408"

187 ,.
	gnum_hódîs
= 0

188 ,.
	gbody
= ""

191 
	#GET_NO_HEADERS_NO_BODY
 4

	)

192 , {.
	g«me
= "getÇo headersÇo body"

193 ,.
	gty≥

HTTP_REQUEST


194 ,.
	gøw
= "GET /get_no_headers_no_body/world HTTP/1.1\r\n"

196 ,.
	gshould_kìp_Æive

TRUE


197 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


198 ,.
	ghâp_maj‹
= 1

199 ,.
	ghâp_mö‹
= 1

200 ,.
	gmëhod

HTTP_GET


201 ,.
	gquîy_°rög
= ""

202 ,.
	g‰agmít
= ""

203 ,.
	gªque°_∑th
= "/get_no_headers_no_body/world"

204 ,.
	gªque°_uæ
= "/get_no_headers_no_body/world"

205 ,.
	gnum_hódîs
= 0

206 ,.
	gbody
= ""

209 
	#GET_ONE_HEADER_NO_BODY
 5

	)

210 , {.
	g«me
= "get one headerÇo body"

211 ,.
	gty≥

HTTP_REQUEST


212 ,.
	gøw
= "GET /get_one_header_no_body HTTP/1.1\r\n"

215 ,.
	gshould_kìp_Æive

TRUE


216 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


217 ,.
	ghâp_maj‹
= 1

218 ,.
	ghâp_mö‹
= 1

219 ,.
	gmëhod

HTTP_GET


220 ,.
	gquîy_°rög
= ""

221 ,.
	g‰agmít
= ""

222 ,.
	gªque°_∑th
= "/get_one_header_no_body"

223 ,.
	gªque°_uæ
= "/get_one_header_no_body"

224 ,.
	gnum_hódîs
= 1

225 ,.
	ghódîs
=

228 ,.
	gbody
= ""

231 
	#GET_FUNKY_CONTENT_LENGTH
 6

	)

232 , {.
	g«me
= "get funky contentÜength body hello"

233 ,.
	gty≥

HTTP_REQUEST


234 ,.
	gøw
= "GET /get_funky_content_length_body_hello HTTP/1.0\r\n"

238 ,.
	gshould_kìp_Æive

FALSE


239 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


240 ,.
	ghâp_maj‹
= 1

241 ,.
	ghâp_mö‹
= 0

242 ,.
	gmëhod

HTTP_GET


243 ,.
	gquîy_°rög
= ""

244 ,.
	g‰agmít
= ""

245 ,.
	gªque°_∑th
= "/get_funky_content_length_body_hello"

246 ,.
	gªque°_uæ
= "/get_funky_content_length_body_hello"

247 ,.
	gnum_hódîs
= 1

248 ,.
	ghódîs
=

251 ,.
	gbody
= "HELLO"

254 
	#POST_IDENTITY_BODY_WORLD
 7

	)

255 , {.
	g«me
= "post identity body world"

256 ,.
	gty≥

HTTP_REQUEST


257 ,.
	gøw
= "POST /post_identity_body_world?q=search#hey HTTP/1.1\r\n"

263 ,.
	gshould_kìp_Æive

TRUE


264 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


265 ,.
	ghâp_maj‹
= 1

266 ,.
	ghâp_mö‹
= 1

267 ,.
	gmëhod

HTTP_POST


268 ,.
	gquîy_°rög
= "q=search"

269 ,.
	g‰agmít
= "hey"

270 ,.
	gªque°_∑th
= "/post_identity_body_world"

271 ,.
	gªque°_uæ
= "/post_identity_body_world?q=search#hey"

272 ,.
	gnum_hódîs
= 3

273 ,.
	ghódîs
=

278 ,.
	gbody
= "World"

281 
	#POST_CHUNKED_ALL_YOUR_BASE
 8

	)

282 , {.
	g«me
= "post - chunked body:áll your baseáre belongÅo us"

283 ,.
	gty≥

HTTP_REQUEST


284 ,.
	gøw
= "POST /post_chunked_all_your_base HTTP/1.1\r\n"

290 ,.
	gshould_kìp_Æive

TRUE


291 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


292 ,.
	ghâp_maj‹
= 1

293 ,.
	ghâp_mö‹
= 1

294 ,.
	gmëhod

HTTP_POST


295 ,.
	gquîy_°rög
= ""

296 ,.
	g‰agmít
= ""

297 ,.
	gªque°_∑th
= "/post_chunked_all_your_base"

298 ,.
	gªque°_uæ
= "/post_chunked_all_your_base"

299 ,.
	gnum_hódîs
= 1

300 ,.
	ghódîs
=

303 ,.
	gbody
= "all your baseáre belongÅo us"

306 
	#TWO_CHUNKS_MULT_ZERO_END
 9

	)

307 , {.
	g«me
= "two chunks ;Åriple zeroÉnding"

308 ,.
	gty≥

HTTP_REQUEST


309 ,.
	gøw
= "POST /two_chunks_mult_zero_end HTTP/1.1\r\n"

316 ,.
	gshould_kìp_Æive

TRUE


317 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


318 ,.
	ghâp_maj‹
= 1

319 ,.
	ghâp_mö‹
= 1

320 ,.
	gmëhod

HTTP_POST


321 ,.
	gquîy_°rög
= ""

322 ,.
	g‰agmít
= ""

323 ,.
	gªque°_∑th
= "/two_chunks_mult_zero_end"

324 ,.
	gªque°_uæ
= "/two_chunks_mult_zero_end"

325 ,.
	gnum_hódîs
= 1

326 ,.
	ghódîs
=

329 ,.
	gbody
= "hello world"

332 
	#CHUNKED_W_TRAILING_HEADERS
 10

	)

333 , {.
	g«me
= "chunked withÅrailing headers. blech."

334 ,.
	gty≥

HTTP_REQUEST


335 ,.
	gøw
= "POST /chunked_w_trailing_headers HTTP/1.1\r\n"

344 ,.
	gshould_kìp_Æive

TRUE


345 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


346 ,.
	ghâp_maj‹
= 1

347 ,.
	ghâp_mö‹
= 1

348 ,.
	gmëhod

HTTP_POST


349 ,.
	gquîy_°rög
= ""

350 ,.
	g‰agmít
= ""

351 ,.
	gªque°_∑th
= "/chunked_w_trailing_headers"

352 ,.
	gªque°_uæ
= "/chunked_w_trailing_headers"

353 ,.
	gnum_hódîs
= 3

354 ,.
	ghódîs
=

359 ,.
	gbody
= "hello world"

362 
	#CHUNKED_W_BULLSHIT_AFTER_LENGTH
 11

	)

363 , {.
	g«me
= "with bullshitáfterÅheÜength"

364 ,.
	gty≥

HTTP_REQUEST


365 ,.
	gøw
= "POST /chunked_w_bullshit_after_length HTTP/1.1\r\n"

372 ,.
	gshould_kìp_Æive

TRUE


373 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


374 ,.
	ghâp_maj‹
= 1

375 ,.
	ghâp_mö‹
= 1

376 ,.
	gmëhod

HTTP_POST


377 ,.
	gquîy_°rög
= ""

378 ,.
	g‰agmít
= ""

379 ,.
	gªque°_∑th
= "/chunked_w_bullshit_after_length"

380 ,.
	gªque°_uæ
= "/chunked_w_bullshit_after_length"

381 ,.
	gnum_hódîs
= 1

382 ,.
	ghódîs
=

385 ,.
	gbody
= "hello world"

388 
	#WITH_QUOTES
 12

	)

389 , {.
	g«me
= "with quotes"

390 ,.
	gty≥

HTTP_REQUEST


391 ,.
	gøw
= "GET /with_\"stupid\"_quotes?foo=\"bar\" HTTP/1.1\r\n\r\n"

392 ,.
	gshould_kìp_Æive

TRUE


393 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


394 ,.
	ghâp_maj‹
= 1

395 ,.
	ghâp_mö‹
= 1

396 ,.
	gmëhod

HTTP_GET


397 ,.
	gquîy_°rög
= "foo=\"bar\""

398 ,.
	g‰agmít
= ""

399 ,.
	gªque°_∑th
= "/with_\"stupid\"_quotes"

400 ,.
	gªque°_uæ
= "/with_\"stupid\"_quotes?foo=\"bar\""

401 ,.
	gnum_hódîs
= 0

402 ,.
	ghódîs
= { }

403 ,.
	gbody
= ""

406 
	#APACHEBENCH_GET
 13

	)

412 , {.
	g«me
 = "apachebench get"

413 ,.
	gty≥

HTTP_REQUEST


414 ,.
	gøw
= "GET /test HTTP/1.0\r\n"

418 ,.
	gshould_kìp_Æive

FALSE


419 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


420 ,.
	ghâp_maj‹
= 1

421 ,.
	ghâp_mö‹
= 0

422 ,.
	gmëhod

HTTP_GET


423 ,.
	gquîy_°rög
= ""

424 ,.
	g‰agmít
= ""

425 ,.
	gªque°_∑th
= "/test"

426 ,.
	gªque°_uæ
= "/test"

427 ,.
	gnum_hódîs
= 3

428 ,.
	ghódîs
= { { "Host", "0.0.0.0:5000" }

432 ,.
	gbody
= ""

435 
	#QUERY_URL_WITH_QUESTION_MARK_GET
 14

	)

438 , {.
	g«me
 = "query url with question mark"

439 ,.
	gty≥

HTTP_REQUEST


440 ,.
	gøw
= "GET /test.cgi?foo=bar?baz HTTP/1.1\r\n\r\n"

441 ,.
	gshould_kìp_Æive

TRUE


442 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


443 ,.
	ghâp_maj‹
= 1

444 ,.
	ghâp_mö‹
= 1

445 ,.
	gmëhod

HTTP_GET


446 ,.
	gquîy_°rög
= "foo=bar?baz"

447 ,.
	g‰agmít
= ""

448 ,.
	gªque°_∑th
= "/test.cgi"

449 ,.
	gªque°_uæ
= "/test.cgi?foo=bar?baz"

450 ,.
	gnum_hódîs
= 0

451 ,.
	ghódîs
= {}

452 ,.
	gbody
= ""

455 
	#PREFIX_NEWLINE_GET
 15

	)

459 , {.
	g«me
 = "newlineÖrefix get"

460 ,.
	gty≥

HTTP_REQUEST


461 ,.
	gøw
= "\r\nGET /test HTTP/1.1\r\n\r\n"

462 ,.
	gshould_kìp_Æive

TRUE


463 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


464 ,.
	ghâp_maj‹
= 1

465 ,.
	ghâp_mö‹
= 1

466 ,.
	gmëhod

HTTP_GET


467 ,.
	gquîy_°rög
= ""

468 ,.
	g‰agmít
= ""

469 ,.
	gªque°_∑th
= "/test"

470 ,.
	gªque°_uæ
= "/test"

471 ,.
	gnum_hódîs
= 0

472 ,.
	ghódîs
= { }

473 ,.
	gbody
= ""

476 
	#UPGRADE_REQUEST
 16

	)

477 , {.
	g«me
 = "upgradeÑequest"

478 ,.
	gty≥

HTTP_REQUEST


479 ,.
	gøw
= "GET /demo HTTP/1.1\r\n"

489 ,.
	gshould_kìp_Æive

TRUE


490 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


491 ,.
	ghâp_maj‹
= 1

492 ,.
	ghâp_mö‹
= 1

493 ,.
	gmëhod

HTTP_GET


494 ,.
	gquîy_°rög
= ""

495 ,.
	g‰agmít
= ""

496 ,.
	gªque°_∑th
= "/demo"

497 ,.
	gªque°_uæ
= "/demo"

498 ,.
	gnum_hódîs
= 7

499 ,.
	gupgøde
="Hot diggity dogg"

500 ,.
	ghódîs
= { { "Host", "example.com" }

508 ,.
	gbody
= ""

511 
	#CONNECT_REQUEST
 17

	)

512 , {.
	g«me
 = "connectÑequest"

513 ,.
	gty≥

HTTP_REQUEST


514 ,.
	gøw
= "CONNECT 0-home0.netscape.com:443 HTTP/1.0\r\n"

520 ,.
	gshould_kìp_Æive

FALSE


521 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


522 ,.
	ghâp_maj‹
= 1

523 ,.
	ghâp_mö‹
= 0

524 ,.
	gmëhod

HTTP_CONNECT


525 ,.
	gquîy_°rög
= ""

526 ,.
	g‰agmít
= ""

527 ,.
	gªque°_∑th
= ""

528 ,.
	gªque°_uæ
= "0-home0.netscape.com:443"

529 ,.
	gnum_hódîs
= 2

530 ,.
	gupgøde
="some data\r\nand yetÉven more data"

531 ,.
	ghódîs
= { { "User-agent", "Mozilla/1.1N" }

534 ,.
	gbody
= ""

537 
	#REPORT_REQ
 18

	)

538 , {.
	g«me
= "reportÑequest"

539 ,.
	gty≥

HTTP_REQUEST


540 ,.
	gøw
= "REPORT /test HTTP/1.1\r\n"

542 ,.
	gshould_kìp_Æive

TRUE


543 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


544 ,.
	ghâp_maj‹
= 1

545 ,.
	ghâp_mö‹
= 1

546 ,.
	gmëhod

HTTP_REPORT


547 ,.
	gquîy_°rög
= ""

548 ,.
	g‰agmít
= ""

549 ,.
	gªque°_∑th
= "/test"

550 ,.
	gªque°_uæ
= "/test"

551 ,.
	gnum_hódîs
= 0

552 ,.
	ghódîs
= {}

553 ,.
	gbody
= ""

556 
	#NO_HTTP_VERSION
 19

	)

557 , {.
	g«me
= "request withÇo http version"

558 ,.
	gty≥

HTTP_REQUEST


559 ,.
	gøw
= "GET /\r\n"

561 ,.
	gshould_kìp_Æive

FALSE


562 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


563 ,.
	ghâp_maj‹
= 0

564 ,.
	ghâp_mö‹
= 9

565 ,.
	gmëhod

HTTP_GET


566 ,.
	gquîy_°rög
= ""

567 ,.
	g‰agmít
= ""

568 ,.
	gªque°_∑th
= "/"

569 ,.
	gªque°_uæ
= "/"

570 ,.
	gnum_hódîs
= 0

571 ,.
	ghódîs
= {}

572 ,.
	gbody
= ""

575 
	#MSEARCH_REQ
 20

	)

576 , {.
	g«me
= "m-searchÑequest"

577 ,.
	gty≥

HTTP_REQUEST


578 ,.
	gøw
= "M-SEARCH * HTTP/1.1\r\n"

583 ,.
	gshould_kìp_Æive

TRUE


584 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


585 ,.
	ghâp_maj‹
= 1

586 ,.
	ghâp_mö‹
= 1

587 ,.
	gmëhod

HTTP_MSEARCH


588 ,.
	gquîy_°rög
= ""

589 ,.
	g‰agmít
= ""

590 ,.
	gªque°_∑th
= "*"

591 ,.
	gªque°_uæ
= "*"

592 ,.
	gnum_hódîs
= 3

593 ,.
	ghódîs
= { { "HOST", "239.255.255.250:1900" }

597 ,.
	gbody
= ""

600 
	#LINE_FOLDING_IN_HEADER
 21

	)

601 , {.
	g«me
= "line folding in header value"

602 ,.
	gty≥

HTTP_REQUEST


603 ,.
	gøw
= "GET / HTTP/1.1\r\n"

618 ,.
	gshould_kìp_Æive

FALSE


619 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


620 ,.
	ghâp_maj‹
= 1

621 ,.
	ghâp_mö‹
= 1

622 ,.
	gmëhod

HTTP_GET


623 ,.
	gquîy_°rög
= ""

624 ,.
	g‰agmít
= ""

625 ,.
	gªque°_∑th
= "/"

626 ,.
	gªque°_uæ
= "/"

627 ,.
	gnum_hódîs
= 5

628 ,.
	ghódîs
= { { "Line1", "abc\tdef ghi\t\tjkl mno \t \tqrs" }

634 ,.
	gbody
= ""

638 
	#QUERY_TERMINATED_HOST
 22

	)

639 , {.
	g«me
= "hostÅerminated byá query string"

640 ,.
	gty≥

HTTP_REQUEST


641 ,.
	gøw
= "GET http://hypnotoad.org?hail=all HTTP/1.1\r\n"

643 ,.
	gshould_kìp_Æive

TRUE


644 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


645 ,.
	ghâp_maj‹
= 1

646 ,.
	ghâp_mö‹
= 1

647 ,.
	gmëhod

HTTP_GET


648 ,.
	gquîy_°rög
= "hail=all"

649 ,.
	g‰agmít
= ""

650 ,.
	gªque°_∑th
= ""

651 ,.
	gªque°_uæ
= "http://hypnotoad.org?hail=all"

652 ,.
	gho°
= "hypnotoad.org"

653 ,.
	gnum_hódîs
= 0

654 ,.
	ghódîs
= { }

655 ,.
	gbody
= ""

658 
	#QUERY_TERMINATED_HOSTPORT
 23

	)

659 , {.
	g«me
= "host:portÅerminated byá query string"

660 ,.
	gty≥

HTTP_REQUEST


661 ,.
	gøw
= "GET http://hypnotoad.org:1234?hail=all HTTP/1.1\r\n"

663 ,.
	gshould_kìp_Æive

TRUE


664 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


665 ,.
	ghâp_maj‹
= 1

666 ,.
	ghâp_mö‹
= 1

667 ,.
	gmëhod

HTTP_GET


668 ,.
	gquîy_°rög
= "hail=all"

669 ,.
	g‰agmít
= ""

670 ,.
	gªque°_∑th
= ""

671 ,.
	gªque°_uæ
= "http://hypnotoad.org:1234?hail=all"

672 ,.
	gho°
= "hypnotoad.org"

673 ,.
	gp‹t
= 1234

674 ,.
	gnum_hódîs
= 0

675 ,.
	ghódîs
= { }

676 ,.
	gbody
= ""

679 
	#SPACE_TERMINATED_HOSTPORT
 24

	)

680 , {.
	g«me
= "host:portÅerminated byá space"

681 ,.
	gty≥

HTTP_REQUEST


682 ,.
	gøw
= "GET http://hypnotoad.org:1234 HTTP/1.1\r\n"

684 ,.
	gshould_kìp_Æive

TRUE


685 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


686 ,.
	ghâp_maj‹
= 1

687 ,.
	ghâp_mö‹
= 1

688 ,.
	gmëhod

HTTP_GET


689 ,.
	gquîy_°rög
= ""

690 ,.
	g‰agmít
= ""

691 ,.
	gªque°_∑th
= ""

692 ,.
	gªque°_uæ
= "http://hypnotoad.org:1234"

693 ,.
	gho°
= "hypnotoad.org"

694 ,.
	gp‹t
= 1234

695 ,.
	gnum_hódîs
= 0

696 ,.
	ghódîs
= { }

697 ,.
	gbody
= ""

700 
	#PATCH_REQ
 25

	)

701 , {.
	g«me
 = "PATCHÑequest"

702 ,.
	gty≥

HTTP_REQUEST


703 ,.
	gøw
= "PATCH /file.txt HTTP/1.1\r\n"

710 ,.
	gshould_kìp_Æive

TRUE


711 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


712 ,.
	ghâp_maj‹
= 1

713 ,.
	ghâp_mö‹
= 1

714 ,.
	gmëhod

HTTP_PATCH


715 ,.
	gquîy_°rög
= ""

716 ,.
	g‰agmít
= ""

717 ,.
	gªque°_∑th
= "/file.txt"

718 ,.
	gªque°_uæ
= "/file.txt"

719 ,.
	gnum_hódîs
= 4

720 ,.
	ghódîs
= { { "Host", "www.example.com" }

725 ,.
	gbody
= "cccccccccc"

728 
	#CONNECT_CAPS_REQUEST
 26

	)

729 , {.
	g«me
 = "connect capsÑequest"

730 ,.
	gty≥

HTTP_REQUEST


731 ,.
	gøw
= "CONNECT HOME0.NETSCAPE.COM:443 HTTP/1.0\r\n"

735 ,.
	gshould_kìp_Æive

FALSE


736 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


737 ,.
	ghâp_maj‹
= 1

738 ,.
	ghâp_mö‹
= 0

739 ,.
	gmëhod

HTTP_CONNECT


740 ,.
	gquîy_°rög
= ""

741 ,.
	g‰agmít
= ""

742 ,.
	gªque°_∑th
= ""

743 ,.
	gªque°_uæ
= "HOME0.NETSCAPE.COM:443"

744 ,.
	gnum_hódîs
= 2

745 ,.
	gupgøde
=""

746 ,.
	ghódîs
= { { "User-agent", "Mozilla/1.1N" }

749 ,.
	gbody
= ""

752 #i‡!
HTTP_PARSER_STRICT


753 
	#UTF8_PATH_REQ
 27

	)

754 , {.
	g«me
= "utf-8ÖathÑequest"

755 ,.
	gty≥

HTTP_REQUEST


756 ,.
	gøw
= "GET /Œ¥¬∂/Œ¥t/pope?q=1#narf HTTP/1.1\r\n"

759 ,.
	gshould_kìp_Æive

TRUE


760 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


761 ,.
	ghâp_maj‹
= 1

762 ,.
	ghâp_mö‹
= 1

763 ,.
	gmëhod

HTTP_GET


764 ,.
	gquîy_°rög
= "q=1"

765 ,.
	g‰agmít
= "narf"

766 ,.
	gªque°_∑th
= "/Œ¥¬∂/Œ¥t/pope"

767 ,.
	gªque°_uæ
= "/Œ¥¬∂/Œ¥t/pope?q=1#narf"

768 ,.
	gnum_hódîs
= 1

769 ,.
	ghódîs
= { {"Host", "github.com" }

771 ,.
	gbody
= ""

774 
	#HOSTNAME_UNDERSCORE
 28

	)

775 , {.
	g«me
 = "hostname underscore"

776 ,.
	gty≥

HTTP_REQUEST


777 ,.
	gøw
= "CONNECT home_0.netscape.com:443 HTTP/1.0\r\n"

781 ,.
	gshould_kìp_Æive

FALSE


782 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


783 ,.
	ghâp_maj‹
= 1

784 ,.
	ghâp_mö‹
= 0

785 ,.
	gmëhod

HTTP_CONNECT


786 ,.
	gquîy_°rög
= ""

787 ,.
	g‰agmít
= ""

788 ,.
	gªque°_∑th
= ""

789 ,.
	gªque°_uæ
= "home_0.netscape.com:443"

790 ,.
	gnum_hódîs
= 2

791 ,.
	gupgøde
=""

792 ,.
	ghódîs
= { { "User-agent", "Mozilla/1.1N" }

795 ,.
	gbody
= ""

800 
	#EAT_TRAILING_CRLF_NO_CONNECTION_CLOSE
 29

	)

801 , {.
	g«me
 = "eat CRLF betweenÑequests,Ço \"Connection: close\" header"

802 ,.
	gøw
= "POST / HTTP/1.1\r\n"

808 ,.
	gshould_kìp_Æive

TRUE


809 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


810 ,.
	ghâp_maj‹
= 1

811 ,.
	ghâp_mö‹
= 1

812 ,.
	gmëhod

HTTP_POST


813 ,.
	gquîy_°rög
= ""

814 ,.
	g‰agmít
= ""

815 ,.
	gªque°_∑th
= "/"

816 ,.
	gªque°_uæ
= "/"

817 ,.
	gnum_hódîs
= 3

818 ,.
	gupgøde
= 0

819 ,.
	ghódîs
= { { "Host", "www.example.com" }

823 ,.
	gbody
= "q=42"

827 
	#EAT_TRAILING_CRLF_WITH_CONNECTION_CLOSE
 30

	)

828 , {.
	g«me
 = "eat CRLF betweenÑequestsÉven if \"Connection: close\" is set"

829 ,.
	gøw
= "POST / HTTP/1.1\r\n"

836 ,.
	gshould_kìp_Æive

FALSE


837 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


838 ,.
	ghâp_maj‹
= 1

839 ,.
	ghâp_mö‹
= 1

840 ,.
	gmëhod

HTTP_POST


841 ,.
	gquîy_°rög
= ""

842 ,.
	g‰agmít
= ""

843 ,.
	gªque°_∑th
= "/"

844 ,.
	gªque°_uæ
= "/"

845 ,.
	gnum_hódîs
= 4

846 ,.
	gupgøde
= 0

847 ,.
	ghódîs
= { { "Host", "www.example.com" }

852 ,.
	gbody
= "q=42"

855 
	#PURGE_REQ
 31

	)

856 , {.
	g«me
 = "PURGEÑequest"

857 ,.
	gty≥

HTTP_REQUEST


858 ,.
	gøw
= "PURGE /file.txt HTTP/1.1\r\n"

861 ,.
	gshould_kìp_Æive

TRUE


862 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


863 ,.
	ghâp_maj‹
= 1

864 ,.
	ghâp_mö‹
= 1

865 ,.
	gmëhod

HTTP_PURGE


866 ,.
	gquîy_°rög
= ""

867 ,.
	g‰agmít
= ""

868 ,.
	gªque°_∑th
= "/file.txt"

869 ,.
	gªque°_uæ
= "/file.txt"

870 ,.
	gnum_hódîs
= 1

871 ,.
	ghódîs
= { { "Host", "www.example.com" } }

872 ,.
	gbody
= ""

875 
	#SEARCH_REQ
 32

	)

876 , {.
	g«me
 = "SEARCHÑequest"

877 ,.
	gty≥

HTTP_REQUEST


878 ,.
	gøw
= "SEARCH / HTTP/1.1\r\n"

881 ,.
	gshould_kìp_Æive

TRUE


882 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


883 ,.
	ghâp_maj‹
= 1

884 ,.
	ghâp_mö‹
= 1

885 ,.
	gmëhod

HTTP_SEARCH


886 ,.
	gquîy_°rög
= ""

887 ,.
	g‰agmít
= ""

888 ,.
	gªque°_∑th
= "/"

889 ,.
	gªque°_uæ
= "/"

890 ,.
	gnum_hódîs
= 1

891 ,.
	ghódîs
= { { "Host", "www.example.com" } }

892 ,.
	gbody
= ""

895 
	#PROXY_WITH_BASIC_AUTH
 33

	)

896 , {.
	g«me
= "host:portánd basic_auth"

897 ,.
	gty≥

HTTP_REQUEST


898 ,.
	gøw
= "GET http://a%12:b!&*$@hypnotoad.org:1234/toto HTTP/1.1\r\n"

900 ,.
	gshould_kìp_Æive

TRUE


901 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


902 ,.
	ghâp_maj‹
= 1

903 ,.
	ghâp_mö‹
= 1

904 ,.
	gmëhod

HTTP_GET


905 ,.
	g‰agmít
= ""

906 ,.
	gªque°_∑th
= "/toto"

907 ,.
	gªque°_uæ
= "http://a%12:b!&*$@hypnotoad.org:1234/toto"

908 ,.
	gho°
= "hypnotoad.org"

909 ,.
	gu£röfo
= "a%12:b!&*$"

910 ,.
	gp‹t
= 1234

911 ,.
	gnum_hódîs
= 0

912 ,.
	ghódîs
= { }

913 ,.
	gbody
= ""

916 
	#LINE_FOLDING_IN_HEADER_WITH_LF
 34

	)

917 , {.
	g«me
= "line folding in header value"

918 ,.
	gty≥

HTTP_REQUEST


919 ,.
	gøw
= "GET / HTTP/1.1\n"

934 ,.
	gshould_kìp_Æive

FALSE


935 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


936 ,.
	ghâp_maj‹
= 1

937 ,.
	ghâp_mö‹
= 1

938 ,.
	gmëhod

HTTP_GET


939 ,.
	gquîy_°rög
= ""

940 ,.
	g‰agmít
= ""

941 ,.
	gªque°_∑th
= "/"

942 ,.
	gªque°_uæ
= "/"

943 ,.
	gnum_hódîs
= 5

944 ,.
	ghódîs
= { { "Line1", "abc\tdef ghi\t\tjkl mno \t \tqrs" }

950 ,.
	gbody
= ""

954 , {.
	g«me

NULL
 }

958 c⁄° 
mesßge
 
	gª•⁄£s
[] =

959 
	#GOOGLE_301
 0

	)

960 { {.
«me
= "google 301"

961 ,.
	gty≥

HTTP_RESPONSE


962 ,.
	gøw
= "HTTP/1.1 301 Moved Permanently\r\n"

978 ,.
	gshould_kìp_Æive

TRUE


979 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


980 ,.
	ghâp_maj‹
= 1

981 ,.
	ghâp_mö‹
= 1

982 ,.
	g°©us_code
= 301

983 ,.
	gª•⁄£_°©us
= "Moved Permanently"

984 ,.
	gnum_hódîs
= 8

985 ,.
	ghódîs
=

995 ,.
	gbody
= "<HTML><HEAD><meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\n"

1003 
	#NO_CONTENT_LENGTH_RESPONSE
 1

	)

1009 , {.
	g«me
= "no content-lengthÑesponse"

1010 ,.
	gty≥

HTTP_RESPONSE


1011 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1027 ,.
	gshould_kìp_Æive

FALSE


1028 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1029 ,.
	ghâp_maj‹
= 1

1030 ,.
	ghâp_mö‹
= 1

1031 ,.
	g°©us_code
= 200

1032 ,.
	gª•⁄£_°©us
= "OK"

1033 ,.
	gnum_hódîs
= 5

1034 ,.
	ghódîs
=

1041 ,.
	gbody
= "<?xml version=\"1.0\"Éncoding=\"UTF-8\"?>\n"

1052 
	#NO_HEADERS_NO_BODY_404
 2

	)

1053 , {.
	g«me
= "404Ço headersÇo body"

1054 ,.
	gty≥

HTTP_RESPONSE


1055 ,.
	gøw
= "HTTP/1.1 404 Not Found\r\n\r\n"

1056 ,.
	gshould_kìp_Æive

FALSE


1057 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1058 ,.
	ghâp_maj‹
= 1

1059 ,.
	ghâp_mö‹
= 1

1060 ,.
	g°©us_code
= 404

1061 ,.
	gª•⁄£_°©us
= "Not Found"

1062 ,.
	gnum_hódîs
= 0

1063 ,.
	ghódîs
= {}

1064 ,.
	gbody_size
= 0

1065 ,.
	gbody
= ""

1068 
	#NO_REASON_PHRASE
 3

	)

1069 , {.
	g«me
= "301ÇoÑesponseÖhrase"

1070 ,.
	gty≥

HTTP_RESPONSE


1071 ,.
	gøw
= "HTTP/1.1 301\r\n\r\n"

1072 ,.
	gshould_kìp_Æive
 = 
FALSE


1073 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1074 ,.
	ghâp_maj‹
= 1

1075 ,.
	ghâp_mö‹
= 1

1076 ,.
	g°©us_code
= 301

1077 ,.
	gª•⁄£_°©us
= ""

1078 ,.
	gnum_hódîs
= 0

1079 ,.
	ghódîs
= {}

1080 ,.
	gbody
= ""

1083 
	#TRAILING_SPACE_ON_CHUNKED_BODY
 4

	)

1084 , {.
	g«me
="200Årailing space on chunked body"

1085 ,.
	gty≥

HTTP_RESPONSE


1086 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1098 ,.
	gshould_kìp_Æive

TRUE


1099 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1100 ,.
	ghâp_maj‹
= 1

1101 ,.
	ghâp_mö‹
= 1

1102 ,.
	g°©us_code
= 200

1103 ,.
	gª•⁄£_°©us
= "OK"

1104 ,.
	gnum_hódîs
= 2

1105 ,.
	ghódîs
=

1109 ,.
	gbody_size
 = 37+28

1110 ,.
	gbody
 =

1116 
	#NO_CARRIAGE_RET
 5

	)

1117 , {.
	g«me
="no carriageÑet"

1118 ,.
	gty≥

HTTP_RESPONSE


1119 ,.
	gøw
= "HTTP/1.1 200 OK\n"

1124 ,.
	gshould_kìp_Æive

FALSE


1125 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1126 ,.
	ghâp_maj‹
= 1

1127 ,.
	ghâp_mö‹
= 1

1128 ,.
	g°©us_code
= 200

1129 ,.
	gª•⁄£_°©us
= "OK"

1130 ,.
	gnum_hódîs
= 2

1131 ,.
	ghódîs
=

1135 ,.
	gbody
= "these headersáre from http://news.ycombinator.com/"

1138 
	#PROXY_CONNECTION
 6

	)

1139 , {.
	g«me
="proxy connection"

1140 ,.
	gty≥

HTTP_RESPONSE


1141 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1148 ,.
	gshould_kìp_Æive

FALSE


1149 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1150 ,.
	ghâp_maj‹
= 1

1151 ,.
	ghâp_mö‹
= 1

1152 ,.
	g°©us_code
= 200

1153 ,.
	gª•⁄£_°©us
= "OK"

1154 ,.
	gnum_hódîs
= 4

1155 ,.
	ghódîs
=

1161 ,.
	gbody
= "hello world"

1164 
	#UNDERSTORE_HEADER_KEY
 7

	)

1167 , {.
	g«me
="underscore header key"

1168 ,.
	gty≥

HTTP_RESPONSE


1169 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1174 ,.
	gshould_kìp_Æive

TRUE


1175 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1176 ,.
	ghâp_maj‹
= 1

1177 ,.
	ghâp_mö‹
= 1

1178 ,.
	g°©us_code
= 200

1179 ,.
	gª•⁄£_°©us
= "OK"

1180 ,.
	gnum_hódîs
= 4

1181 ,.
	ghódîs
=

1187 ,.
	gbody
= ""

1190 
	#BONJOUR_MADAME_FR
 8

	)

1194 , {.
	g«me
= "bonjourmadame.fr"

1195 ,.
	gty≥

HTTP_RESPONSE


1196 ,.
	gøw
= "HTTP/1.0 301 Moved Permanently\r\n"

1207 ,.
	gshould_kìp_Æive

TRUE


1208 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1209 ,.
	ghâp_maj‹
= 1

1210 ,.
	ghâp_mö‹
= 0

1211 ,.
	g°©us_code
= 301

1212 ,.
	gª•⁄£_°©us
= "Moved Permanently"

1213 ,.
	gnum_hódîs
= 9

1214 ,.
	ghódîs
=

1225 ,.
	gbody
= ""

1228 
	#RES_FIELD_UNDERSCORE
 9

	)

1230 , {.
	g«me
= "field underscore"

1231 ,.
	gty≥

HTTP_RESPONSE


1232 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1246 ,.
	gshould_kìp_Æive

FALSE


1247 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1248 ,.
	ghâp_maj‹
= 1

1249 ,.
	ghâp_mö‹
= 1

1250 ,.
	g°©us_code
= 200

1251 ,.
	gª•⁄£_°©us
= "OK"

1252 ,.
	gnum_hódîs
= 11

1253 ,.
	ghódîs
=

1266 ,.
	gbody
= ""

1269 
	#NON_ASCII_IN_STATUS_LINE
 10

	)

1271 , {.
	g«me
= "non-ASCII in statusÜine"

1272 ,.
	gty≥

HTTP_RESPONSE


1273 ,.
	gøw
= "HTTP/1.1 500 Ori√´ntatieprobleem\r\n"

1278 ,.
	gshould_kìp_Æive

FALSE


1279 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1280 ,.
	ghâp_maj‹
= 1

1281 ,.
	ghâp_mö‹
= 1

1282 ,.
	g°©us_code
= 500

1283 ,.
	gª•⁄£_°©us
= "Ori√´ntatieprobleem"

1284 ,.
	gnum_hódîs
= 3

1285 ,.
	ghódîs
=

1290 ,.
	gbody
= ""

1293 
	#HTTP_VERSION_0_9
 11

	)

1295 , {.
	g«me
= "http version 0.9"

1296 ,.
	gty≥

HTTP_RESPONSE


1297 ,.
	gøw
= "HTTP/0.9 200 OK\r\n"

1299 ,.
	gshould_kìp_Æive

FALSE


1300 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1301 ,.
	ghâp_maj‹
= 0

1302 ,.
	ghâp_mö‹
= 9

1303 ,.
	g°©us_code
= 200

1304 ,.
	gª•⁄£_°©us
= "OK"

1305 ,.
	gnum_hódîs
= 0

1306 ,.
	ghódîs
=

1308 ,.
	gbody
= ""

1311 
	#NO_CONTENT_LENGTH_NO_TRANSFER_ENCODING_RESPONSE
 12

	)

1316 , {.
	g«me
= "neither content-lengthÇorÅransfer-encodingÑesponse"

1317 ,.
	gty≥

HTTP_RESPONSE


1318 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1322 ,.
	gshould_kìp_Æive

FALSE


1323 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1324 ,.
	ghâp_maj‹
= 1

1325 ,.
	ghâp_mö‹
= 1

1326 ,.
	g°©us_code
= 200

1327 ,.
	gª•⁄£_°©us
= "OK"

1328 ,.
	gnum_hódîs
= 1

1329 ,.
	ghódîs
=

1332 ,.
	gbody
= "hello world"

1335 
	#NO_BODY_HTTP10_KA_200
 13

	)

1336 , {.
	g«me
= "HTTP/1.0 with keep-aliveánd EOF-terminated 200 status"

1337 ,.
	gty≥

HTTP_RESPONSE


1338 ,.
	gøw
= "HTTP/1.0 200 OK\r\n"

1341 ,.
	gshould_kìp_Æive

FALSE


1342 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1343 ,.
	ghâp_maj‹
= 1

1344 ,.
	ghâp_mö‹
= 0

1345 ,.
	g°©us_code
= 200

1346 ,.
	gª•⁄£_°©us
= "OK"

1347 ,.
	gnum_hódîs
= 1

1348 ,.
	ghódîs
=

1351 ,.
	gbody_size
= 0

1352 ,.
	gbody
= ""

1355 
	#NO_BODY_HTTP10_KA_204
 14

	)

1356 , {.
	g«me
= "HTTP/1.0 with keep-aliveándá 204 status"

1357 ,.
	gty≥

HTTP_RESPONSE


1358 ,.
	gøw
= "HTTP/1.0 204 No content\r\n"

1361 ,.
	gshould_kìp_Æive

TRUE


1362 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1363 ,.
	ghâp_maj‹
= 1

1364 ,.
	ghâp_mö‹
= 0

1365 ,.
	g°©us_code
= 204

1366 ,.
	gª•⁄£_°©us
= "No content"

1367 ,.
	gnum_hódîs
= 1

1368 ,.
	ghódîs
=

1371 ,.
	gbody_size
= 0

1372 ,.
	gbody
= ""

1375 
	#NO_BODY_HTTP11_KA_200
 15

	)

1376 , {.
	g«me
= "HTTP/1.1 withán EOF-terminated 200 status"

1377 ,.
	gty≥

HTTP_RESPONSE


1378 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1380 ,.
	gshould_kìp_Æive

FALSE


1381 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1382 ,.
	ghâp_maj‹
= 1

1383 ,.
	ghâp_mö‹
= 1

1384 ,.
	g°©us_code
= 200

1385 ,.
	gª•⁄£_°©us
= "OK"

1386 ,.
	gnum_hódîs
= 0

1387 ,.
	ghódîs
={}

1388 ,.
	gbody_size
= 0

1389 ,.
	gbody
= ""

1392 
	#NO_BODY_HTTP11_KA_204
 16

	)

1393 , {.
	g«me
= "HTTP/1.1 withá 204 status"

1394 ,.
	gty≥

HTTP_RESPONSE


1395 ,.
	gøw
= "HTTP/1.1 204 No content\r\n"

1397 ,.
	gshould_kìp_Æive

TRUE


1398 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1399 ,.
	ghâp_maj‹
= 1

1400 ,.
	ghâp_mö‹
= 1

1401 ,.
	g°©us_code
= 204

1402 ,.
	gª•⁄£_°©us
= "No content"

1403 ,.
	gnum_hódîs
= 0

1404 ,.
	ghódîs
={}

1405 ,.
	gbody_size
= 0

1406 ,.
	gbody
= ""

1409 
	#NO_BODY_HTTP11_NOKA_204
 17

	)

1410 , {.
	g«me
= "HTTP/1.1 withá 204 statusánd keep-alive disabled"

1411 ,.
	gty≥

HTTP_RESPONSE


1412 ,.
	gøw
= "HTTP/1.1 204 No content\r\n"

1415 ,.
	gshould_kìp_Æive

FALSE


1416 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1417 ,.
	ghâp_maj‹
= 1

1418 ,.
	ghâp_mö‹
= 1

1419 ,.
	g°©us_code
= 204

1420 ,.
	gª•⁄£_°©us
= "No content"

1421 ,.
	gnum_hódîs
= 1

1422 ,.
	ghódîs
=

1425 ,.
	gbody_size
= 0

1426 ,.
	gbody
= ""

1429 
	#NO_BODY_HTTP11_KA_CHUNKED_200
 18

	)

1430 , {.
	g«me
= "HTTP/1.1 with chunkedÉndocingándá 200Ñesponse"

1431 ,.
	gty≥

HTTP_RESPONSE


1432 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1437 ,.
	gshould_kìp_Æive

TRUE


1438 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1439 ,.
	ghâp_maj‹
= 1

1440 ,.
	ghâp_mö‹
= 1

1441 ,.
	g°©us_code
= 200

1442 ,.
	gª•⁄£_°©us
= "OK"

1443 ,.
	gnum_hódîs
= 1

1444 ,.
	ghódîs
=

1447 ,.
	gbody_size
= 0

1448 ,.
	gbody
= ""

1451 #i‡!
HTTP_PARSER_STRICT


1452 
	#SPACE_IN_FIELD_RES
 19

	)

1454 , {.
	g«me
= "field space"

1455 ,.
	gty≥

HTTP_RESPONSE


1456 ,.
	gøw
= "HTTP/1.1 200 OK\r\n"

1466 ,.
	gshould_kìp_Æive

TRUE


1467 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1468 ,.
	ghâp_maj‹
= 1

1469 ,.
	ghâp_mö‹
= 1

1470 ,.
	g°©us_code
= 200

1471 ,.
	gª•⁄£_°©us
= "OK"

1472 ,.
	gnum_hódîs
= 7

1473 ,.
	ghódîs
=

1482 ,.
	gbody
= "<xml>hello</xml>"

1486 
	#AMAZON_COM
 20

	)

1487 , {.
	g«me
= "amazon.com"

1488 ,.
	gty≥

HTTP_RESPONSE


1489 ,.
	gøw
= "HTTP/1.1 301 MovedPermanently\r\n"

1504 ,.
	gshould_kìp_Æive

TRUE


1505 ,.
	gmesßge_com∂ëe_⁄_eof

FALSE


1506 ,.
	ghâp_maj‹
= 1

1507 ,.
	ghâp_mö‹
= 1

1508 ,.
	g°©us_code
= 301

1509 ,.
	gª•⁄£_°©us
= "MovedPermanently"

1510 ,.
	gnum_hódîs
= 9

1511 ,.
	ghódîs
= { { "Date", "Wed, 15 May 2013 17:06:33 GMT" }

1521 ,.
	gbody
= "\n"

1524 
	#EMPTY_REASON_PHRASE_AFTER_SPACE
 20

	)

1525 , {.
	g«me
= "emptyÑeasonÖhraseáfter space"

1526 ,.
	gty≥

HTTP_RESPONSE


1527 ,.
	gøw
= "HTTP/1.1 200 \r\n"

1529 ,.
	gshould_kìp_Æive

FALSE


1530 ,.
	gmesßge_com∂ëe_⁄_eof

TRUE


1531 ,.
	ghâp_maj‹
= 1

1532 ,.
	ghâp_mö‹
= 1

1533 ,.
	g°©us_code
= 200

1534 ,.
	gª•⁄£_°©us
= ""

1535 ,.
	gnum_hódîs
= 0

1536 ,.
	ghódîs
= {}

1537 ,.
	gbody
= ""

1540 , {.
	g«me

NULL
 }

1546 
size_t


1547 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
maxÀn
)

1549 c⁄° *
p
;

1551 
p
 = 
	`memchr
(
s
, '\0', 
maxÀn
);

1552 i‡(
p
 =
NULL
)

1553  
maxÀn
;

1555  
p
 - 
s
;

1556 
	}
}

1558 
size_t


1559 
	$°ænˇt
(*
d°
, 
size_t
 
Àn
, c⁄° *
§c
, size_à
n
)

1561 
size_t
 
¶í
;

1562 
size_t
 
dÀn
;

1563 
size_t
 
æí
;

1564 
size_t
 
n˝y
;

1566 
¶í
 = 
	`°∫Àn
(
§c
, 
n
);

1567 
dÀn
 = 
	`°∫Àn
(
d°
, 
Àn
);

1569 i‡(
dÀn
 < 
Àn
) {

1570 
æí
 = 
Àn
 - 
dÀn
;

1571 
n˝y
 = 
¶í
 < 
æí
 ? slen : (rlen - 1);

1572 
	`mem˝y
(
d°
 + 
dÀn
, 
§c
, 
n˝y
);

1573 
d°
[
dÀn
 + 
n˝y
] = '\0';

1576 
	`as£π
(
Àn
 > 
¶í
 + 
dÀn
);

1577  
¶í
 + 
dÀn
;

1578 
	}
}

1580 
size_t


1581 
	$°æˇt
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

1583  
	`°ænˇt
(
d°
, 
Àn
, 
§c
, (
size_t
) -1);

1584 
	}
}

1586 
size_t


1587 
	$°æn˝y
(*
d°
, 
size_t
 
Àn
, c⁄° *
§c
, size_à
n
)

1589 
size_t
 
¶í
;

1590 
size_t
 
n˝y
;

1592 
¶í
 = 
	`°∫Àn
(
§c
, 
n
);

1594 i‡(
Àn
 > 0) {

1595 
n˝y
 = 
¶í
 < 
Àn
 ? slen : (len - 1);

1596 
	`mem˝y
(
d°
, 
§c
, 
n˝y
);

1597 
d°
[
n˝y
] = '\0';

1600 
	`as£π
(
Àn
 > 
¶í
);

1601  
¶í
;

1602 
	}
}

1604 
size_t


1605 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
Àn
)

1607  
	`°æn˝y
(
d°
, 
Àn
, 
§c
, (
size_t
) -1);

1608 
	}
}

1611 
	$ªque°_uæ_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1613 
	`as£π
(
p
 =
∑r£r
);

1614 
	`°ænˇt
(
mesßges
[
num_mesßges
].
ªque°_uæ
,

1615 (
mesßges
[
num_mesßges
].
ªque°_uæ
),

1616 
buf
,

1617 
Àn
);

1619 
	}
}

1622 
	$hódî_fõld_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1624 
	`as£π
(
p
 =
∑r£r
);

1625 
mesßge
 *
m
 = &
mesßges
[
num_mesßges
];

1627 i‡(
m
->
œ°_hódî_ñemít
 !
FIELD
)

1628 
m
->
num_hódîs
++;

1630 
	`°ænˇt
(
m
->
hódîs
[m->
num_hódîs
-1][0],

1631 (
m
->
hódîs
[m->
num_hódîs
-1][0]),

1632 
buf
,

1633 
Àn
);

1635 
m
->
œ°_hódî_ñemít
 = 
FIELD
;

1638 
	}
}

1641 
	$hódî_vÆue_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1643 
	`as£π
(
p
 =
∑r£r
);

1644 
mesßge
 *
m
 = &
mesßges
[
num_mesßges
];

1646 
	`°ænˇt
(
m
->
hódîs
[m->
num_hódîs
-1][1],

1647 (
m
->
hódîs
[m->
num_hódîs
-1][1]),

1648 
buf
,

1649 
Àn
);

1651 
m
->
œ°_hódî_ñemít
 = 
VALUE
;

1654 
	}
}

1657 
	$check_body_is_föÆ
 (c⁄° 
hâp_∑r£r
 *
p
)

1659 i‡(
mesßges
[
num_mesßges
].
body_is_föÆ
) {

1660 
	`Ârötf
(
°dîr
, "\n\n *** Error http_body_is_final() shouldÑeturn 1 "

1663 
	`as£π
(0);

1664 
	`ab‹t
();

1666 
mesßges
[
num_mesßges
].
body_is_föÆ
 = 
	`hâp_body_is_föÆ
(
p
);

1667 
	}
}

1670 
	$body_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1672 
	`as£π
(
p
 =
∑r£r
);

1673 
	`°ænˇt
(
mesßges
[
num_mesßges
].
body
,

1674 (
mesßges
[
num_mesßges
].
body
),

1675 
buf
,

1676 
Àn
);

1677 
mesßges
[
num_mesßges
].
body_size
 +
Àn
;

1678 
	`check_body_is_föÆ
(
p
);

1681 
	}
}

1684 
	$cou¡_body_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1686 
	`as£π
(
p
 =
∑r£r
);

1687 
	`as£π
(
buf
);

1688 
mesßges
[
num_mesßges
].
body_size
 +
Àn
;

1689 
	`check_body_is_föÆ
(
p
);

1691 
	}
}

1694 
	$mesßge_begö_cb
 (
hâp_∑r£r
 *
p
)

1696 
	`as£π
(
p
 =
∑r£r
);

1697 
mesßges
[
num_mesßges
].
mesßge_begö_cb_ˇŒed
 = 
TRUE
;

1699 
	}
}

1702 
	$hódîs_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1704 
	`as£π
(
p
 =
∑r£r
);

1705 
mesßges
[
num_mesßges
].
mëhod
 = 
∑r£r
->method;

1706 
mesßges
[
num_mesßges
].
°©us_code
 = 
∑r£r
->status_code;

1707 
mesßges
[
num_mesßges
].
hâp_maj‹
 = 
∑r£r
->http_major;

1708 
mesßges
[
num_mesßges
].
hâp_mö‹
 = 
∑r£r
->http_minor;

1709 
mesßges
[
num_mesßges
].
hódîs_com∂ëe_cb_ˇŒed
 = 
TRUE
;

1710 
mesßges
[
num_mesßges
].
should_kìp_Æive
 = 
	`hâp_should_kìp_Æive
(
∑r£r
);

1712 
	}
}

1715 
	$mesßge_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1717 
	`as£π
(
p
 =
∑r£r
);

1718 i‡(
mesßges
[
num_mesßges
].
should_kìp_Æive
 !
	`hâp_should_kìp_Æive
(
∑r£r
))

1720 
	`Ârötf
(
°dîr
, "\n\n *** Error http_should_keep_alive() should have same "

1723 
	`as£π
(0);

1724 
	`ab‹t
();

1727 i‡(
mesßges
[
num_mesßges
].
body_size
 &&

1728 
	`hâp_body_is_föÆ
(
p
) &&

1729 !
mesßges
[
num_mesßges
].
body_is_föÆ
)

1731 
	`Ârötf
(
°dîr
, "\n\n *** Error http_body_is_final() shouldÑeturn 1 "

1734 
	`as£π
(0);

1735 
	`ab‹t
();

1738 
mesßges
[
num_mesßges
].
mesßge_com∂ëe_cb_ˇŒed
 = 
TRUE
;

1740 
mesßges
[
num_mesßges
].
mesßge_com∂ëe_⁄_eof
 = 
cuºíéy_∑rsög_eof
;

1742 
num_mesßges
++;

1744 
	}
}

1747 
	$ª•⁄£_°©us_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1749 
	`as£π
(
p
 =
∑r£r
);

1750 
	`°ænˇt
(
mesßges
[
num_mesßges
].
ª•⁄£_°©us
,

1751 (
mesßges
[
num_mesßges
].
ª•⁄£_°©us
),

1752 
buf
,

1753 
Àn
);

1755 
	}
}

1760 
	$d⁄tˇŒ_mesßge_begö_cb
 (
hâp_∑r£r
 *
p
)

1762 i‡(
p
) { }

1763 
	`Ârötf
(
°dîr
, "\n\n*** on_message_begin() called onÖausedÖarser ***\n\n");

1764 
	`ab‹t
();

1765 
	}
}

1768 
	$d⁄tˇŒ_hódî_fõld_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1770 i‡(
p
 || 
buf
 || 
Àn
) { }

1771 
	`Ârötf
(
°dîr
, "\n\n*** on_header_field() called onÖausedÖarser ***\n\n");

1772 
	`ab‹t
();

1773 
	}
}

1776 
	$d⁄tˇŒ_hódî_vÆue_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1778 i‡(
p
 || 
buf
 || 
Àn
) { }

1779 
	`Ârötf
(
°dîr
, "\n\n*** on_header_value() called onÖausedÖarser ***\n\n");

1780 
	`ab‹t
();

1781 
	}
}

1784 
	$d⁄tˇŒ_ªque°_uæ_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1786 i‡(
p
 || 
buf
 || 
Àn
) { }

1787 
	`Ârötf
(
°dîr
, "\n\n*** on_request_url() called onÖausedÖarser ***\n\n");

1788 
	`ab‹t
();

1789 
	}
}

1792 
	$d⁄tˇŒ_body_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1794 i‡(
p
 || 
buf
 || 
Àn
) { }

1795 
	`Ârötf
(
°dîr
, "\n\n*** on_body_cb() called onÖausedÖarser ***\n\n");

1796 
	`ab‹t
();

1797 
	}
}

1800 
	$d⁄tˇŒ_hódîs_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1802 i‡(
p
) { }

1803 
	`Ârötf
(
°dîr
, "\n\n*** on_headers_complete() called onÖaused "

1805 
	`ab‹t
();

1806 
	}
}

1809 
	$d⁄tˇŒ_mesßge_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1811 i‡(
p
) { }

1812 
	`Ârötf
(
°dîr
, "\n\n*** on_message_complete() called onÖaused "

1814 
	`ab‹t
();

1815 
	}
}

1818 
	$d⁄tˇŒ_ª•⁄£_°©us_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1820 i‡(
p
 || 
buf
 || 
Àn
) { }

1821 
	`Ârötf
(
°dîr
, "\n\n*** on_status() called onÖausedÖarser ***\n\n");

1822 
	`ab‹t
();

1823 
	}
}

1825 
hâp_∑r£r_£âögs
 
	g£âögs_d⁄tˇŒ
 =

1826 {.
⁄_mesßge_begö
 = 
d⁄tˇŒ_mesßge_begö_cb


1827 ,.
	g⁄_hódî_fõld
 = 
d⁄tˇŒ_hódî_fõld_cb


1828 ,.
	g⁄_hódî_vÆue
 = 
d⁄tˇŒ_hódî_vÆue_cb


1829 ,.
	g⁄_uæ
 = 
d⁄tˇŒ_ªque°_uæ_cb


1830 ,.
	g⁄_°©us
 = 
d⁄tˇŒ_ª•⁄£_°©us_cb


1831 ,.
	g⁄_body
 = 
d⁄tˇŒ_body_cb


1832 ,.
	g⁄_hódîs_com∂ëe
 = 
d⁄tˇŒ_hódîs_com∂ëe_cb


1833 ,.
	g⁄_mesßge_com∂ëe
 = 
d⁄tˇŒ_mesßge_com∂ëe_cb


1841 
	$∑u£_mesßge_begö_cb
 (
hâp_∑r£r
 *
p
)

1843 
	`hâp_∑r£r_∑u£
(
p
, 1);

1844 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1845  
	`mesßge_begö_cb
(
p
);

1846 
	}
}

1849 
	$∑u£_hódî_fõld_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1851 
	`hâp_∑r£r_∑u£
(
p
, 1);

1852 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1853  
	`hódî_fõld_cb
(
p
, 
buf
, 
Àn
);

1854 
	}
}

1857 
	$∑u£_hódî_vÆue_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1859 
	`hâp_∑r£r_∑u£
(
p
, 1);

1860 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1861  
	`hódî_vÆue_cb
(
p
, 
buf
, 
Àn
);

1862 
	}
}

1865 
	$∑u£_ªque°_uæ_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1867 
	`hâp_∑r£r_∑u£
(
p
, 1);

1868 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1869  
	`ªque°_uæ_cb
(
p
, 
buf
, 
Àn
);

1870 
	}
}

1873 
	$∑u£_body_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1875 
	`hâp_∑r£r_∑u£
(
p
, 1);

1876 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1877  
	`body_cb
(
p
, 
buf
, 
Àn
);

1878 
	}
}

1881 
	$∑u£_hódîs_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1883 
	`hâp_∑r£r_∑u£
(
p
, 1);

1884 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1885  
	`hódîs_com∂ëe_cb
(
p
);

1886 
	}
}

1889 
	$∑u£_mesßge_com∂ëe_cb
 (
hâp_∑r£r
 *
p
)

1891 
	`hâp_∑r£r_∑u£
(
p
, 1);

1892 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1893  
	`mesßge_com∂ëe_cb
(
p
);

1894 
	}
}

1897 
	$∑u£_ª•⁄£_°©us_cb
 (
hâp_∑r£r
 *
p
, c⁄° *
buf
, 
size_t
 
Àn
)

1899 
	`hâp_∑r£r_∑u£
(
p
, 1);

1900 *
cuºít_∑u£_∑r£r
 = 
£âögs_d⁄tˇŒ
;

1901  
	`ª•⁄£_°©us_cb
(
p
, 
buf
, 
Àn
);

1902 
	}
}

1904 
hâp_∑r£r_£âögs
 
	g£âögs_∑u£
 =

1905 {.
⁄_mesßge_begö
 = 
∑u£_mesßge_begö_cb


1906 ,.
	g⁄_hódî_fõld
 = 
∑u£_hódî_fõld_cb


1907 ,.
	g⁄_hódî_vÆue
 = 
∑u£_hódî_vÆue_cb


1908 ,.
	g⁄_uæ
 = 
∑u£_ªque°_uæ_cb


1909 ,.
	g⁄_°©us
 = 
∑u£_ª•⁄£_°©us_cb


1910 ,.
	g⁄_body
 = 
∑u£_body_cb


1911 ,.
	g⁄_hódîs_com∂ëe
 = 
∑u£_hódîs_com∂ëe_cb


1912 ,.
	g⁄_mesßge_com∂ëe
 = 
∑u£_mesßge_com∂ëe_cb


1915 
hâp_∑r£r_£âögs
 
	g£âögs
 =

1916 {.
⁄_mesßge_begö
 = 
mesßge_begö_cb


1917 ,.
	g⁄_hódî_fõld
 = 
hódî_fõld_cb


1918 ,.
	g⁄_hódî_vÆue
 = 
hódî_vÆue_cb


1919 ,.
	g⁄_uæ
 = 
ªque°_uæ_cb


1920 ,.
	g⁄_°©us
 = 
ª•⁄£_°©us_cb


1921 ,.
	g⁄_body
 = 
body_cb


1922 ,.
	g⁄_hódîs_com∂ëe
 = 
hódîs_com∂ëe_cb


1923 ,.
	g⁄_mesßge_com∂ëe
 = 
mesßge_com∂ëe_cb


1926 
hâp_∑r£r_£âögs
 
	g£âögs_cou¡_body
 =

1927 {.
⁄_mesßge_begö
 = 
mesßge_begö_cb


1928 ,.
	g⁄_hódî_fõld
 = 
hódî_fõld_cb


1929 ,.
	g⁄_hódî_vÆue
 = 
hódî_vÆue_cb


1930 ,.
	g⁄_uæ
 = 
ªque°_uæ_cb


1931 ,.
	g⁄_°©us
 = 
ª•⁄£_°©us_cb


1932 ,.
	g⁄_body
 = 
cou¡_body_cb


1933 ,.
	g⁄_hódîs_com∂ëe
 = 
hódîs_com∂ëe_cb


1934 ,.
	g⁄_mesßge_com∂ëe
 = 
mesßge_com∂ëe_cb


1937 
hâp_∑r£r_£âögs
 
	g£âögs_nuŒ
 =

1938 {.
⁄_mesßge_begö
 = 0

1939 ,.
	g⁄_hódî_fõld
 = 0

1940 ,.
	g⁄_hódî_vÆue
 = 0

1941 ,.
	g⁄_uæ
 = 0

1942 ,.
	g⁄_°©us
 = 0

1943 ,.
	g⁄_body
 = 0

1944 ,.
	g⁄_hódîs_com∂ëe
 = 0

1945 ,.
	g⁄_mesßge_com∂ëe
 = 0

1949 
	$∑r£r_öô
 (
hâp_∑r£r_ty≥
 
ty≥
)

1951 
num_mesßges
 = 0;

1953 
	`as£π
(
∑r£r
 =
NULL
);

1955 
∑r£r
 = 
	`mÆloc
((
hâp_∑r£r
));

1957 
	`hâp_∑r£r_öô
(
∑r£r
, 
ty≥
);

1959 
	`mem£t
(&
mesßges
, 0,  messages);

1961 
	}
}

1964 
	$∑r£r_‰ì
 ()

1966 
	`as£π
(
∑r£r
);

1967 
	`‰ì
(
∑r£r
);

1968 
∑r£r
 = 
NULL
;

1969 
	}
}

1971 
size_t
 
	$∑r£
 (c⁄° *
buf
, 
size_t
 
Àn
)

1973 
size_t
 
≈¨£d
;

1974 
cuºíéy_∑rsög_eof
 = (
Àn
 == 0);

1975 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, &
£âögs
, 
buf
, 
Àn
);

1976  
≈¨£d
;

1977 
	}
}

1979 
size_t
 
	$∑r£_cou¡_body
 (c⁄° *
buf
, 
size_t
 
Àn
)

1981 
size_t
 
≈¨£d
;

1982 
cuºíéy_∑rsög_eof
 = (
Àn
 == 0);

1983 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, &
£âögs_cou¡_body
, 
buf
, 
Àn
);

1984  
≈¨£d
;

1985 
	}
}

1987 
size_t
 
	$∑r£_∑u£
 (c⁄° *
buf
, 
size_t
 
Àn
)

1989 
size_t
 
≈¨£d
;

1990 
hâp_∑r£r_£âögs
 
s
 = 
£âögs_∑u£
;

1992 
cuºíéy_∑rsög_eof
 = (
Àn
 == 0);

1993 
cuºít_∑u£_∑r£r
 = &
s
;

1994 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(
∑r£r
, 
cuºít_∑u£_∑r£r
, 
buf
, 
Àn
);

1995  
≈¨£d
;

1996 
	}
}

1998 
ölöe
 

1999 
	$check_°r_eq
 (c⁄° 
mesßge
 *
m
,

2000 c⁄° *
¥›
,

2001 c⁄° *
ex≥˘ed
,

2002 c⁄° *
found
) {

2003 i‡((
ex≥˘ed
 =
NULL
Ë!(
found
 == NULL)) {

2004 
	`¥ötf
("\n*** Eº‹: %†ö '%s' ***\n\n", 
¥›
, 
m
->
«me
);

2005 
	`¥ötf
("ex≥˘ed %s\n", (
ex≥˘ed
 =
NULL
) ? "NULL" :Éxpected);

2006 
	`¥ötf
(" found %s\n", (
found
 =
NULL
) ? "NULL" : found);

2009 i‡(
ex≥˘ed
 !
NULL
 && 0 !
	`°rcmp
”x≥˘ed, 
found
)) {

2010 
	`¥ötf
("\n*** Eº‹: %†ö '%s' ***\n\n", 
¥›
, 
m
->
«me
);

2011 
	`¥ötf
("ex≥˘ed '%s'\n", 
ex≥˘ed
);

2012 
	`¥ötf
(" found '%s'\n", 
found
);

2016 
	}
}

2018 
ölöe
 

2019 
	$check_num_eq
 (c⁄° 
mesßge
 *
m
,

2020 c⁄° *
¥›
,

2021 
ex≥˘ed
,

2022 
found
) {

2023 i‡(
ex≥˘ed
 !
found
) {

2024 
	`¥ötf
("\n*** Eº‹: %†ö '%s' ***\n\n", 
¥›
, 
m
->
«me
);

2025 
	`¥ötf
("ex≥˘ed %d\n", 
ex≥˘ed
);

2026 
	`¥ötf
(" found %d\n", 
found
);

2030 
	}
}

2032 
	#MESSAGE_CHECK_STR_EQ
(
ex≥˘ed
, 
found
, 
¥›
) \

2033 i‡(!
	`check_°r_eq
(
ex≥˘ed
, #¥›,Éx≥˘ed->
¥›
, 
found
->¥›)Ë 0

	)

2035 
	#MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
found
, 
¥›
) \

2036 i‡(!
	`check_num_eq
(
ex≥˘ed
, #¥›,Éx≥˘ed->
¥›
, 
found
->¥›)Ë 0

	)

2038 
	#MESSAGE_CHECK_URL_EQ
(
u
, 
ex≥˘ed
, 
found
, 
¥›
, 
‚
) \

2040 
ubuf
[256]; \

2042 i‡((
u
)->
fõld_£t
 & (1 << (
‚
))) { \

2043 
	`mem˝y
(
ubuf
, (
found
)->
ªque°_uæ
 + (
u
)->
fõld_d©a
[(
‚
)].
off
, \

2044 (
u
)->
fõld_d©a
[(
‚
)].
Àn
); \

2045 
ubuf
[(
u
)->
fõld_d©a
[(
‚
)].
Àn
] = '\0'; \

2047 
ubuf
[0] = '\0'; \

2050 
	`check_°r_eq
(
ex≥˘ed
, #¥›,Éx≥˘ed->
¥›
, 
ubuf
); \

2051 } 0)

	)

2054 
	$mesßge_eq
 (
ödex
, c⁄° 
mesßge
 *
ex≥˘ed
)

2056 
i
;

2057 
mesßge
 *
m
 = &
mesßges
[
ödex
];

2059 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
hâp_maj‹
);

2060 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
hâp_mö‹
);

2062 i‡(
ex≥˘ed
->
ty≥
 =
HTTP_REQUEST
) {

2063 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
mëhod
);

2065 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
°©us_code
);

2066 
	`MESSAGE_CHECK_STR_EQ
(
ex≥˘ed
, 
m
, 
ª•⁄£_°©us
);

2069 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
should_kìp_Æive
);

2070 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
mesßge_com∂ëe_⁄_eof
);

2072 
	`as£π
(
m
->
mesßge_begö_cb_ˇŒed
);

2073 
	`as£π
(
m
->
hódîs_com∂ëe_cb_ˇŒed
);

2074 
	`as£π
(
m
->
mesßge_com∂ëe_cb_ˇŒed
);

2077 
	`MESSAGE_CHECK_STR_EQ
(
ex≥˘ed
, 
m
, 
ªque°_uæ
);

2082 i‡(*
m
->
ªque°_uæ
 && m->
mëhod
 !
HTTP_CONNECT
) {

2083 
hâp_∑r£r_uæ
 
u
;

2085 i‡(
	`hâp_∑r£r_∑r£_uæ
(
m
->
ªque°_uæ
, 
	`°æí
(m->ªque°_uæ), 0, &
u
)) {

2086 
	`Ârötf
(
°dîr
, "\n\n*** failedÅoÖarse URL %s ***\n\n",

2087 
m
->
ªque°_uæ
);

2088 
	`ab‹t
();

2091 i‡(
ex≥˘ed
->
ho°
) {

2092 
	`MESSAGE_CHECK_URL_EQ
(&
u
, 
ex≥˘ed
, 
m
, 
ho°
, 
UF_HOST
);

2095 i‡(
ex≥˘ed
->
u£röfo
) {

2096 
	`MESSAGE_CHECK_URL_EQ
(&
u
, 
ex≥˘ed
, 
m
, 
u£röfo
, 
UF_USERINFO
);

2099 
m
->
p‹t
 = (
u
.
fõld_£t
 & (1 << 
UF_PORT
)) ?

2100 
u
.
p‹t
 : 0;

2102 
	`MESSAGE_CHECK_URL_EQ
(&
u
, 
ex≥˘ed
, 
m
, 
quîy_°rög
, 
UF_QUERY
);

2103 
	`MESSAGE_CHECK_URL_EQ
(&
u
, 
ex≥˘ed
, 
m
, 
‰agmít
, 
UF_FRAGMENT
);

2104 
	`MESSAGE_CHECK_URL_EQ
(&
u
, 
ex≥˘ed
, 
m
, 
ªque°_∑th
, 
UF_PATH
);

2105 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
p‹t
);

2108 i‡(
ex≥˘ed
->
body_size
) {

2109 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
body_size
);

2111 
	`MESSAGE_CHECK_STR_EQ
(
ex≥˘ed
, 
m
, 
body
);

2114 
	`MESSAGE_CHECK_NUM_EQ
(
ex≥˘ed
, 
m
, 
num_hódîs
);

2116 
r
;

2117 
i
 = 0; i < 
m
->
num_hódîs
; i++) {

2118 
r
 = 
	`check_°r_eq
(
ex≥˘ed
, "hódî fõld",Éx≥˘ed->
hódîs
[
i
][0], 
m
->headers[i][0]);

2119 i‡(!
r
)  0;

2120 
r
 = 
	`check_°r_eq
(
ex≥˘ed
, "hódî vÆue",Éx≥˘ed->
hódîs
[
i
][1], 
m
->headers[i][1]);

2121 i‡(!
r
)  0;

2124 
	`MESSAGE_CHECK_STR_EQ
(
ex≥˘ed
, 
m
, 
upgøde
);

2127 
	}
}

2133 
size_t


2134 
	$cou¡_∑r£d_mesßges
(c⁄° 
size_t
 
nmsgs
, ...) {

2135 
size_t
 
i
;

2136 
va_li°
 
≠
;

2138 
	`va_°¨t
(
≠
, 
nmsgs
);

2140 
i
 = 0; i < 
nmsgs
; i++) {

2141 
mesßge
 *
m
 = 
	`va_¨g
(
≠
, message *);

2143 i‡(
m
->
upgøde
) {

2144 
	`va_íd
(
≠
);

2145  
i
 + 1;

2149 
	`va_íd
(
≠
);

2150  
nmsgs
;

2151 
	}
}

2157 
	$upgøde_mesßge_fix
(*
body
, c⁄° 
size_t
 
ƒód
, c⁄° size_à
nmsgs
, ...) {

2158 
va_li°
 
≠
;

2159 
size_t
 
i
;

2160 
size_t
 
off
 = 0;

2162 
	`va_°¨t
(
≠
, 
nmsgs
);

2164 
i
 = 0; i < 
nmsgs
; i++) {

2165 
mesßge
 *
m
 = 
	`va_¨g
(
≠
, message *);

2167 
off
 +
	`°æí
(
m
->
øw
);

2169 i‡(
m
->
upgøde
) {

2170 
off
 -
	`°æí
(
m
->
upgøde
);

2173 i‡(!
	`check_°r_eq
(
m
, "upgøde", 
body
 + 
off
, body + 
ƒód
)) {

2174 
	`ab‹t
();

2179 *(
body
 + 
ƒód
 + 
	`°æí
(
m
->
upgøde
)) = '\0';

2180 
mesßges
[
num_mesßges
 -1 ].
upgøde
 = 
body
 + 
ƒód
;

2182 
	`va_íd
(
≠
);

2187 
	`va_íd
(
≠
);

2188 
	`¥ötf
("\n\n*** Error:Éxpectedá message with upgrade ***\n");

2190 
	`ab‹t
();

2191 
	}
}

2194 
	$¥öt_îr‹
 (c⁄° *
øw
, 
size_t
 
îr‹_loˇti⁄
)

2196 
	`Ârötf
(
°dîr
, "\n*** %s ***\n\n",

2197 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(
∑r£r
)));

2199 
this_löe
 = 0, 
ch¨_Àn
 = 0;

2200 
size_t
 
i
, 
j
, 
Àn
 = 
	`°æí
(
øw
), 
îr‹_loˇti⁄_löe
 = 0;

2201 
i
 = 0; i < 
Àn
; i++) {

2202 i‡(
i
 =
îr‹_loˇti⁄
Ë
this_löe
 = 1;

2203 
øw
[
i
]) {

2205 
ch¨_Àn
 = 2;

2206 
	`Ârötf
(
°dîr
, "\\r");

2210 
ch¨_Àn
 = 2;

2211 
	`Ârötf
(
°dîr
, "\\n\n");

2213 i‡(
this_löe
Ë
¥öt
;

2215 
îr‹_loˇti⁄_löe
 = 0;

2219 
ch¨_Àn
 = 1;

2220 
	`Âutc
(
øw
[
i
], 
°dîr
);

2223 i‡(!
this_löe
Ë
îr‹_loˇti⁄_löe
 +
ch¨_Àn
;

2226 
	`Ârötf
(
°dîr
, "[eof]\n");

2228 
¥öt
:

2229 
j
 = 0; j < 
îr‹_loˇti⁄_löe
; j++) {

2230 
	`Âutc
(' ', 
°dîr
);

2232 
	`Ârötf
(
°dîr
, "^\n\√º‹Üoˇti⁄: %u\n", ()
îr‹_loˇti⁄
);

2233 
	}
}

2236 
	$ã°_¥e£rve_d©a
 ()

2238 
my_d©a
[] = "application-specific data";

2239 
hâp_∑r£r
 
∑r£r
;

2240 
∑r£r
.
d©a
 = 
my_d©a
;

2241 
	`hâp_∑r£r_öô
(&
∑r£r
, 
HTTP_REQUEST
);

2242 i‡(
∑r£r
.
d©a
 !
my_d©a
) {

2243 
	`¥ötf
("\n***Öarser.dataÇotÖreservedáccross http_parser_init ***\n\n");

2244 
	`ab‹t
();

2246 
	}
}

2248 
	suæ_ã°
 {

2249 c⁄° *
	m«me
;

2250 c⁄° *
	muæ
;

2251 
	mis_c⁄√˘
;

2252 
hâp_∑r£r_uæ
 
	mu
;

2253 
	mrv
;

2256 c⁄° 
uæ_ã°
 
	guæ_ã°s
[] =

2257 { {.
«me
="proxyÑequest"

2258 ,.
	guæ
="http://hostname/"

2259 ,.
	gis_c⁄√˘
=0

2260 ,.
	gu
=

2261 {.
fõld_£t
=(1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
Ë| (1 << 
UF_PATH
)

2262 ,.
	gp‹t
=0

2263 ,.
	gfõld_d©a
=

2273 ,.
	grv
=0

2276 , {.
	g«me
="proxyÑequest withÖort"

2277 ,.
	guæ
="http://hostname:444/"

2278 ,.
	gis_c⁄√˘
=0

2279 ,.
	gu
=

2280 {.
fõld_£t
=(1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
Ë| (1 << 
UF_PORT
Ë| (1 << 
UF_PATH
)

2281 ,.
	gp‹t
=444

2282 ,.
	gfõld_d©a
=

2292 ,.
	grv
=0

2295 , {.
	g«me
="CONNECTÑequest"

2296 ,.
	guæ
="hostname:443"

2297 ,.
	gis_c⁄√˘
=1

2298 ,.
	gu
=

2299 {.
fõld_£t
=(1 << 
UF_HOST
Ë| (1 << 
UF_PORT
)

2300 ,.
	gp‹t
=443

2301 ,.
	gfõld_d©a
=

2311 ,.
	grv
=0

2314 , {.
	g«me
="CONNECTÑequest butÇot connect"

2315 ,.
	guæ
="hostname:443"

2316 ,.
	gis_c⁄√˘
=0

2317 ,.
	grv
=1

2320 , {.
	g«me
="proxy ipv6Ñequest"

2321 ,.
	guæ
="http://[1:2::3:4]/"

2322 ,.
	gis_c⁄√˘
=0

2323 ,.
	gu
=

2324 {.
fõld_£t
=(1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
Ë| (1 << 
UF_PATH
)

2325 ,.
	gp‹t
=0

2326 ,.
	gfõld_d©a
=

2336 ,.
	grv
=0

2339 , {.
	g«me
="proxy ipv6Ñequest withÖort"

2340 ,.
	guæ
="http://[1:2::3:4]:67/"

2341 ,.
	gis_c⁄√˘
=0

2342 ,.
	gu
=

2343 {.
fõld_£t
=(1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
Ë| (1 << 
UF_PORT
Ë| (1 << 
UF_PATH
)

2344 ,.
	gp‹t
=67

2345 ,.
	gfõld_d©a
=

2355 ,.
	grv
=0

2358 , {.
	g«me
="CONNECT ipv6áddress"

2359 ,.
	guæ
="[1:2::3:4]:443"

2360 ,.
	gis_c⁄√˘
=1

2361 ,.
	gu
=

2362 {.
fõld_£t
=(1 << 
UF_HOST
Ë| (1 << 
UF_PORT
)

2363 ,.
	gp‹t
=443

2364 ,.
	gfõld_d©a
=

2374 ,.
	grv
=0

2377 , {.
	g«me
="ipv4 in ipv6áddress"

2378 ,.
	guæ
="http://[2001:0000:0000:0000:0000:0000:1.9.1.1]/"

2379 ,.
	gis_c⁄√˘
=0

2380 ,.
	gu
=

2381 {.
fõld_£t
=(1 << 
UF_SCHEMA
Ë| (1 << 
UF_HOST
Ë| (1 << 
UF_PATH
)

2382 ,.
	gp‹t
=0

2383 ,.
	gfõld_d©a
=

2393 ,.
	grv
=0

2396 , {.
	g«me
="extra ? in query string"

2397 ,.
	guæ
="http://a.tbcdn.cn/p/fp/2010c/??fp-header-min.css,fp-base-min.css,"

2400 ,.
	gis_c⁄√˘
=0

2401 ,.
	gu
=

2402 {.
fõld_£t
=(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
Ë| (1<<
UF_QUERY
)

2403 ,.
	gp‹t
=0

2404 ,.
	gfõld_d©a
=

2414 ,.
	grv
=0

2417 , {.
	g«me
="space URLÉncoded"

2418 ,.
	guæ
="/toto.html?toto=a%20b"

2419 ,.
	gis_c⁄√˘
=0

2420 ,.
	gu
=

2421 {.
fõld_£t
(1<<
UF_PATH
Ë| (1<<
UF_QUERY
)

2422 ,.
	gp‹t
=0

2423 ,.
	gfõld_d©a
=

2433 ,.
	grv
=0

2437 , {.
	g«me
="URL fragment"

2438 ,.
	guæ
="/toto.html#titi"

2439 ,.
	gis_c⁄√˘
=0

2440 ,.
	gu
=

2441 {.
fõld_£t
(1<<
UF_PATH
Ë| (1<<
UF_FRAGMENT
)

2442 ,.
	gp‹t
=0

2443 ,.
	gfõld_d©a
=

2453 ,.
	grv
=0

2456 , {.
	g«me
="complex URL fragment"

2457 ,.
	guæ
="http://www.webmasterworld.com/r.cgi?f=21&d=8405&url="

2459 ,.
	gis_c⁄√˘
=0

2460 ,.
	gu
=

2461 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
Ë| (1<<
UF_QUERY
) |\

2462 (1<<
UF_FRAGMENT
)

2463 ,.
	gp‹t
=0

2464 ,.
	gfõld_d©a
=

2474 ,.
	grv
=0

2477 , {.
	g«me
="complex URL fromÇode js urlÖarser doc"

2478 ,.
	guæ
="http://host.com:8080/p/a/t/h?query=string#hash"

2479 ,.
	gis_c⁄√˘
=0

2480 ,.
	gu
=

2481 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PORT
Ë| (1<<
UF_PATH
) |\

2482 (1<<
UF_QUERY
Ë| (1<<
UF_FRAGMENT
)

2483 ,.
	gp‹t
=8080

2484 ,.
	gfõld_d©a
=

2494 ,.
	grv
=0

2497 , {.
	g«me
="complex URL with basicáuth fromÇode js urlÖarser doc"

2498 ,.
	guæ
="http://a:b@host.com:8080/p/a/t/h?query=string#hash"

2499 ,.
	gis_c⁄√˘
=0

2500 ,.
	gu
=

2501 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PORT
Ë| (1<<
UF_PATH
) |\

2502 (1<<
UF_QUERY
Ë| (1<<
UF_FRAGMENT
Ë| (1<<
UF_USERINFO
)

2503 ,.
	gp‹t
=8080

2504 ,.
	gfõld_d©a
=

2514 ,.
	grv
=0

2517 , {.
	g«me
="double @"

2518 ,.
	guæ
="http://a:b@@hostname:443/"

2519 ,.
	gis_c⁄√˘
=0

2520 ,.
	grv
=1

2523 , {.
	g«me
="proxyÉmpty host"

2524 ,.
	guæ
="http://:443/"

2525 ,.
	gis_c⁄√˘
=0

2526 ,.
	grv
=1

2529 , {.
	g«me
="proxyÉmptyÖort"

2530 ,.
	guæ
="http://hostname:/"

2531 ,.
	gis_c⁄√˘
=0

2532 ,.
	grv
=1

2535 , {.
	g«me
="CONNECT with basicáuth"

2536 ,.
	guæ
="a:b@hostname:443"

2537 ,.
	gis_c⁄√˘
=1

2538 ,.
	grv
=1

2541 , {.
	g«me
="CONNECTÉmpty host"

2542 ,.
	guæ
=":443"

2543 ,.
	gis_c⁄√˘
=1

2544 ,.
	grv
=1

2547 , {.
	g«me
="CONNECTÉmptyÖort"

2548 ,.
	guæ
="hostname:"

2549 ,.
	gis_c⁄√˘
=1

2550 ,.
	grv
=1

2553 , {.
	g«me
="CONNECT withÉxtra bits"

2554 ,.
	guæ
="hostname:443/"

2555 ,.
	gis_c⁄√˘
=1

2556 ,.
	grv
=1

2559 , {.
	g«me
="space in URL"

2560 ,.
	guæ
="/foo bar/"

2561 ,.
	grv
=1

2564 , {.
	g«me
="proxy basicáuth with space urlÉncoded"

2565 ,.
	guæ
="http://a%20:b@host.com/"

2566 ,.
	gis_c⁄√˘
=0

2567 ,.
	gu
=

2568 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
Ë| (1<<
UF_USERINFO
)

2569 ,.
	gp‹t
=0

2570 ,.
	gfõld_d©a
=

2580 ,.
	grv
=0

2583 , {.
	g«me
="carriageÑeturn in URL"

2584 ,.
	guæ
="/foo\rbar/"

2585 ,.
	grv
=1

2588 , {.
	g«me
="proxy double : in URL"

2589 ,.
	guæ
="http://hostname::443/"

2590 ,.
	grv
=1

2593 , {.
	g«me
="proxy basicáuth with double :"

2594 ,.
	guæ
="http://a::b@host.com/"

2595 ,.
	gis_c⁄√˘
=0

2596 ,.
	gu
=

2597 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
Ë| (1<<
UF_USERINFO
)

2598 ,.
	gp‹t
=0

2599 ,.
	gfõld_d©a
=

2609 ,.
	grv
=0

2612 , {.
	g«me
="line feed in URL"

2613 ,.
	guæ
="/foo\nbar/"

2614 ,.
	grv
=1

2617 , {.
	g«me
="proxyÉmpty basicáuth"

2618 ,.
	guæ
="http://@hostname/fo"

2619 ,.
	gu
=

2620 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
)

2621 ,.
	gp‹t
=0

2622 ,.
	gfõld_d©a
=

2632 ,.
	grv
=0

2634 , {.
	g«me
="proxyÜine feed in hostname"

2635 ,.
	guæ
="http://host\name/fo"

2636 ,.
	grv
=1

2639 , {.
	g«me
="proxy % in hostname"

2640 ,.
	guæ
="http://host%name/fo"

2641 ,.
	grv
=1

2644 , {.
	g«me
="proxy ; in hostname"

2645 ,.
	guæ
="http://host;ame/fo"

2646 ,.
	grv
=1

2649 , {.
	g«me
="proxy basicáuth with unreservedchars"

2650 ,.
	guæ
="http://a!;-_!=+$@host.com/"

2651 ,.
	gis_c⁄√˘
=0

2652 ,.
	gu
=

2653 {.
fõld_£t
(1<<
UF_SCHEMA
Ë| (1<<
UF_HOST
Ë| (1<<
UF_PATH
Ë| (1<<
UF_USERINFO
)

2654 ,.
	gp‹t
=0

2655 ,.
	gfõld_d©a
=

2665 ,.
	grv
=0

2668 , {.
	g«me
="proxy onlyÉmpty basicáuth"

2669 ,.
	guæ
="http://@/fo"

2670 ,.
	grv
=1

2673 , {.
	g«me
="proxy only basicáuth"

2674 ,.
	guæ
="http://toto@/fo"

2675 ,.
	grv
=1

2678 , {.
	g«me
="proxyÉmtpy hostname"

2679 ,.
	guæ
="http:///fo"

2680 ,.
	grv
=1

2683 , {.
	g«me
="proxy = in URL"

2684 ,.
	guæ
="http://host=ame/fo"

2685 ,.
	grv
=1

2688 #i‡
HTTP_PARSER_STRICT


2690 , {.
	g«me
="tab in URL"

2691 ,.
	guæ
="/foo\tbar/"

2692 ,.
	grv
=1

2695 , {.
	g«me
="form feed in URL"

2696 ,.
	guæ
="/foo\fbar/"

2697 ,.
	grv
=1

2702 , {.
	g«me
="tab in URL"

2703 ,.
	guæ
="/foo\tbar/"

2704 ,.
	gu
=

2705 {.
fõld_£t
=(1 << 
UF_PATH
)

2706 ,.
	gfõld_d©a
=

2716 ,.
	grv
=0

2719 , {.
	g«me
="form feed in URL"

2720 ,.
	guæ
="/foo\fbar/"

2721 ,.
	gu
=

2722 {.
fõld_£t
=(1 << 
UF_PATH
)

2723 ,.
	gfõld_d©a
=

2733 ,.
	grv
=0

2739 
	$dump_uæ
 (c⁄° *
uæ
, c⁄° 
hâp_∑r£r_uæ
 *
u
)

2741 
i
;

2743 
	`¥ötf
("\tfõld_£t: 0x%x,Ö‹t: %u\n", 
u
->
fõld_£t
, u->
p‹t
);

2744 
i
 = 0; i < 
UF_MAX
; i++) {

2745 i‡((
u
->
fõld_£t
 & (1 << 
i
)) == 0) {

2746 
	`¥ötf
("\tfõld_d©a[%u]: un£t\n", 
i
);

2750 
	`¥ötf
("\tfield_data[%u]: off: %uÜen: %uÖart: \"%.*s\n\"",

2751 
i
,

2752 
u
->
fõld_d©a
[
i
].
off
,

2753 
u
->
fõld_d©a
[
i
].
Àn
,

2754 
u
->
fõld_d©a
[
i
].
Àn
,

2755 
uæ
 + 
u
->
fõld_d©a
[
i
].
off
);

2757 
	}
}

2760 
	$ã°_∑r£_uæ
 ()

2762 
hâp_∑r£r_uæ
 
u
;

2763 c⁄° 
uæ_ã°
 *
ã°
;

2764 
i
;

2765 
rv
;

2767 
i
 = 0; i < ((
uæ_ã°s
) / (url_tests[0])); i++) {

2768 
ã°
 = &
uæ_ã°s
[
i
];

2769 
	`mem£t
(&
u
, 0, (u));

2771 
rv
 = 
	`hâp_∑r£r_∑r£_uæ
(
ã°
->
uæ
,

2772 
	`°æí
(
ã°
->
uæ
),

2773 
ã°
->
is_c⁄√˘
,

2774 &
u
);

2776 i‡(
ã°
->
rv
 == 0) {

2777 i‡(
rv
 != 0) {

2778 
	`¥ötf
("\n*** http_parser_parse_url(\"%s\") \"%s\"Åest failed, "

2779 "u√x≥˘edÑv %d ***\n\n", 
ã°
->
uæ
,Åe°->
«me
, 
rv
);

2780 
	`ab‹t
();

2783 i‡(
	`memcmp
(&
u
, &
ã°
->u, (u)) != 0) {

2784 
	`¥ötf
("\n*** http_parser_parse_url(\"%s\") \"%s\" failed ***\n",

2785 
ã°
->
uæ
,Åe°->
«me
);

2787 
	`¥ötf
("target http_parser_url:\n");

2788 
	`dump_uæ
(
ã°
->
uæ
, &ã°->
u
);

2789 
	`¥ötf
("result http_parser_url:\n");

2790 
	`dump_uæ
(
ã°
->
uæ
, &
u
);

2792 
	`ab‹t
();

2796 i‡(
rv
 == 0) {

2797 
	`¥ötf
("\n*** http_parser_parse_url(\"%s\") \"%s\"Åest failed, "

2798 "u√x≥˘edÑv %d ***\n\n", 
ã°
->
uæ
,Åe°->
«me
, 
rv
);

2799 
	`ab‹t
();

2803 
	}
}

2806 
	$ã°_mëhod_°r
 ()

2808 
	`as£π
(0 =
	`°rcmp
("GET", 
	`hâp_mëhod_°r
(
HTTP_GET
)));

2809 
	`as£π
(0 =
	`°rcmp
("<unknown>", 
	`hâp_mëhod_°r
(1337)));

2810 
	}
}

2813 
	$ã°_mesßge
 (c⁄° 
mesßge
 *message)

2815 
size_t
 
øw_Àn
 = 
	`°æí
(
mesßge
->
øw
);

2816 
size_t
 
msg1Àn
;

2817 
msg1Àn
 = 0; msg1À¿< 
øw_Àn
; msg1len++) {

2818 
	`∑r£r_öô
(
mesßge
->
ty≥
);

2820 
size_t
 
ªad
;

2821 c⁄° *
msg1
 = 
mesßge
->
øw
;

2822 c⁄° *
msg2
 = 
msg1
 + 
msg1Àn
;

2823 
size_t
 
msg2Àn
 = 
øw_Àn
 - 
msg1Àn
;

2825 i‡(
msg1Àn
) {

2826 
ªad
 = 
	`∑r£
(
msg1
, 
msg1Àn
);

2828 i‡(
mesßge
->
upgøde
 && 
∑r£r
->upgrade) {

2829 
mesßges
[
num_mesßges
 - 1].
upgøde
 = 
msg1
 + 
ªad
;

2830 
ã°
;

2833 i‡(
ªad
 !
msg1Àn
) {

2834 
	`¥öt_îr‹
(
msg1
, 
ªad
);

2835 
	`ab‹t
();

2840 
ªad
 = 
	`∑r£
(
msg2
, 
msg2Àn
);

2842 i‡(
mesßge
->
upgøde
 && 
∑r£r
->upgrade) {

2843 
mesßges
[
num_mesßges
 - 1].
upgøde
 = 
msg2
 + 
ªad
;

2844 
ã°
;

2847 i‡(
ªad
 !
msg2Àn
) {

2848 
	`¥öt_îr‹
(
msg2
, 
ªad
);

2849 
	`ab‹t
();

2852 
ªad
 = 
	`∑r£
(
NULL
, 0);

2854 i‡(
ªad
 != 0) {

2855 
	`¥öt_îr‹
(
mesßge
->
øw
, 
ªad
);

2856 
	`ab‹t
();

2859 
ã°
:

2861 i‡(
num_mesßges
 != 1) {

2862 
	`¥ötf
("\n***Çum_mesßge†!1á·îÅe°ög '%s' ***\n\n", 
mesßge
->
«me
);

2863 
	`ab‹t
();

2866 if(!
	`mesßge_eq
(0, 
mesßge
)Ë
	`ab‹t
();

2868 
	`∑r£r_‰ì
();

2870 
	}
}

2873 
	$ã°_mesßge_cou¡_body
 (c⁄° 
mesßge
 *message)

2875 
	`∑r£r_öô
(
mesßge
->
ty≥
);

2877 
size_t
 
ªad
;

2878 
size_t
 
l
 = 
	`°æí
(
mesßge
->
øw
);

2879 
size_t
 
i
, 
t‹ód
;

2880 
size_t
 
chunk
 = 4024;

2882 
i
 = 0; i < 
l
; i+
chunk
) {

2883 
t‹ód
 = 
	`MIN
(
l
-
i
, 
chunk
);

2884 
ªad
 = 
	`∑r£_cou¡_body
(
mesßge
->
øw
 + 
i
, 
t‹ód
);

2885 i‡(
ªad
 !
t‹ód
) {

2886 
	`¥öt_îr‹
(
mesßge
->
øw
, 
ªad
);

2887 
	`ab‹t
();

2892 
ªad
 = 
	`∑r£_cou¡_body
(
NULL
, 0);

2893 i‡(
ªad
 != 0) {

2894 
	`¥öt_îr‹
(
mesßge
->
øw
, 
ªad
);

2895 
	`ab‹t
();

2898 i‡(
num_mesßges
 != 1) {

2899 
	`¥ötf
("\n***Çum_mesßge†!1á·îÅe°ög '%s' ***\n\n", 
mesßge
->
«me
);

2900 
	`ab‹t
();

2903 if(!
	`mesßge_eq
(0, 
mesßge
)Ë
	`ab‹t
();

2905 
	`∑r£r_‰ì
();

2906 
	}
}

2909 
	$ã°_sim∂e
 (c⁄° *
buf
, 
hâp_î∫o
 
îr_ex≥˘ed
)

2911 
	`∑r£r_öô
(
HTTP_REQUEST
);

2913 
size_t
 
∑r£d
;

2914 
∑ss
;

2915 
hâp_î∫o
 
îr
;

2917 
∑r£d
 = 
	`∑r£
(
buf
, 
	`°æí
(buf));

2918 
∑ss
 = (
∑r£d
 =
	`°æí
(
buf
));

2919 
îr
 = 
	`HTTP_PARSER_ERRNO
(
∑r£r
);

2920 
∑r£d
 = 
	`∑r£
(
NULL
, 0);

2921 
∑ss
 &(
∑r£d
 == 0);

2923 
	`∑r£r_‰ì
();

2928 #i‡
HTTP_PARSER_STRICT


2929 i‡(
îr_ex≥˘ed
 !
îr
 &&Éº_ex≥˘ed !
HPE_OK
 &&Éº !
HPE_STRICT
) {

2931 i‡(
îr_ex≥˘ed
 !
îr
) {

2933 
	`Ârötf
(
°dîr
, "\n***Åest_simpleÉxpected %s, but saw %s ***\n\n%s\n",

2934 
	`hâp_î∫o_«me
(
îr_ex≥˘ed
), hâp_î∫o_«me(
îr
), 
buf
);

2935 
	`ab‹t
();

2937 
	}
}

2940 
	$ã°_hódî_ovîÊow_îr‹
 (
ªq
)

2942 
hâp_∑r£r
 
∑r£r
;

2943 
	`hâp_∑r£r_öô
(&
∑r£r
, 
ªq
 ? 
HTTP_REQUEST
 : 
HTTP_RESPONSE
);

2944 
size_t
 
∑r£d
;

2945 c⁄° *
buf
;

2946 
buf
 = 
ªq
 ? "GET / HTTP/1.1\r\n" : "HTTP/1.0 200 OK\r\n";

2947 
∑r£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, 
buf
, 
	`°æí
(buf));

2948 
	`as£π
(
∑r£d
 =
	`°æí
(
buf
));

2950 
buf
 = "header-key: header-value\r\n";

2951 
size_t
 
buÊí
 = 
	`°æí
(
buf
);

2953 
i
;

2954 
i
 = 0; i < 10000; i++) {

2955 
∑r£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, 
buf
, 
buÊí
);

2956 i‡(
∑r£d
 !
buÊí
) {

2958 
	`as£π
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
Ë=
HPE_HEADER_OVERFLOW
);

2963 
	`Ârötf
(
°dîr
, "\n*** ErrorÉxpected butÇone in header overflowÅest ***\n");

2964 
	`ab‹t
();

2965 
	}
}

2968 
	$ã°_c⁄ã¡_Àngth_ovîÊow
 (c⁄° *
buf
, 
size_t
 
buÊí
, 
ex≥˘_ok
)

2970 
hâp_∑r£r
 
∑r£r
;

2971 
	`hâp_∑r£r_öô
(&
∑r£r
, 
HTTP_RESPONSE
);

2972 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, 
buf
, 
buÊí
);

2974 i‡(
ex≥˘_ok
)

2975 
	`as£π
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
Ë=
HPE_OK
);

2977 
	`as£π
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
Ë=
HPE_INVALID_CONTENT_LENGTH
);

2978 
	}
}

2981 
	$ã°_hódî_c⁄ã¡_Àngth_ovîÊow_îr‹
 ()

2983 
	#X
(
size
) \

2986 "\r\n"

	)

2987 c⁄° 
a
[] = 
	`X
(1844674407370955160);

2988 c⁄° 
b
[] = 
	`X
(18446744073709551615);

2989 c⁄° 
c
[] = 
	`X
(18446744073709551616);

2990 #unde‡
X


2991 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
a
, (a) - 1, 1);

2992 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
b
, (b) - 1, 0);

2993 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
c
, (c) - 1, 0);

2994 
	}
}

2997 
	$ã°_chunk_c⁄ã¡_Àngth_ovîÊow_îr‹
 ()

2999 
	#X
(
size
) \

3004 "..."

	)

3005 c⁄° 
a
[] = 
	`X
(
FFFFFFFFFFFFFFE
);

3006 c⁄° 
b
[] = 
	`X
(
FFFFFFFFFFFFFFFF
);

3007 c⁄° 
c
[] = 
	`X
(10000000000000000);

3008 #unde‡
X


3009 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
a
, (a) - 1, 1);

3010 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
b
, (b) - 1, 0);

3011 
	`ã°_c⁄ã¡_Àngth_ovîÊow
(
c
, (c) - 1, 0);

3012 
	}
}

3015 
	$ã°_no_ovîÊow_l⁄g_body
 (
ªq
, 
size_t
 
Àngth
)

3017 
hâp_∑r£r
 
∑r£r
;

3018 
	`hâp_∑r£r_öô
(&
∑r£r
, 
ªq
 ? 
HTTP_REQUEST
 : 
HTTP_RESPONSE
);

3019 
size_t
 
∑r£d
;

3020 
size_t
 
i
;

3021 
buf1
[3000];

3022 
size_t
 
buf1Àn
 = 
	`•rötf
(
buf1
, "%s\r\nConnection: Keep-Alive\r\nContent-Length: %lu\r\n\r\n",

3023 
ªq
 ? "POST / HTTP/1.0" : "HTTP/1.0 200 OK", ()
Àngth
);

3024 
∑r£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, 
buf1
, 
buf1Àn
);

3025 i‡(
∑r£d
 !
buf1Àn
)

3026 
îr
;

3028 
i
 = 0; i < 
Àngth
; i++) {

3029 
foo
 = 'a';

3030 
∑r£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, &
foo
, 1);

3031 i‡(
∑r£d
 != 1)

3032 
îr
;

3035 
∑r£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs_nuŒ
, 
buf1
, 
buf1Àn
);

3036 i‡(
∑r£d
 !
buf1Àn
Ë
îr
;

3039 
îr
:

3040 
	`Ârötf
(
°dîr
,

3042 
ªq
 ? "REQUEST" : "RESPONSE",

3043 ()
Àngth
);

3044 
	`ab‹t
();

3045 
	}
}

3048 
	$ã°_mu…ùÀ3
 (c⁄° 
mesßge
 *
r1
, c⁄° mesßgê*
r2
, c⁄° mesßgê*
r3
)

3050 
mesßge_cou¡
 = 
	`cou¡_∑r£d_mesßges
(3, 
r1
, 
r2
, 
r3
);

3052 
tŸÆ
[ 
	`°æí
(
r1
->
øw
)

3053 + 
	`°æí
(
r2
->
øw
)

3054 + 
	`°æí
(
r3
->
øw
)

3057 
tŸÆ
[0] = '\0';

3059 
	`°rˇt
(
tŸÆ
, 
r1
->
øw
);

3060 
	`°rˇt
(
tŸÆ
, 
r2
->
øw
);

3061 
	`°rˇt
(
tŸÆ
, 
r3
->
øw
);

3063 
	`∑r£r_öô
(
r1
->
ty≥
);

3065 
size_t
 
ªad
;

3067 
ªad
 = 
	`∑r£
(
tŸÆ
, 
	`°æí
(total));

3069 i‡(
∑r£r
->
upgøde
) {

3070 
	`upgøde_mesßge_fix
(
tŸÆ
, 
ªad
, 3, 
r1
, 
r2
, 
r3
);

3071 
ã°
;

3074 i‡(
ªad
 !
	`°æí
(
tŸÆ
)) {

3075 
	`¥öt_îr‹
(
tŸÆ
, 
ªad
);

3076 
	`ab‹t
();

3079 
ªad
 = 
	`∑r£
(
NULL
, 0);

3081 i‡(
ªad
 != 0) {

3082 
	`¥öt_îr‹
(
tŸÆ
, 
ªad
);

3083 
	`ab‹t
();

3086 
ã°
:

3088 i‡(
mesßge_cou¡
 !
num_mesßges
) {

3089 
	`Ârötf
(
°dîr
, "\n\n*** P¨£∏didn'à£ê3 mesßge†⁄ly %d *** \n", 
num_mesßges
);

3090 
	`ab‹t
();

3093 i‡(!
	`mesßge_eq
(0, 
r1
)Ë
	`ab‹t
();

3094 i‡(
mesßge_cou¡
 > 1 && !
	`mesßge_eq
(1, 
r2
)Ë
	`ab‹t
();

3095 i‡(
mesßge_cou¡
 > 2 && !
	`mesßge_eq
(2, 
r3
)Ë
	`ab‹t
();

3097 
	`∑r£r_‰ì
();

3098 
	}
}

3105 
	$ã°_sˇn
 (c⁄° 
mesßge
 *
r1
, c⁄° mesßgê*
r2
, c⁄° mesßgê*
r3
)

3107 
tŸÆ
[80*1024] = "\0";

3108 
buf1
[80*1024] = "\0";

3109 
buf2
[80*1024] = "\0";

3110 
buf3
[80*1024] = "\0";

3112 
	`°rˇt
(
tŸÆ
, 
r1
->
øw
);

3113 
	`°rˇt
(
tŸÆ
, 
r2
->
øw
);

3114 
	`°rˇt
(
tŸÆ
, 
r3
->
øw
);

3116 
size_t
 
ªad
;

3118 
tŸÆ_Àn
 = 
	`°æí
(
tŸÆ
);

3120 
tŸÆ_›s
 = 2 * (
tŸÆ_Àn
 - 1) * (total_len - 2) / 2;

3121 
›s
 = 0 ;

3123 
size_t
 
buf1_Àn
, 
buf2_Àn
, 
buf3_Àn
;

3124 
mesßge_cou¡
 = 
	`cou¡_∑r£d_mesßges
(3, 
r1
, 
r2
, 
r3
);

3126 
i
,
j
,
ty≥_bŸh
;

3127 
ty≥_bŸh
 = 0;Åype_both < 2;Åype_both ++ ) {

3128 
j
 = 2; j < 
tŸÆ_Àn
; j ++ ) {

3129 
i
 = 1; i < 
j
; i ++ ) {

3131 i‡(
›s
 % 1000 == 0) {

3132 
	`¥ötf
("\b\b\b\b%3.0f%%", 100 * ()
›s
 /()
tŸÆ_›s
);

3133 
	`fÊush
(
°dout
);

3135 
›s
 += 1;

3137 
	`∑r£r_öô
(
ty≥_bŸh
 ? 
HTTP_BOTH
 : 
r1
->
ty≥
);

3139 
buf1_Àn
 = 
i
;

3140 
	`°æn˝y
(
buf1
, (buf1), 
tŸÆ
, 
buf1_Àn
);

3141 
buf1
[
buf1_Àn
] = 0;

3143 
buf2_Àn
 = 
j
 - 
i
;

3144 
	`°æn˝y
(
buf2
, (
buf1
), 
tŸÆ
+
i
, 
buf2_Àn
);

3145 
buf2
[
buf2_Àn
] = 0;

3147 
buf3_Àn
 = 
tŸÆ_Àn
 - 
j
;

3148 
	`°æn˝y
(
buf3
, (
buf1
), 
tŸÆ
+
j
, 
buf3_Àn
);

3149 
buf3
[
buf3_Àn
] = 0;

3151 
ªad
 = 
	`∑r£
(
buf1
, 
buf1_Àn
);

3153 i‡(
∑r£r
->
upgøde
Ë
ã°
;

3155 i‡(
ªad
 !
buf1_Àn
) {

3156 
	`¥öt_îr‹
(
buf1
, 
ªad
);

3157 
îr‹
;

3160 
ªad
 +
	`∑r£
(
buf2
, 
buf2_Àn
);

3162 i‡(
∑r£r
->
upgøde
Ë
ã°
;

3164 i‡(
ªad
 !
buf1_Àn
 + 
buf2_Àn
) {

3165 
	`¥öt_îr‹
(
buf2
, 
ªad
);

3166 
îr‹
;

3169 
ªad
 +
	`∑r£
(
buf3
, 
buf3_Àn
);

3171 i‡(
∑r£r
->
upgøde
Ë
ã°
;

3173 i‡(
ªad
 !
buf1_Àn
 + 
buf2_Àn
 + 
buf3_Àn
) {

3174 
	`¥öt_îr‹
(
buf3
, 
ªad
);

3175 
îr‹
;

3178 
	`∑r£
(
NULL
, 0);

3180 
ã°
:

3181 i‡(
∑r£r
->
upgøde
) {

3182 
	`upgøde_mesßge_fix
(
tŸÆ
, 
ªad
, 3, 
r1
, 
r2
, 
r3
);

3185 i‡(
mesßge_cou¡
 !
num_mesßges
) {

3186 
	`Ârötf
(
°dîr
, "\n\nParser didn't see %d messages only %d\n",

3187 
mesßge_cou¡
, 
num_mesßges
);

3188 
îr‹
;

3191 i‡(!
	`mesßge_eq
(0, 
r1
)) {

3192 
	`Ârötf
(
°dîr
, "\n\nError matching messages[0] inÅest_scan.\n");

3193 
îr‹
;

3196 i‡(
mesßge_cou¡
 > 1 && !
	`mesßge_eq
(1, 
r2
)) {

3197 
	`Ârötf
(
°dîr
, "\n\nError matching messages[1] inÅest_scan.\n");

3198 
îr‹
;

3201 i‡(
mesßge_cou¡
 > 2 && !
	`mesßge_eq
(2, 
r3
)) {

3202 
	`Ârötf
(
°dîr
, "\n\nError matching messages[2] inÅest_scan.\n");

3203 
îr‹
;

3206 
	`∑r£r_‰ì
();

3210 
	`puts
("\b\b\b\b100%");

3213 
îr‹
:

3214 
	`Ârötf
(
°dîr
, "i=%d j=%d\n", 
i
, 
j
);

3215 
	`Ârötf
(
°dîr
, "buf1 (%uË%s\n\n", ()
buf1_Àn
, 
buf1
);

3216 
	`Ârötf
(
°dîr
, "buf2 (%uË%s\n\n", ()
buf2_Àn
 , 
buf2
);

3217 
	`Ârötf
(
°dîr
, "buf3 (%uË%s\n", ()
buf3_Àn
, 
buf3
);

3218 
	`ab‹t
();

3219 
	}
}

3224 
	$¸óã_œrge_chunked_mesßge
 (
body_size_ö_kb
, c⁄° * 
hódîs
)

3226 
i
;

3227 
size_t
 
wrŸe
 = 0;

3228 
size_t
 
hódîs_Àn
 = 
	`°æí
(
hódîs
);

3229 
size_t
 
bufsize
 = 
hódîs_Àn
 + (5+1024+2)*
body_size_ö_kb
 + 6;

3230 * 
buf
 = 
	`mÆloc
(
bufsize
);

3232 
	`mem˝y
(
buf
, 
hódîs
, 
hódîs_Àn
);

3233 
wrŸe
 +
hódîs_Àn
;

3235 
i
 = 0; i < 
body_size_ö_kb
; i++) {

3237 
	`mem˝y
(
buf
 + 
wrŸe
, "400\r\n", 5);

3238 
wrŸe
 += 5;

3239 
	`mem£t
(
buf
 + 
wrŸe
, 'C', 1024);

3240 
wrŸe
 += 1024;

3241 
	`°r˝y
(
buf
 + 
wrŸe
, "\r\n");

3242 
wrŸe
 += 2;

3245 
	`mem˝y
(
buf
 + 
wrŸe
, "0\r\n\r\n", 6);

3246 
wrŸe
 += 6;

3247 
	`as£π
(
wrŸe
 =
bufsize
);

3249  
buf
;

3250 
	}
}

3255 
	$ã°_mesßge_∑u£
 (c⁄° 
mesßge
 *
msg
)

3257 *
buf
 = (*Ë
msg
->
øw
;

3258 
size_t
 
buÊí
 = 
	`°æí
(
msg
->
øw
);

3259 
size_t
 
ƒód
;

3261 
	`∑r£r_öô
(
msg
->
ty≥
);

3264 
ƒód
 = 
	`∑r£_∑u£
(
buf
, 
buÊí
);

3268 i‡(
mesßges
[0].
mesßge_com∂ëe_cb_ˇŒed
 &&

3269 
msg
->
upgøde
 &&

3270 
∑r£r
->
upgøde
) {

3271 
mesßges
[0].
upgøde
 = 
buf
 + 
ƒód
;

3272 
ã°
;

3275 i‡(
ƒód
 < 
buÊí
) {

3278 i‡(
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_STRICT
) {

3279 
	`∑r£r_‰ì
();

3283 
	`as£π
 (
	`HTTP_PARSER_ERRNO
(
∑r£r
Ë=
HPE_PAUSED
);

3286 
buf
 +
ƒód
;

3287 
buÊí
 -
ƒód
;

3288 
	`hâp_∑r£r_∑u£
(
∑r£r
, 0);

3289 } 
buÊí
 > 0);

3291 
ƒód
 = 
	`∑r£_∑u£
(
NULL
, 0);

3292 
	`as£π
 (
ƒód
 == 0);

3294 
ã°
:

3295 i‡(
num_mesßges
 != 1) {

3296 
	`¥ötf
("\n***Çum_mesßge†!1á·îÅe°ög '%s' ***\n\n", 
msg
->
«me
);

3297 
	`ab‹t
();

3300 if(!
	`mesßge_eq
(0, 
msg
)Ë
	`ab‹t
();

3302 
	`∑r£r_‰ì
();

3303 
	}
}

3306 
	$maö
 ()

3308 
∑r£r
 = 
NULL
;

3309 
i
, 
j
, 
k
;

3310 
ªque°_cou¡
;

3311 
ª•⁄£_cou¡
;

3312 
vîsi⁄
;

3313 
maj‹
;

3314 
mö‹
;

3315 
∑tch
;

3317 
vîsi⁄
 = 
	`hâp_∑r£r_vîsi⁄
();

3318 
maj‹
 = (
vîsi⁄
 >> 16) & 255;

3319 
mö‹
 = (
vîsi⁄
 >> 8) & 255;

3320 
∑tch
 = 
vîsi⁄
 & 255;

3321 
	`¥ötf
("hâp_∑r£∏v%u.%u.%u (0x%06lx)\n", 
maj‹
, 
mö‹
, 
∑tch
, 
vîsi⁄
);

3323 
	`¥ötf
("sizeof(hâp_∑r£rË%u\n", ()(
hâp_∑r£r
));

3325 
ªque°_cou¡
 = 0; 
ªque°s
[ªque°_cou¡].
«me
;Ñequest_count++);

3326 
ª•⁄£_cou¡
 = 0; 
ª•⁄£s
[ª•⁄£_cou¡].
«me
;Ñesponse_count++);

3329 
	`ã°_¥e£rve_d©a
();

3330 
	`ã°_∑r£_uæ
();

3331 
	`ã°_mëhod_°r
();

3335 
	`ã°_hódî_ovîÊow_îr‹
(
HTTP_REQUEST
);

3336 
	`ã°_no_ovîÊow_l⁄g_body
(
HTTP_REQUEST
, 1000);

3337 
	`ã°_no_ovîÊow_l⁄g_body
(
HTTP_REQUEST
, 100000);

3339 
	`ã°_hódî_ovîÊow_îr‹
(
HTTP_RESPONSE
);

3340 
	`ã°_no_ovîÊow_l⁄g_body
(
HTTP_RESPONSE
, 1000);

3341 
	`ã°_no_ovîÊow_l⁄g_body
(
HTTP_RESPONSE
, 100000);

3343 
	`ã°_hódî_c⁄ã¡_Àngth_ovîÊow_îr‹
();

3344 
	`ã°_chunk_c⁄ã¡_Àngth_ovîÊow_îr‹
();

3348 
i
 = 0; i < 
ª•⁄£_cou¡
; i++) {

3349 
	`ã°_mesßge
(&
ª•⁄£s
[
i
]);

3352 
i
 = 0; i < 
ª•⁄£_cou¡
; i++) {

3353 
	`ã°_mesßge_∑u£
(&
ª•⁄£s
[
i
]);

3356 
i
 = 0; i < 
ª•⁄£_cou¡
; i++) {

3357 i‡(!
ª•⁄£s
[
i
].
should_kìp_Æive
) ;

3358 
j
 = 0; j < 
ª•⁄£_cou¡
; j++) {

3359 i‡(!
ª•⁄£s
[
j
].
should_kìp_Æive
) ;

3360 
k
 = 0; k < 
ª•⁄£_cou¡
; k++) {

3361 
	`ã°_mu…ùÀ3
(&
ª•⁄£s
[
i
], &ª•⁄£s[
j
], &ª•⁄£s[
k
]);

3366 
	`ã°_mesßge_cou¡_body
(&
ª•⁄£s
[
NO_HEADERS_NO_BODY_404
]);

3367 
	`ã°_mesßge_cou¡_body
(&
ª•⁄£s
[
TRAILING_SPACE_ON_CHUNKED_BODY
]);

3371 * 
msg
 = 
	`¸óã_œrge_chunked_mesßge
(31337,

3376 
mesßge
 
œrge_chunked
 =

3377 {.
«me
= "large chunked"

3378 ,.
ty≥

HTTP_RESPONSE


3379 ,.
øw

msg


3380 ,.
should_kìp_Æive

FALSE


3381 ,.
mesßge_com∂ëe_⁄_eof

FALSE


3382 ,.
hâp_maj‹
= 1

3383 ,.
hâp_mö‹
= 0

3384 ,.
°©us_code
= 200

3385 ,.
ª•⁄£_°©us
= "OK"

3386 ,.
num_hódîs
= 2

3387 ,.
hódîs
=

3391 ,.
body_size
= 31337*1024

3393 
	`ã°_mesßge_cou¡_body
(&
œrge_chunked
);

3394 
	`‰ì
(
msg
);

3399 
	`¥ötf
("response scan 1/2 ");

3400 
	`ã°_sˇn
–&
ª•⁄£s
[
TRAILING_SPACE_ON_CHUNKED_BODY
]

3401 , &
ª•⁄£s
[
NO_BODY_HTTP10_KA_204
]

3402 , &
ª•⁄£s
[
NO_REASON_PHRASE
]

3405 
	`¥ötf
("response scan 2/2 ");

3406 
	`ã°_sˇn
–&
ª•⁄£s
[
BONJOUR_MADAME_FR
]

3407 , &
ª•⁄£s
[
UNDERSTORE_HEADER_KEY
]

3408 , &
ª•⁄£s
[
NO_CARRIAGE_RET
]

3411 
	`puts
("responses okay");

3416 
	`ã°_sim∂e
("GET / HTP/1.1\r\n\r\n", 
HPE_INVALID_VERSION
);

3419 
	`ã°_sim∂e
("GET / HTTP/1.1\r\n"

3424 
HPE_OK
);

3426 c⁄° *
Æl_mëhods
[] = {

3452 c⁄° **
this_mëhod
;

3453 
this_mëhod
 = 
Æl_mëhods
; *this_method;Åhis_method++) {

3454 
buf
[200];

3455 
	`•rötf
(
buf
, "%†/ HTTP/1.1\r\n\r\n", *
this_mëhod
);

3456 
	`ã°_sim∂e
(
buf
, 
HPE_OK
);

3459 c⁄° *
bad_mëhods
[] = {

3473 
this_mëhod
 = 
bad_mëhods
; *this_method;Åhis_method++) {

3474 
buf
[200];

3475 
	`•rötf
(
buf
, "%†/ HTTP/1.1\r\n\r\n", *
this_mëhod
);

3476 
	`ã°_sim∂e
(
buf
, 
HPE_INVALID_METHOD
);

3479 c⁄° *
dumbfuck2
 =

3514 
	`ã°_sim∂e
(
dumbfuck2
, 
HPE_OK
);

3522 c⁄° *
bad_gë_no_hódîs_no_body
 = "GET /bad_get_no_headers_no_body/world HTTP/1.1\r\n"

3526 
	`ã°_sim∂e
(
bad_gë_no_hódîs_no_body
, 0);

3532 
i
 = 0; 
ªque°s
[i].
«me
; i++) {

3533 
	`ã°_mesßge
(&
ªque°s
[
i
]);

3536 
i
 = 0; i < 
ªque°_cou¡
; i++) {

3537 
	`ã°_mesßge_∑u£
(&
ªque°s
[
i
]);

3540 
i
 = 0; i < 
ªque°_cou¡
; i++) {

3541 i‡(!
ªque°s
[
i
].
should_kìp_Æive
) ;

3542 
j
 = 0; j < 
ªque°_cou¡
; j++) {

3543 i‡(!
ªque°s
[
j
].
should_kìp_Æive
) ;

3544 
k
 = 0; k < 
ªque°_cou¡
; k++) {

3545 
	`ã°_mu…ùÀ3
(&
ªque°s
[
i
], &ªque°s[
j
], &ªque°s[
k
]);

3550 
	`¥ötf
("request scan 1/4 ");

3551 
	`ã°_sˇn
–&
ªque°s
[
GET_NO_HEADERS_NO_BODY
]

3552 , &
ªque°s
[
GET_ONE_HEADER_NO_BODY
]

3553 , &
ªque°s
[
GET_NO_HEADERS_NO_BODY
]

3556 
	`¥ötf
("request scan 2/4 ");

3557 
	`ã°_sˇn
–&
ªque°s
[
POST_CHUNKED_ALL_YOUR_BASE
]

3558 , &
ªque°s
[
POST_IDENTITY_BODY_WORLD
]

3559 , &
ªque°s
[
GET_FUNKY_CONTENT_LENGTH
]

3562 
	`¥ötf
("request scan 3/4 ");

3563 
	`ã°_sˇn
–&
ªque°s
[
TWO_CHUNKS_MULT_ZERO_END
]

3564 , &
ªque°s
[
CHUNKED_W_TRAILING_HEADERS
]

3565 , &
ªque°s
[
CHUNKED_W_BULLSHIT_AFTER_LENGTH
]

3568 
	`¥ötf
("request scan 4/4 ");

3569 
	`ã°_sˇn
–&
ªque°s
[
QUERY_URL_WITH_QUESTION_MARK_GET
]

3570 , &
ªque°s
[
PREFIX_NEWLINE_GET
 ]

3571 , &
ªque°s
[
CONNECT_REQUEST
]

3574 
	`puts
("requests okay");

3577 
	}
}

	@/home/kartik/nwe/test/samples/p2.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
uöt32_t
 
	$√xtPowîOf2
(
uöt32_t
 
n
)

5 
uöt32_t
 
ªsu…
 = 
n
 - 1;

6 
ªsu…
 |= (result >> 1);

7 
ªsu…
 |= (result >> 2);

8 
ªsu…
 |= (result >> 4);

9 
ªsu…
 |= (result >> 8);

10 
ªsu…
 |= (result >> 16);

11 
ªsu…
++;

12  (
ªsu…
 == 0)?1:result;

13 
	}
}

14 
	$maö
()

16 
	`¥ötf
("\n%d\n", 
	`√xtPowîOf2
(5));

17 
	`¥ötf
("\n%d\n", 
	`√xtPowîOf2
(2));

18 
	`¥ötf
("\n%d\n", 
	`√xtPowîOf2
(19));

19 
	`¥ötf
("\n%d\n", 
	`√xtPowîOf2
(33));

20 
	`¥ötf
("\n%d\n", 
	`√xtPowîOf2
(0));

22 
	}
}

	@/home/kartik/nwe/test/samples/parser_http_test.c

28 
	~"hâp_∑r£r.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<as£π.h
>

37 
	gEXPECTED_HTTP_REQUEST
[] =

53 
	gmsg2
[] =

59 
	gEXPECTED_RECV_LEN
;

61 
	gRESPONSE
[] =

71 
size_t
 
	gRESPONSE_LEN
;

73 
	$⁄_mesßge_begö
(
hâp_∑r£r
* 
_
) {

74 ()
_
;

75 
	`Ârötf
(
°dîr
, "\n***MESSAGE BEGIN***\n\n");

77 
	}
}

79 
	$⁄_hódîs_com∂ëe
(
hâp_∑r£r
* 
_
) {

80 ()
_
;

81 
	`Ârötf
(
°dîr
, "\n***HEADERS COMPLETE***\n\n");

83 
	}
}

85 
	$⁄_mesßge_com∂ëe
(
hâp_∑r£r
* 
p
) {

86 
	`Ârötf
(
°dîr
, "\n***MESSAGE COMPLETE***\n\n");

87 
	`hâp_∑r£r_∑u£
(
p
, 1);

89 
	}
}

91 
	$⁄_uæ
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

92 ()
_
;

93 
	`Ârötf
(
°dîr
, "Uæ: %.*s\n", ()
Àngth
, 
©
);

95 
	}
}

97 
	$⁄_°©us
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

98 ()
_
;

99 
	`Ârötf
(
°dîr
, "Sètus: %.*s\n", ()
Àngth
, 
©
);

101 
	}
}

103 
	$⁄_hódî_fõld
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

104 ()
_
;

105 
	`Ârötf
(
°dîr
, "Hódî fõld: %.*s\n", ()
Àngth
, 
©
);

107 
	}
}

109 
	$⁄_hódî_vÆue
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

110 ()
_
;

111 
	`Ârötf
(
°dîr
, "Hódî vÆue: %.*s\n", ()
Àngth
, 
©
);

113 
	}
}

115 
	$⁄_body
(
hâp_∑r£r
* 
_
, c⁄° * 
©
, 
size_t
 
Àngth
) {

116 ()
_
;

117 
	`Ârötf
(
°dîr
, "Body: %.*s\n", ()
Àngth
, 
©
);

119 
	}
}

122 
	$maö
(
¨gc
, * 
¨gv
[]) {

124 
hâp_∑r£r_£âögs
 
£âögs
;

125 
	`mem£t
(&
£âögs
, 0, (settings));

127 
£âögs
.
⁄_mesßge_begö
 = on_message_begin;

128 
£âögs
.
⁄_uæ
 = on_url;

129 
£âögs
.
⁄_°©us
 = on_status;

130 
£âögs
.
⁄_hódî_fõld
 = on_header_field;

131 
£âögs
.
⁄_hódî_vÆue
 = on_header_value;

132 
£âögs
.
⁄_hódîs_com∂ëe
 = on_headers_complete;

133 
£âögs
.
⁄_body
 = on_body;

134 
£âögs
.
⁄_mesßge_com∂ëe
 = on_message_complete;

136 
hâp_∑r£r
 
∑r£r
;

137 
	`hâp_∑r£r_öô
(&
∑r£r
, 
HTTP_REQUEST
);

138 
EXPECTED_RECV_LEN
 = (
EXPECTED_HTTP_REQUEST
) - 1;

139 
msg2_Àn
 = (
msg2
) - 1;

141 
size_t
 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs
, 
EXPECTED_HTTP_REQUEST
, 
EXPECTED_RECV_LEN
);

142 i‡(
∑r£r
.
upgøde
) {

143 
	`Ârötf
(
°dîr
, "\nUpgrade is set\n");

144 
	`as£π
(0);

145 } i‡(
≈¨£d
 !(
size_t
)
EXPECTED_RECV_LEN
) {

146 
	`Ârötf
(
°dîr
,

147 "Eº‹:Ç∑r£d = %lu, %†(%s)\n", 
≈¨£d
,

148 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

149 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

150 i‡(
	`HTTP_PARSER_ERRNO
(&
∑r£r
Ë=
HPE_PAUSED
) {

151 
	`Ârötf
(
°dîr
, "\nTheÖarser isÖaused\n");

153  
EXIT_FAILURE
;

156 
≈¨£d
 = 
	`hâp_∑r£r_execuã
(&
∑r£r
, &
£âögs
, 
msg2
, 
msg2_Àn
);

158 i‡(
≈¨£d
 !(
size_t
)
msg2_Àn
) {

159 
	`Ârötf
(
°dîr
,

161 
	`hâp_î∫o_des¸ùti⁄
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)),

162 
	`hâp_î∫o_«me
(
	`HTTP_PARSER_ERRNO
(&
∑r£r
)));

163  
EXIT_FAILURE
;

165  
EXIT_SUCCESS
;

166 
	}
}

	@/home/kartik/nwe/test/samples/sizeof.c

1 
	~<°döt.h
>

2 
	~<°dio.h
>

3 
	#NUM_ADDITIONAL_REGS
 10

	)

4 
	sribs_c⁄ãxt
 {

6 #i‡
deföed
(
__x86_64__
Ë|| deföed (
__i386__
)

7 
uöçå_t
 
	m°ack_poöãr_ªg
;

8 
uöçå_t
 
	m∑ª¡_c⁄ãxt_ªg
;

9 
uöçå_t
 
	maddôi⁄Æ_ªg
[
NUM_ADDITIONAL_REGS
];

10 
ribs_c⁄ãxt
 *
	m√xt_‰ì
;

13 
uöt32_t
 
	mribify_memÆloc_ªfcou¡
;

15 
	mª£rved
[];

17 
	$maö
()

19 
	`Ârötf
(
°dîr
, "\nsizeof(°ru˘Ñibs_c⁄ãxtË%lu\n", (
ribs_c⁄ãxt
));

21 
	}
}

	@/home/kartik/nwe/test/samples/timer_test.c

3 
	~<°dlib.h
>

4 
	~<°dio.h
>

5 
	~<°dboﬁ.h
>

6 
	~<time.h
>

7 
	~<as£π.h
>

8 
	~<°döt.h
>

9 
	~<°rög.h
>

10 
	~"Timî.h
"

11 
	~"ev.h
"

12 
	~"£rvî.h
"

14 
	#MAX_TMRS
 100000

	)

15 
	$timîcb
(

16 
Ró˘‹
* 
ªa˘‹
,

17 
Timî
* 
tmr
,

18 * 
˘xt
,

19 
ªvíts


22 (Ë
ªa˘‹
;

23 (Ë
tmr
;

24 
	`as£π
(
ªvíts
 & 
EV_TIMER
);

25 
	`Ârötf
(
°dîr
, "\nTimîCB invoked f‹Åm∏%d\n", ()(
öçå_t
Ë
˘xt
);

26 
	`°¨tTimî
(
tmr
);

27 
	}
}

29 
	$maö
()

32 
ev_t°amp
 
x
 = 
	`ev_now
(
lo›
);

33 
	`Ârötf
(
°dîr
, "\¿x = %l‡™dÅimê%lu\n", 
x
, (Ë
	`time
(0));

35 
Ró˘‹
 
ªa˘‹
;

37 
ªa˘‹
.
lo›
 = 
	`ev_lo›_√w
(0);

38 i‡(
ªa˘‹
.
lo›
 =
NULL
) {

39 
	`Ârötf
(
°dîr
, "\nERRORÉv_loop_new() failed\n");

40 
	`exô
(-1);

42 
	`ev_£t_u£rd©a
(
ªa˘‹
.
lo›
, &reactor);

44 
	`öôTimîLi°M≠
(&(
ªa˘‹
.
timîs
));

45 
ªt
 = 
	`£tTimîLi°M≠
(&(
ªa˘‹
.
timîs
), 10);

46 i‡(
ªt
 != 0) {

47 
	`Ârötf
(
°dîr
, "\nERROR setTimerListMap() failed\n");

48 
	`exô
(-1);

51 
time•ec
 
waô_time
;

52 
	`mem£t
(&
waô_time
, 0, (
time•ec
));

53 
waô_time
.
tv_£c
 = 0;

54 
waô_time
.
tv_n£c
 = 1000000;

55 
x
 = 1;

56 
Timî
 
t
[
MAX_TMRS
];

57 
i
 = 0; i < 
MAX_TMRS
; i++) {

58 
ªt
 = 
	`öôTimî
(&
ªa˘‹
, &
t
[
i
], 
timîcb
, (*Ë(
öçå_t
Ëi, 
x
);

59 i‡(
ªt
 != 0) {

60 
	`Ârötf
(
°dîr
, "\nERROR initTimer() failed\n");

61 
	`exô
(-1);

63 
	`°¨tTimî
(&
t
[
i
]);

67 
boﬁ
 
rc
 = 
	`ev_run
(
ªa˘‹
.
lo›
, 0);

68 
	`Ârötf
(
°dîr
, "\nERRORÅhªadÑëu∫ög fromÉv_run(ËwôhÑëu∫ vÆuê%d %s:%d\n", 
rc
, 
__FILE__
, 
__LINE__
);

70 
	}
}

	@/home/kartik/nwe/test/samples/token.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~"Utûs.h
"

9 
	$¥öt
(c⁄° 
KVPP¨£r
* 
q∑øms
)

11 
size
 = 
q∑øms
->size;

12 
Off£tPaú
* 
kv∑ºay
 = 
q∑øms
->kvparray;

13 
i
 = 0;

14 * 
buf
 = 
q∑øms
->buf;

15 
i
 = 0; i < 
size
; i++) {

16 
Off£tPaú
* 
kvp
 = &(
kv∑ºay
[
i
]);

17 
	`Ârötf
(
°dîr
, "\n%s:%s\n", 
buf
 + 
kvp
->
key
, bu‡+ kvp->
vÆue
);

19 
	}
}

20 
	$maö
()

22 
buf1
[] = "";

23 
buf2
[] = "z=b & c= def & g = hakjdkjsk&a =b&c=def&g=hakjdkjska=b&c=def&g=hakjdkjska=b&c=def&g=hakjdkjsk&&&";

24 
buf3
[] = "á=b&c=";

25 
KVPP¨£r
 
q∑øms
;

26 
	`mem£t
(&
q∑øms
, 0, (
KVPP¨£r
));

27 
q∑øms
.
buf
 = 
buf2
;

28 
ªt
 = 
	`∑r£KVPBuf„r
(&
q∑øms
, '&', '=', 
åue
, 1);

29 i‡(
ªt
 != 0) {

30 
	`Ârötf
(
°dîr
, "\nparseKVPBuffer() failed\n");

32 
	`¥öt
(&
q∑øms
);

34 
q∑øms
.
buf
 = 
buf3
;

35 
ªt
 = 
	`∑r£KVPBuf„r
(&
q∑øms
, '&', '=', 
åue
, 1);

36 i‡(
ªt
 != 0) {

37 
	`Ârötf
(
°dîr
, "\nparseKVPBuffer() failed\n");

39 
	`¥öt
(&
q∑øms
);

42 
	}
}

	@/home/kartik/nwe/util/Utils.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<˘y≥.h
>

5 
	~<as£π.h
>

6 
	~<î∫o.h
>

7 
	~<time.h
>

8 
	~"Utûs.h
"

9 
	~"Eº.h
"

11 
	$s‹tKVP
(

12 c⁄° * 
l
,

13 c⁄° * 
r
,

14 * 
¨g


17 c⁄° 
Off£tPaú
* 
À·
 = (c⁄° Off£tPaú*Ë
l
;

18 c⁄° 
Off£tPaú
* 
right
 = (c⁄° Off£tPaú*Ë
r
;

19 c⁄° * 
buf
 = (c⁄° *Ë
¨g
;

20  
	`°rcmp
(
buf
 + 
À·
->
key
, bu‡+ 
right
->key);

21 
	}
}

23 
uöt32_t
 
	$√xtPowîOf2
(
uöt32_t
 
n
)

25 
uöt32_t
 
ªsu…
 = 
n
 - 1;

26 
ªsu…
 |= (result >> 1);

27 
ªsu…
 |= (result >> 2);

28 
ªsu…
 |= (result >> 4);

29 
ªsu…
 |= (result >> 8);

30 
ªsu…
 |= (result >> 16);

31 
ªsu…
++;

32  (
ªsu…
 == 0)?1:result;

33 
	}
}

35 
	$ª£tDTextBuff
(

36 
DTextBuff
* 
p


39 
p
->
size
 = 0;

40 
	}
}

41 
	$ª£tDBö¨yBuff
(

42 
DBö¨yBuff
* 
p


45 
p
->
size
 = 0;

46 
	}
}

47 
	$de°royDBö¨yBuff
(

48 
DBö¨yBuff
* 
p


51 
	`‰ì
(
p
->
buf
);

52 
	}
}

54 
	$de°royDTextBuff
(

55 
DTextBuff
* 
p


58 
	`‰ì
(
p
->
buf
);

59 
	}
}

61 
	$de°royKVPAºay
(

62 
KVPAºay
* 
p


65 
KeyVÆuePaú
* 
kv∑ºay
 = 
p
->kvparray;

66 
size
 = 
p
->size;

67 
i
 = 0; i < 
size
; i++) {

68 
	`‰ì
(
kv∑ºay
[
i
].
key
);

69 
	`‰ì
(
kv∑ºay
[
i
].
vÆue
);

71 
	`‰ì
(
kv∑ºay
);

72 
	}
}

74 
	$de°royKVPBuf„r
(

75 
KVPP¨£r
* 
p


78 
	`‰ì
(
p
->
kv∑ºay
);

79 
	}
}

86 
	$∑r£KVPBuf„r
(

87 
KVPP¨£r
* 
p
,

88 
dñimôî1
,

89 
dñimôî2
,

90 
boﬁ
 
ªmove_w•a˚
,

91 
n_höt


94 
dñim
[] = {
dñimôî1
, '\0'};

95 * 
buf
 = 
p
->buf;

97 
Off£tPaú
* 
kv∑ºay
 = 
p
->kvparray;

99 
max_size
 = 
	`√xtPowîOf2
(
n_höt
);

101 
kv∑ºay
 = (
Off£tPaú
*Ë
	`mÆloc
(
max_size
 * (OffsetPair));

102 i‡(
kv∑ºay
 =
NULL
) {

103 
	`Ârötf
(
°dîr
, "\nERROR mÆloc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

104  
ERR_HEAP_ALLOC_FAILURE
;

106 
size
 = 0;

107 * 
˘xt
 = 
NULL
;

108 * 
tokí
 = 
NULL
;

109 
tokí
 = 
	`°πok_r
(
buf
, 
dñim
, &
˘xt
);

110 
tokí
 !
NULL
) {

111 
Off£tPaú
* 
kvp
 = &(
kv∑ºay
[
size
]);

112 i‡(
ªmove_w•a˚
) {

116 
	`is•a˚
(*
tokí
)) {

117 
tokí
++;

123 
kvp
->
key
 = 
tokí
 - 
buf
;

124 * 
ãmp
 = 
	`°rchr
(
tokí
, 
dñimôî2
);

125 i‡(
ãmp
 !
NULL
) {

129 *
ãmp
 = '\0';

130 i‡(
ªmove_w•a˚
) {

131 * 
tmp
 = 
ãmp
 - 1;

135 
tmp
 > 
tokí
 && 
	`is•a˚
(*tmp)) {

136 *
tmp
 = '\0';

137 
tmp
--;

142 
tmp
 = (*
˘xt
)?ctxt - 2:ctxt - 1;

143 
tmp
 > 
ãmp
 && 
	`is•a˚
(*tmp)) {

144 *
tmp
 = '\0';

145 
tmp
--;

150 
tmp
 = 
ãmp
 + 1;

151 *
tmp
 && 
	`is•a˚
(*tmp)) {

152 *
tmp
 = '\0';

153 
tmp
++;

155 
ãmp
 = 
tmp
 - 1;

157 
kvp
->
vÆue
 = 
ãmp
 - 
buf
 + 1;

158 
size
++;

159 i‡(
size
 >
max_size
) {

160 
max_size
 *= 2;

161 
Off£tPaú
* 
tmp
 = (Off£tPaú*Ë
	`ªÆloc
(
kv∑ºay
, 
max_size
 * (OffsetPair));

162 i‡(
tmp
 =
NULL
) {

167 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed %s:%d\n", 
__FILE__
, 
__LINE__
);

170 
kv∑ºay
 = 
tmp
;

173 
tokí
 = 
	`°πok_r
(
NULL
, 
dñim
, &
˘xt
);

175 i‡(
size
 > 1) {

176 
	`qs‹t_r
(
kv∑ºay
, 
size
, (
Off£tPaú
), 
s‹tKVP
, 
buf
);

178 
p
->
kv∑ºay
 = kvparray;

179 
p
->
size
 = size;

182 
	}
}

189 
	$ªÆloˇã_mem
(

190 ** 
buf
,

191 
size
,

192 * 
max_size
,

193 
Àn
,

194 
höt_size
,

195 
boﬁ
 
nul_ch¨_ªquúed


198 #i‡
	`deföed
 (
DEBUG
Ë|| deföed (
STRINGENT_ERROR_CHECKING
)

199 
	`as£π
(
size
 >0 && *
max_size
 >0 && 
Àn
 >0 && 
höt_size
 >= 0);

201 
ªt
 = 0;

202 
Æloˇãd_size
 = *
max_size
;

206 
Àn
 +(
nul_ch¨_ªquúed
 =
åue
)?1:0;

207 
avaûabÀ_•a˚
 = 
Æloˇãd_size
 - 
size
;

208 i‡(
Àn
 > 
avaûabÀ_•a˚
) {

212 
•a˚_ªquúed
 = 
Àn
 - 
avaûabÀ_•a˚
;

213 
tmp_max_size
 = 
Æloˇãd_size
 * 2;

214 
tmp_√w_size
 = 
Æloˇãd_size
 + 
•a˚_ªquúed
;

218 
Æloˇãd_size
 = (Æloˇãd_sizê=0)? (Ë
	`√xtPowîOf2
(
Àn
 > 
höt_size
 ?Üí : höt_sizeË: (
tmp_max_size
 >
tmp_√w_size
) ?Åmp_max_size:()ÇextPowerOf2(tmp_new_size);

219 * 
ãmp
 = (*Ë
	`ªÆloc
(*
buf
, 
Æloˇãd_size
 * ());

220 i‡(
ãmp
 =
NULL
) {

226 
	`Ârötf
(
°dîr
, "\nERRORÑóŒoc(ËÁûed f‹ sizê%d %s:%d\n", 
Æloˇãd_size
, 
__FILE__
, 
__LINE__
);

227 
ªt
 = 
ERR_HEAP_ALLOC_FAILURE
;

229 *
buf
 = 
ãmp
;

230 *
max_size
 = 
Æloˇãd_size
;

233  
ªt
;

234 
	}
}

238 
	$timeNowD
()

240 
î∫o
 = 0;

241 
ªt
 = 0;

242 
time•ec
 
now
;

243 
now
.
tv_£c
 = 0;

244 
now
.
tv_n£c
 = 0;

245 
ªt
 = 
	`˛ock_gëtime
(
CLOCK_MONOTONIC_RAW
, &
now
);

246 i‡(
ªt
 < 0) {

247 
	`≥º‹
("\nclock_gettime() failed");

248 
	`as£π
(0);

250  
now
.
tv_£c
 +Çow.
tv_n£c
 * 1e-9;

251 
	}
}

	@/home/kartik/nwe/util/coro.c

41 
	~"c‹o.h
"

43 
	~<°ddef.h
>

44 
	~<°rög.h
>

49 #i‡
CORO_UCONTEXT
 || 
CORO_SJLJ
 || 
CORO_LOSER
 || 
CORO_LINUX
 || 
CORO_IRIX
 || 
CORO_ASM


51 #i‡
CORO_UCONTEXT


52 
	~<°ddef.h
>

55 #i‡!
deföed
(
STACK_ADJUST_PTR
)

56 #i‡
__sgi


58 
	#STACK_ADJUST_PTR
(
•
,
ss
Ë((*)(•Ë+ (ssË- 8)

	)

59 
	#STACK_ADJUST_SIZE
(
•
,
ss
Ë((ssË- 8)

	)

60 #ñi‡(
__i386__
 && 
CORO_LINUX
Ë|| (
_M_IX86
 && 
CORO_LOSER
)

61 
	#STACK_ADJUST_PTR
(
•
,
ss
Ë((*)(•Ë+ (ss))

	)

62 
	#STACK_ADJUST_SIZE
(
•
,
ss
Ë(ss)

	)

63 #ñi‡(
__amd64__
 && 
CORO_LINUX
Ë|| ((
_M_AMD64
 || 
_M_IA64
Ë&& 
CORO_LOSER
)

64 
	#STACK_ADJUST_PTR
(
•
,
ss
Ë((*)(•Ë+ (ssË- 8)

	)

65 
	#STACK_ADJUST_SIZE
(
•
,
ss
Ë(ss)

	)

67 
	#STACK_ADJUST_PTR
(
•
,
ss
Ë(•)

	)

68 
	#STACK_ADJUST_SIZE
(
•
,
ss
Ë(ss)

	)

72 
	~<°dlib.h
>

74 #i‡
CORO_SJLJ


75 
	~<°dio.h
>

76 
	~<sig«l.h
>

77 
	~<uni°d.h
>

80 
c‹o_func
 
	gc‹o_öô_func
;

81 *
	gc‹o_öô_¨g
;

82 
c‹o_c⁄ãxt
 *
	g√w_c‹o
, *
	g¸óã_c‹o
;

85 
	$c‹o_öô
 ()

87 vﬁ©ûê
c‹o_func
 
func
 = 
c‹o_öô_func
;

88 vﬁ©ûê*
¨g
 = 
c‹o_öô_¨g
;

90 
	`c‹o_å™s„r
 (
√w_c‹o
, 
¸óã_c‹o
);

92 #i‡
__GCC_HAVE_DWARF2_CFI_ASM
 && 
__amd64


93 
	`asm
 (".cfi_undefinedÑip");

96 
	`func
 ((*)
¨g
);

99 
	`ab‹t
 ();

100 
	}
}

102 #i‡
CORO_SJLJ


104 vﬁ©ûê
	gåampﬁöe_d⁄e
;

108 
	$åampﬁöe
 (
sig
)

110 i‡(
	`c‹o_£tjmp
 (
√w_c‹o
->
ív
))

111 
	`c‹o_öô
 ();

113 
åampﬁöe_d⁄e
 = 1;

114 
	}
}

118 #i‡
CORO_ASM


120 #i‡
_WIN32
 || 
__CYGWIN__


121 
	#CORO_WIN_TIB
 1

	)

124 
asm
 (

126 #i‡
_WIN32
 || 
__CYGWIN__


135 #i‡
__amd64


137 #i‡
_WIN32
 || 
__CYGWIN__


138 
	#NUM_SAVED
 29

	)

158 #i‡
CORO_WIN_TIB


165 #i‡
CORO_WIN_TIB


190 
	#NUM_SAVED
 6

	)

209 #ñi‡
__i386


211 
	#NUM_SAVED
 4

	)

216 #i‡
CORO_WIN_TIB


217 #unde‡
NUM_SAVED


218 
	#NUM_SAVED
 7

	)

225 #i‡
CORO_WIN_TIB


238 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª


245 
	$c‹o_¸óã
 (
c‹o_c⁄ãxt
 *
˘x
, 
c‹o_func
 
c‹o
, *
¨g
, *
•å
, 
size_t
 
ssize
)

247 
c‹o_c⁄ãxt
 
n˘x
;

248 #i‡
CORO_SJLJ


249 
°ack_t
 
o°k
, 
n°k
;

250 
siga˘i⁄
 
oß
, 
nß
;

251 
sig£t_t
 
nsig
, 
osig
;

254 i‡(!
c‹o
)

257 
c‹o_öô_func
 = 
c‹o
;

258 
c‹o_öô_¨g
 = 
¨g
;

260 
√w_c‹o
 = 
˘x
;

261 
¸óã_c‹o
 = &
n˘x
;

263 #i‡
CORO_SJLJ


266 
	`sigem±y£t
 (&
nsig
);

267 
	`sigadd£t
 (&
nsig
, 
SIGUSR2
);

268 
	`sig¥ocmask
 (
SIG_BLOCK
, &
nsig
, &
osig
);

270 
nß
.
ß_h™dÀr
 = 
åampﬁöe
;

271 
	`sigem±y£t
 (&
nß
.
ß_mask
);

272 
nß
.
ß_Êags
 = 
SA_ONSTACK
;

274 i‡(
	`siga˘i⁄
 (
SIGUSR2
, &
nß
, &
oß
))

276 
	`≥º‹
 ("sigaction");

277 
	`ab‹t
 ();

281 
n°k
.
ss_•
 = 
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
);

282 
n°k
.
ss_size
 = 
	`STACK_ADJUST_SIZE
 (
•å
, 
ssize
);

283 
n°k
.
ss_Êags
 = 0;

285 i‡(
	`sigÆt°ack
 (&
n°k
, &
o°k
) < 0)

287 
	`≥º‹
 ("sigaltstack");

288 
	`ab‹t
 ();

291 
åampﬁöe_d⁄e
 = 0;

292 
	`kûl
 (
	`gëpid
 (), 
SIGUSR2
);

293 
	`sigfûl£t
 (&
nsig
); 
	`sigdñ£t
 (&nsig, 
SIGUSR2
);

295 !
åampﬁöe_d⁄e
)

296 
	`sigsu•íd
 (&
nsig
);

298 
	`sigÆt°ack
 (0, &
n°k
);

299 
n°k
.
ss_Êags
 = 
SS_DISABLE
;

300 i‡(
	`sigÆt°ack
 (&
n°k
, 0) < 0)

301 
	`≥º‹
 ("sigaltstack");

303 
	`sigÆt°ack
 (0, &
n°k
);

304 i‡(~
n°k
.
ss_Êags
 & 
SS_DISABLE
)

305 
	`ab‹t
 ();

307 i‡(~
o°k
.
ss_Êags
 & 
SS_DISABLE
)

308 
	`sigÆt°ack
 (&
o°k
, 0);

310 
	`siga˘i⁄
 (
SIGUSR2
, &
oß
, 0);

311 
	`sig¥ocmask
 (
SIG_SETMASK
, &
osig
, 0);

313 #ñi‡
CORO_LOSER


315 
	`c‹o_£tjmp
 (
˘x
->
ív
);

316 #i‡
__CYGWIN__
 && 
__i386


317 
˘x
->
ív
[8] = (Ë
c‹o_öô
;

318 
˘x
->
ív
[7] = (Ë((*)
•å
 + 
ssize
) -  ();

319 #ñi‡
__CYGWIN__
 && 
__x86_64


320 
˘x
->
ív
[7] = (Ë
c‹o_öô
;

321 
˘x
->
ív
[6] = (Ë((*)
•å
 + 
ssize
) -  ();

322 #ñi‡
deföed
 
__MINGW32__


323 
˘x
->
ív
[5] = (Ë
c‹o_öô
;

324 
˘x
->
ív
[4] = (Ë((*)
•å
 + 
ssize
) -  ();

325 #ñi‡
deföed
 
_M_IX86


326 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
Eù
 = (Ë
c‹o_öô
;

327 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
E•
 = (Ë
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
) -  ();

328 #ñi‡
deföed
 
_M_AMD64


329 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
Rù
 = (
__öt64
Ë
c‹o_öô
;

330 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
R•
 = (
__öt64
Ë
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
) -  (__int64);

331 #ñi‡
deföed
 
_M_IA64


332 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
StIIP
 = (
__öt64
Ë
c‹o_öô
;

333 ((
_JUMP_BUFFER
 *)&
˘x
->
ív
)->
I¡Sp
 = (
__öt64
Ë
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
) -  (__int64);

338 #ñi‡
CORO_LINUX


340 
	`c‹o_£tjmp
 (
˘x
->
ív
);

341 #i‡
__GLIBC__
 >2 && 
__GLIBC_MINOR__
 >0 && 
	`deföed
 (
JB_PC
Ë&& deföed (
JB_SP
)

342 
˘x
->
ív
[0].
__jmpbuf
[
JB_PC
] = (Ë
c‹o_öô
;

343 
˘x
->
ív
[0].
__jmpbuf
[
JB_SP
] = (Ë
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
) -  ();

344 #ñi‡
__GLIBC__
 >2 && 
__GLIBC_MINOR__
 >0 && 
	`deföed
 (
__mc68000__
)

345 
˘x
->
ív
[0].
__jmpbuf
[0].
__¨egs
[0] = ()
c‹o_öô
;

346 
˘x
->
ív
[0].
__jmpbuf
[0].
__•
 = (*Ë((*)
•å
 + 
ssize
) -  ();

347 #ñi‡
	`deföed
 (
__GNU_LIBRARY__
Ë&& deföed (
__i386__
)

348 
˘x
->
ív
[0].
__jmpbuf
[0].
__pc
 = (*Ë
c‹o_öô
;

349 
˘x
->
ív
[0].
__jmpbuf
[0].
__•
 = (*Ë((*)
•å
 + 
ssize
) -  ();

350 #ñi‡
	`deföed
 (
__GNU_LIBRARY__
Ë&& deföed (
__amd64__
)

351 
˘x
->
ív
[0].
__jmpbuf
[
JB_PC
] = (Ë
c‹o_öô
;

352 
˘x
->
ív
[0].
__jmpbuf
[0].
__•
 = (*Ë((*)
•å
 + 
ssize
) -  ();

357 #ñi‡
CORO_IRIX


359 
	`c‹o_£tjmp
 (
˘x
->
ív
, 0);

360 
˘x
->
ív
[
JB_PC
] = (
__uöt64_t
)
c‹o_öô
;

361 
˘x
->
ív
[
JB_SP
] = (
__uöt64_t
)
	`STACK_ADJUST_PTR
 (
•å
, 
ssize
) -  ();

363 #ñi‡
CORO_ASM


365 
˘x
->
•
 = (**)(
ssize
 + (*)
•å
);

366 *--
˘x
->
•
 = (*)
ab‹t
;

367 *--
˘x
->
•
 = (*)
c‹o_öô
;

369 #i‡
CORO_WIN_TIB


370 *--
˘x
->
•
 = 0;

371 *--
˘x
->
•
 = (*)
•å
 + 
ssize
;

372 *--
˘x
->
•
 = 
•å
;

375 
˘x
->
•
 -
NUM_SAVED
;

376 
	`mem£t
 (
˘x
->
•
, 0,  (*˘x->•Ë* 
NUM_SAVED
);

378 #ñi‡
CORO_UCONTEXT


380 
	`gëc⁄ãxt
 (&(
˘x
->
uc
));

382 
˘x
->
uc
.
uc_lök
 = 0;

383 
˘x
->
uc
.
uc_°ack
.
ss_•
 = 
•å
;

384 
˘x
->
uc
.
uc_°ack
.
ss_size
 = (
size_t
)
ssize
;

385 
˘x
->
uc
.
uc_°ack
.
ss_Êags
 = 0;

387 
	`makec⁄ãxt
 (&(
˘x
->
uc
), ((*)())
c‹o_öô
, 0);

391 
	`c‹o_å™s„r
 (
¸óã_c‹o
, 
√w_c‹o
);

392 
	}
}

397 #ñi‡
CORO_PTHREAD


400 
±hªad_muãx_t
 
	gc‹o_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

402 
	sc‹o_öô_¨gs


404 
c‹o_func
 
	mfunc
;

405 *
	m¨g
;

406 
c‹o_c⁄ãxt
 *
	m£lf
, *
	mmaö
;

409 
±hªad_t
 
	gnuŒ_tid
;

413 
	$muãx_u∆ock_wøµî
 (*
¨g
)

415 
	`±hªad_muãx_u∆ock
 ((
±hªad_muãx_t
 *)
¨g
);

416 
	}
}

419 
	$c‹o_öô
 (*
¨gs_
)

421 
c‹o_öô_¨gs
 *
¨gs
 = (c‹o_öô_¨g†*)
¨gs_
;

422 
c‹o_func
 
func
 = 
¨gs
->func;

423 *
¨g
 = 
¨gs
->arg;

425 
	`±hªad_muãx_lock
 (&
c‹o_muãx
);

428 
	`±hªad_˛ónup_push
 (
muãx_u∆ock_wøµî
, &
c‹o_muãx
);

429 
	`c‹o_å™s„r
 (
¨gs
->
£lf
,árgs->
maö
);

430 
	`func
 (
¨g
);

431 
	`±hªad_˛ónup_p›
 (1);

434 
	}
}

437 
	$c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
)

439 
	`±hªad_c⁄d_sig«l
 (&
√xt
->
cv
);

440 
	`±hªad_c⁄d_waô
 (&
¥ev
->
cv
, &
c‹o_muãx
);

441 #i‡
__FªeBSD__


442 
	`±hªad_ã°ˇn˚l
 ();

444 
	}
}

447 
	$c‹o_¸óã
 (
c‹o_c⁄ãxt
 *
˘x
, 
c‹o_func
 
c‹o
, *
¨g
, *
•å
, 
size_t
 
ssize
)

449 
c‹o_c⁄ãxt
 
n˘x
;

450 
⁄˚
;

452 i‡(!
⁄˚
)

454 
⁄˚
 = 1;

456 
	`±hªad_muãx_lock
 (&
c‹o_muãx
);

457 
	`±hªad_c⁄d_öô
 (&
n˘x
.
cv
, 0);

458 
nuŒ_tid
 = 
	`±hªad_£lf
 ();

461 
	`±hªad_c⁄d_öô
 (&
˘x
->
cv
, 0);

463 i‡(
c‹o
)

465 
±hªad_©å_t
 
©å
;

466 
c‹o_öô_¨gs
 
¨gs
;

468 
¨gs
.
func
 = 
c‹o
;

469 
¨gs
.
¨g
 =árg;

470 
¨gs
.
£lf
 = 
˘x
;

471 
¨gs
.
maö
 = &
n˘x
;

473 
	`±hªad_©å_öô
 (&
©å
);

474 #i‡
__UCLIBC__


477 #ñi‡
__CYGWIN__


479 
	`±hªad_©å_£t°acksize
 (&
©å
, (
size_t
)
ssize
);

481 
	`±hªad_©å_£t°ack
 (&
©å
, 
•å
, (
size_t
)
ssize
);

483 
	`±hªad_©å_£tsc›e
 (&
©å
, 
PTHREAD_SCOPE_PROCESS
);

484 
	`±hªad_¸óã
 (&
˘x
->
id
, &
©å
, 
c‹o_öô
, &
¨gs
);

486 
	`c‹o_å™s„r
 (
¨gs
.
maö
,árgs.
£lf
);

489 
˘x
->
id
 = 
nuŒ_tid
;

490 
	}
}

493 
	$c‹o_de°roy
 (
c‹o_c⁄ãxt
 *
˘x
)

495 i‡(!
	`±hªad_equÆ
 (
˘x
->
id
, 
nuŒ_tid
))

497 
	`±hªad_ˇn˚l
 (
˘x
->
id
);

498 
	`±hªad_muãx_u∆ock
 (&
c‹o_muãx
);

499 
	`±hªad_joö
 (
˘x
->
id
, 0);

500 
	`±hªad_muãx_lock
 (&
c‹o_muãx
);

503 
	`±hªad_c⁄d_de°roy
 (&
˘x
->
cv
);

504 
	}
}

509 #ñi‡
CORO_FIBER


511 
	#WIN32_LEAN_AND_MEAN


	)

512 #i‡
_WIN32_WINNT
 < 0x0400

513 #unde‡
_WIN32_WINNT


514 
	#_WIN32_WINNT
 0x0400

	)

516 
	~<wödows.h
>

518 
VOID
 
CALLBACK


519 
	$c‹o_öô
 (
PVOID
 
¨g
)

521 
c‹o_c⁄ãxt
 *
˘x
 = (c‹o_c⁄ãxà*)
¨g
;

523 
˘x
->
	`c‹o
 (˘x->
¨g
);

524 
	}
}

527 
	$c‹o_å™s„r
 (
c‹o_c⁄ãxt
 *
¥ev
, c‹o_c⁄ãxà*
√xt
)

529 i‡(!
¥ev
->
fibî
)

531 
¥ev
->
fibî
 = 
	`GëCuºítFibî
 ();

533 i‡(
¥ev
->
fibî
 == 0 ||Örev->fiber == (*)0x1e00)

534 
¥ev
->
fibî
 = 
	`C⁄vîtThªadToFibî
 (0);

537 
	`SwôchToFibî
 (
√xt
->
fibî
);

538 
	}
}

541 
	$c‹o_¸óã
 (
c‹o_c⁄ãxt
 *
˘x
, 
c‹o_func
 
c‹o
, *
¨g
, *
•å
, 
size_t
 
ssize
)

543 
˘x
->
fibî
 = 0;

544 
˘x
->
c‹o
 = coro;

545 
˘x
->
¨g
 =árg;

547 i‡(!
c‹o
)

550 
˘x
->
fibî
 = 
	`Cª©eFibî
 (
ssize
, 
c‹o_öô
, ctx);

551 
	}
}

554 
	$c‹o_de°roy
 (
c‹o_c⁄ãxt
 *
˘x
)

556 
	`DñëeFibî
 (
˘x
->
fibî
);

557 
	}
}

560 #îr‹ 
unsuµ‹ãd
 
backíd


566 #i‡
CORO_STACKALLOC


568 
	~<°dlib.h
>

570 #i‚de‡
_WIN32


571 
	~<uni°d.h
>

574 #i‡
CORO_USE_VALGRIND


575 
	~<vÆgröd/vÆgröd.h
>

578 #i‡
_POSIX_MAPPED_FILES


579 
	~<sys/mm™.h
>

580 
	#CORO_MMAP
 1

	)

581 #i‚de‡
MAP_ANONYMOUS


582 #ifde‡
MAP_ANON


583 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

585 #unde‡
CORO_MMAP


588 
	~<limôs.h
>

590 #unde‡
CORO_MMAP


593 #i‡
_POSIX_MEMORY_PROTECTION


594 #i‚de‡
CORO_GUARDPAGES


595 
	#CORO_GUARDPAGES
 4

	)

598 #unde‡
CORO_GUARDPAGES


601 #i‡!
CORO_MMAP


602 #unde‡
CORO_GUARDPAGES


605 #i‡!
__i386
 && !
__x86_64
 && !
__powîpc
 && !
__m68k
 && !
__Æpha
 && !
__mùs
 && !
__•¨c64


606 #unde‡
CORO_GUARDPAGES


609 #i‚de‡
CORO_GUARDPAGES


610 
	#CORO_GUARDPAGES
 0

	)

613 #i‡!
PAGESIZE


614 #i‡!
CORO_MMAP


615 
	#PAGESIZE
 4096

	)

617 
size_t


618 
	$c‹o_∑gesize
 ()

620 
size_t
 
∑gesize
;

622 i‡(!
∑gesize
)

623 
∑gesize
 = 
	`sysc⁄f
 (
_SC_PAGESIZE
);

625  
∑gesize
;

626 
	}
}

628 
	#PAGESIZE
 
	`c‹o_∑gesize
 ()

	)

633 
	$c‹o_°ack_Æloc
 (
c‹o_°ack
 *
°ack
, 
size
)

635 i‡(!
size
)

636 
size
 = 256 * 1024;

638 
°ack
->
•å
 = 0;

639 
°ack
->
ssze
 = ((
size_t
)
size
 *  (*Ë+ 
PAGESIZE
 - 1) / PAGESIZE * PAGESIZE;

641 #i‡
CORO_FIBER


643 
°ack
->
•å
 = (*)stack;

648 
size_t
 
ssze
 = 
°ack
->sszê+ 
CORO_GUARDPAGES
 * 
PAGESIZE
;

649 *
ba£
;

651 #i‡
CORO_MMAP


653 
ba£
 = 
	`mm≠
 (0, 
ssze
, 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

655 i‡(
ba£
 == (*)-1)

659 
ba£
 = 
	`mm≠
 (0, 
ssze
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

661 i‡(
ba£
 == (*)-1)

665 #i‡
CORO_GUARDPAGES


666 
	`m¥Ÿe˘
 (
ba£
, 
CORO_GUARDPAGES
 * 
PAGESIZE
, 
PROT_NONE
);

669 
ba£
 = (*)((*)ba£ + 
CORO_GUARDPAGES
 * 
PAGESIZE
);

671 
ba£
 = 
	`mÆloc
 (
ssze
);

672 i‡(!
ba£
)

676 #i‡
CORO_USE_VALGRIND


677 
°ack
->
vÆgröd_id
 = 
	`VALGRIND_STACK_REGISTER
 ((*)
ba£
, ((*)ba£Ë+ 
ssze
 - 
CORO_GUARDPAGES
 * 
PAGESIZE
);

680 
°ack
->
•å
 = 
ba£
;

684 
	}
}

687 
	$c‹o_°ack_‰ì
 (
c‹o_°ack
 *
°ack
)

689 #i‡
CORO_FIBER


692 #i‡
CORO_USE_VALGRIND


693 
	`VALGRIND_STACK_DEREGISTER
 (
°ack
->
vÆgröd_id
);

696 #i‡
CORO_MMAP


697 i‡(
°ack
->
•å
)

698 
	`munm≠
 ((*)((*)
°ack
->
•å
 - 
CORO_GUARDPAGES
 * 
PAGESIZE
),

699 
°ack
->
ssze
 + 
CORO_GUARDPAGES
 * 
PAGESIZE
);

701 
	`‰ì
 (
°ack
->
•å
);

704 
	}
}

	@/home/kartik/nwe/util/inpc_hash.c

18 
	~<°döt.h
>

19 
	~<°dlib.h
>

20 #i‡
ENDIAN_BIG
 == 1

21 
	#HASH_LITTLE_ENDIAN
 0

	)

22 
	#HASH_BIG_ENDIAN
 1

	)

24 #i‡
ENDIAN_LITTLE
 == 1

25 
	#HASH_LITTLE_ENDIAN
 1

	)

26 
	#HASH_BIG_ENDIAN
 0

	)

28 
	#HASH_LITTLE_ENDIAN
 0

	)

29 
	#HASH_BIG_ENDIAN
 0

	)

33 
	#rŸ
(
x
,
k
Ë(((x)<<(k)Ë^ ((x)>>(32-(k))))

	)

79 
	#mix
(
a
,
b
,
c
) \

81 
a
 -
c
;á ^
	`rŸ
(c, 4); c +
b
; \

82 
b
 -
a
; b ^
	`rŸ
◊, 6);á +
c
; \

83 
c
 -
b
; c ^
	`rŸ
(b, 8); b +
a
; \

84 
a
 -
c
;á ^
	`rŸ
(c,16); c +
b
; \

85 
b
 -
a
; b ^
	`rŸ
◊,19);á +
c
; \

86 
c
 -
b
; c ^
	`rŸ
(b, 4); b +
a
; \

87 }

	)

114 
	#föÆ
(
a
,
b
,
c
) \

116 
c
 ^
b
; c -
	`rŸ
(b,14); \

117 
a
 ^
c
;á -
	`rŸ
(c,11); \

118 
b
 ^
a
; b -
	`rŸ
(a,25); \

119 
c
 ^
b
; c -
	`rŸ
(b,16); \

120 
a
 ^
c
;á -
	`rŸ
(c,4); \

121 
b
 ^
a
; b -
	`rŸ
(a,14); \

122 
c
 ^
b
; c -
	`rŸ
(b,24); \

123 }

	)

125 #i‡
HASH_LITTLE_ENDIAN
 == 1

126 
uöt32_t
 
	$gë_öpc_hash
(

127 c⁄° *
key
,

128 
size_t
 
Àngth
,

129 c⁄° 
uöt32_t
 
öôvÆ
)

131 
uöt32_t
 
a
,
b
,
c
;

132 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

135 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
öôvÆ
;

137 
u
.
±r
 = 
key
;

138 i‡(
HASH_LITTLE_ENDIAN
 && ((
u
.
i
 & 0x3) == 0)) {

139 c⁄° 
uöt32_t
 *
k
 = 
key
;

140 #ifde‡
VALGRIND


141 c⁄° 
uöt8_t
 *
k8
;

145 
Àngth
 > 12)

147 
a
 +
k
[0];

148 
b
 +
k
[1];

149 
c
 +
k
[2];

150 
	`mix
(
a
,
b
,
c
);

151 
Àngth
 -= 12;

152 
k
 += 3;

165 #i‚de‡
VALGRIND


167 
Àngth
)

169 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

170 11: 
c
+=
k
[2]&0xffffff; 
b
+=k[1]; 
a
+=k[0]; ;

171 10: 
c
+=
k
[2]&0xffff; 
b
+=k[1]; 
a
+=k[0]; ;

172 9 : 
c
+=
k
[2]&0xff; 
b
+=k[1]; 
a
+=k[0]; ;

173 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

174 7 : 
b
+=
k
[1]&0xffffff; 
a
+=k[0]; ;

175 6 : 
b
+=
k
[1]&0xffff; 
a
+=k[0]; ;

176 5 : 
b
+=
k
[1]&0xff; 
a
+=k[0]; ;

177 4 : 
a
+=
k
[0]; ;

178 3 : 
a
+=
k
[0]&0xffffff; ;

179 2 : 
a
+=
k
[0]&0xffff; ;

180 1 : 
a
+=
k
[0]&0xff; ;

181 0 :  
c
;

186 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

187 
Àngth
)

189 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

190 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

191 10: 
c
+=((
uöt32_t
)
k8
[9])<<8;

192 9 : 
c
+=
k8
[8];

193 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

194 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

195 6 : 
b
+=((
uöt32_t
)
k8
[5])<<8;

196 5 : 
b
+=
k8
[4];

197 4 : 
a
+=
k
[0]; ;

198 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

199 2 : 
a
+=((
uöt32_t
)
k8
[1])<<8;

200 1 : 
a
+=
k8
[0]; ;

201 0 :  
c
;

206 } i‡(
HASH_LITTLE_ENDIAN
 && ((
u
.
i
 & 0x1) == 0)) {

207 c⁄° 
uöt16_t
 *
k
 = 
key
;

208 c⁄° 
uöt8_t
 *
k8
;

211 
Àngth
 > 12)

213 
a
 +
k
[0] + (((
uöt32_t
)k[1])<<16);

214 
b
 +
k
[2] + (((
uöt32_t
)k[3])<<16);

215 
c
 +
k
[4] + (((
uöt32_t
)k[5])<<16);

216 
	`mix
(
a
,
b
,
c
);

217 
Àngth
 -= 12;

218 
k
 += 6;

222 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

223 
Àngth
)

225 12: 
c
+=
k
[4]+(((
uöt32_t
)k[5])<<16);

226 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

227 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

229 11: 
c
+=((
uöt32_t
)
k8
[10])<<16;

230 10: 
c
+=
k
[4];

231 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

232 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

234 9 : 
c
+=
k8
[8];

235 8 : 
b
+=
k
[2]+(((
uöt32_t
)k[3])<<16);

236 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

238 7 : 
b
+=((
uöt32_t
)
k8
[6])<<16;

239 6 : 
b
+=
k
[2];

240 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

242 5 : 
b
+=
k8
[4];

243 4 : 
a
+=
k
[0]+(((
uöt32_t
)k[1])<<16);

245 3 : 
a
+=((
uöt32_t
)
k8
[2])<<16;

246 2 : 
a
+=
k
[0];

248 1 : 
a
+=
k8
[0];

250 0 :  
c
;

254 c⁄° 
uöt8_t
 *
k
 = 
key
;

257 
Àngth
 > 12)

259 
a
 +
k
[0];

260 
a
 +((
uöt32_t
)
k
[1])<<8;

261 
a
 +((
uöt32_t
)
k
[2])<<16;

262 
a
 +((
uöt32_t
)
k
[3])<<24;

263 
b
 +
k
[4];

264 
b
 +((
uöt32_t
)
k
[5])<<8;

265 
b
 +((
uöt32_t
)
k
[6])<<16;

266 
b
 +((
uöt32_t
)
k
[7])<<24;

267 
c
 +
k
[8];

268 
c
 +((
uöt32_t
)
k
[9])<<8;

269 
c
 +((
uöt32_t
)
k
[10])<<16;

270 
c
 +((
uöt32_t
)
k
[11])<<24;

271 
	`mix
(
a
,
b
,
c
);

272 
Àngth
 -= 12;

273 
k
 += 12;

277 
Àngth
)

279 12: 
c
+=((
uöt32_t
)
k
[11])<<24;

280 11: 
c
+=((
uöt32_t
)
k
[10])<<16;

281 10: 
c
+=((
uöt32_t
)
k
[9])<<8;

282 9 : 
c
+=
k
[8];

283 8 : 
b
+=((
uöt32_t
)
k
[7])<<24;

284 7 : 
b
+=((
uöt32_t
)
k
[6])<<16;

285 6 : 
b
+=((
uöt32_t
)
k
[5])<<8;

286 5 : 
b
+=
k
[4];

287 4 : 
a
+=((
uöt32_t
)
k
[3])<<24;

288 3 : 
a
+=((
uöt32_t
)
k
[2])<<16;

289 2 : 
a
+=((
uöt32_t
)
k
[1])<<8;

290 1 : 
a
+=
k
[0];

292 0 :  
c
;

296 
	`föÆ
(
a
,
b
,
c
);

297  
c
;

298 
	}
}

300 #ñi‡
HASH_BIG_ENDIAN
 == 1

307 
uöt32_t
 
	$gë_öpc_hash
–c⁄° *
key
, 
size_t
 
Àngth
, c⁄° 
uöt32_t
 
öôvÆ
)

309 
uöt32_t
 
a
,
b
,
c
;

310 uni⁄ { c⁄° *
±r
; 
size_t
 
i
; } 
u
;

313 
a
 = 
b
 = 
c
 = 0xdódbì‡+ ((
uöt32_t
)
Àngth
Ë+ 
öôvÆ
;

315 
u
.
±r
 = 
key
;

316 i‡(
HASH_BIG_ENDIAN
 && ((
u
.
i
 & 0x3) == 0)) {

317 c⁄° 
uöt32_t
 *
k
 = 
key
;

318 #ifde‡
VALGRIND


319 c⁄° 
uöt8_t
 *
k8
;

323 
Àngth
 > 12)

325 
a
 +
k
[0];

326 
b
 +
k
[1];

327 
c
 +
k
[2];

328 
	`mix
(
a
,
b
,
c
);

329 
Àngth
 -= 12;

330 
k
 += 3;

343 #i‚de‡
VALGRIND


345 
Àngth
)

347 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

348 11: 
c
+=
k
[2]&0xffffff00; 
b
+=k[1]; 
a
+=k[0]; ;

349 10: 
c
+=
k
[2]&0xffff0000; 
b
+=k[1]; 
a
+=k[0]; ;

350 9 : 
c
+=
k
[2]&0xff000000; 
b
+=k[1]; 
a
+=k[0]; ;

351 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

352 7 : 
b
+=
k
[1]&0xffffff00; 
a
+=k[0]; ;

353 6 : 
b
+=
k
[1]&0xffff0000; 
a
+=k[0]; ;

354 5 : 
b
+=
k
[1]&0xff000000; 
a
+=k[0]; ;

355 4 : 
a
+=
k
[0]; ;

356 3 : 
a
+=
k
[0]&0xffffff00; ;

357 2 : 
a
+=
k
[0]&0xffff0000; ;

358 1 : 
a
+=
k
[0]&0xff000000; ;

359 0 :  
c
;

364 
k8
 = (c⁄° 
uöt8_t
 *)
k
;

365 
Àngth
)

367 12: 
c
+=
k
[2]; 
b
+=k[1]; 
a
+=k[0]; ;

368 11: 
c
+=((
uöt32_t
)
k8
[10])<<8;

369 10: 
c
+=((
uöt32_t
)
k8
[9])<<16;

370 9 : 
c
+=((
uöt32_t
)
k8
[8])<<24;

371 8 : 
b
+=
k
[1]; 
a
+=k[0]; ;

372 7 : 
b
+=((
uöt32_t
)
k8
[6])<<8;

373 6 : 
b
+=((
uöt32_t
)
k8
[5])<<16;

374 5 : 
b
+=((
uöt32_t
)
k8
[4])<<24;

375 4 : 
a
+=
k
[0]; ;

376 3 : 
a
+=((
uöt32_t
)
k8
[2])<<8;

377 2 : 
a
+=((
uöt32_t
)
k8
[1])<<16;

378 1 : 
a
+=((
uöt32_t
)
k8
[0])<<24; ;

379 0 :  
c
;

385 c⁄° 
uöt8_t
 *
k
 = 
key
;

388 
Àngth
 > 12)

390 
a
 +((
uöt32_t
)
k
[0])<<24;

391 
a
 +((
uöt32_t
)
k
[1])<<16;

392 
a
 +((
uöt32_t
)
k
[2])<<8;

393 
a
 +((
uöt32_t
)
k
[3]);

394 
b
 +((
uöt32_t
)
k
[4])<<24;

395 
b
 +((
uöt32_t
)
k
[5])<<16;

396 
b
 +((
uöt32_t
)
k
[6])<<8;

397 
b
 +((
uöt32_t
)
k
[7]);

398 
c
 +((
uöt32_t
)
k
[8])<<24;

399 
c
 +((
uöt32_t
)
k
[9])<<16;

400 
c
 +((
uöt32_t
)
k
[10])<<8;

401 
c
 +((
uöt32_t
)
k
[11]);

402 
	`mix
(
a
,
b
,
c
);

403 
Àngth
 -= 12;

404 
k
 += 12;

408 
Àngth
)

410 12: 
c
+=
k
[11];

411 11: 
c
+=((
uöt32_t
)
k
[10])<<8;

412 10: 
c
+=((
uöt32_t
)
k
[9])<<16;

413 9 : 
c
+=((
uöt32_t
)
k
[8])<<24;

414 8 : 
b
+=
k
[7];

415 7 : 
b
+=((
uöt32_t
)
k
[6])<<8;

416 6 : 
b
+=((
uöt32_t
)
k
[5])<<16;

417 5 : 
b
+=((
uöt32_t
)
k
[4])<<24;

418 4 : 
a
+=
k
[3];

419 3 : 
a
+=((
uöt32_t
)
k
[2])<<8;

420 2 : 
a
+=((
uöt32_t
)
k
[1])<<16;

421 1 : 
a
+=((
uöt32_t
)
k
[0])<<24;

423 0 :  
c
;

427 
	`föÆ
(
a
,
b
,
c
);

428  
c
;

429 
	}
}

431 #îr‹ 
Mu°
 
deföe
 
HASH_BIG_ENDIAN
 
‹
 
HASH_LITTLE_ENDIAN


	@/home/kartik/nwe/util/inpc_item.c

1 #ifde‡
INPC_ENABLED


2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<as£π.h
>

5 
	~<°dlib.h
>

6 
	~<°döt.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<sys/time.h
>

10 
	~<√töë/ö.h
>

11 
	~<sys/ty≥s.h
>

12 
	~<sys/sockë.h
>

13 
	~<√tdb.h
>

14 
	#MAX
 80

	)

15 
	#PORT
 43454

	)

16 
	~"öpc_≠i.h
"

17 
	~<¨∑/öë.h
>

21 #ifde‡
GOOGLE_PROFILER


22 
	~<googÀ/¥ofûî.h
>

25 
	~"öpc_ôem.h
"

26 
	~"öpc_debug.h
"

27 
	~"öpc_£âögs.h
"

28 
	~"öpc_hash.h
"

29 
	~"öpc_hash_c⁄f.h
"

30 
	~"öpc_comm⁄.h
"

31 
	~"öpc_¶ab˛ass.h
"

32 
	~"öpc_°©s.h
"

33 
	~"öpc_îr‹.h
"

34 
	~"öpc_≠i.h
"

36 
	#LRU_ITEM_UPDATE_TIME
 120

	)

42 
mem‹y_dëaûs_t
 
	gmem_dë
;

43 
öpc_£âögs
 
	g£âögs
;

45 
¶ab˛ass_t
 
	g¶abs
;

46 
öpc_hash_èbÀ_t
 
	ghash
;

47 #ifde‡
STATS_ON


48 
öpc_°©s_t
 
	g°©s
;

50 
	gtŸÆ_¥obe
 = 0;

51 
uöt32_t
 
	gg_time
 ;

52 
	gg_evi˘i⁄_°¨ãd
;

54 #ifde‡
INPC_TEST_ON


55 
	#MEMORY_LIMIT
 (((
uöt64_t
)1)<<32)

	)

56 
	#KEY_FACTOR
 21

	)

57 
	#GET_LIMIT
 ((1<<21)-1)

	)

58 
	#SET_LIMIT
 ((1<<21)-1)

	)

59 
	#GET_LOOP
 (20)

	)

60 
	#SET_LOOP
 (20)

	)

61 
	#MAIN_THREAD_WAIT_TIME
 (20)

	)

62 
	#TEST_SET_TIMEOUT
 9000

	)

63 
	#MAX_OBJ_SZ
 (20)

	)

64 
	#SET_THREAD_COUNT
 0

	)

65 
	#GET_THREAD_COUNT
 1

	)

66 
	#KEY_LEN
 20

	)

67 
	gkey_li°
[1<<23][20];

68 c⁄° 
	gvÆ_§c
[(1<<20)+1]="Namah";

75 
ölöe
 
uöt32_t
 
	$eight_byã_Æign
(c⁄° 
uöt32_t
 
v
) {

76 
uöt8_t
 
m
 = 
v
 & 0xFFFFFF07;

77 
m
) {

78 1:  
v
 + 7;

79 2:  
v
 + 6;

80 3:  
v
 + 5;

81 4:  
v
 + 4;

82 5:  
v
 + 3;

83 6:  
v
 + 2;

84 7:  
v
 + 1;

85 0:  
v
;

88  
v
;

89 
	}
}

91 
ölöe
 
	$my_mem˝y
(* 
de°
, c⁄° * 
§c
, c⁄° 
uöt32_t
 
Àn
) {

92 
	`mem˝y
(
de°
, 
§c
, 
Àn
);

93 
	}
}

99 
	$put_ôem_to_Ãu
(
mem_ôem_t
* 
¥ev
, mem_ôem_t* 
ô
) {

100 
	`as£π
(
¥ev
 !
NULL
 && 
ô
 != NULL);

101 
ô
->
Ãu_√xt
 = 
¥ev
->lru_next;

102 
ô
->
Ãu_¥ev
 = 
¥ev
;

103 
¥ev
->
Ãu_√xt
->
Ãu_¥ev
 = 
ô
;

104 
¥ev
->
Ãu_√xt
 = 
ô
;

105 
¶abs
.
li°
[
ô
->
¶ab_id
].
u£d_ôem_cou¡
++;

107 
	}
}

109 
	$ªmove_ôem_‰om_Ãu
(
mem_ôem_t
* 
ô
) {

110 
	`as£π
(
ô
 !
NULL
);

111 
ô
->
Ãu_¥ev
->
Ãu_√xt
 = it->lru_next;

112 
ô
->
Ãu_√xt
->
Ãu_¥ev
 = it->lru_prev;

113 
¶abs
.
li°
[
ô
->
¶ab_id
].
u£d_ôem_cou¡
--;

114 
	}
}

117 
	$ªmove_ôem_‰om_hash_li°
(
mem_ôem_t
* 
¥ev
, mem_ôem_t* 
cur
, c⁄° 
uöt32_t
 
öd
) {

118 
	`as£π
(
cur
 !
NULL
 && 
öd
 <
DEFAULT_MIN_HASH_SIZE
);

119 (
¥ev
 !
NULL
Ë? (¥ev->
√xt
 = 
cur
->√xtË: (
hash
.
li°
[
öd
].next = cur->next);

120 
	`__°©s_check
(
	`__sync_„tch_™d_sub
(&
°©s
.
cur_hash_ôems
, 1));

121 
	}
}

123 
	$put_ôem_to_hash_hód
(c⁄° 
uöt32_t
 
öd
, 
mem_ôem_t
* 
ô
) {

124 
	`as£π
(
ô
 !
NULL
 && 
öd
 <
DEFAULT_MIN_HASH_SIZE
);

125 
ô
->
√xt
 = 
hash
.
li°
[
öd
].next;

126 
hash
.
li°
[
öd
].
√xt
 = 
ô
;

127 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
cur_hash_ôems
, 1));

128 
	}
}

142 
	$put_ôem_to_‰ì_li°
(c⁄° 
uöt32_t
 
¶ab_id
, 
mem_ôem_t
* 
ô
) {

143 
	`as£π
(
¶ab_id
 < 
¶abs
.
cur_íåõs
);

144 
	`as£π
(
ô
 !
NULL
);

145 
ô
->
√xt
 = 
¶abs
.
li°
[
¶ab_id
].
‰ì
;

146 
¶abs
.
li°
[
¶ab_id
].
‰ì
 = 
ô
;

147 
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
++;

148 
	}
}

150 
mem_ôem_t
* 
	$ªmove_ôem_‰om_‰ì_li°
(c⁄° 
uöt32_t
 
¶ab_id
) {

151 
	`as£π
(
¶ab_id
 < 
¶abs
.
cur_íåõs
);

152 
	`as£π
(
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
 > 0);

153 
mem_ôem_t
* 
ô
 = 
¶abs
.
li°
[
¶ab_id
].
‰ì
;

154 
¶abs
.
li°
[
¶ab_id
].
‰ì
 = 
ô
->
√xt
;

155 
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
--;

156  
ô
;

157 
	}
}

159 
uöt32_t
 
	$gë_¶ab
(c⁄° 
uöt8_t
 
kÀn
, c⁄° 
uöt32_t
 
vÀn
) {

160 
uöt32_t
 
obje˘_Àn
 = 
	`eight_byã_Æign
(
kÀn
Ë+Éight_byã_Æign(
vÀn
Ë+ 
	`gë_Æig√d_ôem_mëa_size
();

161 
uöt32_t
 
œ°_¶ab
 = 
¶abs
.
cur_íåõs
 - 1;

162 i‡(
obje˘_Àn
 > 
¶abs
.
li°
[
œ°_¶ab
].
ôem_size
) {

165 
uöt32_t
 
¶ab_id
 = 0;

166 
obje˘_Àn
 > 
¶abs
.
li°
[
¶ab_id
].
ôem_size
) {

167 
¶ab_id
++;

169 
	`öpc_debug
("key:%u:VÆ:%u:Obje˘:%u:SœbID:%u:SœbITSize:%u", 
kÀn
, 
vÀn
, 
obje˘_Àn
, 
¶ab_id
, 
¶abs
.
li°
[¶ab_id].
ôem_size
);

170  
¶ab_id
;

171 
	}
}

173 
	$make_ôem
(
mem_ôem_t
* 
ô
, c⁄° * 
vÆ
, c⁄° 
uöt32_t
 
nvÆ
, c⁄° uöt32_à
expúy
) {

174 
	`as£π
(
vÆ
 !
NULL
);

175 
	`as£π
(
expúy
 > 0);

176 
uöt32_t
 
˘ime
 = 
	`cuºít_time
();

177 
	`öpc_debug
("EXP:%u", 
˘ime
 + 
expúy
);

178 
	`my_mem˝y
(
	`gë_vÆue_±r
(
ô
), 
vÆ
, 
nvÆ
);

179 
ô
->
expúy
 = 
˘ime
 +Éxpiry;

180 
ô
->
Ãu_ch™ge_time
 = 
˘ime
;

181 
ô
->
vÆue_Àngth
 = 
nvÆ
;

182 
ô
->
Êags
 = 0;

183 
ô
->
fûÀr
 = 0;

184 *(
	`gë_ªf_cou¡_±r
(
ô
)) = 0;

185 
ô
->
√xt
 = it->
Ãu_√xt
 = it->
Ãu_¥ev
 = 
NULL
;

186 
	}
}

188 #ifde‡
STATS_ON


189 
	$dump_°©s
() {

190 
öpc_°©s_t
 
t_°©s
 = 
°©s
;

191 
	`öpc_log
("Ru¬ögTime:%lu", 
g_time
 - 
t_°©s
.
°¨t_time
);

192 
	`öpc_log
("C›yGëCÆls:%lu", 
t_°©s
.
c›y_gë_ˇŒs
);

193 
	`öpc_log
("NoC›yGëCÆls:%lu", 
t_°©s
.
no_c›y_gë_ˇŒs
);

194 
	`öpc_log
("GëInvÆidCÆls:%lu", 
t_°©s
.
gë_övÆid_∑øms
);

195 
	`öpc_log
("SëInvÆidCÆls:%lu", 
t_°©s
.
£t_övÆid_∑øms
);

196 
	`öpc_log
("GëHôs:%lu", 
t_°©s
.
c›y_gë_ˇŒs
 +Å_°©s.
no_c›y_gë_ˇŒs
 -Å_°©s.
gë_mis£s
);

197 
	`öpc_log
("GëMis£s:%lu", 
t_°©s
.
gë_mis£s
);

198 
	`öpc_log
("GëExpúyCœimed:%lu", 
t_°©s
.
gë_expúy_˛aimed
);

199 
	`öpc_log
("GëExpúyUnFëched:%lu", 
t_°©s
.
exp_un„tched
);

200 
	`öpc_log
("LRUAc˚ssUpd©e:%lu", 
t_°©s
.
Ãu_ac˚ss_upd©e
);

201 
	`öpc_log
("SëCÆls:%lu", 
t_°©s
.
£t_ˇŒs
);

202 
	`öpc_log
("SëFaûNoS∑˚:%lu", 
t_°©s
.
£t_Áû_no_•a˚
);

203 
	`öpc_log
("SëFaûTooL¨ge:%lu", 
t_°©s
.
£t_Áû_too_œrge_obje˘
);

204 
	`öpc_log
("SëOvîwrôe:%lu", 
t_°©s
.
£t_ovîwrôe
);

205 
	`öpc_log
("SëOvîwrôeUn„tched:%lu", 
t_°©s
.
ovw_un„tched
);

206 
	`öpc_log
("CurIãms:%lu", 
t_°©s
.
cur_hash_ôems
);

207 
	`öpc_log
("TŸÆIãms:%lu", 
°©s
.
tŸÆ_ôems
);

208 
	`öpc_log
("MaxMemSize:%lu", 
°©s
.
max_mem_size
);

209 
	`öpc_log
("U£dMem‹y:%lu", 
mem_dë
.
u£d_size
);

210 
	`öpc_log
("AvaûabÀMem‹y:%lu", 
mem_dë
.
max_size
 - mem_dë.
u£d_size
);

211 
	`öpc_log
("Evi˘i⁄s:%lu", 
°©s
.
evi˘i⁄s
);

212 
	`öpc_log
("ExpúedByThªad:%lu", 
°©s
.
expúed_by_thªad
);

213 
	`öpc_log
("CœimedByThªad:%lu", 
°©s
.
˛aimed_by_thªad
);

214 
	`öpc_log
("HashSize:%lu", 
°©s
.
hash_size
);

215 
	`öpc_log
("MaxIãmSize:%lu", 
°©s
.
max_ôem_size
);

216 
	`öpc_log
("PageGuidñöe:%lu", 
°©s
.
∑ge_guidñöe
);

217 
	}
}

220 #ifde‡
STATS_ON


221 
	$dump_¶ab_°©s
() {

222 
uöt32_t
 
i
 = 0;

223 
i
 = 0; i < 
¶abs
.
cur_íåõs
; i++) {

224 
¶abíåy_t
* 
¶ab
 = &
¶abs
.
li°
[
i
];

225 
	`öpc_log
("SœbID:%d:ITSize:%u:PageSize:%u:FªeIãm:%u:U£dIãm:%u:PageCou¡:%u:GëCou¡:%lu:SëCou¡:%lu", 
i
, 
¶ab
->
ôem_size
, sœb->
∑ge_size
, sœb->
‰ì_ôem_cou¡
, sœb->
u£d_ôem_cou¡
, sœb->
∑ge_cou¡
, sœb->
gë_ˇŒs
, sœb->
£t_ˇŒs
);

227 
	}
}

238 * 
	$¥o˚ss_f‹_evi˘i⁄_™d_expúy
() {

240 
	`¶ìp
(
CLEANUP_THREAD_SLEEP_INTERVAL
);

241 
	`__°©s_check
(
	`dump_°©s
());

242 
	`__°©s_check
(
	`dump_¶ab_°©s
());

243 
uöt32_t
 
¶ab_id
 = 0;

244 
key_m≠
[
BACKWARD_EXPIRY_CHECK_LIMIT
][
INPC_MAX_KEY_SIZE
 + 1];

245 
uöt8_t
 
keyÀn
[
BACKWARD_EXPIRY_CHECK_LIMIT
];

246 
uöt32_t
 
expúed_cou¡
 = 0;

247 
¶ab_id
 = 0; sœb_id < 
¶abs
.
cur_íåõs
; slab_id++) {

248 
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
¶ab_id
].
lock
);

249 
uöt32_t
 
cou¡
 = 0;

250 
mem_ôem_t
* 
ô
 = 
¶abs
.
li°
[
¶ab_id
].
u£d_èû
.
Ãu_¥ev
;

251 
uöt32_t
 
lim
 = 
	`mö
((
¶abs
.
li°
[
¶ab_id
].
ôem_size
 > 
AGGRESSIVE_EXPIRY_SIZE_CUTOFF
 ? 
BACKWARD_EXPIRY_CHECK_LIMIT
 : 
DEF_BACKWARD_EXPIRY_CHECK_LIMIT
), sœbs.li°[¶ab_id].
u£d_ôem_cou¡
);

252 
uöt32_t
 
expcou¡
 = 0;

253 
ô
->
Ãu_¥ev
 && 
cou¡
++ < 
lim
) {

254 
√ed_to_‰ì
 = 0;

255 i‡((
ô
->
Êags
 & 
ITEM_CLAIMABLE
Ë&& *(
	`gë_ªf_cou¡_±r
(it)) == 0) {

256 
	`ªmove_ôem_‰om_Ãu
(
ô
);

257 
	`put_ôem_to_‰ì_li°
(
ô
->
¶ab_id
, it);

258 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
˛aimed_by_thªad
, 
expúed_cou¡
));

260 i‡((
ô
->
expúy
 < 
	`cuºít_time
())) {

261 
√ed_to_‰ì
 = 1;

263 i‡(
√ed_to_‰ì
) {

265 
keyÀn
[
expcou¡
] = 
ô
->
key_Àn
;

266 
	`mem˝y
(
key_m≠
[
expcou¡
], 
	`gë_key
(
ô
), it->
key_Àn
);

267 
key_m≠
[
expcou¡
][
ô
->
key_Àn
] = '\0';

268 
expcou¡
++;

270 
ô
 = it->
Ãu_¥ev
;

272 
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
¶ab_id
].
lock
);

273 
uöt32_t
 
i
 = 0;

274 
uöt32_t
 
Êags
 = 0 | 
DATA_COPY_OFF_FLAG
;

275 
i
 = 0; i < 
expcou¡
; i++) {

276 
uöt32_t
 
nvÆ
 = 0, 
îr‹_code
 = 0;

277 * 
ªtvÆ
 = 
	`öpc_gë_acquúe
(
key_m≠
[
i
], 
keyÀn
[i], &
nvÆ
, &
îr‹_code
, 
Êags
);

278 i‡(
ªtvÆ
) {

279 
	`öpc_gë_ªÀa£
(&
ªtvÆ
);

281 i‡(
îr‹_code
 =
INPC_ERROR_ITEM_EXPIRED
Ë
expúed_cou¡
++;

284 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
expúed_by_thªad
, 
expúed_cou¡
));

286  
NULL
;

287 
	}
}

289 
mem_ôem_t
* 
	$gë_ôem
(c⁄° * 
key
, c⁄° 
uöt32_t
 
nkey
, c⁄° * 
vÆ
, c⁄° uöt32_à
nvÆ
, c⁄° uöt32_à
¶ab_id
, c⁄° uöt32_à
expúy
) {

290 
mem_ôem_t
* 
ô
 = 
NULL
;

291 
	`öpc_debug
("SœbID:%u:FªeCou¡:%u", 
¶ab_id
, 
¶abs
.
li°
[¶ab_id].
‰ì_ôem_cou¡
);

292 i‡(
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
 == 0) {

293 i‡(
g_evi˘i⁄_°¨ãd
) {

294 
	`öpc_îr‹_log
("NoMemory.EvictionAlreadyBegun");

295  
NULL
;

297 i‡((0 !
	`£tup_∑ge
(
¶ab_id
))) {

298 
g_evi˘i⁄_°¨ãd
 = 1;

299 
	`öpc_îr‹_log
("NoMemory");

300  
NULL
;

303 
ô
 = 
	`ªmove_ôem_‰om_‰ì_li°
(
¶ab_id
);

304 
ô
->
¶ab_id
 = slab_id;

305 
ô
->
key_Àn
 = 
nkey
;

306 
	`my_mem˝y
(
	`gë_key
(
ô
), 
key
, 
nkey
);

307 
	`make_ôem
(
ô
, 
vÆ
, 
nvÆ
, 
expúy
);

308  
ô
;

309 
	}
}

311 
	$¥öt_£âögs
() {

312 
	`öpc_log
("- Max Mem Size:%lukB", 
£âögs
.
max_mem_size
/1024);

313 
	`öpc_log
("- Hash Prop");

314 
	`öpc_log
("----MöHashSize:%ukB", 
£âögs
.
hash_¥›
.
mö_hash_size
/1024);

315 
	`öpc_log
("----MaxHashSize:%ukB", 
£âögs
.
hash_¥›
.
max_hash_size
/1024);

316 
	`öpc_log
("----HashGrowFa˘‹:%u", 
£âögs
.
hash_¥›
.
hash_grow_Á˘‹
);

317 
	`öpc_log
("----HashGrowProbögLígthTriggî:%u", 
£âögs
.
hash_¥›
.
hash_grow_¥obög_Àngth_åiggî
);

318 
	`öpc_log
("----HashGrowFûlTriggî:%u", 
£âögs
.
hash_¥›
.
hash_grow_fûl_åiggî
);

319 
	`öpc_log
("- Item Prop");

320 
	`öpc_log
("----MöIãmSize:%uB", 
£âögs
.
ô_¥›
.
mö_ôem_size
);

321 
	`öpc_log
("----MaxIãmSize:%ukB", 
£âögs
.
ô_¥›
.
max_ôem_size
/1024);

322 
	`öpc_log
("----PageSize:%ukB", 
£âögs
.
ô_¥›
.
∑ge_size
/1024);

323 
	`öpc_log
("----A˘PageSize:%ukB", 
£âögs
.
ô_¥›
.
a˘uÆ_∑ge_size
/1024);

324 
	`öpc_log
("----IãmSizeGrowFa˘‹:%f", 
£âögs
.
ô_¥›
.
ôem_size_grow_Á˘‹
);

325 
	`öpc_log
("- Memory Details");

326 
	`öpc_log
("----MaxSize:%lu", 
mem_dë
.
max_size
);

327 
	`öpc_log
("----U£dSize:%lu", 
mem_dë
.
u£d_size
);

328 
	`öpc_log
("- Hash Table Details");

329 
	`öpc_log
("----CurSize:%u", 
hash
.
cur_size
);

330 
	`öpc_log
("----FûÀdCou¡:%u", 
hash
.
fûÀd_cou¡
);

331 
	`öpc_log
("----NëLígthCou¡:%u", 
hash
.
√t_Àngth_cou¡
);

332 
	`öpc_log
("----LockCou¡:%u", 
hash
.
lock_li°
.
size
);

333 
	`öpc_log
("- Slabs Details");

334 
	`öpc_log
("----MaxE¡rõs:%u", 
¶abs
.
max_íåõs
);

335 
	`öpc_log
("----CurE¡rõs:%u", 
¶abs
.
cur_íåõs
);

336 
	}
}

338 
ölöe
 * 
	$gë_d©a
(
mem_ôem_t
* 
cur
, 
uöt32_t
 *
nvÆ
, 
uöt8_t
 
d©a_c›y_⁄
) {

339 * 
±r
 = 
NULL
;

340 *
nvÆ
 = 
	`gë_vÆue_Àngth
(
cur
);

341 i‡(
d©a_c›y_⁄
 == 1) {

342 
±r
 = 
	`mÆloc
(*
nvÆ
);

343 i‡(
±r
Ë
	`my_mem˝y
’å, (*Ë
	`gë_vÆue_±r
(
cur
), *
nvÆ
);

346 
±r
 = 
	`gë_vÆue_±r
(
cur
);

347 
uöt32_t
* 
ªÂå
 = (uöt32_à*)(
±r
 - ());

348 
	`__sync_„tch_™d_add
(
ªÂå
, 1);

350  
±r
;

351 
	}
}

354 
ölöe
 
	$h™dÀ_gë_ôem_Ãu
(
mem_ôem_t
* 
cur
) {

355 c⁄° 
uöt8_t
 
¶ab_id
 = 
cur
->slab_id;

356 
	`as£π
(
¶ab_id
 < 
¶abs
.
cur_íåõs
);

357 
uöt32_t
 
˘ime
 = 
	`cuºít_time
();

358 i‡(
cur
->
Ãu_ch™ge_time
 + 
LRU_ITEM_UPDATE_TIME
 < 
˘ime
) {

359 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

360 
	`ªmove_ôem_‰om_Ãu
(
cur
);

361 
cur
->
Ãu_ch™ge_time
 = 
˘ime
;

362 
	`put_ôem_to_Ãu
(&
¶abs
.
li°
[
¶ab_id
].
u£d_hód
, 
cur
);

363 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

364 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
Ãu_ac˚ss_upd©e
, 1));

366 
cur
->
Êags
 |
ITEM_ACCESSED
;

367 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
¶abs
.
li°
[
¶ab_id
].
gë_ˇŒs
, 1));

368 
	}
}

370 
ölöe
 
	$¥o˚ss_expúed_ôem_gë
(
mem_ôem_t
* 
cur
, 
uöt8_t
 
d©a_c›y_⁄
) {

371 
	`öpc_debug
("Expúed:%s", 
	`gë_key
(
cur
));

372 
uöt32_t
 
¶ab_id
 = 
cur
->slab_id;

373 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

374 
	`ªmove_ôem_‰om_Ãu
(
cur
);

375 
uöt32_t
 
expúed
 = 0;

376 i‡(
d©a_c›y_⁄
 =1 || (*(
	`gë_ªf_cou¡_±r
(
cur
)) == 0)) {

377 
expúed
 = 1;

378 
	`put_ôem_to_‰ì_li°
(
¶ab_id
, 
cur
);

381 
	`put_ôem_to_Ãu
(
¶abs
.
li°
[
¶ab_id
].
u£d_èû
.
Ãu_¥ev
, 
cur
);

382 
cur
->
Êags
 |
ITEM_CLAIMABLE
;

384 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

385  
expúed
;

386 
	}
}

388 
ölöe
 
	$loˇã_ôem
(
mem_ôem_t
** 
cur
, mem_ôem_t** 
¥ev
, c⁄° * 
key
, 
uöt16_t
 
nkey
) {

389 
mem_ôem_t
* 
l_cur
 = *
cur
;

390 
mem_ôem_t
* 
l_¥ev
 = *
¥ev
;

391 ; 
l_cur
; 
l_¥ev
 =Ü_cur,Ü_cu∏l_cur->
√xt
) {

392 i‡(
l_cur
->
key_Àn
 !
nkey
) ;

393 i‡(!
	`memcmp
(
key
, 
	`gë_key
(
l_cur
), 
nkey
)) ;

395 *
cur
 = 
l_cur
;

396 *
¥ev
 = 
l_¥ev
;

397 
	}
}

403 * 
	$öpc_gë_acquúe
(c⁄° *
key
, c⁄° 
uöt8_t
 
nkey
, 
uöt32_t
* 
nvÆ
, uöt32_t* 
îr‹_code
, uöt8_à
Êags
) {

405 i‡(
key
 =
NULL
 || 
nkey
 =0 || 
îr‹_code
 == NULL) {

406 
	`öpc_debug
("BADPARAM:key:%s:nkey:%u", 
key
, 
nkey
);

407 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
gë_övÆid_∑øms
, 1));

408 i‡(
îr‹_code
 !
NULL
Ë*îr‹_codê
INPC_ERROR_INVALID_GET_PARAMS
;

409  
NULL
;

411 
uöt8_t
 
d©a_c›y_⁄
 = (
Êags
 & 
DATA_COPY_ON_FLAG
);

412 
uöt32_t
 
h
 = 
	`gë_öpc_hash
(
key
, 
nkey
, 0);

413 
uöt32_t
 
öd
 = 
h
 & (
hash
.
hash_™d_Á˘‹
);

414 
uöt32_t
 
lock_öd
;

415 i‡(
d©a_c›y_⁄
)

417 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
c›y_gë_ˇŒs
, 1));

419 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
no_c›y_gë_ˇŒs
, 1));

421 
	`__wôh_lock
(
lock_öd
 = 
	`gë_lock_öd
(
öd
, 
hash
.
hash_™d_Á˘‹
, 
HASHTABLE_DEFAULT_LOCKS_AND
));

422 *
nvÆ
 = 0;

423 
mem_ôem_t
* 
¥ev
 = 
NULL
;

424 * 
±r
 = 
NULL
;

425 
	`__wôh_lock
(
	`±hªad_muãx_lock
(
	`gë_hash_lock
(
lock_öd
)));

426 
mem_ôem_t
* 
cur
 = 
hash
.
li°
[
öd
].
√xt
;

427 
	`loˇã_ôem
(&
cur
, &
¥ev
, 
key
, 
nkey
);

428 i‡(
cur
) {

429 i‡(
	`gë_expúy
(
cur
Ë> 
	`cuºít_time
()) {

430 
±r
 = 
	`gë_d©a
(
cur
, 
nvÆ
, 
d©a_c›y_⁄
);

432 
	`h™dÀ_gë_ôem_Ãu
(
cur
);

435 
	`ªmove_ôem_‰om_hash_li°
(
¥ev
, 
cur
, 
öd
);

436 
uöt32_t
 
is_expúed
 = 
	`¥o˚ss_expúed_ôem_gë
(
cur
, 
d©a_c›y_⁄
);

437 i‡(
is_expúed
) {

438 i‡((
cur
->
Êags
 & 
ITEM_ACCESSED
)) {

439 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
gë_expúy_˛aimed
, 1));

442 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
exp_un„tched
, 1));

445 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
gë_mis£s
, 1));

446 *
îr‹_code
 = 
INPC_ERROR_ITEM_EXPIRED
;

450 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
gë_mis£s
, 1));

451 *
îr‹_code
 = 
INPC_ERROR_ITEM_ABSENT
;

453 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(
	`gë_hash_lock
(
lock_öd
)));

454 
	`öpc_debug
("Key:%s:nkey:%u:nvÆ:%u:Eº‹:%u:Fœgs:%u", 
key
, 
nkey
, *
nvÆ
, *
îr‹_code
, 
Êags
);

455  
±r
;

456 
	}
}

458 
	$öpc_gë_ªÀa£
(** 
±r
) {

459 
	`as£π
(
±r
 && *ptr);

460 i‡(*
±r
 < 
mem_dë
.±∏|| *±∏>mem_dë.±∏+ mem_dë.
max_size
) {

461 
	`‰ì
(*
±r
);

464 
uöt32_t
* 
ªf˘_±r
 = (uöt32_t*)(*
±r
 - (
uöt64_t
));

465 
	`__sync_„tch_™d_sub
(
ªf˘_±r
, 1);

467 *
±r
 = 
NULL
;

468 
	}
}

470 
	$öpc_£t
(c⁄° * 
key
, c⁄° 
uöt8_t
 
nkey
, c⁄° * 
vÆue
, c⁄° 
uöt32_t
 
nvÆ
, c⁄° uöt32_à
expúy
) {

472 i‡(
key
 =
NULL
 || 
nkey
 =0 || 
vÆue
 =NULL || 
nvÆ
 == 0) {

473 
	`öpc_debug
("BadP¨am:Key:%s:nkey:%u:nvÆ:%u", 
key
, 
nkey
, 
nvÆ
);

474 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
£t_övÆid_∑øms
, 1));

475  
INPC_ERROR_INVALID_SET_COMMAND
;

477 
	`öpc_debug
("Key:%s:nKey:%u:nvÆ:%u:exp:%u", 
key
, 
nkey
, 
nvÆ
, 
expúy
);

478 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
£t_ˇŒs
, 1));

479 
√w_¶ab_id
 = 
	`gë_¶ab
(
nkey
, 
nvÆ
);

480 i‡(
√w_¶ab_id
 == -1) {

481 
	`öpc_îr‹_log
("TOOL¨geObje˘:Key:%s:K:%u:V:%u", 
key
, 
nkey
, 
nvÆ
);

482 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
£t_Áû_too_œrge_obje˘
, 1));

483  
INPC_ERROR_SET_FAILED_TOO_BIG_OBJECT
;

486 
expú©i⁄_time
 = 
expúy
;

487 i‡(!
expú©i⁄_time
)Éxpiration_time = 31104000;

488 
uöt32_t
 
h
 = 
	`gë_öpc_hash
(
key
, 
nkey
, 0);

489 
uöt32_t
 
öd
 = 
h
 & (
hash
.
hash_™d_Á˘‹
);

490 
uöt32_t
 
lock_öd
 = 
	`gë_lock_öd
(
öd
, 
hash
.
hash_™d_Á˘‹
, 
HASHTABLE_DEFAULT_LOCKS_AND
);

491 
	`öpc_debug
("%lu:Key:%s:hash:%u:öd:%u:lock_öd:%u:KSize:%u:VSize:%u:Exp:%u:SœbID:%u:SœbITSize:%u", 
	`±hªad_£lf
(), 
key
, 
h
, 
öd
, 
lock_öd
, 
nkey
, 
nvÆ
, 
expúy
, 
√w_¶ab_id
, 
¶abs
.
li°
[√w_¶ab_id].
ôem_size
);

492 
	`__wôh_lock
(
	`±hªad_muãx_lock
(
	`gë_hash_lock
(
lock_öd
)));

493 
mem_ôem_t
 *
cur
 = 
hash
.
li°
[
öd
].
√xt
;

494 
mem_ôem_t
* 
¥ev
 = 
NULL
;

495 
	`loˇã_ôem
(&
cur
, &
¥ev
, 
key
, 
nkey
);

497 
rc
 = 0;

498 
ﬁd_¶ab_id
 = -1;

499 
mem_ôem_t
 *
ô
 = 
NULL
;

500 i‡(
cur
) {

501 i‡(
cur
->
Êags
 & 
ITEM_ACCESSED
) {

502 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
£t_ovîwrôe
, 1));

505 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
ovw_un„tched
, 1));

507 
ﬁd_¶ab_id
 = 
cur
->
¶ab_id
;

508 
	`öpc_debug
("IãmFound:Key:%s:ﬁdSÆb:%u:NewSœb:%u", 
key
, 
ﬁd_¶ab_id
, 
√w_¶ab_id
);

509 
	`ªmove_ôem_‰om_hash_li°
(
¥ev
, 
cur
, 
öd
);

510 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
ﬁd_¶ab_id
].
lock
));

511 
	`ªmove_ôem_‰om_Ãu
(
cur
);

512 
ªf_cou¡
 = *((*)
	`gë_ªf_cou¡_±r
(
cur
));

513 i‡(
ªf_cou¡
 > 0 ) {

514 
	`put_ôem_to_Ãu
(
¶abs
.
li°
[
ﬁd_¶ab_id
].
u£d_èû
.
Ãu_¥ev
, 
cur
);

515 
cur
->
Êags
 |
ITEM_CLAIMABLE
;

516 
	`öpc_debug
("CœimM¨k:%s", 
key
);

519 
	`öpc_debug
("Cœimed:%s", 
key
);

520 
	`put_ôem_to_‰ì_li°
(
ﬁd_¶ab_id
, 
cur
);

522 i‡(
ﬁd_¶ab_id
 !
√w_¶ab_id
) {

523 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
ﬁd_¶ab_id
].
lock
));

526 i‡(
ﬁd_¶ab_id
 !
√w_¶ab_id
) {

527 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
√w_¶ab_id
].
lock
));

529 
ô
 = 
	`gë_ôem
(
key
, 
nkey
, 
vÆue
, 
nvÆ
, 
√w_¶ab_id
, 
expú©i⁄_time
);

530 i‡(
ô
 =
NULL
) {

531 
	`öpc_îr‹_log
("SETFAIL:%s", 
key
);

532 
rc
 = 
INPC_ERROR_SET_FAILED_NO_SPACE
;

533 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
°©s
.
£t_Áû_no_•a˚
, 1));

534 
d⁄e
;

536 
	`put_ôem_to_hash_hód
(
öd
, 
ô
);

537 
	`put_ôem_to_Ãu
(&
¶abs
.
li°
[
√w_¶ab_id
].
u£d_hód
, 
ô
);

538 
	`__°©s_check
(
	`__sync_„tch_™d_add
(&
¶abs
.
li°
[
√w_¶ab_id
].
£t_ˇŒs
, 1));

539 
d⁄e
:

540 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
√w_¶ab_id
].
lock
));

541 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(
	`gë_hash_lock
(
lock_öd
)));

542  
rc
;

543 
	}
}

549 
	$£tup_ôems
(c⁄° 
uöt32_t
 
¶ab_id
, c⁄° 
uöt64_t
 
ba£_off£t
) {

551 
uöt32_t
 
ôem_size
 = 
¶abs
.
li°
[
¶ab_id
].item_size;

552 
	`as£π
(
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
 == 0);

553 * 
°¨t
 = (
mem_dë
.
±r
 + 
ba£_off£t
);

554 
ôem_cou¡
 = 
¶abs
.
li°
[
¶ab_id
].
∑ge_size
 / 
ôem_size
;

555 
	`öpc_debug
("PageIãmiz©i⁄:Sœb:%u:PageSize:%u:IãmSize:%u:Cou¡:%u", 
¶ab_id
, 
¶abs
.
li°
[¶ab_id].
∑ge_size
, 
ôem_size
, 
ôem_cou¡
);

556 
i
 = 0;

557 * 
cuºít
 = 
°¨t
;

558 * 
√xt
 = 
°¨t
;

559 ; 
i
 < 
ôem_cou¡
; i++) {

560 
cuºít
 = 
√xt
;

561 
√xt
 = 
cuºít
 + 
ôem_size
;

562 
	`öôülize_ôem
(
cuºít
, 
√xt
, 
¶ab_id
, 
ôem_size
);

565 ((
mem_ôem_t
*)
cuºít
)->
√xt
 = 
¶abs
.
li°
[
¶ab_id
].
‰ì
;

566 
¶abs
.
li°
[
¶ab_id
].
‰ì
 = (
mem_ôem_t
*)
°¨t
;

567 
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
 +
ôem_cou¡
;

570 
	}
}

572 
uöt32_t
 
	$£tup_∑ge
(c⁄° 
uöt32_t
 
¶ab_id
) {

573 
	`öpc_debug
("PagêReque°ed:Sœb:%u:Size:%u", 
¶ab_id
, 
¶abs
.
li°
[¶ab_id].
ôem_size
);

574 
	`as£π
(
¶abs
.
li°
[
¶ab_id
].
‰ì_ôem_cou¡
 == 0);

575 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
mem_dë
.
lock
));

576 
uöt64_t
 
cuºít_u£d_size
 = 
mem_dë
.
u£d_size
;

577 i‡(
cuºít_u£d_size
 + 
¶abs
.
li°
[
¶ab_id
].
∑ge_size
 > 
mem_dë
.
max_size
) {

578 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
mem_dë
.
lock
));

579 
	`öpc_îr‹_log
("C™nŸ AŒoˇãÖage.Reque°ed:%u CuºítU£d:%lu Max:%lu", 
£âögs
.
ô_¥›
.
a˘uÆ_∑ge_size
, 
cuºít_u£d_size
, 
mem_dë
.
max_size
);

580  
INPC_ERROR_PAGE_ALLOCATION_FAIL
;

582 
mem_dë
.
u£d_size
 +
¶abs
.
li°
[
¶ab_id
].
∑ge_size
;

583 
uöt64_t
 
l_u£d_size
 = 
mem_dë
.
u£d_size
;

584 
uöt64_t
 
l_max_size
 = 
mem_dë
.
max_size
;

585 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
mem_dë
.
lock
));

586 i‡(
l_u£d_size
 > 3*(
l_max_size
 >> 2)) {

587 
	`£nd_öpc_mem_≥r˚¡_°©s
(
MEM_CROSSED_75_PERCENT
);

589 
	`£tup_ôems
(
¶ab_id
, 
cuºít_u£d_size
);

590 
	`öpc_debug
("Mem‹y:Assig√d:%luNew:%lu:Sœb:%u:FªeITCt:%u", 
cuºít_u£d_size
, 
mem_dë
.
u£d_size
, 
¶ab_id
, 
¶abs
.
li°
[¶ab_id].
‰ì_ôem_cou¡
);

591 
¶abs
.
li°
[
¶ab_id
].
∑ge_cou¡
++;

593 
	}
}

599 
	$¶abbög_öô
() {

600 
uöt32_t
 
°¨t_size
 = 
£âögs
.
ô_¥›
.
mö_ôem_size
;

601 
uöt32_t
 
íd_size
 = 
£âögs
.
ô_¥›
.
max_ôem_size
;

602 
uöt32_t
 
∑ge_size
 = 
£âögs
.
ô_¥›
.
a˘uÆ_∑ge_size
;

603 
grow_Á˘‹
 = 
£âögs
.
ô_¥›
.
ôem_size_grow_Á˘‹
;

604 
uöt32_t
 
√xt_size
 = 
	`eight_byã_Æign
(
°¨t_size
);

605 
	`öpc_log
("SèπSize:%u:EndSize:%u:PageSize:%u:GrowthFa˘‹:%f:IãmMëaSize:%u", 
°¨t_size
, 
íd_size
, 
∑ge_size
, 
grow_Á˘‹
, 
	`gë_Æig√d_ôem_mëa_size
());

606 
uöt32_t
 
¶ab_id
 = 0;

607 
	`mem£t
(&
¶abs
, 0, (slabs));

608 
¶abs
.
max_íåõs
 = 
MAX_SLAB_SIZE
;

609 
uöt32_t
 
exåa_•a˚
 = 
	`gë_Æig√d_ôem_mëa_size
(Ë+ 
	`eight_byã_Æign
(
KEY_MARGIN
);

610 
uöt32_t
 
ôem_size
 = 
√xt_size
 + 
exåa_•a˚
;

611 
	`öpc_debug
("NextSize:%u:IãmSize:%u", 
√xt_size
, 
ôem_size
);

612  ; 
¶ab_id
 < 
¶abs
.
max_íåõs
 && 
√xt_size
 <
íd_size
 && 
ôem_size
 <
∑ge_size
; slab_id++) {

613 
√xt_size
 = (Íext_sizê* ()
grow_Á˘‹
;

614 
√xt_size
 = 
	`eight_byã_Æign
(next_size);

615 
	`__wôh_lock
(
	`±hªad_muãx_öô
(&
¶abs
.
li°
[
¶ab_id
].
lock
, 
NULL
));

616 
	`__wôh_lock
(
	`±hªad_muãx_lock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

617 i‡(
√xt_size
 + 
exåa_•a˚
 > 
∑ge_size
Ë
ôem_size
 =Öage_size;

618 
¶abs
.
li°
[
¶ab_id
].
ôem_size
 = item_size;

619 
¶abs
.
li°
[
¶ab_id
].
∑ge_size
 = (∑ge_size/
ôem_size
)*item_size;

620 
	`£tup_∑ge
(
¶ab_id
);

621 
¶abs
.
li°
[
¶ab_id
].
u£d_hód
.
Ãu_√xt
 = &¶abs.li°[¶ab_id].
u£d_èû
;

622 
¶abs
.
li°
[
¶ab_id
].
u£d_èû
.
Ãu_¥ev
 = &¶abs.li°[¶ab_id].
u£d_hód
;

623 
¶abs
.
li°
[
¶ab_id
].
u£d_hód
.
Ãu_¥ev
 = sœbs.li°[¶ab_id].
u£d_èû
.
Ãu_√xt
 = 
NULL
;

624 
¶abs
.
li°
[
¶ab_id
].
u£d_hód
.
expúy
 = sœbs.li°[¶ab_id].
u£d_èû
.expiry = 0xFFFFFFFF;

625 
¶abs
.
li°
[
¶ab_id
].
u£d_hód
.¶ab_id¶abs.li°[¶ab_id].
u£d_èû
.slab_id= -1;

626 
¶abs
.
li°
[
¶ab_id
].
gë_ˇŒs
 = sœbs.li°[¶ab_id].
£t_ˇŒs
 = 0;

627 
	`__wôh_lock
(
	`±hªad_muãx_u∆ock
(&
¶abs
.
li°
[
¶ab_id
].
lock
));

628 
ôem_size
 = 
√xt_size
 + 
exåa_•a˚
;

629 
	`öpc_debug
("NextSize:%u:IãmSize:%u", 
√xt_size
, 
ôem_size
);

632 
¶abs
.
cur_íåõs
 = 
¶ab_id
;

633 
	`as£π
(
¶abs
.
cur_íåõs
 != 0);

634 
	}
}

636 
	$mem‹y_•a˚_öô
() {

637 
mem_dë
.
±r
 = (*Ë
	`mÆloc
(
£âögs
.
max_mem_size
);

638 
	`as£π
(
mem_dë
.
±r
 !
NULL
);

639 
	`mem£t
(
mem_dë
.
±r
, 0, 
£âögs
.
max_mem_size
);

640 
mem_dë
.
max_size
 = 
£âögs
.
max_mem_size
;

641 
	`öpc_log
("Mem‹yDëaûs:Sèπ:%lu:Size:%lu", ()
mem_dë
.
±r
, mem_dë.
max_size
);

642 
	`__wôh_lock
(
	`±hªad_muãx_öô
(&
mem_dë
.
lock
, 
NULL
));

643 
	}
}

645 
	$hash_¥›_öô
(c⁄° 
hash_¥›îtõs_t
 
hash_¥›
) {

646 
£âögs
.
hash_¥›
 = hash_prop;

648 i‡(!
£âögs
.
hash_¥›
.
mö_hash_size
Ë£âögs.hash_¥›.mö_hash_sizê
DEFAULT_MIN_HASH_SIZE
;

649 i‡(!
£âögs
.
hash_¥›
.
max_hash_size
Ë£âögs.hash_¥›.max_hash_sizê
DEFAULT_MAX_HASH_SIZE
;

650 i‡(!
£âögs
.
hash_¥›
.
hash_grow_Á˘‹
Ë£âögs.hash_¥›.hash_grow_Á˘‹ = 
DEFAULT_HASH_GROW_FACTOR
;

651 i‡(!
£âögs
.
hash_¥›
.
hash_grow_¥obög_Àngth_åiggî
Ë£âögs.hash_¥›.hash_grow_¥obög_Àngth_åiggî = 
DEFAULT_HASH_GROW_PROBING_LENGTH_TRIGGER
;

652 i‡(!
£âögs
.
hash_¥›
.
hash_grow_fûl_åiggî
Ë£âögs.hash_¥›.hash_grow_fûl_åiggî = 
DEFAULT_HASH_GROW_FILL_TRIGGER
;

653 
	}
}

655 
	$ôem_¥›_öô
(c⁄° 
ôem_¥›îtõs_t
 
ô_¥›
) {

656 
£âögs
.
ô_¥›
 = it_prop;

657 i‡(!
£âögs
.
ô_¥›
.
mö_ôem_size
Ë£âögs.ô_¥›.mö_ôem_sizê
DEFAULT_MIN_ITEM_SIZE
;

658 i‡(!
£âögs
.
ô_¥›
.
max_ôem_size
Ë£âögs.ô_¥›.max_ôem_sizê
DEFAULT_MAX_ITEM_SIZE
;

659 i‡(!
£âögs
.
ô_¥›
.
∑ge_size
Ë£âögs.ô_¥›.∑ge_size
DEFAULT_PAGE_SIZE
;

660 
£âögs
.
ô_¥›
.
a˘uÆ_∑ge_size
 = sëtögs.ô_¥›.
∑ge_size
 + 
	`eight_byã_Æign
(
INPC_MAX_KEY_SIZE
Ë+ 
	`gë_Æig√d_ôem_mëa_size
();

661 i‡(!
£âögs
.
ô_¥›
.
ôem_size_grow_Á˘‹
Ë£âögs.ô_¥›.ôem_size_grow_Á˘‹ = 
DEFAULT_ITEM_SIZE_GROW_FACTOR
;

662 
	}
}

664 
	$as£π_¥›îtõs_vÆues
() {

665 
	`as£π
(
£âögs
.
hash_¥›
.
mö_hash_size
 > 0);

666 
	`as£π
(
£âögs
.
hash_¥›
.
max_hash_size
 >£âögs.hash_¥›.
mö_hash_size
);

667 
	`as£π
(
£âögs
.
hash_¥›
.
hash_grow_Á˘‹
 >= 1);

668 
	`as£π
(
£âögs
.
hash_¥›
.
hash_grow_¥obög_Àngth_åiggî
 > 1);

669 
	`as£π
(
£âögs
.
hash_¥›
.
hash_grow_fûl_åiggî
 > 0);

670 
	`as£π
(
£âögs
.
ô_¥›
.
mö_ôem_size
 > 0);

671 
	`as£π
(
£âögs
.
ô_¥›
.
∑ge_size
 >
	`eight_byã_Æign
(£âögs.ô_¥›.
max_ôem_size
));

672 
	`as£π
(
£âögs
.
ô_¥›
.
max_ôem_size
 > sëtögs.ô_¥›.
mö_ôem_size
);

673 
	`as£π
(
£âögs
.
ô_¥›
.
ôem_size_grow_Á˘‹
 > 1);

674 
	`as£π
(
£âögs
.
max_mem_size
 > 0);

675 
	}
}

677 
	$hashèbÀ_locks_öô
() {

678 
hash
.
lock_li°
.
locks
 = 
	`mÆloc
((
±hªad_muãx_t
Ë* 
HASHTABLE_DEFAULT_LOCKS_SIZE
);

679 
	`as£π
(
hash
.
lock_li°
.
locks
 !
NULL
);

680 
hash
.
lock_li°
.
size
 = 
HASHTABLE_DEFAULT_LOCKS_SIZE
;

681 
i
 = 0;

682 ; 
i
 < 
HASHTABLE_DEFAULT_LOCKS_SIZE
; i++) {

683 
	`__wôh_lock
(
	`±hªad_muãx_öô
(&
hash
.
lock_li°
.
locks
[
i
], 
NULL
));

685 
	}
}

687 
	$hashèbÀ_öô
() {

688 
hash
.
li°
 = 
	`mÆloc
((
hash_íåy_t
Ë* 
£âögs
.
hash_¥›
.
mö_hash_size
);

689 
	`as£π
(
hash
.
li°
 !
NULL
);

690 
	`mem£t
(
hash
.
li°
, 0, (
hash_íåy_t
)*
£âögs
.
hash_¥›
.
mö_hash_size
);

691 
hash
.
cur_size
 = 
£âögs
.
hash_¥›
.
mö_hash_size
;

692 
hash
.
hash_™d_Á˘‹
 = hash.
cur_size
 - 1;

693 
hash
.
fûÀd_cou¡
 = 0;

694 
hash
.
√t_Àngth_cou¡
 = 0;

695 
hash
.
max_chaö
 = 0;

696 
	`hashèbÀ_locks_öô
();

697 
	`öpc_debug
("HashTabÀ:CurSize:%u:AndFa˘‹:%u:FûÀdCou¡:%u:NëLígthChaö:%u:MaxChaö:%u:Såù≥dLocks:%u", 
hash
.
cur_size
, hash.
hash_™d_Á˘‹
, hash.
fûÀd_cou¡
,

698 
hash
.
√t_Àngth_cou¡
, hash.
max_chaö
, 
HASHTABLE_DEFAULT_LOCKS_SIZE
);

699 
	}
}

701 * 
	$m™age_timî
() {

703 
uöt32_t
 
c_time
 = (uöt32_tË
	`time
(
NULL
);

704 
g_time
 = 
c_time
;

705 
	`¶ìp
(1);

707  
NULL
;

708 
	}
}

710 
	$öpc_°©s_öô
() {

711 
	`__°©s_check
(
	`mem£t
(&
°©s
, 0, (stats)));

712 
	`__°©s_check
(
°©s
.
°¨t_time
 = 
g_time
);

713 
	}
}

715 
uöt32_t
 
	$öpc_öô
(c⁄° 
uöt64_t
 
max_mem_size
, c⁄° 
hash_¥›îtõs_t
 
hash_¥›
, c⁄° 
ôem_¥›îtõs_t
 
ô_¥›
) {

716 
£âögs
.
max_mem_size
 = max_mem_size;

717 
	`hash_¥›_öô
(
hash_¥›
);

718 
	`ôem_¥›_öô
(
ô_¥›
);

719 
	`as£π_¥›îtõs_vÆues
();

720 
±hªad_t
 
id
, 
id1
;

721 
	`±hªad_¸óã
(&
id
, 
NULL
, 
m™age_timî
, NULL);

722 
	`±hªad_¸óã
(&
id1
, 
NULL
, 
¥o˚ss_f‹_evi˘i⁄_™d_expúy
, NULL);

723 
	`mem‹y_•a˚_öô
() ;

724 
	`hashèbÀ_öô
();

725 
	`¶abbög_öô
();

726 
	`__°©s_check
(
	`öpc_°©s_öô
());

727 
	`¥öt_£âögs
();

729 
	}
}

734 #ifde‡
INPC_TEST_ON


735 
uöt32_t
 
	$ã°_¶abbög
() {

736 
	`öpc_log
("Te°SuôeID:%s\n", 
__FUNCTION__
);

737 
uöt64_t
 
max_mem_size
 = 
MEMORY_LIMIT
;

738 
hash_¥›îtõs_t
 
hash_¥›
 = {0, 0, 0, 0, 0};

739 
ôem_¥›îtõs_t
 
ô_¥›
 = {0, 0, 0, 0, 0};

740 
	`öpc_öô
(
max_mem_size
, 
hash_¥›
, 
ô_¥›
);

742 
	}
}

744 
uöt32_t
 
	$gë_ã°
(
°¨t
, 
limô
) {

745 
uöt32_t
 
îr‹_code
 = 0;

746 
cou¡
 = -1;

747 
uöt32_t
 
öd
 = 
°¨t
 & 
limô
;

748 
uöt32_t
 
nvÆ
 = 0;

749 * 
vÆ
;

750 
uöt32_t
 
s_cou¡
 = 0, 
f_cou¡
 = 0;

751 
uöt8_t
 
Êags
 = 0 | 
DATA_COPY_ON_FLAG
;

752 ++
cou¡
 <
limô
) {

753 i‡(
NULL
 !(
vÆ
 = 
	`öpc_gë_acquúe
(
key_li°
[
öd
 & 
limô
], 
KEY_LEN
, &
nvÆ
, &
îr‹_code
, 
Êags
))) {

754 ++
s_cou¡
;

755 
	`öpc_debug
("VÆue:%s", 
vÆ
);

756 
	`as£π
(
	`°∫cmp
(
vÆ_§c
, 
vÆ
, 
	`°æí
(val_src)) == 0 );

757 
	`öpc_gë_ªÀa£
(&
vÆ
);

760 
	`öpc_debug
("GëFaû:%s", 
key_li°
[
cou¡
]);

761 ++
f_cou¡
;

763 
öd
 = ((öd + 1Ë& 
limô
);

766 
	`≠röt
("GëTe°:%u:NëProbe:%u:Avg:%u:S:%u:F:%u", 
limô
, 
tŸÆ_¥obe
,ÅŸÆ_¥obe/
cou¡
, 
s_cou¡
, 
f_cou¡
);

768 
	}
}

770 
uöt32_t
 
	$£t_ã°
(
°¨t
, 
limô
) {

771 
cou¡
 = -1;

772 
uöt32_t
 
öd
 = 
°¨t
 & 
limô
;

773 
uöt32_t
 
s_cou¡
 = 0, 
f_cou¡
 = 0;

774 ++
cou¡
 <
limô
) {

775 (0 =
	`öpc_£t
(
key_li°
[
öd
], 
KEY_LEN
, 
vÆ_§c
, 
MAX_OBJ_SZ
, 
TEST_SET_TIMEOUT
)Ë? ++
s_cou¡
 : ++
f_cou¡
;

776 
öd
 = ((öd + 1Ë& 
limô
);

778 
	`≠röt
("SëTe°:%u:MaxChaö:%u:NëChaö:%u:S:%u:F:%u", 
limô
, 
hash
.
max_chaö
, hash.
√t_Àngth_cou¡
, 
s_cou¡
, 
f_cou¡
);

780 
	}
}

782 
	$uöt32_t
 (*
	tÂå
)(, );

783 
uöt32_t
 
	$timed_run
–
limô
, 
Âå
 
f
) {

785 
timevÆ
 
°_tv
, 
íd_tv
;

786 
	`gëtimeofday
(&
°_tv
, 
NULL
);

787 
	`f
(
	`ønd
(), 
limô
);

788 
	`gëtimeofday
(&
íd_tv
, 
NULL
);

789 
	`≠röt
("Time(us):%lu", (
íd_tv
.
tv_£c
 - 
°_tv
.tv_£c)*1000000 + (íd_tv.
tv_u£c
 - st_tv.tv_usec));

791 
	}
}

793 * 
	$£t_ˇŒî
() {

794 
timevÆ
 
°_tv
, 
íd_tv
;

795 
	`gëtimeofday
(&
°_tv
, 
NULL
);

796 
˘
 = 0;

797 
˘
++ < 
SET_LOOP
) {

798 
	`timed_run
–
SET_LIMIT
, 
£t_ã°
);

800 
	`gëtimeofday
(&
íd_tv
, 
NULL
);

801 
√t_cou¡
 = 
SET_LOOP
*
SET_LIMIT
;

802 
√t_time
 = (
íd_tv
.
tv_£c
 - 
°_tv
.tv_£c)*1000000 + (íd_tv.
tv_u£c
 - st_tv.tv_usec);

803 
	`≠röt
("SETTime:Cou¡:%lu:%lu:Throughput:%lu", 
√t_cou¡
, 
√t_time
, (net_count*1000000)/net_time);

804  
NULL
;

805 
	}
}

807 * 
	$gë_ˇŒî
() {

808 
timevÆ
 
°_tv
, 
íd_tv
;

809 
	`gëtimeofday
(&
°_tv
, 
NULL
);

810 
˘
 = 0;

811 
˘
++ < 
GET_LOOP
) {

812 
	`timed_run
–
GET_LIMIT
, 
gë_ã°
);

814 
	`gëtimeofday
(&
íd_tv
, 
NULL
);

815 
√t_cou¡
 = 
GET_LOOP
*
GET_LIMIT
;

816 
√t_time
 = (
íd_tv
.
tv_£c
 - 
°_tv
.tv_£c)*1000000 + (íd_tv.
tv_u£c
 - st_tv.tv_usec);

817 
	`≠röt
("GETTime:Cou¡:%lu:%lu(us):Throughput:%lu", 
√t_cou¡
, 
√t_time
, (net_count*1000000)/net_time);

818  
NULL
;

819 
	}
}

821 
	$¸óã_keys
(c⁄° 
uöt32_t
 
lim
) {

822 
max
 = (1 << 
lim
) - 1;

823 
i
 = 0;

824 
i
 <
max
) {

825 
	`•rötf
(
key_li°
[
i
], "ShreeGanesh%d", i);

826 
i
++;

828 
	`≠röt
("KeysGíî©ed:%d", 
i
);

830 
	}
}

835 
	$maö
() {

836 
n_thªads
 = 
SET_THREAD_COUNT
 + 
GET_THREAD_COUNT
;

837 
±hªad_t
 *
id
 = 
	`mÆloc
(’thªad_t)*
n_thªads
);

838 
	`as£π
(
id
 !
NULL
);

839 
	`¸óã_keys
(
KEY_FACTOR
);

840 
	`ã°_¶abbög
();

841 
	`timed_run
–
SET_LIMIT
, 
£t_ã°
);

842 #ifde‡
GOOGLE_PROFILER


843 
	`ProfûîSèπ
("./google_prof");

845 
i
 = 0;

846 ; 
i
 < 
SET_THREAD_COUNT
; i++) {

847 
	`±hªad_¸óã
(&
id
[
i
], 
NULL
, 
£t_ˇŒî
, NULL);

849 
i
 = 0; i < 
GET_THREAD_COUNT
; i++) {

850 
	`±hªad_¸óã
(&
id
[
SET_THREAD_COUNT
 + 
i
], 
NULL
, 
gë_ˇŒî
, NULL);

852 
	`¶ìp
(
MAIN_THREAD_WAIT_TIME
);

853 #ifde‡
GOOGLE_PROFILER


854 
	`ProfûîSt›
();

856 
i
 = 0; i < 
SET_THREAD_COUNT
; i++) {

857 
	`±hªad_joö
(
id
[
i
], 
NULL
);

859 
i
 = 0; i < 
GET_THREAD_COUNT
; i++) {

860 
	`±hªad_joö
(
id
[
SET_THREAD_COUNT
 + 
i
], 
NULL
);

862 
	`dump_°©s
();

864 
	}
}

	@/home/kartik/nwe/util/mtwist.c

1 #i‚de‡
löt


2 
	gRcs_Id
[] =

152 #ifde‡
_WIN32


153 #unde‡
WIN32


154 
	#WIN32


	)

157 
	~<öây≥s.h
>

158 
	~<°dio.h
>

159 
	~<°dlib.h
>

160 #ifde‡
WIN32


161 
	~<sys/timeb.h
>

163 
	~<sys/time.h
>

174 
	#MT_INLINE


	)

175 
	#MT_EXTERN


	)

176 #unde‡
MT_GENERATE_CODE_IN_HEADER


177 
	#MT_GENERATE_CODE_IN_HEADER
 1

	)

179 
	~"mtwi°.h
"

184 
mts_m¨k_öôülized
(
mt_°©e
* 
°©e
);

186 
mts_£ed32
(
mt_°©e
* 
°©e
, 
uöt32_t
 
£ed
);

188 
mts_£ed32√w
(
mt_°©e
* 
°©e
, 
uöt32_t
 
£ed
);

190 
mts_£edfuŒ
(
mt_°©e
* 
°©e
,

191 
uöt32_t
 
£eds
[
MT_STATE_SIZE
]);

193 
mts_£ed
(
mt_°©e
* 
°©e
);

195 
mts_good£ed
(
mt_°©e
* 
°©e
);

198 
mts_dev£ed
(
mt_°©e
* 
°©e
, c⁄° * 
£ed_dev
);

200 
mts_be°£ed
(
mt_°©e
* 
°©e
);

203 
mts_ª‰esh
(
mt_°©e
* 
°©e
);

205 
mts_ßve°©e
(
FILE
* 
°©efûe
, 
mt_°©e
* 
°©e
);

207 
mts_lﬂd°©e
(
FILE
* 
°©efûe
, 
mt_°©e
* 
°©e
);

210 
mt_£ed32
(
uöt32_t
 
£ed
);

212 
mt_£ed32√w
(
uöt32_t
 
£ed
);

214 
mt_£edfuŒ
(
uöt32_t
 
£eds
[
MT_STATE_SIZE
]);

216 
mt_£ed
();

217 
mt_good£ed
();

220 
mt_be°£ed
();

223 
mt_°©e
* 
mt_gë°©e
();

226 
mt_ßve°©e
(
FILE
* 
°©efûe
);

228 
mt_lﬂd°©e
(
FILE
* 
°©efûe
);

240 
	#RECURRENCE_OFFSET
 397

	)

246 
	#MATRIX_A
 0x9908b0d‡

	)

256 
	#BIT_WIDTH
 32

	)

264 
	#UPPER_MASK
 0x80000000

	)

265 
	#LOWER_MASK
 0x7ffffff‡

	)

271 
	#COMBINE_BITS
(
x
, 
y
) \

272 (((
x
Ë& 
UPPER_MASK
Ë| ((
y
Ë& 
LOWER_MASK
))

	)

278 
	#MATRIX_MULTIPLY
(
‹igöÆ
, 
√w
) \

279 ((
‹igöÆ
Ë^ ((
√w
) >> 1) \

280 ^ 
m©rix_decidî
[(
√w
Ë& 0x1])

	)

286 
	#KNUTH_MULTIPLIER_OLD
 \

287 69069

	)

293 
	#KNUTH_MULTIPLIER_NEW
 \

294 1812433253ul

	)

295 
	#KNUTH_SHIFT
 30

296 

	)

300 
	#DEFAULT_SEED32_OLD
 \

301 4357

	)

302 
	#DEFAULT_SEED32_NEW
 \

303 5489ul

	)

308 
	#DEVRANDOM
 "/dev/øndom"

	)

309 
	#DEVURANDOM
 "/dev/uøndom"

	)

316 
mt_°©e
 
	gmt_deÁu…_°©e
;

327 
	gmt_32_to_doubÀ
;

329 
	gmt_64_to_doubÀ
;

339 
uöt32_t
 
	gm©rix_decidî
[2] =

340 {0x0, 
MATRIX_A
};

352 
	$mts_m¨k_öôülized
(

353 
mt_°©e
* 
°©e
)

355 
i
;

362 
mt_32_to_doubÀ
 = 1.0;

363 
i
 = 0; i < 
BIT_WIDTH
; i++)

364 
mt_32_to_doubÀ
 /= 2.0;

365 
mt_64_to_doubÀ
 = 
mt_32_to_doubÀ
;

366 
i
 = 0; i < 
BIT_WIDTH
; i++)

367 
mt_64_to_doubÀ
 /= 2.0;

369 
°©e
->
öôülized
 = 1;

370 
	}
}

389 
	$mts_£ed32
(

390 
mt_°©e
* 
°©e
,

391 
uöt32_t
 
£ed
)

393 
i
;

395 i‡(
£ed
 == 0)

396 
£ed
 = 
DEFAULT_SEED32_OLD
;

403 
°©e
->
°©evec
[
MT_STATE_SIZE
 - 1] = 
£ed
 & 0xffffffff;

404 
i
 = 
MT_STATE_SIZE
 - 2; i >= 0; i--)

405 
°©e
->
°©evec
[
i
] =

406 (
KNUTH_MULTIPLIER_OLD
 * 
°©e
->
°©evec
[
i
 + 1]) & 0xffffffff;

408 
°©e
->
°©ïå
 = 
MT_STATE_SIZE
;

409 
	`mts_m¨k_öôülized
(
°©e
);

417 
	`mts_ª‰esh
(
°©e
);

418 
	}
}

425 
	$mts_£ed32√w
(

426 
mt_°©e
* 
°©e
,

427 
uöt32_t
 
£ed
)

429 
i
;

430 
uöt32_t
 
√xtvÆ
;

437 
°©e
->
°©evec
[
MT_STATE_SIZE
 - 1] = 
£ed
 & 0xffffffffUL;

438 
i
 = 
MT_STATE_SIZE
 - 2; i >= 0; i--)

440 
√xtvÆ
 = 
°©e
->
°©evec
[
i
 + 1] >> 
KNUTH_SHIFT
;

441 
√xtvÆ
 ^
°©e
->
°©evec
[
i
 + 1];

442 
√xtvÆ
 *
KNUTH_MULTIPLIER_NEW
;

443 
√xtvÆ
 +(
MT_STATE_SIZE
 - 1Ë- 
i
;

444 
°©e
->
°©evec
[
i
] = 
√xtvÆ
 & 0xffffffffUL;

447 
°©e
->
°©ïå
 = 
MT_STATE_SIZE
;

448 
	`mts_m¨k_öôülized
(
°©e
);

456 
	`mts_ª‰esh
(
°©e
);

457 
	}
}

476 
	$mts_£edfuŒ
(

477 
mt_°©e
* 
°©e
,

478 
uöt32_t
 
£eds
[
MT_STATE_SIZE
])

481 
had_nz
 = 0;

482 
i
;

484 
i
 = 0; i < 
MT_STATE_SIZE
; i++)

486 i‡(
£eds
[
i
] != 0)

487 
had_nz
 = 1;

488 
°©e
->
°©evec
[
MT_STATE_SIZE
 - 
i
 - 1] = 
£eds
[i];

491 i‡(!
had_nz
)

501 
	`ab‹t
();

504 
°©e
->
°©ïå
 = 
MT_STATE_SIZE
;

505 
	`mts_m¨k_öôülized
(
°©e
);

506 
	}
}

514 
	$mts_£ed
(

515 
mt_°©e
* 
°©e
)

517 
	`mts_dev£ed
(
°©e
, 
DEVURANDOM
);

518 
	}
}

526 
	$mts_good£ed
(

527 
mt_°©e
* 
°©e
)

529 
	`mts_dev£ed
(
°©e
, 
DEVRANDOM
);

530 
	}
}

537 
	$mts_dev£ed
(

538 
mt_°©e
* 
°©e
,

539 c⁄° * 
£ed_dev
)

541 
byã§ód
;

542 
√xtbyã
;

543 
FILE
* 
ønfûe
;

546 
ønbuf„r
[ (
uöt32_t
)];

548 
uöt32_t
 
øndomvÆue
;

550 
øndomuni⁄
;

551 #ifde‡
WIN32


552 
_timeb
 
tb
;

554 
timevÆ
 
tv
;

555 
timez⁄e
 
tz
;

558 
ønfûe
 = 
	`f›í
(
£ed_dev
, "rb");

559 i‡(
ønfûe
 !
NULL
)

561 
√xtbyã
 = 0;

562 
√xtbyã
 < () 
øndomuni⁄
.
ønbuf„r
;

563 
√xtbyã
 +
byã§ód
)

565 
byã§ód
 = 
	`‰ód
(&
øndomuni⁄
.
ønbuf„r
[
√xtbyã
], 1,

566  
øndomuni⁄
.
ønbuf„r
 - 
√xtbyã
, 
ønfûe
);

567 i‡(
byã§ód
 == 0)

570 
	`f˛o£
(
ønfûe
);

571 i‡(
√xtbyã
 = 
øndomuni⁄
.
ønbuf„r
)

573 
	`mts_£ed32√w
(
°©e
, 
øndomuni⁄
.
øndomvÆue
);

583 #ifde‡
WIN32


584 (Ë
	`_·ime
 (&
tb
);

586 (Ë
	`gëtimeofday
 (&
tv
, &
tz
);

592 #ifde‡
WIN32


593 
øndomuni⁄
.
øndomvÆue
 = 
tb
.
time
 * 1000 +Åb.
mûlôm
;

595 
øndomuni⁄
.
øndomvÆue
 = 
tv
.
tv_£c
 * 1000000 +Åv.
tv_u£c
;

597 
	`mts_£ed32√w
(
°©e
, 
øndomuni⁄
.
øndomvÆue
);

598 
	}
}

609 
	$mts_be°£ed
(

610 
mt_°©e
* 
°©e
)

612 
byã§ód
;

613 
√xtbyã
;

614 
FILE
* 
ønfûe
;

616 
ønfûe
 = 
	`f›í
("/dev/random", "rb");

617 i‡(
ønfûe
 =
NULL
)

619 
	`mts_good£ed
(
°©e
);

623 
√xtbyã
 = 0;

624 
√xtbyã
 < () 
°©e
->
°©evec
;

625 
√xtbyã
 +
byã§ód
)

627 
byã§ód
 = 
	`‰ód
((*)&
°©e
->
°©evec
 + 
√xtbyã
, 1,

628  
°©e
->
°©evec
 - 
√xtbyã
, 
ønfûe
);

629 i‡(
byã§ód
 == 0)

634 
	`f˛o£
(
ønfûe
);

635 
	`mts_good£ed
(
°©e
);

639 
	}
}

648 
	$mts_ª‰esh
(

649 
mt_°©e
* 
°©e
)

651 
i
;

652 
uöt32_t
*

653 
°©e_±r
;

654 
uöt32_t


655 
vÆue1
;

656 
uöt32_t


657 
vÆue2
;

663 i‡(!
°©e
->
öôülized
)

665 
	`mts_£ed32
(
°©e
, 
DEFAULT_SEED32_OLD
);

756 
°©e_±r
 = &
°©e
->
°©evec
[
MT_STATE_SIZE
 - 1];

757 
vÆue1
 = *
°©e_±r
;

758 
i
 = (
MT_STATE_SIZE
 - 
RECURRENCE_OFFSET
) / 2; --i >= 0; )

760 
°©e_±r
 -= 2;

761 
vÆue2
 = 
°©e_±r
[1];

762 
vÆue1
 = 
	`COMBINE_BITS
(vÆue1, 
vÆue2
);

763 
°©e_±r
[2] =

764 
	`MATRIX_MULTIPLY
(
°©e_±r
[-
RECURRENCE_OFFSET
 + 2], 
vÆue1
);

765 
vÆue1
 = 
°©e_±r
[0];

766 
vÆue2
 = 
	`COMBINE_BITS
(vÆue2, 
vÆue1
);

767 
°©e_±r
[1] =

768 
	`MATRIX_MULTIPLY
(
°©e_±r
[-
RECURRENCE_OFFSET
 + 1], 
vÆue2
);

770 
vÆue2
 = *--
°©e_±r
;

771 
vÆue1
 = 
	`COMBINE_BITS
(vÆue1, 
vÆue2
);

772 
°©e_±r
[1] =

773 
	`MATRIX_MULTIPLY
(
°©e_±r
[-
RECURRENCE_OFFSET
 + 1], 
vÆue1
);

775 
i
 = (
RECURRENCE_OFFSET
 - 1) / 2; --i >= 0; )

777 
°©e_±r
 -= 2;

778 
vÆue1
 = 
°©e_±r
[1];

779 
vÆue2
 = 
	`COMBINE_BITS
(vÆue2, 
vÆue1
);

780 
°©e_±r
[2] =

781 
	`MATRIX_MULTIPLY
(
°©e_±r
[
MT_STATE_SIZE
 - 
RECURRENCE_OFFSET
 + 2],

782 
vÆue2
);

783 
vÆue2
 = 
°©e_±r
[0];

784 
vÆue1
 = 
	`COMBINE_BITS
(vÆue1, 
vÆue2
);

785 
°©e_±r
[1] =

786 
	`MATRIX_MULTIPLY
(
°©e_±r
[
MT_STATE_SIZE
 - 
RECURRENCE_OFFSET
 + 1],

787 
vÆue1
);

795 
vÆue1
 = 
	`COMBINE_BITS
(
vÆue2
, 
°©e
->
°©evec
[
MT_STATE_SIZE
 - 1]);

796 *
°©e_±r
 =

797 
	`MATRIX_MULTIPLY
(
°©e_±r
[
MT_STATE_SIZE
 - 
RECURRENCE_OFFSET
], 
vÆue1
);

803 
°©e
->
°©ïå
 = 
MT_STATE_SIZE
;

804 
	}
}

812 
	$mts_ßve°©e
(

813 
FILE
* 
°©efûe
,

814 
mt_°©e
* 
°©e
)

816 
i
;

818 i‡(!
°©e
->
öôülized
)

819 
	`mts_£ed32
(
°©e
, 
DEFAULT_SEED32_OLD
);

821 
i
 = 
MT_STATE_SIZE
; --i >= 0; )

823 i‡(
	`Ârötf
(
°©efûe
, "%" 
PRIu32
 " ", 
°©e
->
°©evec
[
i
]) < 0)

827 i‡(
	`Ârötf
(
°©efûe
, "%d\n", 
°©e
->
°©ïå
) < 0)

831 
	}
}

836 
	$mts_lﬂd°©e
(

837 
FILE
* 
°©efûe
,

838 
mt_°©e
* 
°©e
)

840 
i
;

845 
°©e
->
öôülized
 = sèã->
°©ïå
 = 0;

847 
i
 = 
MT_STATE_SIZE
; --i >= 0; )

849 i‡(
	`fsˇnf
(
°©efûe
, "%" 
SCNu32
, &
°©e
->
°©evec
[
i
]) != 1)

853 i‡(
	`fsˇnf
(
°©efûe
, "%d", &
°©e
->
°©ïå
) != 1)

860 i‡(
°©e
->
°©ïå
 < 0 || sèã->°©ïå > 
MT_STATE_SIZE
)

862 
°©e
->
°©ïå
 = 0;

866 
	`mts_m¨k_öôülized
(
°©e
);

869 
	}
}

876 
	$mt_£ed32
(

877 
uöt32_t
 
£ed
)

879 
	`mts_£ed32
(&
mt_deÁu…_°©e
, 
£ed
);

880 
	}
}

887 
	$mt_£ed32√w
(

888 
uöt32_t
 
£ed
)

890 
	`mts_£ed32√w
(&
mt_deÁu…_°©e
, 
£ed
);

891 
	}
}

898 
	$mt_£edfuŒ
(

899 
uöt32_t
 
£eds
[
MT_STATE_SIZE
])

901 
	`mts_£edfuŒ
(&
mt_deÁu…_°©e
, 
£eds
);

902 
	}
}

907 
	$mt_£ed
()

909 
	`mts_£ed
(&
mt_deÁu…_°©e
);

910 
	}
}

915 
	$mt_good£ed
()

917 
	`mts_good£ed
(&
mt_deÁu…_°©e
);

918 
	}
}

923 
	$mt_be°£ed
()

925 
	`mts_be°£ed
(&
mt_deÁu…_°©e
);

926 
	}
}

934 
mt_°©e
* 
	$mt_gë°©e
()

936  &
mt_deÁu…_°©e
;

937 
	}
}

943 
	$mt_ßve°©e
(

944 
FILE
* 
°©efûe
)

946  
	`mts_ßve°©e
(
°©efûe
, &
mt_deÁu…_°©e
);

947 
	}
}

952 
	$mt_lﬂd°©e
(

953 
FILE
* 
°©efûe
)

955  
	`mts_lﬂd°©e
(
°©efûe
, &
mt_deÁu…_°©e
);

956 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

69 
__löe
, c⁄° *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

74 
__löe
, c⁄° *
__fun˘i⁄
)

75 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

80 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

81 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_DECLS


86 
	#as£π
(
ex¥
) \

87 ((
ex¥
) \

88 ? 
	`__ASSERT_VOID_CAST
 (0) \

89 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

91 #ifdef 
__USE_GNU


92 
	#as£π_≥º‹
(
î∫um
) \

93 (!(
î∫um
) \

94 ? 
	`__ASSERT_VOID_CAST
 (0) \

95 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

103 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

104 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

106 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

107 
	#__ASSERT_FUNCTION
 
__func__


	)

109 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

116 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


118 #unde‡
°©ic_as£π


119 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

132 #ifde‡
__USE_ATFILE


133 
	#AT_FDCWD
 -100

	)

136 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

137 
	#AT_REMOVEDIR
 0x200

	)

139 
	#AT_SYMLINK_FOLLOW
 0x400

	)

140 #ifde‡
__USE_GNU


141 
	#AT_NO_AUTOMOUNT
 0x800

	)

143 
	#AT_EMPTY_PATH
 0x1000

	)

145 
	#AT_EACCESS
 0x200

	)

154 
f˙é
 (
__fd
, 
__cmd
, ...);

162 #i‚de‡
__USE_FILE_OFFSET64


163 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#›í
 
›í64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_ATFILE


186 #i‚de‡
__USE_FILE_OFFSET64


187 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

188 
	`__n⁄nuŒ
 ((2));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

192 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

194 
	#›í©
 
›í©64


	)

197 #ifde‡
__USE_LARGEFILE64


198 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

199 
	`__n⁄nuŒ
 ((2));

208 #i‚de‡
__USE_FILE_OFFSET64


209 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

211 #ifde‡
__REDIRECT


212 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

213 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

215 
	#¸ót
 
¸ót64


	)

218 #ifde‡
__USE_LARGEFILE64


219 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

222 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

223 && !
deföed
 
__USE_POSIX
))

232 
	#F_ULOCK
 0

	)

233 
	#F_LOCK
 1

	)

234 
	#F_TLOCK
 2

	)

235 
	#F_TEST
 3

	)

237 #i‚de‡
__USE_FILE_OFFSET64


238 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

240 #ifde‡
__REDIRECT


241 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

243 
	#lockf
 
lockf64


	)

246 #ifde‡
__USE_LARGEFILE64


247 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

251 #ifde‡
__USE_XOPEN2K


254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

256 
__advi£
Ë
__THROW
;

258 #ifde‡
__REDIRECT_NTH


259 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

260 
__off64_t
 
__Àn
, 
__advi£
),

261 
posix_Ádvi£64
);

263 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

266 #ifde‡
__USE_LARGEFILE64


267 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

268 
__advi£
Ë
__THROW
;

276 #i‚de‡
__USE_FILE_OFFSET64


277 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

279 #ifde‡
__REDIRECT


280 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

281 
__off64_t
 
__Àn
),

282 
posix_ÁŒoˇã64
);

284 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

287 #ifde‡
__USE_LARGEFILE64


288 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

294 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

295 && 
deföed
 
__va_¨g_∑ck_Àn


296 
	~<bôs/f˙é2.h
>

299 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

46 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


48 #i‡
__WORDSIZE
 == 64

49 
	#__PRI64_PREFIX
 "l"

	)

50 
	#__PRIPTR_PREFIX
 "l"

	)

52 
	#__PRI64_PREFIX
 "Œ"

	)

53 
	#__PRIPTR_PREFIX


	)

59 
	#PRId8
 "d"

	)

60 
	#PRId16
 "d"

	)

61 
	#PRId32
 "d"

	)

62 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdLEAST8
 "d"

	)

65 
	#PRIdLEAST16
 "d"

	)

66 
	#PRIdLEAST32
 "d"

	)

67 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

69 
	#PRIdFAST8
 "d"

	)

70 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

71 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

75 
	#PRIi8
 "i"

	)

76 
	#PRIi16
 "i"

	)

77 
	#PRIi32
 "i"

	)

78 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiLEAST8
 "i"

	)

81 
	#PRIiLEAST16
 "i"

	)

82 
	#PRIiLEAST32
 "i"

	)

83 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

85 
	#PRIiFAST8
 "i"

	)

86 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

87 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

91 
	#PRIo8
 "o"

	)

92 
	#PRIo16
 "o"

	)

93 
	#PRIo32
 "o"

	)

94 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoLEAST8
 "o"

	)

97 
	#PRIoLEAST16
 "o"

	)

98 
	#PRIoLEAST32
 "o"

	)

99 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

101 
	#PRIoFAST8
 "o"

	)

102 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

103 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

107 
	#PRIu8
 "u"

	)

108 
	#PRIu16
 "u"

	)

109 
	#PRIu32
 "u"

	)

110 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuLEAST8
 "u"

	)

113 
	#PRIuLEAST16
 "u"

	)

114 
	#PRIuLEAST32
 "u"

	)

115 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

117 
	#PRIuFAST8
 "u"

	)

118 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

119 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

123 
	#PRIx8
 "x"

	)

124 
	#PRIx16
 "x"

	)

125 
	#PRIx32
 "x"

	)

126 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxLEAST8
 "x"

	)

129 
	#PRIxLEAST16
 "x"

	)

130 
	#PRIxLEAST32
 "x"

	)

131 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

133 
	#PRIxFAST8
 "x"

	)

134 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

135 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

139 
	#PRIX8
 "X"

	)

140 
	#PRIX16
 "X"

	)

141 
	#PRIX32
 "X"

	)

142 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXLEAST8
 "X"

	)

145 
	#PRIXLEAST16
 "X"

	)

146 
	#PRIXLEAST32
 "X"

	)

147 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

149 
	#PRIXFAST8
 "X"

	)

150 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

151 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

156 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

157 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

158 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

159 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

160 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

161 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

165 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

166 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

167 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

168 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

169 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

170 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

176 
	#SCNd8
 "hhd"

	)

177 
	#SCNd16
 "hd"

	)

178 
	#SCNd32
 "d"

	)

179 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdLEAST8
 "hhd"

	)

182 
	#SCNdLEAST16
 "hd"

	)

183 
	#SCNdLEAST32
 "d"

	)

184 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

186 
	#SCNdFAST8
 "hhd"

	)

187 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

188 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

192 
	#SCNi8
 "hhi"

	)

193 
	#SCNi16
 "hi"

	)

194 
	#SCNi32
 "i"

	)

195 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiLEAST8
 "hhi"

	)

198 
	#SCNiLEAST16
 "hi"

	)

199 
	#SCNiLEAST32
 "i"

	)

200 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

202 
	#SCNiFAST8
 "hhi"

	)

203 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

204 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

208 
	#SCNu8
 "hhu"

	)

209 
	#SCNu16
 "hu"

	)

210 
	#SCNu32
 "u"

	)

211 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuLEAST8
 "hhu"

	)

214 
	#SCNuLEAST16
 "hu"

	)

215 
	#SCNuLEAST32
 "u"

	)

216 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

218 
	#SCNuFAST8
 "hhu"

	)

219 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

220 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

224 
	#SCNo8
 "hho"

	)

225 
	#SCNo16
 "ho"

	)

226 
	#SCNo32
 "o"

	)

227 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoLEAST8
 "hho"

	)

230 
	#SCNoLEAST16
 "ho"

	)

231 
	#SCNoLEAST32
 "o"

	)

232 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

234 
	#SCNoFAST8
 "hho"

	)

235 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

236 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

240 
	#SCNx8
 "hhx"

	)

241 
	#SCNx16
 "hx"

	)

242 
	#SCNx32
 "x"

	)

243 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxLEAST8
 "hhx"

	)

246 
	#SCNxLEAST16
 "hx"

	)

247 
	#SCNxLEAST32
 "x"

	)

248 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

250 
	#SCNxFAST8
 "hhx"

	)

251 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

252 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

257 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

258 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

259 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

260 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

261 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

264 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

265 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

266 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

267 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

268 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

273 
	g__BEGIN_DECLS


275 #i‡
__WORDSIZE
 == 64

280 
	mquŸ
;

281 
	mªm
;

282 } 
	timaxdiv_t
;

289 
	mquŸ
;

290 
	mªm
;

291 } 
	timaxdiv_t
;

297 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

300 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

301 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

304 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

308 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

309 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

312 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

313 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

314 
__THROW
;

317 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

318 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

319 
__THROW
;

321 #ifde‡
__USE_EXTERN_INLINES


323 #i‡
__WORDSIZE
 == 64

325 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

326 **
__ª°ri˘
 
__íd±r
,

327 
__ba£
, 
__group
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

330 
__exã∫_ölöe
 
ötmax_t


331 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

332 
ba£
))

334  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

335 
	}
}

337 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

338 ** 
__ª°ri˘
 
__íd±r
,

339 
__ba£
, 
__group
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

342 
__exã∫_ölöe
 
uötmax_t


343 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

344 
ba£
))

346  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

347 
	}
}

349 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

351 
__ba£
, 
__group
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

354 
__exã∫_ölöe
 
ötmax_t


355 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

356 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

358  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

359 
	}
}

361 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

362 
__ª°ri˘
 
__≈å
,

363 
__gwch¨_t
 **

364 
__ª°ri˘
 
__íd±r
,

365 
__ba£
, 
__group
)

366 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

368 
__exã∫_ölöe
 
uötmax_t


369 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

370 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

372  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

373 
	}
}

377 
__exãnsi⁄__


378 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

379 **
__ª°ri˘
 
__íd±r
,

380 
__ba£
, 
__group
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

383 
__exã∫_ölöe
 
ötmax_t


384 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

385 
ba£
))

387  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

388 
	}
}

390 
__exãnsi⁄__


391 
	$__°πouŒ_öã∫Æ
 (const *

392 
__ª°ri˘
 
__≈å
,

394 
__ª°ri˘
 
__íd±r
,

395 
__ba£
,

396 
__group
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

399 
__exã∫_ölöe
 
uötmax_t


400 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

401 
ba£
))

403  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

404 
	}
}

406 
__exãnsi⁄__


407 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

409 
__ba£
, 
__group
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

412 
__exã∫_ölöe
 
ötmax_t


413 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

414 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

416  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

417 
	}
}

420 
__exãnsi⁄__


421 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

422 
__ª°ri˘
 
__≈å
,

423 
__gwch¨_t
 **

424 
__ª°ri˘
 
__íd±r
,

425 
__ba£
,

426 
__group
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

429 
__exã∫_ölöe
 
uötmax_t


430 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

431 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

433  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

434 
	}
}

439 
	g__END_DECLS


	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifdef 
__USE_MISC


290 
_IEEE_
 = -1,

291 
_SVID_
,

292 
_XOPEN_
,

293 
_POSIX_
,

294 
_ISOC_


295 } 
	t_LIB_VERSION_TYPE
;

300 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

304 #ifde‡
__USE_SVID


310 #ifde‡
__˝lu•lus


311 
__ex˚±i⁄


313 
ex˚±i⁄


316 
ty≥
;

317 *
«me
;

318 
¨g1
;

319 
¨g2
;

320 
ªtvÆ
;

321 
	}
};

323 #ifde‡
__˝lu•lus


324 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

326 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

329 
	#X_TLOSS
 1.41484755040568800000e+16

	)

332 
	#DOMAIN
 1

	)

333 
	#SING
 2

	)

334 
	#OVERFLOW
 3

	)

335 
	#UNDERFLOW
 4

	)

336 
	#TLOSS
 5

	)

337 
	#PLOSS
 6

	)

340 
	#HUGE
 3.40282347e+38F

	)

344 #ifde‡
__USE_XOPEN


346 
	#MAXFLOAT
 3.40282347e+38F

	)

353 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


354 
	#M_E
 2.7182818284590452354

	)

355 
	#M_LOG2E
 1.4426950408889634074

	)

356 
	#M_LOG10E
 0.43429448190325182765

	)

357 
	#M_LN2
 0.69314718055994530942

	)

358 
	#M_LN10
 2.30258509299404568402

	)

359 
	#M_PI
 3.14159265358979323846

	)

360 
	#M_PI_2
 1.57079632679489661923

	)

361 
	#M_PI_4
 0.78539816339744830962

	)

362 
	#M_1_PI
 0.31830988618379067154

	)

363 
	#M_2_PI
 0.63661977236758134308

	)

364 
	#M_2_SQRTPI
 1.12837916709551257390

	)

365 
	#M_SQRT2
 1.41421356237309504880

	)

366 
	#M_SQRT1_2
 0.70710678118654752440

	)

372 #ifde‡
__USE_GNU


373 
	#M_El
 2.718281828459045235360287471352662498L

	)

374 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

375 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

376 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

377 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

378 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

379 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

380 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

381 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

382 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

383 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

384 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

385 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

392 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


393 
	#__NO_MATH_INLINES
 1

	)

396 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

403 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

404 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

405 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

406 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

407 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

408 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

412 #ifde‡
__USE_EXTERN_INLINES


413 
	~<bôs/m©hölöe.h
>

418 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

419 
	~<bôs/m©h-föôe.h
>

422 #ifde‡
__USE_ISOC99


426 #i‚de‡
isgª©î


427 
	#isgª©î
(
x
, 
y
) \

428 (
__exãnsi⁄__
 \

429 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

430 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

434 #i‚de‡
isgª©îequÆ


435 
	#isgª©îequÆ
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

442 #i‚de‡
i¶ess


443 
	#i¶ess
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

450 #i‚de‡
i¶es£quÆ


451 
	#i¶es£quÆ
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

458 #i‚de‡
i¶essgª©î


459 
	#i¶essgª©î
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

466 #i‚de‡
isun‹dîed


467 
	#isun‹dîed
(
u
, 
v
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

470 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

475 
	g__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__unu£d
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_DCCP
 = 33,

56 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

57 
	mIPPROTO_IPV6
 = 41,

58 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

59 
	mIPPROTO_ROUTING
 = 43,

60 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

61 
	mIPPROTO_FRAGMENT
 = 44,

62 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

63 
	mIPPROTO_RSVP
 = 46,

64 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

65 
	mIPPROTO_GRE
 = 47,

66 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

67 
	mIPPROTO_ESP
 = 50,

68 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

69 
	mIPPROTO_AH
 = 51,

70 
	#IPPROTO_AH
 
IPPROTO_AH


	)

71 
	mIPPROTO_ICMPV6
 = 58,

72 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

73 
	mIPPROTO_NONE
 = 59,

74 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

75 
	mIPPROTO_DSTOPTS
 = 60,

76 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

77 
	mIPPROTO_MTP
 = 92,

78 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

79 
	mIPPROTO_ENCAP
 = 98,

80 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

81 
	mIPPROTO_PIM
 = 103,

82 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

83 
	mIPPROTO_COMP
 = 108,

84 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

85 
	mIPPROTO_SCTP
 = 132,

86 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

87 
	mIPPROTO_UDPLITE
 = 136,

88 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

89 
	mIPPROTO_RAW
 = 255,

90 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

91 
	mIPPROTO_MAX


96 
uöt16_t
 
	tö_p‹t_t
;

101 
	mIPPORT_ECHO
 = 7,

102 
	mIPPORT_DISCARD
 = 9,

103 
	mIPPORT_SYSTAT
 = 11,

104 
	mIPPORT_DAYTIME
 = 13,

105 
	mIPPORT_NETSTAT
 = 15,

106 
	mIPPORT_FTP
 = 21,

107 
	mIPPORT_TELNET
 = 23,

108 
	mIPPORT_SMTP
 = 25,

109 
	mIPPORT_TIMESERVER
 = 37,

110 
	mIPPORT_NAMESERVER
 = 42,

111 
	mIPPORT_WHOIS
 = 43,

112 
	mIPPORT_MTP
 = 57,

114 
	mIPPORT_TFTP
 = 69,

115 
	mIPPORT_RJE
 = 77,

116 
	mIPPORT_FINGER
 = 79,

117 
	mIPPORT_TTYLINK
 = 87,

118 
	mIPPORT_SUPDUP
 = 95,

121 
	mIPPORT_EXECSERVER
 = 512,

122 
	mIPPORT_LOGINSERVER
 = 513,

123 
	mIPPORT_CMDSERVER
 = 514,

124 
	mIPPORT_EFSSERVER
 = 520,

127 
	mIPPORT_BIFFUDP
 = 512,

128 
	mIPPORT_WHOSERVER
 = 513,

129 
	mIPPORT_ROUTESERVER
 = 520,

132 
	mIPPORT_RESERVED
 = 1024,

135 
	mIPPORT_USERRESERVED
 = 5000

140 
uöt32_t
 
	tö_addr_t
;

141 
	sö_addr


143 
ö_addr_t
 
	ms_addr
;

152 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

153 
	#IN_CLASSA_NET
 0xff000000

	)

154 
	#IN_CLASSA_NSHIFT
 24

	)

155 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

156 
	#IN_CLASSA_MAX
 128

	)

158 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

159 
	#IN_CLASSB_NET
 0xffff0000

	)

160 
	#IN_CLASSB_NSHIFT
 16

	)

161 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

162 
	#IN_CLASSB_MAX
 65536

	)

164 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

165 
	#IN_CLASSC_NET
 0xffffff00

	)

166 
	#IN_CLASSC_NSHIFT
 8

	)

167 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

169 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

170 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

172 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

173 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

176 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

178 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

180 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

183 
	#IN_LOOPBACKNET
 127

	)

185 #i‚de‡
INADDR_LOOPBACK


186 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

190 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

191 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

192 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

193 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

197 
	sö6_addr


201 
uöt8_t
 
	m__u6_addr8
[16];

202 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


203 
uöt16_t
 
	m__u6_addr16
[8];

204 
uöt32_t
 
	m__u6_addr32
[4];

206 } 
	m__ö6_u
;

207 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

208 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


209 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

210 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

214 c⁄° 
ö6_addr
 
ö6addr_™y
;

215 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

216 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

217 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

219 
	#INET_ADDRSTRLEN
 16

	)

220 
	#INET6_ADDRSTRLEN
 46

	)

224 
	ssockaddr_ö


226 
__SOCKADDR_COMMON
 (
sö_
);

227 
ö_p‹t_t
 
	msö_p‹t
;

228 
ö_addr
 
	msö_addr
;

231 
	msö_zîo
[ (
sockaddr
) -

232 
__SOCKADDR_COMMON_SIZE
 -

233  (
ö_p‹t_t
) -

234  (
ö_addr
)];

238 
	ssockaddr_ö6


240 
__SOCKADDR_COMMON
 (
sö6_
);

241 
ö_p‹t_t
 
	msö6_p‹t
;

242 
uöt32_t
 
	msö6_Êowöfo
;

243 
ö6_addr
 
	msö6_addr
;

244 
uöt32_t
 
	msö6_sc›e_id
;

248 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


250 
	sù_mªq


253 
ö_addr
 
	mimr_mu…üddr
;

256 
ö_addr
 
	mimr_öãrÁ˚
;

259 
	sù_mªq_sour˚


262 
ö_addr
 
	mimr_mu…üddr
;

265 
ö_addr
 
	mimr_öãrÁ˚
;

268 
ö_addr
 
	mimr_sour˚addr
;

274 
	sùv6_mªq


277 
ö6_addr
 
	mùv6mr_mu…üddr
;

280 
	mùv6mr_öãrÁ˚
;

284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


286 
	sgroup_ªq


289 
uöt32_t
 
	mgr_öãrÁ˚
;

292 
sockaddr_°‹age
 
	mgr_group
;

295 
	sgroup_sour˚_ªq


298 
uöt32_t
 
	mg§_öãrÁ˚
;

301 
sockaddr_°‹age
 
	mg§_group
;

304 
sockaddr_°‹age
 
	mg§_sour˚
;

309 
	sù_msfûãr


312 
ö_addr
 
	mimsf_mu…üddr
;

315 
ö_addr
 
	mimsf_öãrÁ˚
;

318 
uöt32_t
 
	mimsf_fmode
;

321 
uöt32_t
 
	mimsf_num§c
;

323 
ö_addr
 
	mimsf_¶i°
[1];

326 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

327 -  (
ö_addr
) \

328 + (
num§c
Ë*  (
ö_addr
))

	)

330 
	sgroup_fûãr


333 
uöt32_t
 
	mgf_öãrÁ˚
;

336 
sockaddr_°‹age
 
	mgf_group
;

339 
uöt32_t
 
	mgf_fmode
;

342 
uöt32_t
 
	mgf_num§c
;

344 
sockaddr_°‹age
 
	mgf_¶i°
[1];

347 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

348 -  (
sockaddr_°‹age
) \

349 + ((
num§c
) \

350 *  (
sockaddr_°‹age
)))

	)

355 
	~<bôs/ö.h
>

364 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

365 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

366 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

367 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

368 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

369 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

370 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

372 
	~<ídün.h
>

375 
	~<bôs/byãsw≠.h
>

377 #ifde‡
__OPTIMIZE__


381 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


384 
	#¡ohl
(
x
Ë(x)

	)

385 
	#¡ohs
(
x
Ë(x)

	)

386 
	#ht⁄l
(
x
Ë(x)

	)

387 
	#ht⁄s
(
x
Ë(x)

	)

389 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


390 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

391 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

392 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

393 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

398 #ifde‡
__GNUC__


399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (
__exãnsi⁄__
 \

401 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

402 
__a
->
s6_addr32
[0] == 0 \

403 && 
__a
->
s6_addr32
[1] == 0 \

404 && 
__a
->
s6_addr32
[2] == 0 \

405 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

407 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

408 (
__exãnsi⁄__
 \

409 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

410 
__a
->
s6_addr32
[0] == 0 \

411 && 
__a
->
s6_addr32
[1] == 0 \

412 && 
__a
->
s6_addr32
[2] == 0 \

413 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

415 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

416 (
__exãnsi⁄__
 \

417 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

418 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

420 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

421 (
__exãnsi⁄__
 \

422 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

423 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

425 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

426 (
__exãnsi⁄__
 \

427 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

428 
__a
->
s6_addr32
[0] == 0 \

429 && 
__a
->
s6_addr32
[1] == 0 \

430 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

432 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 
__a
->
s6_addr32
[0] == 0 \

436 && 
__a
->
s6_addr32
[1] == 0 \

437 && 
__a
->
s6_addr32
[2] == 0 \

438 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

440 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

441 (
__exãnsi⁄__
 \

442 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

443 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

444 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

445 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

446 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

447 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

449 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

450 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

451 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

452 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

453 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

455 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

456 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

457 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

458 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

459 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

461 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

462 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

463 =
	`ht⁄l
 (0x„800000))

	)

465 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

466 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

467 =
	`ht⁄l
 (0x„c00000))

	)

469 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

470 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

471 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

472 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

474 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

475 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

476 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

477 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

478 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

480 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

487 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

489 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


491 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

494 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

495 
__THROW
;

499 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

500 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

501 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

503 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

504 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

505 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

507 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

508 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

509 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

511 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

515 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

520 #ifde‡
__USE_GNU


521 
cmsghdr
;

524 
	sö6_pktöfo


526 
ö6_addr
 
ùi6_addr
;

527 
ùi6_ifödex
;

531 
	sù6_mtuöfo


533 
sockaddr_ö6
 
ù6m_addr
;

534 
uöt32_t
 
ù6m_mtu
;

539 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

540 
__THROW
 
__©åibuã_dïªˇãd__
;

541 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

542 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

543 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

544 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

545 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

546 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

547 
__mu…x
, 
__∂usy
)

548 
__THROW
 
__©åibuã_dïªˇãd__
;

549 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

550 
uöt8_t
 **
__çåp
)

551 
__THROW
 
__©åibuã_dïªˇãd__
;

552 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

553 
uöt8_t
 **
__çåp
, 
__ty≥
)

554 
__THROW
 
__©åibuã_dïªˇãd__
;

558 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

559 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

560 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

561 **
__d©abuÂ
Ë
__THROW
;

562 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

563 
__THROW
;

564 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

565 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

566 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

567 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

568 **
__d©abuÂ
Ë
__THROW
;

569 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

570 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

571 **
__d©abuÂ
Ë
__THROW
;

572 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

573 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

577 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

578 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

579 
__£gmíts
Ë
__THROW
;

580 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

581 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

582 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

583 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

584 
__THROW
;

590 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

591 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

592 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

593 
__THROW
;

596 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

597 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

598 
uöt32_t
 
__num§c
,

599 c⁄° 
ö_addr
 *
__¶i°
)

600 
__THROW
;

604 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

605 c⁄° 
sockaddr
 *
__group
,

606 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

607 
uöt32_t
 *
__num§c
,

608 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

611 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

612 c⁄° 
sockaddr
 *
__group
,

613 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

614 
uöt32_t
 
__num§c
,

615 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

618 
__END_DECLS


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


87 
	#PTHREAD_MUTEX_INITIALIZER
 \

88 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

89 #ifde‡
__USE_GNU


90 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

91 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

92 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 0 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

112 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


115 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

116 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

118 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


125 #i‡
__WORDSIZE
 == 64

126 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

131 
	#PTHREAD_RWLOCK_INITIALIZER
 \

132 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

133 #ifde‡
__USE_GNU


134 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

139 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


140 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

141 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

142 0, 0, 0, 0 } }

	)

144 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

145 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

146 0 } }

	)

156 
	mPTHREAD_INHERIT_SCHED
,

157 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

158 
	mPTHREAD_EXPLICIT_SCHED


159 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

166 
	mPTHREAD_SCOPE_SYSTEM
,

167 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

168 
	mPTHREAD_SCOPE_PROCESS


169 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

176 
	mPTHREAD_PROCESS_PRIVATE
,

177 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

178 
	mPTHREAD_PROCESS_SHARED


179 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

185 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

189 
	s_±hªad_˛ónup_buf„r


191 (*
	m__routöe
) (*);

192 *
	m__¨g
;

193 
	m__ˇn˚…y≥
;

194 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

200 
	mPTHREAD_CANCEL_ENABLE
,

201 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

202 
	mPTHREAD_CANCEL_DISABLE


203 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

207 
	mPTHREAD_CANCEL_DEFERRED
,

208 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

209 
	mPTHREAD_CANCEL_ASYNCHRONOUS


210 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

212 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

216 
	#PTHREAD_ONCE_INIT
 0

	)

219 #ifde‡
__USE_XOPEN2K


223 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

227 
__BEGIN_DECLS


232 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

233 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

234 *(*
__°¨t_routöe
) (*),

235 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

241 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

249 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

251 #ifde‡
__USE_GNU


254 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

262 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

263 c⁄° 
time•ec
 *
__ab°ime
);

270 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

274 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

277 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

278 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

286 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

293 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

294 *
__dëach°©e
)

295 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

298 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

299 
__dëach°©e
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

304 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

305 
size_t
 *
__gu¨dsize
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

309 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

310 
size_t
 
__gu¨dsize
)

311 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

317 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

321 c⁄° 
sched_∑øm
 *
__ª°ri˘


322 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


326 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

330 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1));

334 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


335 
__©å
, *
__ª°ri˘
 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

339 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

340 
__öhîô
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1));

345 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

346 *
__ª°ri˘
 
__sc›e
)

347 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

350 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


355 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

356 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

363 *
__°ackaddr
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

367 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


368 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

374 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

375 
size_t
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1));

378 #ifde‡
__USE_XOPEN2K


380 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

381 **
__ª°ri˘
 
__°ackaddr
,

382 
size_t
 *
__ª°ri˘
 
__°acksize
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

388 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

389 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #ifde‡
__USE_GNU


395 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 c⁄° 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

402 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

403 
size_t
 
__˝u£tsize
,

404 
˝u_£t_t
 *
__˝u£t
)

405 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

411 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

412 
__THROW
 
	`__n⁄nuŒ
 ((2));

420 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

421 c⁄° 
sched_∑øm
 *
__∑øm
)

422 
__THROW
 
	`__n⁄nuŒ
 ((3));

425 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

426 *
__ª°ri˘
 
__pﬁicy
,

427 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

431 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

432 
__THROW
;

435 #ifde‡
__USE_GNU


437 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

438 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

442 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

443 
__THROW
 
	`__n⁄nuŒ
 ((2));

447 #ifde‡
__USE_UNIX98


449 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

452 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

455 #ifde‡
__USE_GNU


460 
	$±hªad_yõld
 (Ë
__THROW
;

465 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

466 c⁄° 
˝u_£t_t
 *
__˝u£t
)

467 
__THROW
 
	`__n⁄nuŒ
 ((3));

470 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

471 
˝u_£t_t
 *
__˝u£t
)

472 
__THROW
 
	`__n⁄nuŒ
 ((3));

485 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

486 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

497 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

501 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

504 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

509 
	`±hªad_ã°ˇn˚l
 ();

518 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

519 
__mask_was_ßved
;

520 } 
__ˇn˚l_jmp_buf
[1];

521 *
__∑d
[4];

522 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

525 #i‚de‡
__˛ónup_f˘_©åibuã


526 
	#__˛ónup_f˘_©åibuã


	)

531 
	s__±hªad_˛ónup_‰ame


533 (*
__ˇn˚l_routöe
) (*);

534 *
__ˇn˚l_¨g
;

535 
__do_ô
;

536 
__ˇn˚l_ty≥
;

539 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


540 #ifde‡
__˝lu•lus


542 ˛as†
	c__±hªad_˛ónup_˛ass


544 (*
__ˇn˚l_routöe
) (*);

545 *
__ˇn˚l_¨g
;

546 
__do_ô
;

547 
__ˇn˚l_ty≥
;

549 
public
:

550 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

551 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

552 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

553 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

554 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

555 &
__ˇn˚l_ty≥
); 
	}
}

556 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

566 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

568 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

572 
	#±hªad_˛ónup_p›
(
execuã
) \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

576 #ifde‡
__USE_GNU


580 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

582 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

583 
__˛‰ame
.
	`__de„r
 ()

	)

588 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

589 
__˛‰ame
.
	`__ª°‹e
 (); \

590 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

591 } 0)

	)

598 
__exã∫_ölöe
 

599 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

601 i‡(
__‰ame
->
__do_ô
)

602 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

603 
	}
}

612 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 };

	)

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
__˛‰ame
.
__do_ô
 = (
execuã
); \

623 } 0)

	)

625 #ifde‡
__USE_GNU


629 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

631 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

632 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

633 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

634 .
__do_ô
 = 1 }; \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

636 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

641 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

642 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

643 
__˛‰ame
.
__do_ô
 = (
execuã
); \

644 } 0)

	)

655 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

657 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

658 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

659 *
__ˇn˚l_¨g
 = (
¨g
); \

660 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

661 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

662 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

669 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

670 dÿ{

	)

671 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

672 
__˛ónup_f˘_©åibuã
;

676 
	#±hªad_˛ónup_p›
(
execuã
) \

679 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

680 i‡(
execuã
) \

681 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

682 } 0)

	)

683 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

684 
__˛ónup_f˘_©åibuã
;

686 #ifde‡
__USE_GNU


690 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

692 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

693 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

694 *
__ˇn˚l_¨g
 = (
¨g
); \

695 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

696 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

697 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

699 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

700 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

704 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

705 dÿ{

	)

706 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

707 
__˛ónup_f˘_©åibuã
;

712 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

715 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

716 i‡(
execuã
) \

717 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

718 
	}
} 0)

	)

719 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

720 
__˛ónup_f˘_©åibuã
;

724 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

725 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

726 #i‚de‡
SHARED


727 
	`__©åibuã__
 ((
__wók__
))

733 
__jmp_buf_èg
;

734 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

740 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

741 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

742 
__THROW
 
	`__n⁄nuŒ
 ((1));

745 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

746 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

750 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

753 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

754 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 #ifde‡
__USE_XOPEN2K


758 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

759 c⁄° 
time•ec
 *
__ª°ri˘


760 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

764 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

765 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

770 
__ª°ri˘
 
__muãx
,

771 *
__ª°ri˘
 
__¥io˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

776 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

777 
__¥io˚ûög
,

778 *
__ª°ri˘
 
__ﬁd_˚ûög
)

779 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

782 #ifde‡
__USE_XOPEN2K8


784 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 #ifde‡
__USE_GNU


787 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

797 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

801 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

802 
__THROW
 
	`__n⁄nuŒ
 ((1));

805 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

806 
__ª°ri˘
 
__©å
,

807 *
__ª°ri˘
 
__psh¨ed
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

811 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

812 
__psh¨ed
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1));

815 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


817 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


818 
__©å
, *
__ª°ri˘
 
__köd
)

819 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

824 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

830 
__ª°ri˘
 
__©å
,

831 *
__ª°ri˘
 
__¥Ÿocﬁ
)

832 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

836 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

837 
__¥Ÿocﬁ
)

838 
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

842 
__ª°ri˘
 
__©å
,

843 *
__ª°ri˘
 
__¥io˚ûög
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

848 
__¥io˚ûög
)

849 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_XOPEN2K


853 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

854 *
__robu°√ss
)

855 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 #ifde‡
__USE_GNU


857 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

858 *
__robu°√ss
)

859 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

863 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

864 
__robu°√ss
)

865 
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifde‡
__USE_GNU


867 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__robu°√ss
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

880 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


881 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

884 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 c⁄° 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

907 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

908 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2K


912 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

913 c⁄° 
time•ec
 *
__ª°ri˘


914 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

918 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

919 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

925 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

930 
__THROW
 
	`__n⁄nuŒ
 ((1));

933 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

934 
__ª°ri˘
 
__©å
,

935 *
__ª°ri˘
 
__psh¨ed
)

936 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

939 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

940 
__psh¨ed
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

945 
__ª°ri˘
 
__©å
,

946 *
__ª°ri˘
 
__¥ef
)

947 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

950 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

951 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

959 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

960 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

965 
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

969 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

973 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

981 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

982 
	`__n⁄nuŒ
 ((1, 2));

991 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

992 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

994 
	`__n⁄nuŒ
 ((1, 2, 3));

999 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1000 
__THROW
 
	`__n⁄nuŒ
 ((1));

1003 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1004 
__THROW
 
	`__n⁄nuŒ
 ((1));

1007 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1008 
__ª°ri˘
 
__©å
,

1009 *
__ª°ri˘
 
__psh¨ed
)

1010 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1013 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1014 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 #ifde‡
__USE_XOPEN2K


1018 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1019 
__ª°ri˘
 
__©å
,

1020 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1025 
__˛ockid_t
 
__˛ock_id
)

1026 
__THROW
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1035 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1036 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1040 
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1044 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1047 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1048 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1051 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1052 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1060 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1061 
__©å
, 
__cou¡
)

1062 
__THROW
 
	`__n⁄nuŒ
 ((1));

1065 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1066 
__THROW
 
	`__n⁄nuŒ
 ((1));

1069 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1070 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1083 
__ª°ri˘
 
__©å
,

1084 *
__ª°ri˘
 
__psh¨ed
)

1085 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1088 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1089 
__psh¨ed
)

1090 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1103 (*
__de°r_fun˘i⁄
) (*))

1104 
__THROW
 
	`__n⁄nuŒ
 ((1));

1107 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1110 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1114 c⁄° *
__poöãr
Ë
__THROW
 ;

1117 #ifde‡
__USE_XOPEN2K


1119 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1120 
__˛ockid_t
 *
__˛ock_id
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((2));

1136 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1137 (*
__∑ª¡
) (),

1138 (*
__chûd
Ë()Ë
__THROW
;

1141 #ifde‡
__USE_EXTERN_INLINES


1143 
__exã∫_ölöe
 

1144 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1146  
__thªad1
 =
__thªad2
;

1147 
	}
}

1150 
	g__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

61 #i‚def 
__FAVOR_BSD


64 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

68 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

73 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

77 
__BEGIN_NAMESPACE_STD


81 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

82 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_NAMESPACE_STD


86 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


90 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

91 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

95 #ifdef 
__USE_POSIX


99 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

103 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

109 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

110 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

115 #i‡
__USE_FORTIFY_LEVEL
 > 0

116 
	~<bôs/£tjmp2.h
>

119 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

146 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


148 #i‡
__WORDSIZE
 == 64

149 
	#__INT64_C
(
c
Ë¯## 
L


	)

150 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

152 
	#__INT64_C
(
c
Ë¯## 
LL


	)

153 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

159 
	#INT8_MIN
 (-128)

	)

160 
	#INT16_MIN
 (-32767-1)

	)

161 
	#INT32_MIN
 (-2147483647-1)

	)

162 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

164 
	#INT8_MAX
 (127)

	)

165 
	#INT16_MAX
 (32767)

	)

166 
	#INT32_MAX
 (2147483647)

	)

167 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

170 
	#UINT8_MAX
 (255)

	)

171 
	#UINT16_MAX
 (65535)

	)

172 
	#UINT32_MAX
 (4294967295U)

	)

173 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

177 
	#INT_LEAST8_MIN
 (-128)

	)

178 
	#INT_LEAST16_MIN
 (-32767-1)

	)

179 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

180 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

182 
	#INT_LEAST8_MAX
 (127)

	)

183 
	#INT_LEAST16_MAX
 (32767)

	)

184 
	#INT_LEAST32_MAX
 (2147483647)

	)

185 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

188 
	#UINT_LEAST8_MAX
 (255)

	)

189 
	#UINT_LEAST16_MAX
 (65535)

	)

190 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

191 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

195 
	#INT_FAST8_MIN
 (-128)

	)

196 #i‡
__WORDSIZE
 == 64

197 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

198 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

200 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

201 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

203 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

205 
	#INT_FAST8_MAX
 (127)

	)

206 #i‡
__WORDSIZE
 == 64

207 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

208 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

210 
	#INT_FAST16_MAX
 (2147483647)

	)

211 
	#INT_FAST32_MAX
 (2147483647)

	)

213 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

216 
	#UINT_FAST8_MAX
 (255)

	)

217 #i‡
__WORDSIZE
 == 64

218 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

219 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

221 
	#UINT_FAST16_MAX
 (4294967295U)

	)

222 
	#UINT_FAST32_MAX
 (4294967295U)

	)

224 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

228 #i‡
__WORDSIZE
 == 64

229 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

230 
	#INTPTR_MAX
 (9223372036854775807L)

	)

231 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

233 
	#INTPTR_MIN
 (-2147483647-1)

	)

234 
	#INTPTR_MAX
 (2147483647)

	)

235 
	#UINTPTR_MAX
 (4294967295U)

	)

240 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

242 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

245 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

251 #i‡
__WORDSIZE
 == 64

252 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

253 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

255 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

256 
	#PTRDIFF_MAX
 (2147483647)

	)

260 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

261 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

264 #i‡
__WORDSIZE
 == 64

265 
	#SIZE_MAX
 (18446744073709551615UL)

	)

267 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

286 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


289 
	#INT8_C
(
c
Ë
	)
c

290 
	#INT16_C
(
c
Ë
	)
c

291 
	#INT32_C
(
c
Ë
	)
c

292 #i‡
__WORDSIZE
 == 64

293 
	#INT64_C
(
c
Ë¯## 
L


	)

295 
	#INT64_C
(
c
Ë¯## 
LL


	)

299 
	#UINT8_C
(
c
Ë
	)
c

300 
	#UINT16_C
(
c
Ë
	)
c

301 
	#UINT32_C
(
c
Ë¯## 
U


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#UINT64_C
(
c
Ë¯## 
UL


	)

305 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

309 #i‡
__WORDSIZE
 == 64

310 
	#INTMAX_C
(
c
Ë¯## 
L


	)

311 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

313 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

314 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/sys/epoll.h

18 #i‚def 
_SYS_EPOLL_H


19 
	#_SYS_EPOLL_H
 1

	)

21 
	~<°döt.h
>

22 
	~<sys/ty≥s.h
>

25 
	~<bôs/sig£t.h
>

27 #i‚de‡
__sig£t_t_deföed


28 
	#__sig£t_t_deföed


	)

29 
__sig£t_t
 
	tsig£t_t
;

33 
	~<bôs/ïﬁl.h
>

35 #i‚de‡
__EPOLL_PACKED


36 
	#__EPOLL_PACKED


	)

40 
	eEPOLL_EVENTS


42 
	mEPOLLIN
 = 0x001,

43 
	#EPOLLIN
 
EPOLLIN


	)

44 
	mEPOLLPRI
 = 0x002,

45 
	#EPOLLPRI
 
EPOLLPRI


	)

46 
	mEPOLLOUT
 = 0x004,

47 
	#EPOLLOUT
 
EPOLLOUT


	)

48 
	mEPOLLRDNORM
 = 0x040,

49 
	#EPOLLRDNORM
 
EPOLLRDNORM


	)

50 
	mEPOLLRDBAND
 = 0x080,

51 
	#EPOLLRDBAND
 
EPOLLRDBAND


	)

52 
	mEPOLLWRNORM
 = 0x100,

53 
	#EPOLLWRNORM
 
EPOLLWRNORM


	)

54 
	mEPOLLWRBAND
 = 0x200,

55 
	#EPOLLWRBAND
 
EPOLLWRBAND


	)

56 
	mEPOLLMSG
 = 0x400,

57 
	#EPOLLMSG
 
EPOLLMSG


	)

58 
	mEPOLLERR
 = 0x008,

59 
	#EPOLLERR
 
EPOLLERR


	)

60 
	mEPOLLHUP
 = 0x010,

61 
	#EPOLLHUP
 
EPOLLHUP


	)

62 
	mEPOLLRDHUP
 = 0x2000,

63 
	#EPOLLRDHUP
 
EPOLLRDHUP


	)

64 
	mEPOLLWAKEUP
 = 1u << 29,

65 
	#EPOLLWAKEUP
 
EPOLLWAKEUP


	)

66 
	mEPOLLONESHOT
 = 1u << 30,

67 
	#EPOLLONESHOT
 
EPOLLONESHOT


	)

68 
	mEPOLLET
 = 1u << 31

69 
	#EPOLLET
 
EPOLLET


	)

74 
	#EPOLL_CTL_ADD
 1

	)

75 
	#EPOLL_CTL_DEL
 2

	)

76 
	#EPOLL_CTL_MOD
 3

	)

79 
	uïﬁl_d©a


81 *
	m±r
;

82 
	mfd
;

83 
uöt32_t
 
	mu32
;

84 
uöt64_t
 
	mu64
;

85 } 
	tïﬁl_d©a_t
;

87 
	sïﬁl_evít


89 
uöt32_t
 
	mevíts
;

90 
ïﬁl_d©a_t
 
	md©a
;

91 } 
	g__EPOLL_PACKED
;

94 
__BEGIN_DECLS


100 
	$ïﬁl_¸óã
 (
__size
Ë
__THROW
;

104 
	$ïﬁl_¸óã1
 (
__Êags
Ë
__THROW
;

113 
	$ïﬁl_˘l
 (
__ïfd
, 
__›
, 
__fd
,

114 
ïﬁl_evít
 *
__evít
Ë
__THROW
;

127 
	`ïﬁl_waô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

128 
__maxevíts
, 
__timeout
);

136 
	`ïﬁl_pwaô
 (
__ïfd
, 
ïﬁl_evít
 *
__evíts
,

137 
__maxevíts
, 
__timeout
,

138 c⁄° 
__sig£t_t
 *
__ss
);

140 
__END_DECLS


	@/usr/include/sys/eventfd.h

18 #i‚def 
_SYS_EVENTFD_H


19 
	#_SYS_EVENTFD_H
 1

	)

21 
	~<°döt.h
>

24 
	~<bôs/evítfd.h
>

27 
uöt64_t
 
	tevítfd_t
;

30 
__BEGIN_DECLS


34 
	$evítfd
 (
__cou¡
, 
__Êags
Ë
__THROW
;

37 
	`evítfd_ªad
 (
__fd
, 
evítfd_t
 *
__vÆue
);

40 
	`evítfd_wrôe
 (
__fd
, 
evítfd_t
 
__vÆue
);

42 
__END_DECLS


	@/usr/include/sys/inotify.h

18 #i‚def 
_SYS_INOTIFY_H


19 
	#_SYS_INOTIFY_H
 1

	)

21 
	~<°döt.h
>

24 
	~<bôs/öŸify.h
>

28 
	söŸify_evít


30 
	mwd
;

31 
uöt32_t
 
	mmask
;

32 
uöt32_t
 
	mcookõ
;

33 
uöt32_t
 
	mÀn
;

34 
«me
 
	m__Êex¨r
;

39 
	#IN_ACCESS
 0x00000001

	)

40 
	#IN_MODIFY
 0x00000002

	)

41 
	#IN_ATTRIB
 0x00000004

	)

42 
	#IN_CLOSE_WRITE
 0x00000008

	)

43 
	#IN_CLOSE_NOWRITE
 0x00000010

	)

44 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
Ë

	)

45 
	#IN_OPEN
 0x00000020

	)

46 
	#IN_MOVED_FROM
 0x00000040

	)

47 
	#IN_MOVED_TO
 0x00000080

	)

48 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
Ë

	)

49 
	#IN_CREATE
 0x00000100

	)

50 
	#IN_DELETE
 0x00000200

	)

51 
	#IN_DELETE_SELF
 0x00000400

	)

52 
	#IN_MOVE_SELF
 0x00000800

	)

55 
	#IN_UNMOUNT
 0x00002000

	)

56 
	#IN_Q_OVERFLOW
 0x00004000

	)

57 
	#IN_IGNORED
 0x00008000

	)

60 
	#IN_CLOSE
 (
IN_CLOSE_WRITE
 | 
IN_CLOSE_NOWRITE
Ë

	)

61 
	#IN_MOVE
 (
IN_MOVED_FROM
 | 
IN_MOVED_TO
Ë

	)

64 
	#IN_ONLYDIR
 0x01000000

	)

66 
	#IN_DONT_FOLLOW
 0x02000000

	)

67 
	#IN_EXCL_UNLINK
 0x04000000

	)

69 
	#IN_MASK_ADD
 0x20000000

	)

71 
	#IN_ISDIR
 0x40000000

	)

72 
	#IN_ONESHOT
 0x80000000

	)

75 
	#IN_ALL_EVENTS
 (
IN_ACCESS
 | 
IN_MODIFY
 | 
IN_ATTRIB
 | 
IN_CLOSE_WRITE
 \

76 | 
IN_CLOSE_NOWRITE
 | 
IN_OPEN
 | 
IN_MOVED_FROM
 \

77 | 
IN_MOVED_TO
 | 
IN_CREATE
 | 
IN_DELETE
 \

78 | 
IN_DELETE_SELF
 | 
IN_MOVE_SELF
)

	)

81 
__BEGIN_DECLS


84 
	$öŸify_öô
 (Ë
__THROW
;

87 
	$öŸify_öô1
 (
__Êags
Ë
__THROW
;

91 
	$öŸify_add_w©ch
 (
__fd
, c⁄° *
__«me
, 
uöt32_t
 
__mask
)

92 
__THROW
;

95 
	$öŸify_rm_w©ch
 (
__fd
, 
__wd
Ë
__THROW
;

97 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

30 #ifde‡
__USE_GNU


32 
	~<bôs/sig£t.h
>

39 
	~<bôs/sockë.h
>

41 #ifde‡
__USE_BSD


44 
	sosockaddr


46 
	mß_Ámûy
;

47 
	mß_d©a
[14];

55 
	mSHUT_RD
 = 0,

56 
	#SHUT_RD
 
SHUT_RD


	)

57 
	mSHUT_WR
,

58 
	#SHUT_WR
 
SHUT_WR


	)

59 
	mSHUT_RDWR


60 
	#SHUT_RDWR
 
SHUT_RDWR


	)

69 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


70 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

71 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

75 
	#__SOCKADDR_ALLTYPES
 \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


94 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

95 uni⁄ { 
	m__SOCKADDR_ALLTYPES


96 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

97 #unde‡
__SOCKADDR_ONETYPE


100 #ifde‡
__USE_GNU


102 
	smmsghdr


104 
msghdr
 
	mmsg_hdr
;

105 
	mmsg_Àn
;

114 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

120 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

121 
__fds
[2]Ë
__THROW
;

124 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

125 
__THROW
;

128 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

142 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

143 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

150 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

157 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

164 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

165 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

166 
sockÀn_t
 
__addr_Àn
);

175 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

176 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

177 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

185 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

186 
__Êags
);

188 #ifde‡
__USE_GNU


194 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

195 
__vÀn
, 
__Êags
);

203 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

205 #ifde‡
__USE_GNU


211 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

212 
__vÀn
, 
__Êags
,

213 c⁄° 
time•ec
 *
__tmo
);

220 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

221 *
__ª°ri˘
 
__›tvÆ
,

222 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

227 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

228 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

234 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

244 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

245 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

247 #ifde‡
__USE_GNU


252 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

253 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

262 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

265 #ifde‡
__USE_XOPEN2K


267 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

271 #ifde‡
__USE_MISC


275 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

280 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


281 
	~<bôs/sockë2.h
>

284 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

79 c⁄° 
timez⁄e
 *
__tz
)

80 
__THROW
;

86 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

87 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

92 
	e__ôimî_which


95 
ITIMER_REAL
 = 0,

96 
	#ITIMER_REAL
 
ITIMER_REAL


	)

98 
ITIMER_VIRTUAL
 = 1,

99 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

102 
ITIMER_PROF
 = 2

103 
	#ITIMER_PROF
 
ITIMER_PROF


	)

108 
	sôimîvÆ


111 
timevÆ
 
ô_öãrvÆ
;

113 
timevÆ
 
ô_vÆue
;

116 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


119 
__ôimî_which
 
	t__ôimî_which_t
;

121 
	t__ôimî_which_t
;

126 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

127 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

132 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

133 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

134 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

139 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

140 
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #ifde‡
__USE_BSD


144 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_GNU


155 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

156 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

160 #ifde‡
__USE_BSD


163 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

164 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

165 
	#timîcmp
(
a
, 
b
, 
CMP
) \

166 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

167 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

168 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

169 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

171 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

172 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

173 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

175 ++(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 -= 1000000; \

178 
	}
} 0)

	)

179 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

181 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

182 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

183 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

184 --(
ªsu…
)->
tv_£c
; \

185 (
ªsu…
)->
tv_u£c
 += 1000000; \

187 } 0)

	)

190 
	g__END_DECLS


	@/usr/include/sys/timeb.h

18 #i‚de‡
_SYS_TIMEB_H


19 
	#_SYS_TIMEB_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_time_t


	)

24 
	~<time.h
>

27 
__BEGIN_DECLS


31 
	stimeb


33 
time_t
 
	mtime
;

34 
	mmûlôm
;

35 
	mtimez⁄e
;

36 
	md°Êag
;

41 
·ime
 (
timeb
 *
__timebuf
);

43 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/sys/utsname.h

22 #i‚def 
_SYS_UTSNAME_H


23 
	#_SYS_UTSNAME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ut¢ame.h
>

31 #i‚de‡
_UTSNAME_SYSNAME_LENGTH


32 
	#_UTSNAME_SYSNAME_LENGTH
 
_UTSNAME_LENGTH


	)

34 #i‚de‡
_UTSNAME_NODENAME_LENGTH


35 
	#_UTSNAME_NODENAME_LENGTH
 
_UTSNAME_LENGTH


	)

37 #i‚de‡
_UTSNAME_RELEASE_LENGTH


38 
	#_UTSNAME_RELEASE_LENGTH
 
_UTSNAME_LENGTH


	)

40 #i‚de‡
_UTSNAME_VERSION_LENGTH


41 
	#_UTSNAME_VERSION_LENGTH
 
_UTSNAME_LENGTH


	)

43 #i‚de‡
_UTSNAME_MACHINE_LENGTH


44 
	#_UTSNAME_MACHINE_LENGTH
 
_UTSNAME_LENGTH


	)

48 
	sut¢ame


51 
	msy¢ame
[
_UTSNAME_SYSNAME_LENGTH
];

54 
	mnodíame
[
_UTSNAME_NODENAME_LENGTH
];

57 
	mªÀa£
[
_UTSNAME_RELEASE_LENGTH
];

59 
	mvîsi⁄
[
_UTSNAME_VERSION_LENGTH
];

62 
	mmachöe
[
_UTSNAME_MACHINE_LENGTH
];

64 #i‡
_UTSNAME_DOMAIN_LENGTH
 - 0

66 #ifde‡
__USE_GNU


67 
	mdomaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

69 
	m__domaö«me
[
_UTSNAME_DOMAIN_LENGTH
];

74 #ifde‡
__USE_SVID


76 
	#SYS_NMLN
 
_UTSNAME_LENGTH


	)

81 
	$u«me
 (
ut¢ame
 *
__«me
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/sys/wait.h

23 #i‚def 
_SYS_WAIT_H


24 
	#_SYS_WAIT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<sig«l.h
>

33 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

36 
	~<bôs/waôÊags.h
>

38 #ifdef 
__USE_BSD


43 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


44 
	#__WAIT_INT
(
°©us
) \

45 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

46 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

48 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

56 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


57 
	#__WAIT_STATUS
 *

	)

58 
	#__WAIT_STATUS_DEFN
 *

	)

63 
waô
 *
	m__u±r
;

64 *
	m__ùå
;

65 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

66 
	#__WAIT_STATUS_DEFN
 *

	)

71 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

72 
	#__WAIT_STATUS
 *

	)

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	~<bôs/waô°©us.h
>

80 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

86 #ifde‡
__WIFCONTINUED


87 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifdef 
__USE_BSD


92 
	#WCOREFLAG
 
__WCOREFLAG


	)

93 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

94 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

95 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

99 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


102 
	mP_ALL
,

103 
	mP_PID
,

104 
	mP_PGID


105 } 
	tidty≥_t
;

114 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

116 #ifdef 
__USE_BSD


118 
	#WAIT_ANY
 (-1Ë

	)

119 
	#WAIT_MYPGRP
 0

	)

137 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

139 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


140 #i‚de‡
__id_t_deföed


141 
	~<bôs/ty≥s.h
>

142 
__id_t
 
	tid_t
;

143 
	#__id_t_deföed


	)

146 
	#__√ed_sigöfo_t


	)

147 
	~<bôs/sigöfo.h
>

160 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

161 
__›ti⁄s
);

164 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


167 
	grußge
;

174 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

175 
rußge
 * 
__ußge
Ë
__THROWNL
;

178 #ifde‡
__USE_BSD


180 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

181 
rußge
 *
__ußge
Ë
__THROWNL
;

185 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/ucontext.h

20 #i‚de‡
_UCONTEXT_H


21 
	#_UCONTEXT_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<sys/uc⁄ãxt.h
>

28 
__BEGIN_DECLS


31 
	$gëc⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

34 
	$£tc⁄ãxt
 (c⁄° 
uc⁄ãxt_t
 *
__u˝
Ë
__THROWNL
;

38 
	$sw≠c⁄ãxt
 (
uc⁄ãxt_t
 *
__ª°ri˘
 
__ou˝
,

39 c⁄° 
uc⁄ãxt_t
 *
__ª°ri˘
 
__u˝
Ë
__THROWNL
;

47 
	`makec⁄ãxt
 (
uc⁄ãxt_t
 *
__u˝
, (*
__func
) (),

48 
__¨gc
, ...Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/epoll.h

18 #i‚def 
_SYS_EPOLL_H


25 
	mEPOLL_CLOEXEC
 = 02000000,

26 
	#EPOLL_CLOEXEC
 
EPOLL_CLOEXEC


	)

27 
	mEPOLL_NONBLOCK
 = 00004000

28 
	#EPOLL_NONBLOCK
 
EPOLL_NONBLOCK


	)

31 
	#__EPOLL_PACKED
 
	`__©åibuã__
 ((
__∑cked__
))

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/eventfd.h

18 #i‚def 
_SYS_EVENTFD_H


25 
	mEFD_SEMAPHORE
 = 00000001,

26 
	#EFD_SEMAPHORE
 
EFD_SEMAPHORE


	)

27 
	mEFD_CLOEXEC
 = 02000000,

28 
	#EFD_CLOEXEC
 
EFD_CLOEXEC


	)

29 
	mEFD_NONBLOCK
 = 00004000

30 
	#EFD_NONBLOCK
 
EFD_NONBLOCK


	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


27 
	#IP_OPTIONS
 4

	)

28 
	#IP_HDRINCL
 3

	)

29 
	#IP_TOS
 1

	)

30 
	#IP_TTL
 2

	)

31 
	#IP_RECVOPTS
 6

	)

33 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_MULTICAST_IF
 32

	)

36 
	#IP_MULTICAST_TTL
 33

	)

37 
	#IP_MULTICAST_LOOP
 34

	)

38 
	#IP_ADD_MEMBERSHIP
 35

	)

39 
	#IP_DROP_MEMBERSHIP
 36

	)

40 
	#IP_UNBLOCK_SOURCE
 37

	)

41 
	#IP_BLOCK_SOURCE
 38

	)

42 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

43 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

44 
	#IP_MSFILTER
 41

	)

45 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

53 
	#IP_MULTICAST_ALL
 49

	)

54 
	#IP_UNICAST_IF
 50

	)

56 
	#MCAST_EXCLUDE
 0

	)

57 
	#MCAST_INCLUDE
 1

	)

60 
	#IP_ROUTER_ALERT
 5

	)

61 
	#IP_PKTINFO
 8

	)

62 
	#IP_PKTOPTIONS
 9

	)

63 
	#IP_PMTUDISC
 10

	)

64 
	#IP_MTU_DISCOVER
 10

	)

65 
	#IP_RECVERR
 11

	)

66 
	#IP_RECVTTL
 12

	)

67 
	#IP_RECVTOS
 13

	)

68 
	#IP_MTU
 14

	)

69 
	#IP_FREEBIND
 15

	)

70 
	#IP_IPSEC_POLICY
 16

	)

71 
	#IP_XFRM_POLICY
 17

	)

72 
	#IP_PASSSEC
 18

	)

73 
	#IP_TRANSPARENT
 19

	)

74 
	#IP_MULTICAST_ALL
 49

	)

77 
	#IP_ORIGDSTADDR
 20

	)

78 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

80 
	#IP_MINTTL
 21

	)

84 
	#IP_PMTUDISC_DONT
 0

	)

85 
	#IP_PMTUDISC_WANT
 1

	)

86 
	#IP_PMTUDISC_DO
 2

	)

87 
	#IP_PMTUDISC_PROBE
 3

	)

90 
	#SOL_IP
 0

	)

92 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

93 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

94 
	#IP_MAX_MEMBERSHIPS
 20

	)

96 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


100 
	sù_›ts


102 
ö_addr
 
	mù_d°
;

103 
	mù_›ts
[40];

107 
	sù_mªqn


109 
ö_addr
 
	mimr_mu…üddr
;

110 
ö_addr
 
	mimr_addªss
;

111 
	mimr_ifödex
;

115 
	sö_pktöfo


117 
	mùi_ifödex
;

118 
ö_addr
 
	mùi_•ec_d°
;

119 
ö_addr
 
	mùi_addr
;

126 
	#IPV6_ADDRFORM
 1

	)

127 
	#IPV6_2292PKTINFO
 2

	)

128 
	#IPV6_2292HOPOPTS
 3

	)

129 
	#IPV6_2292DSTOPTS
 4

	)

130 
	#IPV6_2292RTHDR
 5

	)

131 
	#IPV6_2292PKTOPTIONS
 6

	)

132 
	#IPV6_CHECKSUM
 7

	)

133 
	#IPV6_2292HOPLIMIT
 8

	)

135 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

137 
	#IPV6_NEXTHOP
 9

	)

138 
	#IPV6_AUTHHDR
 10

	)

139 
	#IPV6_UNICAST_HOPS
 16

	)

140 
	#IPV6_MULTICAST_IF
 17

	)

141 
	#IPV6_MULTICAST_HOPS
 18

	)

142 
	#IPV6_MULTICAST_LOOP
 19

	)

143 
	#IPV6_JOIN_GROUP
 20

	)

144 
	#IPV6_LEAVE_GROUP
 21

	)

145 
	#IPV6_ROUTER_ALERT
 22

	)

146 
	#IPV6_MTU_DISCOVER
 23

	)

147 
	#IPV6_MTU
 24

	)

148 
	#IPV6_RECVERR
 25

	)

149 
	#IPV6_V6ONLY
 26

	)

150 
	#IPV6_JOIN_ANYCAST
 27

	)

151 
	#IPV6_LEAVE_ANYCAST
 28

	)

152 
	#IPV6_IPSEC_POLICY
 34

	)

153 
	#IPV6_XFRM_POLICY
 35

	)

155 
	#IPV6_RECVPKTINFO
 49

	)

156 
	#IPV6_PKTINFO
 50

	)

157 
	#IPV6_RECVHOPLIMIT
 51

	)

158 
	#IPV6_HOPLIMIT
 52

	)

159 
	#IPV6_RECVHOPOPTS
 53

	)

160 
	#IPV6_HOPOPTS
 54

	)

161 
	#IPV6_RTHDRDSTOPTS
 55

	)

162 
	#IPV6_RECVRTHDR
 56

	)

163 
	#IPV6_RTHDR
 57

	)

164 
	#IPV6_RECVDSTOPTS
 58

	)

165 
	#IPV6_DSTOPTS
 59

	)

167 
	#IPV6_RECVTCLASS
 66

	)

168 
	#IPV6_TCLASS
 67

	)

171 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

172 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

173 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

174 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

177 
	#IPV6_PMTUDISC_DONT
 0

	)

178 
	#IPV6_PMTUDISC_WANT
 1

	)

179 
	#IPV6_PMTUDISC_DO
 2

	)

180 
	#IPV6_PMTUDISC_PROBE
 3

	)

183 
	#SOL_IPV6
 41

	)

184 
	#SOL_ICMPV6
 58

	)

187 
	#IPV6_RTHDR_LOOSE
 0

	)

188 
	#IPV6_RTHDR_STRICT
 1

	)

190 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/inotify.h

18 #i‚def 
_SYS_INOTIFY_H


25 
	mIN_CLOEXEC
 = 02000000,

26 
	#IN_CLOEXEC
 
IN_CLOEXEC


	)

27 
	mIN_NONBLOCK
 = 00004000

28 
	#IN_NONBLOCK
 
IN_NONBLOCK


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 
	#MAP_ANONYMOUS
 0x20

	)

53 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

54 
	#MAP_32BIT
 0x40

	)

58 #ifde‡
__USE_MISC


59 
	#MAP_GROWSDOWN
 0x00100

	)

60 
	#MAP_DENYWRITE
 0x00800

	)

61 
	#MAP_EXECUTABLE
 0x01000

	)

62 
	#MAP_LOCKED
 0x02000

	)

63 
	#MAP_NORESERVE
 0x04000

	)

64 
	#MAP_POPULATE
 0x08000

	)

65 
	#MAP_NONBLOCK
 0x10000

	)

66 
	#MAP_STACK
 0x20000

	)

67 
	#MAP_HUGETLB
 0x40000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HUGEPAGE
 14

	)

99 
	#MADV_NOHUGEPAGE
 15

	)

100 
	#MADV_DONTDUMP
 16

	)

102 
	#MADV_DODUMP
 17

	)

103 
	#MADV_HWPOISON
 100

	)

107 #ifde‡
__USE_XOPEN2K


108 
	#POSIX_MADV_NORMAL
 0

	)

109 
	#POSIX_MADV_RANDOM
 1

	)

110 
	#POSIX_MADV_SEQUENTIAL
 2

	)

111 
	#POSIX_MADV_WILLNEED
 3

	)

112 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
__±hªad_li°_t
 
	m__li°
;

106 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	m__nu£rs
;

109 
__exãnsi⁄__
 union

111 
	m__•ös
;

112 
__±hªad_¶i°_t
 
	m__li°
;

115 } 
	m__d©a
;

116 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

117 
	m__Æign
;

118 } 
	t±hªad_muãx_t
;

122 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

123 
	m__Æign
;

124 } 
	t±hªad_muãx©å_t
;

133 
	m__lock
;

134 
	m__fuãx
;

135 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

136 
__exãnsi⁄__
 
	m__wakeup_£q
;

137 
__exãnsi⁄__
 
	m__wokí_£q
;

138 *
	m__muãx
;

139 
	m__nwaôîs
;

140 
	m__brﬂdˇ°_£q
;

141 } 
	m__d©a
;

142 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

143 
__exãnsi⁄__
 
	m__Æign
;

144 } 
	t±hªad_c⁄d_t
;

148 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

149 
	m__Æign
;

150 } 
	t±hªad_c⁄d©å_t
;

154 
	t±hªad_key_t
;

158 
	t±hªad_⁄˚_t
;

161 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


166 #ifde‡
__x86_64__


169 
	m__lock
;

170 
	m__ƒ_ªadîs
;

171 
	m__ªadîs_wakeup
;

172 
	m__wrôî_wakeup
;

173 
	m__ƒ_ªadîs_queued
;

174 
	m__ƒ_wrôîs_queued
;

175 
	m__wrôî
;

176 
	m__sh¨ed
;

177 
	m__∑d1
;

178 
	m__∑d2
;

181 
	m__Êags
;

182 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

183 } 
	m__d©a
;

187 
	m__lock
;

188 
	m__ƒ_ªadîs
;

189 
	m__ªadîs_wakeup
;

190 
	m__wrôî_wakeup
;

191 
	m__ƒ_ªadîs_queued
;

192 
	m__ƒ_wrôîs_queued
;

195 
	m__Êags
;

196 
	m__sh¨ed
;

197 
	m__∑d1
;

198 
	m__∑d2
;

199 
	m__wrôî
;

200 } 
	m__d©a
;

202 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

203 
	m__Æign
;

204 } 
	t±hªad_rwlock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

209 
	m__Æign
;

210 } 
	t±hªad_rwlock©å_t
;

214 #ifde‡
__USE_XOPEN2K


216 vﬁ©ûê
	t±hªad_•ölock_t
;

223 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

224 
	m__Æign
;

225 } 
	t±hªad_b¨rõr_t
;

229 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

230 
	m__Æign
;

231 } 
	t±hªad_b¨rõøâr_t
;

235 #i‚de‡
__x86_64__


237 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 } 
_sigÁu…
;

115 
si_b™d
;

116 
si_fd
;

117 } 
_sigpﬁl
;

122 *
_ˇŒ_addr
;

123 
_sysˇŒ
;

124 
_¨ch
;

125 } 
_sigsys
;

126 } 
_sifõlds
;

127 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

131 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

132 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

133 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

134 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

135 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

136 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

137 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

138 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

139 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

140 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

141 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

142 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

143 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

144 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

145 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

146 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

153 
SI_ASYNCNL
 = -60,

154 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

155 
SI_TKILL
 = -6,

156 
	#SI_TKILL
 
SI_TKILL


	)

157 
SI_SIGIO
,

158 
	#SI_SIGIO
 
SI_SIGIO


	)

159 
SI_ASYNCIO
,

160 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

161 
SI_MESGQ
,

162 
	#SI_MESGQ
 
SI_MESGQ


	)

163 
SI_TIMER
,

164 
	#SI_TIMER
 
SI_TIMER


	)

165 
SI_QUEUE
,

166 
	#SI_QUEUE
 
SI_QUEUE


	)

167 
SI_USER
,

168 
	#SI_USER
 
SI_USER


	)

169 
SI_KERNEL
 = 0x80

170 
	#SI_KERNEL
 
SI_KERNEL


	)

177 
ILL_ILLOPC
 = 1,

178 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

179 
ILL_ILLOPN
,

180 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

181 
ILL_ILLADR
,

182 
	#ILL_ILLADR
 
ILL_ILLADR


	)

183 
ILL_ILLTRP
,

184 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

185 
ILL_PRVOPC
,

186 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

187 
ILL_PRVREG
,

188 
	#ILL_PRVREG
 
ILL_PRVREG


	)

189 
ILL_COPROC
,

190 
	#ILL_COPROC
 
ILL_COPROC


	)

191 
ILL_BADSTK


192 
	#ILL_BADSTK
 
ILL_BADSTK


	)

198 
FPE_INTDIV
 = 1,

199 
	#FPE_INTDIV
 
FPE_INTDIV


	)

200 
FPE_INTOVF
,

201 
	#FPE_INTOVF
 
FPE_INTOVF


	)

202 
FPE_FLTDIV
,

203 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

204 
FPE_FLTOVF
,

205 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

206 
FPE_FLTUND
,

207 
	#FPE_FLTUND
 
FPE_FLTUND


	)

208 
FPE_FLTRES
,

209 
	#FPE_FLTRES
 
FPE_FLTRES


	)

210 
FPE_FLTINV
,

211 
	#FPE_FLTINV
 
FPE_FLTINV


	)

212 
FPE_FLTSUB


213 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

219 
SEGV_MAPERR
 = 1,

220 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

221 
SEGV_ACCERR


222 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

228 
BUS_ADRALN
 = 1,

229 
	#BUS_ADRALN
 
BUS_ADRALN


	)

230 
BUS_ADRERR
,

231 
	#BUS_ADRERR
 
BUS_ADRERR


	)

232 
BUS_OBJERR


233 
	#BUS_OBJERR
 
BUS_OBJERR


	)

239 
TRAP_BRKPT
 = 1,

240 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

241 
TRAP_TRACE


242 
	#TRAP_TRACE
 
TRAP_TRACE


	)

248 
CLD_EXITED
 = 1,

249 
	#CLD_EXITED
 
CLD_EXITED


	)

250 
CLD_KILLED
,

251 
	#CLD_KILLED
 
CLD_KILLED


	)

252 
CLD_DUMPED
,

253 
	#CLD_DUMPED
 
CLD_DUMPED


	)

254 
CLD_TRAPPED
,

255 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

256 
CLD_STOPPED
,

257 
	#CLD_STOPPED
 
CLD_STOPPED


	)

258 
CLD_CONTINUED


259 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

265 
POLL_IN
 = 1,

266 
	#POLL_IN
 
POLL_IN


	)

267 
POLL_OUT
,

268 
	#POLL_OUT
 
POLL_OUT


	)

269 
POLL_MSG
,

270 
	#POLL_MSG
 
POLL_MSG


	)

271 
POLL_ERR
,

272 
	#POLL_ERR
 
POLL_ERR


	)

273 
POLL_PRI
,

274 
	#POLL_PRI
 
POLL_PRI


	)

275 
POLL_HUP


276 
	#POLL_HUP
 
POLL_HUP


	)

279 #unde‡
__√ed_sigöfo_t


283 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

284 && !
deföed
 
__have_sigevít_t


285 
	#__have_sigevít_t
 1

	)

288 
	#__SIGEV_MAX_SIZE
 64

	)

289 #i‡
__WORDSIZE
 == 64

290 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

292 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

296 #i‚de‡
__have_±hªad_©å_t


297 
±hªad_©å_t
 
	t±hªad_©å_t
;

298 
	#__have_±hªad_©å_t
 1

	)

301 
	ssigevít


303 
sigvÆ_t
 
sigev_vÆue
;

304 
sigev_signo
;

305 
sigev_nŸify
;

309 
_∑d
[
__SIGEV_PAD_SIZE
];

313 
__pid_t
 
_tid
;

317 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

318 
±hªad_©å_t
 *
_©åibuã
;

319 } 
_sigev_thªad
;

320 } 
_sigev_un
;

321 } 
	tsigevít_t
;

324 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

325 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

330 
SIGEV_SIGNAL
 = 0,

331 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

332 
SIGEV_NONE
,

333 
	#SIGEV_NONE
 
SIGEV_NONE


	)

334 
SIGEV_THREAD
,

335 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

337 
SIGEV_THREAD_ID
 = 4

338 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‚de‡
_SYS_SOCKET_H


27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	~<sys/ty≥s.h
>

33 #i‚de‡
__sockÀn_t_deföed


34 
__sockÀn_t
 
	tsockÀn_t
;

35 
	#__sockÀn_t_deföed


	)

39 
	~<bôs/sockë_ty≥.h
>

42 
	#PF_UNSPEC
 0

	)

43 
	#PF_LOCAL
 1

	)

44 
	#PF_UNIX
 
PF_LOCAL


	)

45 
	#PF_FILE
 
PF_LOCAL


	)

46 
	#PF_INET
 2

	)

47 
	#PF_AX25
 3

	)

48 
	#PF_IPX
 4

	)

49 
	#PF_APPLETALK
 5

	)

50 
	#PF_NETROM
 6

	)

51 
	#PF_BRIDGE
 7

	)

52 
	#PF_ATMPVC
 8

	)

53 
	#PF_X25
 9

	)

54 
	#PF_INET6
 10

	)

55 
	#PF_ROSE
 11

	)

56 
	#PF_DEC√t
 12

	)

57 
	#PF_NETBEUI
 13

	)

58 
	#PF_SECURITY
 14

	)

59 
	#PF_KEY
 15

	)

60 
	#PF_NETLINK
 16

	)

61 
	#PF_ROUTE
 
PF_NETLINK


	)

62 
	#PF_PACKET
 17

	)

63 
	#PF_ASH
 18

	)

64 
	#PF_ECONET
 19

	)

65 
	#PF_ATMSVC
 20

	)

66 
	#PF_RDS
 21

	)

67 
	#PF_SNA
 22

	)

68 
	#PF_IRDA
 23

	)

69 
	#PF_PPPOX
 24

	)

70 
	#PF_WANPIPE
 25

	)

71 
	#PF_LLC
 26

	)

72 
	#PF_CAN
 29

	)

73 
	#PF_TIPC
 30

	)

74 
	#PF_BLUETOOTH
 31

	)

75 
	#PF_IUCV
 32

	)

76 
	#PF_RXRPC
 33

	)

77 
	#PF_ISDN
 34

	)

78 
	#PF_PHONET
 35

	)

79 
	#PF_IEEE802154
 36

	)

80 
	#PF_CAIF
 37

	)

81 
	#PF_ALG
 38

	)

82 
	#PF_NFC
 39

	)

83 
	#PF_MAX
 40

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_MAX
 
PF_MAX


	)

133 
	#SOL_RAW
 255

	)

134 
	#SOL_DECNET
 261

	)

135 
	#SOL_X25
 262

	)

136 
	#SOL_PACKET
 263

	)

137 
	#SOL_ATM
 264

	)

138 
	#SOL_AAL
 265

	)

139 
	#SOL_IRDA
 266

	)

142 
	#SOMAXCONN
 128

	)

145 
	~<bôs/sockaddr.h
>

148 
	ssockaddr


150 
__SOCKADDR_COMMON
 (
ß_
);

151 
	mß_d©a
[14];

157 
	#__ss_Æig¡y≥
 

	)

158 
	#_SS_SIZE
 128

	)

159 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

161 
	ssockaddr_°‹age


163 
__SOCKADDR_COMMON
 (
ss_
);

164 
__ss_Æig¡y≥
 
	m__ss_Æign
;

165 
	m__ss_∑ddög
[
_SS_PADSIZE
];

172 
	mMSG_OOB
 = 0x01,

173 
	#MSG_OOB
 
MSG_OOB


	)

174 
	mMSG_PEEK
 = 0x02,

175 
	#MSG_PEEK
 
MSG_PEEK


	)

176 
	mMSG_DONTROUTE
 = 0x04,

177 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

178 #ifde‡
__USE_GNU


180 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

181 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

183 
	mMSG_CTRUNC
 = 0x08,

184 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

185 
	mMSG_PROXY
 = 0x10,

186 
	#MSG_PROXY
 
MSG_PROXY


	)

187 
	mMSG_TRUNC
 = 0x20,

188 
	#MSG_TRUNC
 
MSG_TRUNC


	)

189 
	mMSG_DONTWAIT
 = 0x40,

190 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

191 
	mMSG_EOR
 = 0x80,

192 
	#MSG_EOR
 
MSG_EOR


	)

193 
	mMSG_WAITALL
 = 0x100,

194 
	#MSG_WAITALL
 
MSG_WAITALL


	)

195 
	mMSG_FIN
 = 0x200,

196 
	#MSG_FIN
 
MSG_FIN


	)

197 
	mMSG_SYN
 = 0x400,

198 
	#MSG_SYN
 
MSG_SYN


	)

199 
	mMSG_CONFIRM
 = 0x800,

200 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

201 
	mMSG_RST
 = 0x1000,

202 
	#MSG_RST
 
MSG_RST


	)

203 
	mMSG_ERRQUEUE
 = 0x2000,

204 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

205 
	mMSG_NOSIGNAL
 = 0x4000,

206 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

207 
	mMSG_MORE
 = 0x8000,

208 
	#MSG_MORE
 
MSG_MORE


	)

209 
	mMSG_WAITFORONE
 = 0x10000,

210 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

215 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

221 
	smsghdr


223 *
	mmsg_«me
;

224 
sockÀn_t
 
	mmsg_«mñí
;

226 
iovec
 *
	mmsg_iov
;

227 
size_t
 
	mmsg_iovÀn
;

229 *
	mmsg_c⁄åﬁ
;

230 
size_t
 
	mmsg_c⁄åﬁÀn
;

235 
	mmsg_Êags
;

239 
	scmsghdr


241 
size_t
 
	mcmsg_Àn
;

246 
	mcmsg_Àvñ
;

247 
	mcmsg_ty≥
;

248 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

249 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

254 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

255 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

257 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

259 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

260 
	#CMSG_FIRSTHDR
(
mhdr
) \

261 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

262 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

263 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

264 & (
size_t
Ë~( (size_tË- 1))

	)

265 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

266 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

267 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

269 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

270 
cmsghdr
 *
__cmsg
Ë
__THROW
;

271 #ifde‡
__USE_EXTERN_INLINES


272 #i‚de‡
_EXTERN_INLINE


273 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

275 
_EXTERN_INLINE
 
cmsghdr
 *

276 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

278 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

280  (
cmsghdr
 *) 0;

282 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

283 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

284 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


285 + 
__mhdr
->
msg_c⁄åﬁÀn
)

286 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

287 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

289  (
cmsghdr
 *) 0;

290  
__cmsg
;

291 
	}
}

298 
	mSCM_RIGHTS
 = 0x01

299 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

300 #ifde‡
__USE_GNU


301 , 
	mSCM_CREDENTIALS
 = 0x02

302 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

306 #ifde‡
__USE_GNU


308 
	su¸ed


310 
pid_t
 
	mpid
;

311 
uid_t
 
	muid
;

312 
gid_t
 
	mgid
;

317 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


318 #i‚de‡
FIOGETOWN


319 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

321 #i‚de‡
FIOSETOWN


322 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

324 #i‚de‡
SIOCATMARK


325 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

327 #i‚de‡
SIOCGPGRP


328 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

330 #i‚de‡
SIOCGSTAMP


331 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

333 #i‚de‡
SIOCGSTAMPNS


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

336 #i‚de‡
SIOCSPGRP


337 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

342 
	~<asm/sockë.h
>

344 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


345 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


346 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


347 #unde‡
FIOGETOWN


349 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


350 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


351 #unde‡
FIOSETOWN


353 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


354 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


355 #unde‡
SIOCATMARK


357 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


358 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


359 #unde‡
SIOCGPGRP


361 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


362 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


363 #unde‡
SIOCGSTAMP


365 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


366 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


367 #unde‡
SIOCGSTAMPNS


369 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


370 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


371 #unde‡
SIOCSPGRP


376 
	slögî


378 
	ml_⁄off
;

379 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bªak
 
__NR_bªak


	)

20 
	#SYS_brk
 
__NR_brk


	)

21 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

22 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

23 
	#SYS_chdú
 
__NR_chdú


	)

24 
	#SYS_chmod
 
__NR_chmod


	)

25 
	#SYS_chown
 
__NR_chown


	)

26 
	#SYS_chown32
 
__NR_chown32


	)

27 
	#SYS_chroŸ
 
__NR_chroŸ


	)

28 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

29 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

30 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

31 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

32 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

33 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

34 
	#SYS_˛o£
 
__NR_˛o£


	)

35 
	#SYS_¸ót
 
__NR_¸ót


	)

36 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

37 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

38 
	#SYS_dup
 
__NR_dup


	)

39 
	#SYS_dup2
 
__NR_dup2


	)

40 
	#SYS_dup3
 
__NR_dup3


	)

41 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

42 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

43 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

44 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

45 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

46 
	#SYS_evítfd
 
__NR_evítfd


	)

47 
	#SYS_evítfd2
 
__NR_evítfd2


	)

48 
	#SYS_execve
 
__NR_execve


	)

49 
	#SYS_exô
 
__NR_exô


	)

50 
	#SYS_exô_group
 
__NR_exô_group


	)

51 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

52 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

53 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

54 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

55 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

56 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

57 
	#SYS_fchdú
 
__NR_fchdú


	)

58 
	#SYS_fchmod
 
__NR_fchmod


	)

59 
	#SYS_fchmod©
 
__NR_fchmod©


	)

60 
	#SYS_fchown
 
__NR_fchown


	)

61 
	#SYS_fchown32
 
__NR_fchown32


	)

62 
	#SYS_fchow«t
 
__NR_fchow«t


	)

63 
	#SYS_f˙é
 
__NR_f˙é


	)

64 
	#SYS_f˙é64
 
__NR_f˙é64


	)

65 
	#SYS_fd©async
 
__NR_fd©async


	)

66 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

67 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kcmp
 
__NR_kcmp


	)

138 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

139 
	#SYS_key˘l
 
__NR_key˘l


	)

140 
	#SYS_kûl
 
__NR_kûl


	)

141 
	#SYS_lchown
 
__NR_lchown


	)

142 
	#SYS_lchown32
 
__NR_lchown32


	)

143 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

144 
	#SYS_lök
 
__NR_lök


	)

145 
	#SYS_lök©
 
__NR_lök©


	)

146 
	#SYS_li°x©å
 
__NR_li°x©å


	)

147 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

148 
	#SYS_lock
 
__NR_lock


	)

149 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

150 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

151 
	#SYS_l£ek
 
__NR_l£ek


	)

152 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

153 
	#SYS_l°©
 
__NR_l°©


	)

154 
	#SYS_l°©64
 
__NR_l°©64


	)

155 
	#SYS_madvi£
 
__NR_madvi£


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

231 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

232 
	#SYS_rmdú
 
__NR_rmdú


	)

233 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

234 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

235 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

236 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

237 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

238 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

239 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

240 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

241 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

242 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

243 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

244 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

245 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

246 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

247 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

248 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

249 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

250 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

251 
	#SYS_£À˘
 
__NR_£À˘


	)

252 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

253 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

254 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

255 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

256 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

257 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

258 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

259 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

260 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

261 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

262 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

263 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

264 
	#SYS_£tgid
 
__NR_£tgid


	)

265 
	#SYS_£tgid32
 
__NR_£tgid32


	)

266 
	#SYS_£tgroups
 
__NR_£tgroups


	)

267 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

268 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

269 
	#SYS_£tôimî
 
__NR_£tôimî


	)

270 
	#SYS_£äs
 
__NR_£äs


	)

271 
	#SYS_£çgid
 
__NR_£çgid


	)

272 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

273 
	#SYS_£åegid
 
__NR_£åegid


	)

274 
	#SYS_£åegid32
 
__NR_£åegid32


	)

275 
	#SYS_£åesgid
 
__NR_£åesgid


	)

276 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

277 
	#SYS_£åesuid
 
__NR_£åesuid


	)

278 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

279 
	#SYS_£åeuid
 
__NR_£åeuid


	)

280 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

281 
	#SYS_£ålimô
 
__NR_£ålimô


	)

282 
	#SYS_£tsid
 
__NR_£tsid


	)

283 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

284 
	#SYS_£tuid
 
__NR_£tuid


	)

285 
	#SYS_£tuid32
 
__NR_£tuid32


	)

286 
	#SYS_£tx©å
 
__NR_£tx©å


	)

287 
	#SYS_sgëmask
 
__NR_sgëmask


	)

288 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

289 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

290 
	#SYS_sig«l
 
__NR_sig«l


	)

291 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

292 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

293 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

294 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

295 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

296 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

297 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

298 
	#SYS_•li˚
 
__NR_•li˚


	)

299 
	#SYS_s£tmask
 
__NR_s£tmask


	)

300 
	#SYS_°©
 
__NR_°©


	)

301 
	#SYS_°©64
 
__NR_°©64


	)

302 
	#SYS_°©fs
 
__NR_°©fs


	)

303 
	#SYS_°©fs64
 
__NR_°©fs64


	)

304 
	#SYS_°ime
 
__NR_°ime


	)

305 
	#SYS_°ty
 
__NR_°ty


	)

306 
	#SYS_sw≠off
 
__NR_sw≠off


	)

307 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

308 
	#SYS_symlök
 
__NR_symlök


	)

309 
	#SYS_symlök©
 
__NR_symlök©


	)

310 
	#SYS_sync
 
__NR_sync


	)

311 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

312 
	#SYS_syncfs
 
__NR_syncfs


	)

313 
	#SYS_sysfs
 
__NR_sysfs


	)

314 
	#SYS_sysöfo
 
__NR_sysöfo


	)

315 
	#SYS_sy¶og
 
__NR_sy¶og


	)

316 
	#SYS_ãe
 
__NR_ãe


	)

317 
	#SYS_tgkûl
 
__NR_tgkûl


	)

318 
	#SYS_time
 
__NR_time


	)

319 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

320 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

321 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

322 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

323 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

324 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

325 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

326 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

327 
	#SYS_times
 
__NR_times


	)

328 
	#SYS_tkûl
 
__NR_tkûl


	)

329 
	#SYS_åunˇã
 
__NR_åunˇã


	)

330 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

331 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

332 
	#SYS_ulimô
 
__NR_ulimô


	)

333 
	#SYS_umask
 
__NR_umask


	)

334 
	#SYS_umou¡
 
__NR_umou¡


	)

335 
	#SYS_umou¡2
 
__NR_umou¡2


	)

336 
	#SYS_u«me
 
__NR_u«me


	)

337 
	#SYS_u∆ök
 
__NR_u∆ök


	)

338 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

339 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

340 
	#SYS_u£lib
 
__NR_u£lib


	)

341 
	#SYS_u°©
 
__NR_u°©


	)

342 
	#SYS_utime
 
__NR_utime


	)

343 
	#SYS_utimíßt
 
__NR_utimíßt


	)

344 
	#SYS_utimes
 
__NR_utimes


	)

345 
	#SYS_vf‹k
 
__NR_vf‹k


	)

346 
	#SYS_vh™gup
 
__NR_vh™gup


	)

347 
	#SYS_vm86
 
__NR_vm86


	)

348 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

349 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

350 
	#SYS_v£rvî
 
__NR_v£rvî


	)

351 
	#SYS_waô4
 
__NR_waô4


	)

352 
	#SYS_waôid
 
__NR_waôid


	)

353 
	#SYS_waôpid
 
__NR_waôpid


	)

354 
	#SYS_wrôe
 
__NR_wrôe


	)

355 
	#SYS_wrôev
 
__NR_wrôev


	)

357 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


358 
	#SYS__sys˘l
 
__NR__sys˘l


	)

359 
	#SYS_ac˚±
 
__NR_ac˚±


	)

360 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

361 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

362 
	#SYS_ac˘
 
__NR_ac˘


	)

363 
	#SYS_add_key
 
__NR_add_key


	)

364 
	#SYS_adjtimex
 
__NR_adjtimex


	)

365 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

366 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

367 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

368 
	#SYS_böd
 
__NR_böd


	)

369 
	#SYS_brk
 
__NR_brk


	)

370 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

371 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

372 
	#SYS_chdú
 
__NR_chdú


	)

373 
	#SYS_chmod
 
__NR_chmod


	)

374 
	#SYS_chown
 
__NR_chown


	)

375 
	#SYS_chroŸ
 
__NR_chroŸ


	)

376 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

377 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

378 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

379 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

380 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

381 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

382 
	#SYS_˛o£
 
__NR_˛o£


	)

383 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

384 
	#SYS_¸ót
 
__NR_¸ót


	)

385 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

386 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

387 
	#SYS_dup
 
__NR_dup


	)

388 
	#SYS_dup2
 
__NR_dup2


	)

389 
	#SYS_dup3
 
__NR_dup3


	)

390 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

391 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

392 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

393 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

394 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

395 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

396 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

397 
	#SYS_evítfd
 
__NR_evítfd


	)

398 
	#SYS_evítfd2
 
__NR_evítfd2


	)

399 
	#SYS_execve
 
__NR_execve


	)

400 
	#SYS_exô
 
__NR_exô


	)

401 
	#SYS_exô_group
 
__NR_exô_group


	)

402 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

403 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

404 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

405 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

406 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

407 
	#SYS_fchdú
 
__NR_fchdú


	)

408 
	#SYS_fchmod
 
__NR_fchmod


	)

409 
	#SYS_fchmod©
 
__NR_fchmod©


	)

410 
	#SYS_fchown
 
__NR_fchown


	)

411 
	#SYS_fchow«t
 
__NR_fchow«t


	)

412 
	#SYS_f˙é
 
__NR_f˙é


	)

413 
	#SYS_fd©async
 
__NR_fd©async


	)

414 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

415 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

416 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

417 
	#SYS_Êock
 
__NR_Êock


	)

418 
	#SYS_f‹k
 
__NR_f‹k


	)

419 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

420 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

421 
	#SYS_f°©
 
__NR_f°©


	)

422 
	#SYS_f°©fs
 
__NR_f°©fs


	)

423 
	#SYS_fsync
 
__NR_fsync


	)

424 
	#SYS_·runˇã
 
__NR_·runˇã


	)

425 
	#SYS_fuãx
 
__NR_fuãx


	)

426 
	#SYS_futimeßt
 
__NR_futimeßt


	)

427 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

428 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

429 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

430 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

431 
	#SYS_gë˝u
 
__NR_gë˝u


	)

432 
	#SYS_gëcwd
 
__NR_gëcwd


	)

433 
	#SYS_gëdíts
 
__NR_gëdíts


	)

434 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

435 
	#SYS_gëegid
 
__NR_gëegid


	)

436 
	#SYS_gëeuid
 
__NR_gëeuid


	)

437 
	#SYS_gëgid
 
__NR_gëgid


	)

438 
	#SYS_gëgroups
 
__NR_gëgroups


	)

439 
	#SYS_gëôimî
 
__NR_gëôimî


	)

440 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

441 
	#SYS_gëpgid
 
__NR_gëpgid


	)

442 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

443 
	#SYS_gëpid
 
__NR_gëpid


	)

444 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

445 
	#SYS_gëµid
 
__NR_gëµid


	)

446 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

447 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

448 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

449 
	#SYS_gëæimô
 
__NR_gëæimô


	)

450 
	#SYS_gërußge
 
__NR_gërußge


	)

451 
	#SYS_gësid
 
__NR_gësid


	)

452 
	#SYS_gësock«me
 
__NR_gësock«me


	)

453 
	#SYS_gësock›t
 
__NR_gësock›t


	)

454 
	#SYS_gëtid
 
__NR_gëtid


	)

455 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

456 
	#SYS_gëuid
 
__NR_gëuid


	)

457 
	#SYS_gëx©å
 
__NR_gëx©å


	)

458 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

459 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

460 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

461 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

462 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

463 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

464 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

465 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

466 
	#SYS_io_£tup
 
__NR_io_£tup


	)

467 
	#SYS_io_submô
 
__NR_io_submô


	)

468 
	#SYS_io˘l
 
__NR_io˘l


	)

469 
	#SYS_i›îm
 
__NR_i›îm


	)

470 
	#SYS_i›l
 
__NR_i›l


	)

471 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

472 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

473 
	#SYS_kcmp
 
__NR_kcmp


	)

474 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

475 
	#SYS_key˘l
 
__NR_key˘l


	)

476 
	#SYS_kûl
 
__NR_kûl


	)

477 
	#SYS_lchown
 
__NR_lchown


	)

478 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

479 
	#SYS_lök
 
__NR_lök


	)

480 
	#SYS_lök©
 
__NR_lök©


	)

481 
	#SYS_li°í
 
__NR_li°í


	)

482 
	#SYS_li°x©å
 
__NR_li°x©å


	)

483 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

484 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

485 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

486 
	#SYS_l£ek
 
__NR_l£ek


	)

487 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

488 
	#SYS_l°©
 
__NR_l°©


	)

489 
	#SYS_madvi£
 
__NR_madvi£


	)

490 
	#SYS_mböd
 
__NR_mböd


	)

491 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

492 
	#SYS_möc‹e
 
__NR_möc‹e


	)

493 
	#SYS_mkdú
 
__NR_mkdú


	)

494 
	#SYS_mkdú©
 
__NR_mkdú©


	)

495 
	#SYS_mknod
 
__NR_mknod


	)

496 
	#SYS_mknod©
 
__NR_mknod©


	)

497 
	#SYS_mlock
 
__NR_mlock


	)

498 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

499 
	#SYS_mm≠
 
__NR_mm≠


	)

500 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

501 
	#SYS_mou¡
 
__NR_mou¡


	)

502 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

503 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

504 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

505 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

506 
	#SYS_mq_›í
 
__NR_mq_›í


	)

507 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

508 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

509 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

510 
	#SYS_mªm≠
 
__NR_mªm≠


	)

511 
	#SYS_msg˘l
 
__NR_msg˘l


	)

512 
	#SYS_msggë
 
__NR_msggë


	)

513 
	#SYS_msgrcv
 
__NR_msgrcv


	)

514 
	#SYS_msg¢d
 
__NR_msg¢d


	)

515 
	#SYS_msync
 
__NR_msync


	)

516 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

517 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

518 
	#SYS_munm≠
 
__NR_munm≠


	)

519 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

520 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

521 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

522 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

523 
	#SYS_›í
 
__NR_›í


	)

524 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

525 
	#SYS_›í©
 
__NR_›í©


	)

526 
	#SYS_∑u£
 
__NR_∑u£


	)

527 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

528 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

529 
	#SYS_pùe
 
__NR_pùe


	)

530 
	#SYS_pùe2
 
__NR_pùe2


	)

531 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

532 
	#SYS_pﬁl
 
__NR_pﬁl


	)

533 
	#SYS_µﬁl
 
__NR_µﬁl


	)

534 
	#SYS_¥˘l
 
__NR_¥˘l


	)

535 
	#SYS_¥ód64
 
__NR_¥ód64


	)

536 
	#SYS_¥ódv
 
__NR_¥ódv


	)

537 
	#SYS_¥limô64
 
__NR_¥limô64


	)

538 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

539 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

540 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

541 
	#SYS_±ø˚
 
__NR_±ø˚


	)

542 
	#SYS_puçmsg
 
__NR_puçmsg


	)

543 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

544 
	#SYS_pwrôev
 
__NR_pwrôev


	)

545 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

546 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

547 
	#SYS_ªad
 
__NR_ªad


	)

548 
	#SYS_ªadahód
 
__NR_ªadahód


	)

549 
	#SYS_ªadlök
 
__NR_ªadlök


	)

550 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

551 
	#SYS_ªadv
 
__NR_ªadv


	)

552 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

553 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

554 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

555 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

556 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

557 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

558 
	#SYS_ª«me
 
__NR_ª«me


	)

559 
	#SYS_ª«mót
 
__NR_ª«mót


	)

560 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

561 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

562 
	#SYS_rmdú
 
__NR_rmdú


	)

563 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

564 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

565 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

566 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

567 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

568 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

569 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

570 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

571 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

572 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

573 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

574 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

575 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

576 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

577 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

578 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

579 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

580 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

581 
	#SYS_£curôy
 
__NR_£curôy


	)

582 
	#SYS_£À˘
 
__NR_£À˘


	)

583 
	#SYS_£m˘l
 
__NR_£m˘l


	)

584 
	#SYS_£mgë
 
__NR_£mgë


	)

585 
	#SYS_£m›
 
__NR_£m›


	)

586 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

587 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

588 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

589 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

590 
	#SYS_£ndto
 
__NR_£ndto


	)

591 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

592 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

593 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

594 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

595 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

596 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

597 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

598 
	#SYS_£tgid
 
__NR_£tgid


	)

599 
	#SYS_£tgroups
 
__NR_£tgroups


	)

600 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

601 
	#SYS_£tôimî
 
__NR_£tôimî


	)

602 
	#SYS_£äs
 
__NR_£äs


	)

603 
	#SYS_£çgid
 
__NR_£çgid


	)

604 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

605 
	#SYS_£åegid
 
__NR_£åegid


	)

606 
	#SYS_£åesgid
 
__NR_£åesgid


	)

607 
	#SYS_£åesuid
 
__NR_£åesuid


	)

608 
	#SYS_£åeuid
 
__NR_£åeuid


	)

609 
	#SYS_£ålimô
 
__NR_£ålimô


	)

610 
	#SYS_£tsid
 
__NR_£tsid


	)

611 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

612 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

613 
	#SYS_£tuid
 
__NR_£tuid


	)

614 
	#SYS_£tx©å
 
__NR_£tx©å


	)

615 
	#SYS_shm©
 
__NR_shm©


	)

616 
	#SYS_shm˘l
 
__NR_shm˘l


	)

617 
	#SYS_shmdt
 
__NR_shmdt


	)

618 
	#SYS_shmgë
 
__NR_shmgë


	)

619 
	#SYS_shutdown
 
__NR_shutdown


	)

620 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

621 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

622 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

623 
	#SYS_sockë
 
__NR_sockë


	)

624 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

625 
	#SYS_•li˚
 
__NR_•li˚


	)

626 
	#SYS_°©
 
__NR_°©


	)

627 
	#SYS_°©fs
 
__NR_°©fs


	)

628 
	#SYS_sw≠off
 
__NR_sw≠off


	)

629 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

630 
	#SYS_symlök
 
__NR_symlök


	)

631 
	#SYS_symlök©
 
__NR_symlök©


	)

632 
	#SYS_sync
 
__NR_sync


	)

633 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

634 
	#SYS_syncfs
 
__NR_syncfs


	)

635 
	#SYS_sysfs
 
__NR_sysfs


	)

636 
	#SYS_sysöfo
 
__NR_sysöfo


	)

637 
	#SYS_sy¶og
 
__NR_sy¶og


	)

638 
	#SYS_ãe
 
__NR_ãe


	)

639 
	#SYS_tgkûl
 
__NR_tgkûl


	)

640 
	#SYS_time
 
__NR_time


	)

641 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

642 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

643 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

644 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

645 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

646 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

647 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

648 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

649 
	#SYS_times
 
__NR_times


	)

650 
	#SYS_tkûl
 
__NR_tkûl


	)

651 
	#SYS_åunˇã
 
__NR_åunˇã


	)

652 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

653 
	#SYS_umask
 
__NR_umask


	)

654 
	#SYS_umou¡2
 
__NR_umou¡2


	)

655 
	#SYS_u«me
 
__NR_u«me


	)

656 
	#SYS_u∆ök
 
__NR_u∆ök


	)

657 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

658 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

659 
	#SYS_u£lib
 
__NR_u£lib


	)

660 
	#SYS_u°©
 
__NR_u°©


	)

661 
	#SYS_utime
 
__NR_utime


	)

662 
	#SYS_utimíßt
 
__NR_utimíßt


	)

663 
	#SYS_utimes
 
__NR_utimes


	)

664 
	#SYS_vf‹k
 
__NR_vf‹k


	)

665 
	#SYS_vh™gup
 
__NR_vh™gup


	)

666 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

667 
	#SYS_v£rvî
 
__NR_v£rvî


	)

668 
	#SYS_waô4
 
__NR_waô4


	)

669 
	#SYS_waôid
 
__NR_waôid


	)

670 
	#SYS_wrôe
 
__NR_wrôe


	)

671 
	#SYS_wrôev
 
__NR_wrôev


	)

673 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


674 
	#SYS_ac˚±
 
__NR_ac˚±


	)

675 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

676 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

677 
	#SYS_ac˘
 
__NR_ac˘


	)

678 
	#SYS_add_key
 
__NR_add_key


	)

679 
	#SYS_adjtimex
 
__NR_adjtimex


	)

680 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

681 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

682 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

683 
	#SYS_böd
 
__NR_böd


	)

684 
	#SYS_brk
 
__NR_brk


	)

685 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

686 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

687 
	#SYS_chdú
 
__NR_chdú


	)

688 
	#SYS_chmod
 
__NR_chmod


	)

689 
	#SYS_chown
 
__NR_chown


	)

690 
	#SYS_chroŸ
 
__NR_chroŸ


	)

691 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

692 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

693 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

694 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

695 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

696 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

697 
	#SYS_˛o£
 
__NR_˛o£


	)

698 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

699 
	#SYS_¸ót
 
__NR_¸ót


	)

700 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

701 
	#SYS_dup
 
__NR_dup


	)

702 
	#SYS_dup2
 
__NR_dup2


	)

703 
	#SYS_dup3
 
__NR_dup3


	)

704 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

705 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

706 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

707 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

708 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

709 
	#SYS_evítfd
 
__NR_evítfd


	)

710 
	#SYS_evítfd2
 
__NR_evítfd2


	)

711 
	#SYS_execve
 
__NR_execve


	)

712 
	#SYS_exô
 
__NR_exô


	)

713 
	#SYS_exô_group
 
__NR_exô_group


	)

714 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

715 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

716 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

717 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

718 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

719 
	#SYS_fchdú
 
__NR_fchdú


	)

720 
	#SYS_fchmod
 
__NR_fchmod


	)

721 
	#SYS_fchmod©
 
__NR_fchmod©


	)

722 
	#SYS_fchown
 
__NR_fchown


	)

723 
	#SYS_fchow«t
 
__NR_fchow«t


	)

724 
	#SYS_f˙é
 
__NR_f˙é


	)

725 
	#SYS_fd©async
 
__NR_fd©async


	)

726 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

727 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

728 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

729 
	#SYS_Êock
 
__NR_Êock


	)

730 
	#SYS_f‹k
 
__NR_f‹k


	)

731 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

732 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

733 
	#SYS_f°©
 
__NR_f°©


	)

734 
	#SYS_f°©fs
 
__NR_f°©fs


	)

735 
	#SYS_fsync
 
__NR_fsync


	)

736 
	#SYS_·runˇã
 
__NR_·runˇã


	)

737 
	#SYS_fuãx
 
__NR_fuãx


	)

738 
	#SYS_futimeßt
 
__NR_futimeßt


	)

739 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

740 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

741 
	#SYS_gë˝u
 
__NR_gë˝u


	)

742 
	#SYS_gëcwd
 
__NR_gëcwd


	)

743 
	#SYS_gëdíts
 
__NR_gëdíts


	)

744 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

745 
	#SYS_gëegid
 
__NR_gëegid


	)

746 
	#SYS_gëeuid
 
__NR_gëeuid


	)

747 
	#SYS_gëgid
 
__NR_gëgid


	)

748 
	#SYS_gëgroups
 
__NR_gëgroups


	)

749 
	#SYS_gëôimî
 
__NR_gëôimî


	)

750 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

751 
	#SYS_gëpgid
 
__NR_gëpgid


	)

752 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

753 
	#SYS_gëpid
 
__NR_gëpid


	)

754 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

755 
	#SYS_gëµid
 
__NR_gëµid


	)

756 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

757 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

758 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

759 
	#SYS_gëæimô
 
__NR_gëæimô


	)

760 
	#SYS_gërußge
 
__NR_gërußge


	)

761 
	#SYS_gësid
 
__NR_gësid


	)

762 
	#SYS_gësock«me
 
__NR_gësock«me


	)

763 
	#SYS_gësock›t
 
__NR_gësock›t


	)

764 
	#SYS_gëtid
 
__NR_gëtid


	)

765 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

766 
	#SYS_gëuid
 
__NR_gëuid


	)

767 
	#SYS_gëx©å
 
__NR_gëx©å


	)

768 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

769 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

770 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

771 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

772 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

773 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

774 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

775 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

776 
	#SYS_io_£tup
 
__NR_io_£tup


	)

777 
	#SYS_io_submô
 
__NR_io_submô


	)

778 
	#SYS_io˘l
 
__NR_io˘l


	)

779 
	#SYS_i›îm
 
__NR_i›îm


	)

780 
	#SYS_i›l
 
__NR_i›l


	)

781 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

782 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

783 
	#SYS_kcmp
 
__NR_kcmp


	)

784 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

785 
	#SYS_key˘l
 
__NR_key˘l


	)

786 
	#SYS_kûl
 
__NR_kûl


	)

787 
	#SYS_lchown
 
__NR_lchown


	)

788 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

789 
	#SYS_lök
 
__NR_lök


	)

790 
	#SYS_lök©
 
__NR_lök©


	)

791 
	#SYS_li°í
 
__NR_li°í


	)

792 
	#SYS_li°x©å
 
__NR_li°x©å


	)

793 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

794 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

795 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

796 
	#SYS_l£ek
 
__NR_l£ek


	)

797 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

798 
	#SYS_l°©
 
__NR_l°©


	)

799 
	#SYS_madvi£
 
__NR_madvi£


	)

800 
	#SYS_mböd
 
__NR_mböd


	)

801 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

802 
	#SYS_möc‹e
 
__NR_möc‹e


	)

803 
	#SYS_mkdú
 
__NR_mkdú


	)

804 
	#SYS_mkdú©
 
__NR_mkdú©


	)

805 
	#SYS_mknod
 
__NR_mknod


	)

806 
	#SYS_mknod©
 
__NR_mknod©


	)

807 
	#SYS_mlock
 
__NR_mlock


	)

808 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

809 
	#SYS_mm≠
 
__NR_mm≠


	)

810 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

811 
	#SYS_mou¡
 
__NR_mou¡


	)

812 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

813 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

814 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

815 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

816 
	#SYS_mq_›í
 
__NR_mq_›í


	)

817 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

818 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

819 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

820 
	#SYS_mªm≠
 
__NR_mªm≠


	)

821 
	#SYS_msg˘l
 
__NR_msg˘l


	)

822 
	#SYS_msggë
 
__NR_msggë


	)

823 
	#SYS_msgrcv
 
__NR_msgrcv


	)

824 
	#SYS_msg¢d
 
__NR_msg¢d


	)

825 
	#SYS_msync
 
__NR_msync


	)

826 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

827 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

828 
	#SYS_munm≠
 
__NR_munm≠


	)

829 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

830 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

831 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

832 
	#SYS_›í
 
__NR_›í


	)

833 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

834 
	#SYS_›í©
 
__NR_›í©


	)

835 
	#SYS_∑u£
 
__NR_∑u£


	)

836 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

837 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

838 
	#SYS_pùe
 
__NR_pùe


	)

839 
	#SYS_pùe2
 
__NR_pùe2


	)

840 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

841 
	#SYS_pﬁl
 
__NR_pﬁl


	)

842 
	#SYS_µﬁl
 
__NR_µﬁl


	)

843 
	#SYS_¥˘l
 
__NR_¥˘l


	)

844 
	#SYS_¥ód64
 
__NR_¥ód64


	)

845 
	#SYS_¥ódv
 
__NR_¥ódv


	)

846 
	#SYS_¥limô64
 
__NR_¥limô64


	)

847 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

848 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

849 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

850 
	#SYS_±ø˚
 
__NR_±ø˚


	)

851 
	#SYS_puçmsg
 
__NR_puçmsg


	)

852 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

853 
	#SYS_pwrôev
 
__NR_pwrôev


	)

854 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

855 
	#SYS_ªad
 
__NR_ªad


	)

856 
	#SYS_ªadahód
 
__NR_ªadahód


	)

857 
	#SYS_ªadlök
 
__NR_ªadlök


	)

858 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

859 
	#SYS_ªadv
 
__NR_ªadv


	)

860 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

861 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

862 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

863 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

864 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

865 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

866 
	#SYS_ª«me
 
__NR_ª«me


	)

867 
	#SYS_ª«mót
 
__NR_ª«mót


	)

868 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

869 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

870 
	#SYS_rmdú
 
__NR_rmdú


	)

871 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

872 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

873 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

874 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

875 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

876 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

877 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

878 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

879 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

880 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

881 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

882 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

883 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

884 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

885 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

886 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

887 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

888 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

889 
	#SYS_£curôy
 
__NR_£curôy


	)

890 
	#SYS_£À˘
 
__NR_£À˘


	)

891 
	#SYS_£m˘l
 
__NR_£m˘l


	)

892 
	#SYS_£mgë
 
__NR_£mgë


	)

893 
	#SYS_£m›
 
__NR_£m›


	)

894 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

895 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

896 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

897 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

898 
	#SYS_£ndto
 
__NR_£ndto


	)

899 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

900 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

901 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

902 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

903 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

904 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

905 
	#SYS_£tgid
 
__NR_£tgid


	)

906 
	#SYS_£tgroups
 
__NR_£tgroups


	)

907 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

908 
	#SYS_£tôimî
 
__NR_£tôimî


	)

909 
	#SYS_£äs
 
__NR_£äs


	)

910 
	#SYS_£çgid
 
__NR_£çgid


	)

911 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

912 
	#SYS_£åegid
 
__NR_£åegid


	)

913 
	#SYS_£åesgid
 
__NR_£åesgid


	)

914 
	#SYS_£åesuid
 
__NR_£åesuid


	)

915 
	#SYS_£åeuid
 
__NR_£åeuid


	)

916 
	#SYS_£ålimô
 
__NR_£ålimô


	)

917 
	#SYS_£tsid
 
__NR_£tsid


	)

918 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

919 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

920 
	#SYS_£tuid
 
__NR_£tuid


	)

921 
	#SYS_£tx©å
 
__NR_£tx©å


	)

922 
	#SYS_shm©
 
__NR_shm©


	)

923 
	#SYS_shm˘l
 
__NR_shm˘l


	)

924 
	#SYS_shmdt
 
__NR_shmdt


	)

925 
	#SYS_shmgë
 
__NR_shmgë


	)

926 
	#SYS_shutdown
 
__NR_shutdown


	)

927 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

928 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

929 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

930 
	#SYS_sockë
 
__NR_sockë


	)

931 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

932 
	#SYS_•li˚
 
__NR_•li˚


	)

933 
	#SYS_°©
 
__NR_°©


	)

934 
	#SYS_°©fs
 
__NR_°©fs


	)

935 
	#SYS_sw≠off
 
__NR_sw≠off


	)

936 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

937 
	#SYS_symlök
 
__NR_symlök


	)

938 
	#SYS_symlök©
 
__NR_symlök©


	)

939 
	#SYS_sync
 
__NR_sync


	)

940 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

941 
	#SYS_syncfs
 
__NR_syncfs


	)

942 
	#SYS_sysfs
 
__NR_sysfs


	)

943 
	#SYS_sysöfo
 
__NR_sysöfo


	)

944 
	#SYS_sy¶og
 
__NR_sy¶og


	)

945 
	#SYS_ãe
 
__NR_ãe


	)

946 
	#SYS_tgkûl
 
__NR_tgkûl


	)

947 
	#SYS_time
 
__NR_time


	)

948 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

949 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

950 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

951 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

952 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

953 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

954 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

955 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

956 
	#SYS_times
 
__NR_times


	)

957 
	#SYS_tkûl
 
__NR_tkûl


	)

958 
	#SYS_åunˇã
 
__NR_åunˇã


	)

959 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

960 
	#SYS_umask
 
__NR_umask


	)

961 
	#SYS_umou¡2
 
__NR_umou¡2


	)

962 
	#SYS_u«me
 
__NR_u«me


	)

963 
	#SYS_u∆ök
 
__NR_u∆ök


	)

964 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

965 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

966 
	#SYS_u°©
 
__NR_u°©


	)

967 
	#SYS_utime
 
__NR_utime


	)

968 
	#SYS_utimíßt
 
__NR_utimíßt


	)

969 
	#SYS_utimes
 
__NR_utimes


	)

970 
	#SYS_vf‹k
 
__NR_vf‹k


	)

971 
	#SYS_vh™gup
 
__NR_vh™gup


	)

972 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

973 
	#SYS_waô4
 
__NR_waô4


	)

974 
	#SYS_waôid
 
__NR_waôid


	)

975 
	#SYS_wrôe
 
__NR_wrôe


	)

976 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utsname.h

18 #i‚de‡
_SYS_UTSNAME_H


23 
	#_UTSNAME_LENGTH
 65

	)

28 
	#_UTSNAME_DOMAIN_LENGTH
 
_UTSNAME_LENGTH


	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 17

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 206)

	)

188 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

189 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

190 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 209)

	)

191 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

192 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

193 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

194 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

195 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

196 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

197 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

198 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

199 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

200 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

201 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

202 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

203 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

204 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

205 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

206 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

207 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

208 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

209 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

210 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

211 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

212 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

213 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

214 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

215 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

216 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

217 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

218 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

219 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

220 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

221 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

222 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

223 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

224 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

225 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

226 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

227 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

228 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

229 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

230 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

231 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

232 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

233 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

234 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

235 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

236 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

237 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

238 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

239 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

240 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

241 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

242 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

243 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

244 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

245 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

246 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

247 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

248 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

249 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

250 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

251 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

252 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

253 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

254 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

255 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

256 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

257 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

258 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

259 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

260 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

261 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

262 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

263 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

264 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

265 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

266 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

267 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

268 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

269 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

270 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

271 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

272 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

273 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

274 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

275 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

276 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

277 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

278 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

279 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

280 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

281 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

282 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

283 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

284 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

285 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

286 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

287 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

288 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

289 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

290 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

291 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

292 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

293 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

294 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

295 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

296 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

297 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

298 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

299 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

300 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

301 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

302 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

303 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

304 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

305 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

306 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

100 #i‚de‡
F_GETLK


101 #i‚de‡
__USE_FILE_OFFSET64


102 
	#F_GETLK
 5

	)

103 
	#F_SETLK
 6

	)

104 
	#F_SETLKW
 7

	)

106 
	#F_GETLK
 
F_GETLK64


	)

107 
	#F_SETLK
 
F_SETLK64


	)

108 
	#F_SETLKW
 
F_SETLKW64


	)

111 #i‚de‡
F_GETLK64


112 
	#F_GETLK64
 12

	)

113 
	#F_SETLK64
 13

	)

114 
	#F_SETLKW64
 14

	)

117 #ifde‡
__USE_LARGEFILE64


118 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

121 #ifde‡
__USE_XOPEN2K8


122 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

123 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

124 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

127 #ifde‡
__USE_GNU


128 
	#O_DIRECT
 
__O_DIRECT


	)

129 
	#O_NOATIME
 
__O_NOATIME


	)

130 
	#O_PATH
 
__O_PATH


	)

136 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


137 
	#O_DSYNC
 
__O_DSYNC


	)

138 #i‡
deföed
 
__O_RSYNC


139 
	#O_RSYNC
 
__O_RSYNC


	)

141 
	#O_RSYNC
 
O_SYNC


	)

146 
	#F_DUPFD
 0

	)

147 
	#F_GETFD
 1

	)

148 
	#F_SETFD
 2

	)

149 
	#F_GETFL
 3

	)

150 
	#F_SETFL
 4

	)

152 #i‚de‡
__F_SETOWN


153 
	#__F_SETOWN
 8

	)

154 
	#__F_GETOWN
 9

	)

157 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


158 
	#F_SETOWN
 
__F_SETOWN


	)

159 
	#F_GETOWN
 
__F_GETOWN


	)

162 #i‚de‡
__F_SETSIG


163 
	#__F_SETSIG
 10

	)

164 
	#__F_GETSIG
 11

	)

166 #i‚de‡
__F_SETOWN_EX


167 
	#__F_SETOWN_EX
 15

	)

168 
	#__F_GETOWN_EX
 16

	)

171 #ifde‡
__USE_GNU


172 
	#F_SETSIG
 
__F_SETSIG


	)

173 
	#F_GETSIG
 
__F_GETSIG


	)

174 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

175 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

178 #ifde‡
__USE_GNU


179 
	#F_SETLEASE
 1024

	)

180 
	#F_GETLEASE
 1025

	)

181 
	#F_NOTIFY
 1026

	)

182 
	#F_SETPIPE_SZ
 1031

	)

183 
	#F_GETPIPE_SZ
 1032

	)

185 #ifde‡
__USE_XOPEN2K8


186 
	#F_DUPFD_CLOEXEC
 1030

	)

191 
	#FD_CLOEXEC
 1

	)

193 #i‚de‡
F_RDLCK


195 
	#F_RDLCK
 0

	)

196 
	#F_WRLCK
 1

	)

197 
	#F_UNLCK
 2

	)

202 #i‚de‡
F_EXLCK


203 
	#F_EXLCK
 4

	)

204 
	#F_SHLCK
 8

	)

207 #ifde‡
__USE_BSD


209 
	#LOCK_SH
 1

	)

210 
	#LOCK_EX
 2

	)

211 
	#LOCK_NB
 4

	)

213 
	#LOCK_UN
 8

	)

216 #ifde‡
__USE_GNU


217 
	#LOCK_MAND
 32

	)

218 
	#LOCK_READ
 64

	)

219 
	#LOCK_WRITE
 128

	)

220 
	#LOCK_RW
 192

	)

223 #ifde‡
__USE_GNU


225 
	#DN_ACCESS
 0x00000001

	)

226 
	#DN_MODIFY
 0x00000002

	)

227 
	#DN_CREATE
 0x00000004

	)

228 
	#DN_DELETE
 0x00000008

	)

229 
	#DN_RENAME
 0x00000010

	)

230 
	#DN_ATTRIB
 0x00000020

	)

231 
	#DN_MULTISHOT
 0x80000000

	)

235 #ifde‡
__USE_GNU


237 
	e__pid_ty≥


239 
	mF_OWNER_TID
 = 0,

240 
	mF_OWNER_PID
,

241 
	mF_OWNER_PGRP
,

242 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


246 
	sf_ow√r_ex


248 
__pid_ty≥
 
	mty≥
;

249 
__pid_t
 
	mpid
;

255 #ifdef 
__USE_BSD


256 
	#FAPPEND
 
O_APPEND


	)

257 
	#FFSYNC
 
O_FSYNC


	)

258 
	#FASYNC
 
O_ASYNC


	)

259 
	#FNONBLOCK
 
O_NONBLOCK


	)

260 
	#FNDELAY
 
O_NDELAY


	)

263 #i‚de‡
__POSIX_FADV_DONTNEED


264 
	#__POSIX_FADV_DONTNEED
 4

	)

265 
	#__POSIX_FADV_NOREUSE
 5

	)

268 #ifde‡
__USE_XOPEN2K


269 
	#POSIX_FADV_NORMAL
 0

	)

270 
	#POSIX_FADV_RANDOM
 1

	)

271 
	#POSIX_FADV_SEQUENTIAL
 2

	)

272 
	#POSIX_FADV_WILLNEED
 3

	)

273 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

274 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

278 #ifde‡
__USE_GNU


280 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

283 
	#SYNC_FILE_RANGE_WRITE
 2

	)

286 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

291 
	#SPLICE_F_MOVE
 1

	)

292 
	#SPLICE_F_NONBLOCK
 2

	)

295 
	#SPLICE_F_MORE
 4

	)

296 
	#SPLICE_F_GIFT
 8

	)

300 
	sfûe_h™dÀ


302 
	mh™dÀ_byãs
;

303 
	mh™dÀ_ty≥
;

305 
	mf_h™dÀ
[0];

309 
	#MAX_HANDLE_SZ
 128

	)

312 
	g__BEGIN_DECLS


314 #ifde‡
__USE_GNU


317 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

318 
__THROW
;

325 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

326 
__Êags
);

333 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

334 
size_t
 
__cou¡
, 
__Êags
);

340 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

341 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

342 
__Êags
);

348 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

349 
__Êags
);

355 #i‚de‡
__USE_FILE_OFFSET64


356 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

358 #ifde‡
__REDIRECT


359 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

360 
__off64_t
 
__Àn
),

361 
ÁŒoˇã64
);

363 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

366 #ifde‡
__USE_LARGEFILE64


367 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

368 
__off64_t
 
__Àn
);

373 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

374 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

375 
__Êags
Ë
__THROW
;

381 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

382 
__Êags
);

386 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

143 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

145 #i‡
__GNUC_PREREQ
 (4,3)

146 
	#__w¨nde˛
(
«me
, 
msg
) \

147 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

148 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

149 
	#__îr‹de˛
(
«me
, 
msg
) \

150 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

152 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

153 
	#__w¨«âr
(
msg
)

	)

154 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

158 #i‡
__GNUC_PREREQ
 (2,97)

160 
	#__Êex¨r
 []

	)

162 #ifde‡
__GNUC__


163 
	#__Êex¨r
 [0]

	)

165 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

166 
	#__Êex¨r
 []

	)

169 
	#__Êex¨r
 [1]

	)

185 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

187 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

188 #ifde‡
__˝lu•lus


189 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

190 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

191 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

192 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

194 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

195 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

196 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

197 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

199 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

200 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

213 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

214 
	#__©åibuã__
(
xyz
Ë

	)

220 #i‡
__GNUC_PREREQ
 (2,96)

221 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

223 
	#__©åibuã_mÆloc__


	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

323 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)Ë&& deföed 
__GNUC__


324 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


325 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

329 
	#__exã∫_ölöe
 
__ölöe


	)

330 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

332 #ñi‡
deföed
 
__GNUC__


333 
	#__exã∫_ölöe
 
__ölöe


	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe


	)

337 
	#__exã∫_ölöe


	)

338 
	#__exã∫_Æways_ölöe


	)

343 #i‡
__GNUC_PREREQ
 (4,3)

344 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

345 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

352 #i‡!
__GNUC_PREREQ
 (2,8)

353 
	#__exãnsi⁄__


	)

357 #i‡!
__GNUC_PREREQ
 (2,92)

358 
	#__ª°ri˘


	)

364 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


365 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

367 #ifde‡
__GNUC__


368 
	#__ª°ri˘_¨r


	)

370 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

371 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

374 
	#__ª°ri˘_¨r


	)

379 #i‡
__GNUC__
 >= 3

380 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

381 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 1)

	)

383 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

384 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

387 
	~<bôs/w‹dsize.h
>

389 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


390 
	#__LDBL_COMPAT
 1

	)

391 #ifde‡
__REDIRECT


392 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

393 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

395 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

396 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

397 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

398 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

400 
	#__LDBL_REDIR_DECL
(
«me
) \

401 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

402 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

404 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

405 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

408 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


409 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

410 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

411 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

412 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

413 
	#__LDBL_REDIR_DECL
(
«me
)

	)

414 #ifde‡
__REDIRECT


415 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

417 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
213
6538
/home/kartik/nwe/Config.c
/home/kartik/nwe/CoroCtxPool.c
/home/kartik/nwe/Timer.c
/home/kartik/nwe/handlers/default_handler.c
/home/kartik/nwe/handlers/getSP.c
/home/kartik/nwe/handlers/hello_world.c
/home/kartik/nwe/hp.c
/home/kartik/nwe/http_parser.c
/home/kartik/nwe/include/Config.h
/home/kartik/nwe/include/Constants.h
/home/kartik/nwe/include/CoroCtx.h
/home/kartik/nwe/include/CoroCtxPool.h
/home/kartik/nwe/include/Err.h
/home/kartik/nwe/include/Handlers.h
/home/kartik/nwe/include/Timer.h
/home/kartik/nwe/include/Utils.h
/home/kartik/nwe/include/coro.h
/home/kartik/nwe/include/hp.h
/home/kartik/nwe/include/http_parser.h
/home/kartik/nwe/include/inpcache/inpc_api.h
/home/kartik/nwe/include/inpcache/inpc_common.h
/home/kartik/nwe/include/inpcache/inpc_debug.h
/home/kartik/nwe/include/inpcache/inpc_error.h
/home/kartik/nwe/include/inpcache/inpc_hash.h
/home/kartik/nwe/include/inpcache/inpc_hash_conf.h
/home/kartik/nwe/include/inpcache/inpc_item.h
/home/kartik/nwe/include/inpcache/inpc_settings.h
/home/kartik/nwe/include/inpcache/inpc_slabclass.h
/home/kartik/nwe/include/inpcache/inpc_stats.h
/home/kartik/nwe/include/mtwist.h
/home/kartik/nwe/libev-4.15/config.h
/home/kartik/nwe/libev-4.15/ev++.h
/home/kartik/nwe/libev-4.15/ev.c
/home/kartik/nwe/libev-4.15/ev.h
/home/kartik/nwe/libev-4.15/ev_epoll.c
/home/kartik/nwe/libev-4.15/ev_kqueue.c
/home/kartik/nwe/libev-4.15/ev_poll.c
/home/kartik/nwe/libev-4.15/ev_port.c
/home/kartik/nwe/libev-4.15/ev_select.c
/home/kartik/nwe/libev-4.15/ev_vars.h
/home/kartik/nwe/libev-4.15/ev_win32.c
/home/kartik/nwe/libev-4.15/ev_wrap.h
/home/kartik/nwe/libev-4.15/event.c
/home/kartik/nwe/libev-4.15/event.h
/home/kartik/nwe/server.c
/home/kartik/nwe/test/HTTPParser.c
/home/kartik/nwe/test/HTTPParser.h
/home/kartik/nwe/test/NetUtils.c
/home/kartik/nwe/test/NetUtils.h
/home/kartik/nwe/test/c.future_use_code.c
/home/kartik/nwe/test/future_use_code.c
/home/kartik/nwe/test/samples/ev_sample.c
/home/kartik/nwe/test/samples/http-parser-master/contrib/parsertrace.c
/home/kartik/nwe/test/samples/http-parser-master/contrib/url_parser.c
/home/kartik/nwe/test/samples/http-parser-master/http_parser.c
/home/kartik/nwe/test/samples/http-parser-master/http_parser.h
/home/kartik/nwe/test/samples/http-parser-master/test.c
/home/kartik/nwe/test/samples/p2.c
/home/kartik/nwe/test/samples/parser_http_test.c
/home/kartik/nwe/test/samples/sizeof.c
/home/kartik/nwe/test/samples/timer_test.c
/home/kartik/nwe/test/samples/token.c
/home/kartik/nwe/util/Utils.c
/home/kartik/nwe/util/coro.c
/home/kartik/nwe/util/inpc_hash.c
/home/kartik/nwe/util/inpc_item.c
/home/kartik/nwe/util/mtwist.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/math.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/epoll.h
/usr/include/sys/eventfd.h
/usr/include/sys/inotify.h
/usr/include/sys/mman.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/statfs.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/timeb.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/utsname.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/ucontext.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/epoll.h
/usr/include/bits/errno.h
/usr/include/bits/eventfd.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/inotify.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/statfs.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utsname.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/poll.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/socket.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/limits.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
